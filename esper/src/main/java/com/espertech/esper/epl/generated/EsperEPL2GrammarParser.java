  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UPD", "MERGE_INS", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "LPAREN", "RPAREN", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=185;
    public static final int FLOAT_SUFFIX=352;
    public static final int STAR=293;
    public static final int DOT_EXPR=194;
    public static final int NUMERIC_PARAM_LIST=124;
    public static final int MOD=311;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=193;
    public static final int OUTERJOIN_EXPR=167;
    public static final int CREATE_COL_TYPE_LIST=247;
    public static final int BSR=334;
    public static final int MERGE_INS=263;
    public static final int MONTH_PART=199;
    public static final int LIB_FUNCTION=192;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=171;
    public static final int MATCHREC_PATTERN_CONCAT=275;
    public static final int INC=327;
    public static final int LNOT=323;
    public static final int RPAREN=288;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=298;
    public static final int BSR_ASSIGN=335;
    public static final int CAST_EXPR=226;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=166;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=303;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=134;
    public static final int LAST_AGGREG=254;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int FOLLOWED_BY_EXPR=127;
    public static final int FOLLOWED_BY=315;
    public static final int HOUR_PART=202;
    public static final int RBRACK=292;
    public static final int MATCHREC_PATTERN_NESTED=277;
    public static final int MATCH_UNTIL_RANGE_CLOSED=245;
    public static final int GE=307;
    public static final int METHOD_JOIN_EXPR=241;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=133;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=132;
    public static final int MINUS_ASSIGN=328;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=144;
    public static final int NUM_DOUBLE=271;
    public static final int INSERTINTO_STREAM_NAME=214;
    public static final int LCURLY=312;
    public static final int UNARY_MINUS=195;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=212;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=142;
    public static final int WS=344;
    public static final int EMAILAT=343;
    public static final int SUBSELECT_GROUP_EXPR=218;
    public static final int ON_SELECT_INSERT_EXPR=236;
    public static final int YEAR_PART=198;
    public static final int FOLLOWED_BY_ITEM=128;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=318;
    public static final int EXPRCOL=189;
    public static final int SL_COMMENT=345;
    public static final int NULL_TYPE=270;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=243;
    public static final int GT=305;
    public static final int BNOT=324;
    public static final int WHERE_EXPR=153;
    public static final int END=33;
    public static final int LAND=341;
    public static final int INNERJOIN_EXPR=168;
    public static final int NOT_REGEXP=209;
    public static final int MATCH_UNTIL_EXPR=242;
    public static final int EVENT_PROP_EXPR=175;
    public static final int LBRACK=291;
    public static final int MERGE_UPD=262;
    public static final int VIEW_EXPR=150;
    public static final int ANNOTATION=250;
    public static final int LONG_TYPE=265;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=135;
    public static final int MATCHREC_PATTERN=273;
    public static final int ON_MERGE_EXPR=235;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=319;
    public static final int ON_SELECT_EXPR=233;
    public static final int MINUTE_PART=203;
    public static final int PATTERN_NOT_EXPR=131;
    public static final int SQL_NE=302;
    public static final int SUM=18;
    public static final int HexDigit=350;
    public static final int UPDATE_EXPR=256;
    public static final int LPAREN=287;
    public static final int IN_SUBSELECT_EXPR=220;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=279;
    public static final int NOT_IN_RANGE=216;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=204;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int IDENT=286;
    public static final int DATABASE_JOIN_EXPR=152;
    public static final int BXOR=301;
    public static final int PLUS=295;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=258;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=178;
    public static final int CREATE_INDEX_EXPR=227;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int EVAL_NOTEQUALS_EXPR=159;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=244;
    public static final int CREATE_VARIABLE_EXPR=240;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=280;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=129;
    public static final int RIGHT_OUTERJOIN_EXPR=170;
    public static final int NUMBERSETSTAR=249;
    public static final int LAST_OPERATOR=223;
    public static final int PATTERN_FILTER_EXPR=130;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=317;
    public static final int EVAL_AND_EXPR=156;
    public static final int LEFT_OUTERJOIN_EXPR=169;
    public static final int EPL_EXPR=272;
    public static final int GROUP_BY_EXPR=172;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=176;
    public static final int MINUS=309;
    public static final int SEMI=342;
    public static final int INDEXCOL=190;
    public static final int STAR_ASSIGN=330;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=261;
    public static final int FIRST_AGGREG=253;
    public static final int COLON=297;
    public static final int EVAL_EQUALS_GROUP_EXPR=160;
    public static final int BAND_ASSIGN=340;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=186;
    public static final int NOT_IN_SET=206;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=179;
    public static final int SL=336;
    public static final int NOT_IN_SUBSELECT_EXPR=221;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=148;
    public static final int SR=332;
    public static final int RCURLY=313;
    public static final int PLUS_ASSIGN=326;
    public static final int EXISTS_SUBSELECT_EXPR=219;
    public static final int DAY_PART=201;
    public static final int EVENT_FILTER_IN=143;
    public static final int DIV=310;
    public static final int WEEK_PART=200;
    public static final int OBJECT_PARAM_ORDERED_EXPR=126;
    public static final int OctalEscape=349;
    public static final int MILLISECOND_PART=205;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=163;
    public static final int LOR=308;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=213;
    public static final int EXPONENT=351;
    public static final int LT=304;
    public static final int PATTERN_INCL_EXPR=151;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=173;
    public static final int BOOL_TYPE=269;
    public static final int MOD_ASSIGN=331;
    public static final int ANNOTATION_ARRAY=251;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=222;
    public static final int EQUALS=289;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=325;
    public static final int WINDOW_AGGREG=255;
    public static final int SL_ASSIGN=337;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=278;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=234;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=197;
    public static final int CREATE_COL_TYPE=248;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=161;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=266;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=145;
    public static final int ANNOTATION_VALUE=252;
    public static final int SUBSELECT_EXPR=217;
    public static final int CONCAT=191;
    public static final int NUMERIC_PARAM_RANGE=123;
    public static final int CLASS_IDENT=147;
    public static final int MATCHREC_PATTERN_ALTER=276;
    public static final int ON_EXPR=230;
    public static final int CREATE_WINDOW_EXPR=228;
    public static final int PROPERTY_SELECTION_STREAM=137;
    public static final int ON_DELETE_EXPR=232;
    public static final int NUM_LONG=320;
    public static final int ON=41;
    public static final int TIME_PERIOD=196;
    public static final int DOUBLE_TYPE=267;
    public static final int DELETE=81;
    public static final int INT_TYPE=264;
    public static final int MATCHREC_PARTITION=284;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=155;
    public static final int ORDER_ELEMENT_EXPR=174;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=225;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=268;
    public static final int NUM_INT=314;
    public static final int MATCHREC_DEFINE_ITEM=281;
    public static final int ON_SET_EXPR=239;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=260;
    public static final int NUM_FLOAT=321;
    public static final int ON_EXPR_FROM=238;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=347;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=136;
    public static final int WEEKDAY_OPERATOR=224;
    public static final int DEC=329;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=338;
    public static final int NUMERIC_PARAM_FREQUENCY=125;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=184;
    public static final int EVENT_FILTER_PARAM=140;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=181;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=231;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int EVENT_FILTER_RANGE=141;
    public static final int ML_COMMENT=346;
    public static final int INDEX=87;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=180;
    public static final int BOR_ASSIGN=339;
    public static final int COMMA=285;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int WHEN_LIMIT_EXPR=187;
    public static final int TIMEPERIOD_LIMIT_EXPR=183;
    public static final int SOME=49;
    public static final int EQUAL=322;
    public static final int BOR=294;
    public static final int MATCHREC_MEASURE_ITEM=283;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int EVENT_FILTER_NOT_BETWEEN=146;
    public static final int IN_RANGE=215;
    public static final int DOT=290;
    public static final int MATCHREC_MEASURES=282;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=138;
    public static final int INSERTINTO_EXPR=188;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=154;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=246;
    public static final int EVAL_EQUALS_EXPR=158;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=208;
    public static final int EVENT_LIMIT_EXPR=182;
    public static final int NOT_BETWEEN=207;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=157;
    public static final int ON_SELECT_INSERT_OUTPUT=237;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=300;
    public static final int MATCHREC_PATTERN_ATOM=274;
    public static final int QUOTED_STRING_LITERAL=299;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=296;
    public static final int OBSERVER_EXPR=149;
    public static final int CREATE_SCHEMA_EXPR_QUAL=259;
    public static final int EVENT_FILTER_IDENT=139;
    public static final int EVENT_PROP_MAPPED=177;
    public static final int UnicodeEscape=348;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=210;
    public static final int FOLLOWMAX_BEGIN=316;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=164;
    public static final int CREATE_WINDOW_SELECT_EXPR=229;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=257;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=165;
    public static final int SR_ASSIGN=333;
    public static final int LE=306;
    public static final int DBFROM_CLAUSE=211;
    public static final int EVAL_IDENT=162;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;
        CommonTree EOF3_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1731);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1736);
            patternExpression2=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1740); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;
        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1754);
            	    annotationEnum4=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1760);
            eplExpression5=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;
        CommonTree EOF8_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1790);
            eventProperty7=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1794); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;
        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1814); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1816);
            classIdentifier10=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);
                if ( (LA4_1==IDENT) ) {
                    int LA4_9 = input.LA(3);
                    if ( (LA4_9==EQUALS) ) {
                        int LA4_30 = input.LA(4);
                        if ( ((LA4_30>=BOOLEAN_TRUE && LA4_30<=VALUE_NULL)||LA4_30==NUM_DOUBLE||LA4_30==PLUS||(LA4_30>=STRING_LITERAL && LA4_30<=QUOTED_STRING_LITERAL)||LA4_30==MINUS||LA4_30==LCURLY||LA4_30==NUM_INT||(LA4_30>=NUM_LONG && LA4_30<=NUM_FLOAT)||LA4_30==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);
                    int alt3=3;
                    int LA3_0 = input.LA(1);
                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1824);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1828);
                            elementValueNoEnum13=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());
                            }
                            break;
                    }
                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1833); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1876);
            classIdentifier16=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);
                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==RPAREN||LA5_1==DOT) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1884);
                            elementValuePairsEnum18=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1888);
                            elementValueEnum19=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());
                            }
                            break;
                    }
                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;
        CommonTree COMMA22_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1934);
            elementValuePairNoEnum21=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1937); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1940);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;
        CommonTree COMMA25_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1961);
            elementValuePairEnum24=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);
                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }
                switch (alt8) {
            	case 1 :
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1964); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1967);
            	    elementValuePairEnum26=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());
            	    }
            	    break;
            	default :
            	    break loop8;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;
        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1990); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1992); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1994);
            elementValueNoEnum28=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2031); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2035);
            elementValueEnum30=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;
        EsperEPL2GrammarParser.constant_return constant33 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2066);
                    annotationEnum31=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2077);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2090);
                    constant33=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;
        EsperEPL2GrammarParser.constant_return constant36 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2113);
                    annotationEnum34=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2124);
                    elementValueArrayEnum35=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2137);
                    constant36=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2145);
                    classIdentifier37=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;
        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2165); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2168);
                    elementValueNoEnum39=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);
                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);
                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }
                        }
                        switch (alt11) {
                    	case 1 :
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2171); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2173);
                    	    elementValueNoEnum41=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop11;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);
                    }
                    break;
            }
            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2184); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2216);
                    elementValueEnum45=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);
                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);
                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }
                        }
                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2219); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2221);
                    	    elementValueEnum47=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop14;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt16=2;
            int LA16_0 = input.LA(1);
            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2228); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);
                    }
                    break;
            }
            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2232); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr57 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2265);
                    selectExpr50=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2270);
                    createWindowExpr51=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2275);
                    createIndexExpr52=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2280);
                    createVariableExpr53=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2285);
                    createSchemaExpr54=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2290);
                    onExpr55=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2295);
                    updateExpr56=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2298);
                    forExpr57=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr57.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT58=null;
        Token SELECT60=null;
        Token FROM62=null;
        Token WHERE65=null;
        Token GROUP67=null;
        Token BY68=null;
        Token HAVING70=null;
        Token OUTPUT72=null;
        Token ORDER74=null;
        Token BY75=null;
        Token ROW_LIMIT_EXPR77=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr59 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause61 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause63 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog64 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause66 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr69 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause71 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit73 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr76 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit78 = null;
        CommonTree INSERT58_tree=null;
        CommonTree SELECT60_tree=null;
        CommonTree FROM62_tree=null;
        CommonTree WHERE65_tree=null;
        CommonTree GROUP67_tree=null;
        CommonTree BY68_tree=null;
        CommonTree HAVING70_tree=null;
        CommonTree OUTPUT72_tree=null;
        CommonTree ORDER74_tree=null;
        CommonTree BY75_tree=null;
        CommonTree ROW_LIMIT_EXPR77_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    INSERT58=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2312); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2315);
                    insertIntoExpr59=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr59.getTree());
                    }
                    break;
            }
            SELECT60=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2321); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2324);
            selectClause61=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause61.getTree());
            FROM62=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2328); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2331);
            fromClause63=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause63.getTree());
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2335);
                    matchRecog64=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog64.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    WHERE65=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2341); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2344);
                    whereClause66=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause66.getTree());
                    }
                    break;
            }
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    GROUP67=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2351); if (state.failed) return retval;
                    BY68=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2354); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2357);
                    groupByListExpr69=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr69.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    HAVING70=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2364); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2367);
                    havingClause71=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause71.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    OUTPUT72=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2374); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2377);
                    outputLimit73=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit73.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    ORDER74=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2384); if (state.failed) return retval;
                    BY75=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2387); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2390);
                    orderByListExpr76=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr76.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR77=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2397); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2400);
                    rowLimit78=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit78.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON79=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr80 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr81 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr82 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr83 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert84 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr85 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr86 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr87 = null;
        CommonTree ON79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON79=(Token)match(input,ON,FOLLOW_ON_in_onExpr2415); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON79);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2417);
            onStreamExpr80=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr80.getTree());
            int alt30=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            case MERGE:
                {
                alt30=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);
                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2422);
                    onDeleteExpr81=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr81.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2426);
                    onSelectExpr82=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr82.getTree());
                    int alt29=2;
                    int LA29_0 = input.LA(1);
                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            {
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);
                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }
                                switch (alt27) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2429);
                            	    onSelectInsertExpr83=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr83.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);
                            int alt28=2;
                            int LA28_0 = input.LA(1);
                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2432);
                                    outputClauseInsert84=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert84.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2439);
                    onSetExpr85=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr85.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2443);
                    onUpdateExpr86=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr86.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2447);
                    onMergeExpr87=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr87.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS90=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression88 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression89 = null;
        CommonTree i_tree=null;
        CommonTree AS90_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);
                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2492);
                    eventFilterExpression88=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression88.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2496);
                    patternInclusionExpression89=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression89.getTree());
                    }
                    break;
            }
            int alt32=3;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    {
                    AS90=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS90);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2510); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE91=null;
        Token ISTREAM92=null;
        Token AS94=null;
        Token SET95=null;
        Token COMMA97=null;
        Token WHERE99=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier93 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment96 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment98 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause100 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE91_tree=null;
        CommonTree ISTREAM92_tree=null;
        CommonTree AS94_tree=null;
        CommonTree SET95_tree=null;
        CommonTree COMMA97_tree=null;
        CommonTree WHERE99_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE91=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE91);
            ISTREAM92=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM92);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2545);
            classIdentifier93=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier93.getTree());
            int alt33=3;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    {
                    AS94=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2548); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS94);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET95=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET95);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2566);
            onSetAssignment96=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment96.getTree());
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);
                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }
                switch (alt34) {
            	case 1 :
            	    {
            	    COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2569); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA97);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2571);
            	    onSetAssignment98=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment98.getTree());
            	    }
            	    break;
            	default :
            	    break loop34;
                }
            } while (true);
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    WHERE99=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2579); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE99);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2581);
                    whereClause100=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause100.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE101=null;
        Token INTO102=null;
        Token AS103=null;
        Token WHERE104=null;
        EsperEPL2GrammarParser.whereClause_return whereClause105 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem106 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE101_tree=null;
        CommonTree INTO102_tree=null;
        CommonTree AS103_tree=null;
        CommonTree WHERE104_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE101=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE101);
            int alt36=2;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==INTO) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    {
                    INTO102=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2618); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO102);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt37=3;
            int LA37_0 = input.LA(1);
            if ( (LA37_0==AS) ) {
                alt37=1;
            }
            else if ( (LA37_0==IDENT) ) {
                alt37=2;
            }
            switch (alt37) {
                case 1 :
                    {
                    AS103=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS103);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2636); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    WHERE104=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2643); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE104);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2645);
                    whereClause105=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause105.getTree());
                    }
                    break;
            }
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);
                if ( (LA39_0==WHEN) ) {
                    alt39=1;
                }
                switch (alt39) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2653);
            	    mergeItem106=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem106.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched107 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched108 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==WHEN) ) {
                int LA40_1 = input.LA(2);
                if ( (LA40_1==MATCHED) ) {
                    alt40=1;
                }
                else if ( (LA40_1==NOT_EXPR) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2687);
                    mergeMatched107=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched107.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2691);
                    mergeUnmatched108=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched108.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token d=null;
        Token WHEN109=null;
        Token MATCHED110=null;
        Token AND_EXPR111=null;
        Token THEN113=null;
        Token SET114=null;
        Token COMMA116=null;
        EsperEPL2GrammarParser.expression_return expression112 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment115 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment117 = null;
        CommonTree i_tree=null;
        CommonTree d_tree=null;
        CommonTree WHEN109_tree=null;
        CommonTree MATCHED110_tree=null;
        CommonTree AND_EXPR111_tree=null;
        CommonTree THEN113_tree=null;
        CommonTree SET114_tree=null;
        CommonTree COMMA116_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            WHEN109=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN109);
            MATCHED110=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2706); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED110);
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AND_EXPR) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    AND_EXPR111=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2709); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR111);
                    pushFollow(FOLLOW_expression_in_mergeMatched2711);
                    expression112=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression112.getTree());
                    }
                    break;
            }
            THEN113=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatched2715); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN113);
            int alt43=2;
            int LA43_0 = input.LA(1);
            if ( (LA43_0==UPDATE) ) {
                alt43=1;
            }
            else if ( (LA43_0==DELETE) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);
                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    {
                    i=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatched2728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(i);
                    SET114=(Token)match(input,SET,FOLLOW_SET_in_mergeMatched2730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET114);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2732);
                    onSetAssignment115=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment115.getTree());
                    loop42:
                    do {
                        int alt42=2;
                        int LA42_0 = input.LA(1);
                        if ( (LA42_0==COMMA) ) {
                            alt42=1;
                        }
                        switch (alt42) {
                    	case 1 :
                    	    {
                    	    COMMA116=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatched2735); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA116);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatched2737);
                    	    onSetAssignment117=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment117.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop42;
                        }
                    } while (true);
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatched2748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN118=null;
        Token NOT_EXPR119=null;
        Token MATCHED120=null;
        Token AND_EXPR121=null;
        Token THEN123=null;
        Token INSERT124=null;
        Token LPAREN125=null;
        Token RPAREN127=null;
        Token SELECT128=null;
        EsperEPL2GrammarParser.expression_return expression122 = null;
        EsperEPL2GrammarParser.columnList_return columnList126 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList129 = null;
        CommonTree WHEN118_tree=null;
        CommonTree NOT_EXPR119_tree=null;
        CommonTree MATCHED120_tree=null;
        CommonTree AND_EXPR121_tree=null;
        CommonTree THEN123_tree=null;
        CommonTree INSERT124_tree=null;
        CommonTree LPAREN125_tree=null;
        CommonTree RPAREN127_tree=null;
        CommonTree SELECT128_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            WHEN118=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN118);
            NOT_EXPR119=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched2790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR119);
            MATCHED120=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched2792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED120);
            int alt44=2;
            int LA44_0 = input.LA(1);
            if ( (LA44_0==AND_EXPR) ) {
                alt44=1;
            }
            switch (alt44) {
                case 1 :
                    {
                    AND_EXPR121=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched2795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR121);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched2797);
                    expression122=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression122.getTree());
                    }
                    break;
            }
            THEN123=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatched2801); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN123);
            INSERT124=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeUnmatched2805); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT124);
            int alt45=2;
            int LA45_0 = input.LA(1);
            if ( (LA45_0==LPAREN) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    {
                    LPAREN125=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeUnmatched2808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN125);
                    pushFollow(FOLLOW_columnList_in_mergeUnmatched2810);
                    columnList126=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList126.getTree());
                    RPAREN127=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeUnmatched2812); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN127);
                    }
                    break;
            }
            SELECT128=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeUnmatched2816); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT128);
            pushFollow(FOLLOW_selectionList_in_mergeUnmatched2818);
            selectionList129=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList129.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT130=null;
        Token SELECT132=null;
        Token DISTINCT133=null;
        Token WHERE136=null;
        Token GROUP138=null;
        Token BY139=null;
        Token HAVING141=null;
        Token ORDER143=null;
        Token BY144=null;
        Token ROW_LIMIT_EXPR146=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr131 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList134 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom135 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause137 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr140 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause142 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr145 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit147 = null;
        CommonTree INSERT130_tree=null;
        CommonTree SELECT132_tree=null;
        CommonTree DISTINCT133_tree=null;
        CommonTree WHERE136_tree=null;
        CommonTree GROUP138_tree=null;
        CommonTree BY139_tree=null;
        CommonTree HAVING141_tree=null;
        CommonTree ORDER143_tree=null;
        CommonTree BY144_tree=null;
        CommonTree ROW_LIMIT_EXPR146_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt46=2;
            int LA46_0 = input.LA(1);
            if ( (LA46_0==INSERT) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    {
                    INSERT130=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2860); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT130);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2862);
                    insertIntoExpr131=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr131.getTree());
                    }
                    break;
            }
            SELECT132=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2868); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT132);
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==DISTINCT) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    DISTINCT133=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT133);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr2873);
            selectionList134=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList134.getTree());
            int alt48=2;
            int LA48_0 = input.LA(1);
            if ( (LA48_0==FROM) ) {
                alt48=1;
            }
            switch (alt48) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2877);
                    onExprFrom135=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom135.getTree());
                    }
                    break;
            }
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==WHERE) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    WHERE136=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2883); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE136);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2885);
                    whereClause137=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause137.getTree());
                    }
                    break;
            }
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==GROUP) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    GROUP138=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP138);
                    BY139=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2896); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY139);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2898);
                    groupByListExpr140=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr140.getTree());
                    }
                    break;
            }
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==HAVING) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    HAVING141=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING141);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2907);
                    havingClause142=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause142.getTree());
                    }
                    break;
            }
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==ORDER) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    ORDER143=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2914); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER143);
                    BY144=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2916); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY144);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2918);
                    orderByListExpr145=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr145.getTree());
                    }
                    break;
            }
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==ROW_LIMIT_EXPR) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR146=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2925); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR146);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2927);
                    rowLimit147=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit147.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE148=null;
        Token AS149=null;
        Token SET150=null;
        Token COMMA152=null;
        Token WHERE154=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment151 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment153 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause155 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE148_tree=null;
        CommonTree AS149_tree=null;
        CommonTree SET150_tree=null;
        CommonTree COMMA152_tree=null;
        CommonTree WHERE154_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE148=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE148);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt54=3;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==AS) ) {
                alt54=1;
            }
            else if ( (LA54_0==IDENT) ) {
                alt54=2;
            }
            switch (alt54) {
                case 1 :
                    {
                    AS149=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS149);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET150=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3013); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET150);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3015);
            onSetAssignment151=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment151.getTree());
            loop55:
            do {
                int alt55=2;
                int LA55_0 = input.LA(1);
                if ( (LA55_0==COMMA) ) {
                    alt55=1;
                }
                switch (alt55) {
            	case 1 :
            	    {
            	    COMMA152=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3018); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA152);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3020);
            	    onSetAssignment153=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment153.getTree());
            	    }
            	    break;
            	default :
            	    break loop55;
                }
            } while (true);
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==WHERE) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    WHERE154=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3027); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE154);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3029);
                    whereClause155=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause155.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT156=null;
        Token SELECT158=null;
        Token WHERE160=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr157 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList159 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause161 = null;
        CommonTree INSERT156_tree=null;
        CommonTree SELECT158_tree=null;
        CommonTree WHERE160_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT156=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3080); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT156);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3082);
            insertIntoExpr157=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr157.getTree());
            SELECT158=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3086); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT158);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3088);
            selectionList159=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList159.getTree());
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==WHERE) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    WHERE160=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE160);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3095);
                    whereClause161=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause161.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT162=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT162_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT162=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT162);
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==FIRST) ) {
                alt58=1;
            }
            else if ( (LA58_0==ALL) ) {
                alt58=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 58, 0, input);
                throw nvae;
            }
            switch (alt58) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3137); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE163=null;
        Token WHERE165=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom164 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause166 = null;
        CommonTree DELETE163_tree=null;
        CommonTree WHERE165_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE163=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE163);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3183);
            onExprFrom164=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom164.getTree());
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==WHERE) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    WHERE165=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3188); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE165);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3190);
                    whereClause166=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause166.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET167=null;
        Token COMMA169=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment168 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment170 = null;
        CommonTree SET167_tree=null;
        CommonTree COMMA169_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET167=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET167);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3232);
            onSetAssignment168=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment168.getTree());
            loop60:
            do {
                int alt60=2;
                int LA60_0 = input.LA(1);
                if ( (LA60_0==COMMA) ) {
                    alt60=1;
                }
                switch (alt60) {
            	case 1 :
            	    {
            	    COMMA169=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3235); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA169);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3237);
            	    onSetAssignment170=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment170.getTree());
            	    }
            	    break;
            	default :
            	    break loop60;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS172=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty171 = null;
        EsperEPL2GrammarParser.expression_return expression173 = null;
        CommonTree EQUALS172_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3262);
            eventProperty171=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty171.getTree());
            EQUALS172=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS172);
            pushFollow(FOLLOW_expression_in_onSetAssignment3266);
            expression173=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression173.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM174=null;
        Token AS175=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM174_tree=null;
        CommonTree AS175_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM174=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3291); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM174);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3295); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt61=3;
            int LA61_0 = input.LA(1);
            if ( (LA61_0==AS) ) {
                alt61=1;
            }
            else if ( (LA61_0==IDENT) ) {
                alt61=2;
            }
            switch (alt61) {
                case 1 :
                    {
                    AS175=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3298); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS175);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3308); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE176=null;
        Token WINDOW177=null;
        Token DOT178=null;
        Token DOT180=null;
        Token AS182=null;
        Token LPAREN184=null;
        Token RPAREN186=null;
        Token WHERE187=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression179 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression181 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter183 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList185 = null;
        EsperEPL2GrammarParser.expression_return expression188 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE176_tree=null;
        CommonTree WINDOW177_tree=null;
        CommonTree DOT178_tree=null;
        CommonTree DOT180_tree=null;
        CommonTree AS182_tree=null;
        CommonTree LPAREN184_tree=null;
        CommonTree RPAREN186_tree=null;
        CommonTree WHERE187_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE176=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE176);
            WINDOW177=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW177);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==DOT) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    DOT178=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT178);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3347);
                    viewExpression179=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression179.getTree());
                    loop62:
                    do {
                        int alt62=2;
                        int LA62_0 = input.LA(1);
                        if ( (LA62_0==DOT) ) {
                            alt62=1;
                        }
                        switch (alt62) {
                    	case 1 :
                    	    {
                    	    DOT180=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3350); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT180);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3352);
                    	    viewExpression181=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression181.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop62;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt64=3;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==RETAINUNION) ) {
                alt64=1;
            }
            else if ( (LA64_0==RETAININTERSECTION) ) {
                alt64=2;
            }
            switch (alt64) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3361); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==AS) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    AS182=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS182);
                    }
                    break;
            }
            int alt66=2;
            int LA66_0 = input.LA(1);
            if ( (LA66_0==SELECT||LA66_0==IDENT||LA66_0==TICKED_STRING_LITERAL) ) {
                alt66=1;
            }
            else if ( (LA66_0==LPAREN) ) {
                alt66=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 66, 0, input);
                throw nvae;
            }
            switch (alt66) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3384);
                    createWindowExprModelAfter183=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter183.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN184=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN184);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3401);
                    createColumnList185=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList185.getTree());
                    RPAREN186=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN186);
                    }
                    break;
            }
            int alt68=2;
            int LA68_0 = input.LA(1);
            if ( (LA68_0==INSERT) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt67=2;
                    int LA67_0 = input.LA(1);
                    if ( (LA67_0==WHERE) ) {
                        alt67=1;
                    }
                    switch (alt67) {
                        case 1 :
                            {
                            WHERE187=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3423); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE187);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3425);
                            expression188=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression188.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT189=null;
        Token FROM191=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList190 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier192 = null;
        CommonTree SELECT189_tree=null;
        CommonTree FROM191_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==SELECT) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    SELECT189=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3512); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3515);
                    createSelectionList190=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList190.getTree());
                    FROM191=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3517); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3522);
            classIdentifier192=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier192.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE193=null;
        Token INDEX194=null;
        Token ON195=null;
        Token LPAREN196=null;
        Token RPAREN198=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList197 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE193_tree=null;
        CommonTree INDEX194_tree=null;
        CommonTree ON195_tree=null;
        CommonTree LPAREN196_tree=null;
        CommonTree RPAREN198_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE193=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE193);
            INDEX194=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3537); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX194);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3541); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON195=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3543); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON195);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3547); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN196=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN196);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr3551);
            createIndexColumnList197=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList197.getTree());
            RPAREN198=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN198);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA200=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn199 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn201 = null;
        CommonTree COMMA200_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3582);
            createIndexColumn199=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn199.getTree());
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);
                if ( (LA70_0==COMMA) ) {
                    alt70=1;
                }
                switch (alt70) {
            	case 1 :
            	    {
            	    COMMA200=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList3585); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA200);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3587);
            	    createIndexColumn201=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn201.getTree());
            	    }
            	    break;
            	default :
            	    break loop70;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT202=null;
        Token IDENT203=null;
        CommonTree IDENT202_tree=null;
        CommonTree IDENT203_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT202=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT202);
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==IDENT) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    IDENT203=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3616); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT203);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE204=null;
        Token VARIABLE205=null;
        Token EQUALS207=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier206 = null;
        EsperEPL2GrammarParser.expression_return expression208 = null;
        CommonTree n_tree=null;
        CommonTree CREATE204_tree=null;
        CommonTree VARIABLE205_tree=null;
        CommonTree EQUALS207_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE204=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE204);
            VARIABLE205=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE205);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3645);
            classIdentifier206=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier206.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3649); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==EQUALS) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    EQUALS207=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3652); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS207);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3654);
                    expression208=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression208.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA210=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement209 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement211 = null;
        CommonTree COMMA210_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3696);
            createColumnListElement209=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement209.getTree());
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);
                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }
                switch (alt73) {
            	case 1 :
            	    {
            	    COMMA210=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3699); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA210);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3701);
            	    createColumnListElement211=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement211.getTree());
            	    }
            	    break;
            	default :
            	    break loop73;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK214=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy212 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier213 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK214_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3729);
            classIdentifierNonGreedy212=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy212.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3732);
            classIdentifier213=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier213.getTree());
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==LBRACK) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK214=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK214);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA216=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement215 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement217 = null;
        CommonTree COMMA216_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3782);
            createSelectionListElement215=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement215.getTree());
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);
                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }
                switch (alt75) {
            	case 1 :
            	    {
            	    COMMA216=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3785); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA216);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3787);
            	    createSelectionListElement217=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement217.getTree());
            	    }
            	    break;
            	default :
            	    break loop75;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS219=null;
        Token AS221=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty218 = null;
        EsperEPL2GrammarParser.constant_return constant220 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS219_tree=null;
        CommonTree AS221_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt77=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt77=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt77=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt77=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);
                throw nvae;
            }
            switch (alt77) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3816); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3828);
                    eventProperty218=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty218.getTree());
                    int alt76=2;
                    int LA76_0 = input.LA(1);
                    if ( (LA76_0==AS) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            {
                            AS219=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3831); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS219);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3835); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3856);
                    constant220=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant220.getTree());
                    AS221=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS221);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE222=null;
        Token SCHEMA223=null;
        Token AS224=null;
        Token LPAREN226=null;
        Token RPAREN228=null;
        EsperEPL2GrammarParser.variantList_return variantList225 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList227 = null;
        EsperEPL2GrammarParser.columnList_return columnList229 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE222_tree=null;
        CommonTree SCHEMA223_tree=null;
        CommonTree AS224_tree=null;
        CommonTree LPAREN226_tree=null;
        CommonTree RPAREN228_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE222=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE222);
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==IDENT) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3891); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA223=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3894); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA223);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3898); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt79=2;
            int LA79_0 = input.LA(1);
            if ( (LA79_0==AS) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    {
                    AS224=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS224);
                    }
                    break;
            }
            int alt82=2;
            int LA82_0 = input.LA(1);
            if ( (LA82_0==IDENT||LA82_0==STAR||LA82_0==TICKED_STRING_LITERAL) ) {
                alt82=1;
            }
            else if ( (LA82_0==LPAREN) ) {
                alt82=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 82, 0, input);
                throw nvae;
            }
            switch (alt82) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3913);
                    variantList225=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList225.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN226=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN226);
                    int alt80=2;
                    int LA80_0 = input.LA(1);
                    if ( (LA80_0==IDENT||LA80_0==TICKED_STRING_LITERAL) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3926);
                            createColumnList227=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList227.getTree());
                            }
                            break;
                    }
                    RPAREN228=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3929); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN228);
                    int alt81=2;
                    int LA81_0 = input.LA(1);
                    if ( (LA81_0==IDENT) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3934); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3936);
                            columnList229=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList229.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA231=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement230 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement232 = null;
        CommonTree COMMA231_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList4025);
            variantListElement230=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement230.getTree());
            loop83:
            do {
                int alt83=2;
                int LA83_0 = input.LA(1);
                if ( (LA83_0==COMMA) ) {
                    alt83=1;
                }
                switch (alt83) {
            	case 1 :
            	    {
            	    COMMA231=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList4028); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA231);
            	    pushFollow(FOLLOW_variantListElement_in_variantList4030);
            	    variantListElement232=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement232.getTree());
            	    }
            	    break;
            	default :
            	    break loop83;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR233=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier234 = null;
        CommonTree STAR233_tree=null;
        try {
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==STAR) ) {
                alt84=1;
            }
            else if ( (LA84_0==IDENT||LA84_0==TICKED_STRING_LITERAL) ) {
                alt84=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 84, 0, input);
                throw nvae;
            }
            switch (alt84) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR233=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement4057); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR233_tree = (CommonTree)adaptor.create(STAR233);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR233_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement4063);
                    classIdentifier234=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier234.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO235=null;
        Token LPAREN237=null;
        Token RPAREN239=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier236 = null;
        EsperEPL2GrammarParser.columnList_return columnList238 = null;
        CommonTree s_tree=null;
        CommonTree INTO235_tree=null;
        CommonTree LPAREN237_tree=null;
        CommonTree RPAREN239_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt85=3;
            int LA85_0 = input.LA(1);
            if ( (LA85_0==ISTREAM) ) {
                alt85=1;
            }
            else if ( (LA85_0==RSTREAM) ) {
                alt85=2;
            }
            switch (alt85) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr4088); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr4094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO235=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr4098); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO235);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr4100);
            classIdentifier236=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier236.getTree());
            int alt86=2;
            int LA86_0 = input.LA(1);
            if ( (LA86_0==LPAREN) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    {
                    LPAREN237=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr4103); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN237);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr4105);
                    columnList238=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList238.getTree());
                    RPAREN239=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr4107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN239);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT240=null;
        Token COMMA241=null;
        Token IDENT242=null;
        CommonTree IDENT240_tree=null;
        CommonTree COMMA241_tree=null;
        CommonTree IDENT242_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT240=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT240);
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);
                if ( (LA87_0==COMMA) ) {
                    alt87=1;
                }
                switch (alt87) {
            	case 1 :
            	    {
            	    COMMA241=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4143); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA241);
            	    IDENT242=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4145); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT242);
            	    }
            	    break;
            	default :
            	    break loop87;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression243 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin244 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList245 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4183);
            streamExpression243=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression243.getTree());
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==EOF||LA88_0==WHERE||(LA88_0>=GROUP && LA88_0<=HAVING)||LA88_0==OUTPUT||LA88_0==ORDER||LA88_0==ROW_LIMIT_EXPR||LA88_0==MATCH_RECOGNIZE||LA88_0==FOR||LA88_0==COMMA) ) {
                alt88=1;
            }
            else if ( ((LA88_0>=INNER && LA88_0<=FULL)) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);
                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4186);
                    regularJoin244=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin244.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4190);
                    outerJoinList245=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList245.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA246=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression247 = null;
        CommonTree COMMA246_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);
                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }
                switch (alt89) {
            	case 1 :
            	    {
            	    COMMA246=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4204); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4207);
            	    streamExpression247=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression247.getTree());
            	    }
            	    break;
            	default :
            	    break loop89;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin248 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin249 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4221);
            outerJoin248=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin248.getTree());
            loop90:
            do {
                int alt90=2;
                int LA90_0 = input.LA(1);
                if ( ((LA90_0>=INNER && LA90_0<=FULL)) ) {
                    alt90=1;
                }
                switch (alt90) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4224);
            	    outerJoin249=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin249.getTree());
            	    }
            	    break;
            	default :
            	    break loop90;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER250=null;
        Token JOIN251=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression252 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent253 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER250_tree=null;
        CommonTree JOIN251_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt93=2;
            int LA93_0 = input.LA(1);
            if ( ((LA93_0>=JOIN && LA93_0<=FULL)) ) {
                alt93=1;
            }
            else if ( (LA93_0==INNER) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);
                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    {
                    int alt92=2;
                    int LA92_0 = input.LA(1);
                    if ( ((LA92_0>=LEFT && LA92_0<=FULL)) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            int alt91=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt91=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt91=2;
                                }
                                break;
                            case FULL:
                                {
                                alt91=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 91, 0, input);
                                throw nvae;
                            }
                            switch (alt91) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4267); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4271); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4275); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER250=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4278); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER250);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN251=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN251);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4315);
            streamExpression252=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression252.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4317);
            outerJoinIdent253=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent253.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON254=null;
        Token AND_EXPR256=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair255 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair257 = null;
        CommonTree ON254_tree=null;
        CommonTree AND_EXPR256_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON254=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4382); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4385);
            outerJoinIdentPair255=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair255.getTree());
            loop94:
            do {
                int alt94=2;
                int LA94_0 = input.LA(1);
                if ( (LA94_0==AND_EXPR) ) {
                    alt94=1;
                }
                switch (alt94) {
            	case 1 :
            	    {
            	    AND_EXPR256=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4388); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4391);
            	    outerJoinIdentPair257=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair257.getTree());
            	    }
            	    break;
            	default :
            	    break loop94;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS259=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty258 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty260 = null;
        CommonTree EQUALS259_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4406);
            eventProperty258=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty258.getTree());
            EQUALS259=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4408); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4411);
            eventProperty260=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty260.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression261 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4433);
            evalOrExpression261=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression261.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList262 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt95=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt95=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt95=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt95=3;
                    }
                    break;
            }
            switch (alt95) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4481); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt96=2;
            int LA96_0 = input.LA(1);
            if ( (LA96_0==DISTINCT) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4487); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4490);
            selectionList262=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList262.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA264=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement263 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement265 = null;
        CommonTree COMMA264_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4521);
            selectionListElement263=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement263.getTree());
            loop97:
            do {
                int alt97=2;
                int LA97_0 = input.LA(1);
                if ( (LA97_0==COMMA) ) {
                    alt97=1;
                }
                switch (alt97) {
            	case 1 :
            	    {
            	    COMMA264=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4524); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4527);
            	    selectionListElement265=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement265.getTree());
            	    }
            	    break;
            	default :
            	    break loop97;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS268=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector266 = null;
        EsperEPL2GrammarParser.expression_return expression267 = null;
        CommonTree s_tree=null;
        CommonTree AS268_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt99=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt99=1;
                }
                break;
            case IDENT:
                {
                int LA99_2 = input.LA(2);
                if ( (LA99_2==DOT) ) {
                    int LA99_69 = input.LA(3);
                    if ( (LA99_69==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt99=2;
                    }
                    else if ( (LA99_69==WINDOW||LA99_69==ESCAPE||LA99_69==EVERY_EXPR||(LA99_69>=SUM && LA99_69<=COUNT)||LA99_69==OUTER||(LA99_69>=JOIN && LA99_69<=FULL)||(LA99_69>=EVENTS && LA99_69<=LAST)||(LA99_69>=UNIDIRECTIONAL && LA99_69<=PREVIOUSTAIL)||LA99_69==PRIOR||(LA99_69>=WEEKDAY && LA99_69<=CAST)||LA99_69==SNAPSHOT||(LA99_69>=VARIABLE && LA99_69<=INDEX)||(LA99_69>=DEFINE && LA99_69<=MATCHES)||LA99_69==WHILE||(LA99_69>=MERGE && LA99_69<=MATCHED)||LA99_69==IDENT||LA99_69==TICKED_STRING_LITERAL) ) {
                        alt99=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 99, 69, input);
                        throw nvae;
                    }
                }
                else if ( (LA99_2==EOF||(LA99_2>=IN_SET && LA99_2<=REGEXP)||(LA99_2>=OR_EXPR && LA99_2<=NOT_EXPR)||(LA99_2>=WHERE && LA99_2<=AS)||LA99_2==WHEN||LA99_2==FROM||LA99_2==IS||(LA99_2>=GROUP && LA99_2<=HAVING)||LA99_2==OUTPUT||LA99_2==INSERT||LA99_2==ORDER||LA99_2==ROW_LIMIT_EXPR||LA99_2==FOR||LA99_2==COMMA||LA99_2==LPAREN||LA99_2==EQUALS||LA99_2==LBRACK||(LA99_2>=STAR && LA99_2<=QUESTION)||(LA99_2>=BAND && LA99_2<=MOD)||LA99_2==ESCAPECHAR) ) {
                    alt99=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 99, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt99=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);
                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4553); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4569);
                    streamSelector266=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector266.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4574);
                    expression267=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression267.getTree());
                    int alt98=2;
                    int LA98_0 = input.LA(1);
                    if ( (LA98_0==AS) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            {
                            AS268=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4577); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS268);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4581);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT269=null;
        Token STAR270=null;
        Token AS271=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT269_tree=null;
        CommonTree STAR270_tree=null;
        CommonTree AS271_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT269=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT269);
            STAR270=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR270);
            int alt100=2;
            int LA100_0 = input.LA(1);
            if ( (LA100_0==AS) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    {
                    AS271=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4644); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS271);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT276=null;
        Token DOT278=null;
        Token AS280=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression272 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression273 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression274 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression275 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression277 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression279 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT276_tree=null;
        CommonTree DOT278_tree=null;
        CommonTree AS280_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt101=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA101_1 = input.LA(2);
                if ( (LA101_1==EOF||(LA101_1>=WHERE && LA101_1<=AS)||(LA101_1>=INNER && LA101_1<=ON)||(LA101_1>=GROUP && LA101_1<=HAVING)||LA101_1==OUTPUT||LA101_1==ORDER||(LA101_1>=UNIDIRECTIONAL && LA101_1<=RETAININTERSECTION)||LA101_1==ROW_LIMIT_EXPR||LA101_1==MATCH_RECOGNIZE||LA101_1==FOR||(LA101_1>=COMMA && LA101_1<=LPAREN)||(LA101_1>=EQUALS && LA101_1<=LBRACK)) ) {
                    alt101=1;
                }
                else if ( (LA101_1==COLON) ) {
                    alt101=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 101, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt101=1;
                }
                break;
            case PATTERN:
                {
                alt101=2;
                }
                break;
            case SQL:
                {
                alt101=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 101, 0, input);
                throw nvae;
            }
            switch (alt101) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4679);
                    eventFilterExpression272=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression272.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4683);
                    patternInclusionExpression273=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression273.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4687);
                    databaseJoinExpression274=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression274.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4691);
                    methodJoinExpression275=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression275.getTree());
                    }
                    break;
            }
            int alt103=2;
            int LA103_0 = input.LA(1);
            if ( (LA103_0==DOT) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    {
                    DOT276=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT276);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4700);
                    viewExpression277=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression277.getTree());
                    loop102:
                    do {
                        int alt102=2;
                        int LA102_0 = input.LA(1);
                        if ( (LA102_0==DOT) ) {
                            alt102=1;
                        }
                        switch (alt102) {
                    	case 1 :
                    	    {
                    	    DOT278=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4703); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT278);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4705);
                    	    viewExpression279=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression279.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop102;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt104=3;
            int LA104_0 = input.LA(1);
            if ( (LA104_0==AS) ) {
                alt104=1;
            }
            else if ( (LA104_0==IDENT) ) {
                alt104=2;
            }
            switch (alt104) {
                case 1 :
                    {
                    AS280=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS280);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4716); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt105=2;
            int LA105_0 = input.LA(1);
            if ( (LA105_0==UNIDIRECTIONAL) ) {
                alt105=1;
            }
            switch (alt105) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt106=3;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==RETAINUNION) ) {
                alt106=1;
            }
            else if ( (LA106_0==RETAININTERSECTION) ) {
                alt106=2;
            }
            switch (alt106) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4736); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4740); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR281=null;
        Token LPAREN282=null;
        Token RPAREN284=null;
        EsperEPL2GrammarParser.expressionList_return expressionList283 = null;
        CommonTree i_tree=null;
        CommonTree FOR281_tree=null;
        CommonTree LPAREN282_tree=null;
        CommonTree RPAREN284_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR281=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR281);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4800); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt108=2;
            int LA108_0 = input.LA(1);
            if ( (LA108_0==LPAREN) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    {
                    LPAREN282=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4803); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN282);
                    int alt107=2;
                    int LA107_0 = input.LA(1);
                    if ( (LA107_0==WINDOW||LA107_0==ESCAPE||(LA107_0>=NOT_EXPR && LA107_0<=EVERY_EXPR)||(LA107_0>=SUM && LA107_0<=COUNT)||LA107_0==CASE||LA107_0==OUTER||(LA107_0>=JOIN && LA107_0<=FULL)||(LA107_0>=EVENTS && LA107_0<=LAST)||(LA107_0>=UNIDIRECTIONAL && LA107_0<=CURRENT_TIMESTAMP)||LA107_0==SNAPSHOT||(LA107_0>=VARIABLE && LA107_0<=INDEX)||(LA107_0>=BOOLEAN_TRUE && LA107_0<=VALUE_NULL)||(LA107_0>=DEFINE && LA107_0<=MATCHES)||LA107_0==WHILE||(LA107_0>=MERGE && LA107_0<=MATCHED)||LA107_0==NUM_DOUBLE||(LA107_0>=IDENT && LA107_0<=LPAREN)||(LA107_0>=PLUS && LA107_0<=QUESTION)||(LA107_0>=STRING_LITERAL && LA107_0<=QUOTED_STRING_LITERAL)||LA107_0==MINUS||LA107_0==LCURLY||LA107_0==NUM_INT||(LA107_0>=TICKED_STRING_LITERAL && LA107_0<=NUM_FLOAT)) ) {
                        alt107=1;
                    }
                    switch (alt107) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4805);
                            expressionList283=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList283.getTree());
                            }
                            break;
                    }
                    RPAREN284=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN284);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE285=null;
        Token LPAREN286=null;
        Token RPAREN294=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy287 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures288 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection289 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip290 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern291 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval292 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine293 = null;
        CommonTree MATCH_RECOGNIZE285_tree=null;
        CommonTree LPAREN286_tree=null;
        CommonTree RPAREN294_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE285=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE285);
            LPAREN286=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4858); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN286);
            int alt109=2;
            int LA109_0 = input.LA(1);
            if ( (LA109_0==PARTITION) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4864);
                    matchRecogPartitionBy287=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy287.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4871);
            matchRecogMeasures288=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures288.getTree());
            int alt110=2;
            int LA110_0 = input.LA(1);
            if ( (LA110_0==ALL) ) {
                alt110=1;
            }
            switch (alt110) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4876);
                    matchRecogMatchesSelection289=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection289.getTree());
                    }
                    break;
            }
            int alt111=2;
            int LA111_0 = input.LA(1);
            if ( (LA111_0==AFTER) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4882);
                    matchRecogMatchesAfterSkip290=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip290.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4888);
            matchRecogPattern291=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern291.getTree());
            int alt112=2;
            int LA112_0 = input.LA(1);
            if ( (LA112_0==IDENT) ) {
                alt112=1;
            }
            switch (alt112) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4894);
                    matchRecogMatchesInterval292=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval292.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4900);
            matchRecogDefine293=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine293.getTree());
            RPAREN294=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4907); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN294);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION295=null;
        Token BY296=null;
        Token COMMA298=null;
        EsperEPL2GrammarParser.expression_return expression297 = null;
        EsperEPL2GrammarParser.expression_return expression299 = null;
        CommonTree PARTITION295_tree=null;
        CommonTree BY296_tree=null;
        CommonTree COMMA298_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION295=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4944); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION295);
            BY296=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY296);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4948);
            expression297=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression297.getTree());
            loop113:
            do {
                int alt113=2;
                int LA113_0 = input.LA(1);
                if ( (LA113_0==COMMA) ) {
                    alt113=1;
                }
                switch (alt113) {
            	case 1 :
            	    {
            	    COMMA298=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4951); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA298);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4953);
            	    expression299=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression299.getTree());
            	    }
            	    break;
            	default :
            	    break loop113;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES300=null;
        Token COMMA302=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem301 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem303 = null;
        CommonTree MEASURES300_tree=null;
        CommonTree COMMA302_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES300=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4982); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES300);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4984);
            matchRecogMeasureItem301=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem301.getTree());
            loop114:
            do {
                int alt114=2;
                int LA114_0 = input.LA(1);
                if ( (LA114_0==COMMA) ) {
                    alt114=1;
                }
                switch (alt114) {
            	case 1 :
            	    {
            	    COMMA302=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4987); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA302);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4989);
            	    matchRecogMeasureItem303=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem303.getTree());
            	    }
            	    break;
            	default :
            	    break loop114;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS305=null;
        EsperEPL2GrammarParser.expression_return expression304 = null;
        CommonTree i_tree=null;
        CommonTree AS305_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem5014);
            expression304=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression304.getTree());
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==AS) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    {
                    AS305=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem5017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS305);
                    int alt115=2;
                    int LA115_0 = input.LA(1);
                    if ( (LA115_0==IDENT) ) {
                        alt115=1;
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem5022); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL306=null;
        Token MATCHES307=null;
        CommonTree ALL306_tree=null;
        CommonTree MATCHES307_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL306=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection5053); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL306_tree = (CommonTree)adaptor.create(ALL306);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL306_tree, root_0);
            }
            MATCHES307=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection5056); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN308=null;
        Token LPAREN309=null;
        Token RPAREN311=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration310 = null;
        CommonTree PATTERN308_tree=null;
        CommonTree LPAREN309_tree=null;
        CommonTree RPAREN311_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN308=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern5071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN308);
            LPAREN309=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern5073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN309);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5075);
            matchRecogPatternAlteration310=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration310.getTree());
            RPAREN311=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern5077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN311);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER312=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER312_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER312=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER312);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5103);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5107);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5111);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5115);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5119);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod313 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5155); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5157);
            timePeriod313=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod313.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat314 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat315 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5183);
            matchRecogPatternConcat314=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat314.getTree());
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);
                if ( (LA117_0==BOR) ) {
                    alt117=1;
                }
                switch (alt117) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5188); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5190);
            	    matchRecogPatternConcat315=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat315.getTree());
            	    }
            	    break;
            	default :
            	    break loop117;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary316 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt118=0;
            loop118:
            do {
                int alt118=2;
                int LA118_0 = input.LA(1);
                if ( ((LA118_0>=IDENT && LA118_0<=LPAREN)) ) {
                    alt118=1;
                }
                switch (alt118) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5223);
            	    matchRecogPatternUnary316=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary316.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt118 >= 1 ) break loop118;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(118, input);
                        throw eee;
                }
                cnt118++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested317 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom318 = null;
        try {
            int alt119=2;
            int LA119_0 = input.LA(1);
            if ( (LA119_0==LPAREN) ) {
                alt119=1;
            }
            else if ( (LA119_0==IDENT) ) {
                alt119=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 119, 0, input);
                throw nvae;
            }
            switch (alt119) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5248);
                    matchRecogPatternNested317=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested317.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5254);
                    matchRecogPatternAtom318=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom318.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN319=null;
        Token RPAREN321=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration320 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN319_tree=null;
        CommonTree RPAREN321_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN319=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5266); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN319);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5268);
            matchRecogPatternAlteration320=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration320.getTree());
            RPAREN321=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5270); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN321);
            int alt120=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt120=1;
                    }
                    break;
                case PLUS:
                    {
                    alt120=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt120=3;
                    }
                    break;
            }
            switch (alt120) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5275); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5287); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5326); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt123=2;
            int LA123_0 = input.LA(1);
            if ( (LA123_0==STAR||(LA123_0>=PLUS && LA123_0<=QUESTION)) ) {
                alt123=1;
            }
            switch (alt123) {
                case 1 :
                    {
                    int alt121=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt121=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt121=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt121=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 121, 0, input);
                        throw nvae;
                    }
                    switch (alt121) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5332); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5338); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5344); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt122=2;
                    int LA122_0 = input.LA(1);
                    if ( (LA122_0==QUESTION) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5350); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE322=null;
        Token COMMA324=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem323 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem325 = null;
        CommonTree DEFINE322_tree=null;
        CommonTree COMMA324_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE322=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5394); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE322);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5396);
            matchRecogDefineItem323=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem323.getTree());
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);
                if ( (LA124_0==COMMA) ) {
                    alt124=1;
                }
                switch (alt124) {
            	case 1 :
            	    {
            	    COMMA324=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5399); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA324);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5401);
            	    matchRecogDefineItem325=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem325.getTree());
            	    }
            	    break;
            	default :
            	    break loop124;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS326=null;
        EsperEPL2GrammarParser.expression_return expression327 = null;
        CommonTree i_tree=null;
        CommonTree AS326_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS326=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS326);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5432);
            expression327=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression327.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN328=null;
        Token LBRACK329=null;
        Token RBRACK331=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression330 = null;
        CommonTree PATTERN328_tree=null;
        CommonTree LBRACK329_tree=null;
        CommonTree RBRACK331_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN328=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5457); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN328);
            LBRACK329=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5459); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK329);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5461);
            patternExpression330=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression330.getTree());
            RBRACK331=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK331);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL332=null;
        Token COLON333=null;
        Token LBRACK334=null;
        Token METADATASQL335=null;
        Token RBRACK336=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL332_tree=null;
        CommonTree COLON333_tree=null;
        CommonTree LBRACK334_tree=null;
        CommonTree METADATASQL335_tree=null;
        CommonTree RBRACK336_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL332=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL332);
            COLON333=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON333);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5502); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK334=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5504); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK334);
            int alt125=2;
            int LA125_0 = input.LA(1);
            if ( (LA125_0==STRING_LITERAL) ) {
                alt125=1;
            }
            else if ( (LA125_0==QUOTED_STRING_LITERAL) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);
                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5509); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5515); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt127=2;
            int LA127_0 = input.LA(1);
            if ( (LA127_0==METADATASQL) ) {
                alt127=1;
            }
            switch (alt127) {
                case 1 :
                    {
                    METADATASQL335=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5519); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL335);
                    int alt126=2;
                    int LA126_0 = input.LA(1);
                    if ( (LA126_0==STRING_LITERAL) ) {
                        alt126=1;
                    }
                    else if ( (LA126_0==QUOTED_STRING_LITERAL) ) {
                        alt126=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 126, 0, input);
                        throw nvae;
                    }
                    switch (alt126) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5524); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5530); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK336=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5535); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK336);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON337=null;
        Token LPAREN339=null;
        Token RPAREN341=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier338 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList340 = null;
        CommonTree i_tree=null;
        CommonTree COLON337_tree=null;
        CommonTree LPAREN339_tree=null;
        CommonTree RPAREN341_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5586); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON337=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5588); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON337);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5590);
            classIdentifier338=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier338.getTree());
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==LPAREN) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    LPAREN339=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5593); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN339);
                    int alt128=2;
                    int LA128_0 = input.LA(1);
                    if ( (LA128_0==WINDOW||LA128_0==ESCAPE||(LA128_0>=NOT_EXPR && LA128_0<=EVERY_EXPR)||(LA128_0>=SUM && LA128_0<=COUNT)||LA128_0==CASE||LA128_0==OUTER||(LA128_0>=JOIN && LA128_0<=FULL)||(LA128_0>=EVENTS && LA128_0<=LAST)||(LA128_0>=UNIDIRECTIONAL && LA128_0<=CURRENT_TIMESTAMP)||LA128_0==SNAPSHOT||(LA128_0>=VARIABLE && LA128_0<=INDEX)||(LA128_0>=BOOLEAN_TRUE && LA128_0<=VALUE_NULL)||(LA128_0>=DEFINE && LA128_0<=MATCHES)||LA128_0==WHILE||(LA128_0>=MERGE && LA128_0<=MATCHED)||LA128_0==NUM_DOUBLE||(LA128_0>=IDENT && LA128_0<=LPAREN)||(LA128_0>=PLUS && LA128_0<=QUESTION)||(LA128_0>=STRING_LITERAL && LA128_0<=QUOTED_STRING_LITERAL)||LA128_0==MINUS||LA128_0==LCURLY||LA128_0==NUM_INT||(LA128_0>=TICKED_STRING_LITERAL && LA128_0<=NUM_FLOAT)) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5595);
                            expressionList340=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList340.getTree());
                            }
                            break;
                    }
                    RPAREN341=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN341);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON342=null;
        Token LPAREN343=null;
        Token RPAREN345=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList344 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON342_tree=null;
        CommonTree LPAREN343_tree=null;
        CommonTree RPAREN345_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5651); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON342=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5653); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON342);
            int alt130=2;
            int LA130_0 = input.LA(1);
            if ( (LA130_0==IDENT) ) {
                alt130=1;
            }
            else if ( (LA130_0==MERGE) ) {
                alt130=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 130, 0, input);
                throw nvae;
            }
            switch (alt130) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression5662); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN343=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5665); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN343);
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==WINDOW||LA131_0==ESCAPE||(LA131_0>=NOT_EXPR && LA131_0<=EVERY_EXPR)||(LA131_0>=SUM && LA131_0<=COUNT)||LA131_0==CASE||LA131_0==OUTER||(LA131_0>=JOIN && LA131_0<=FULL)||(LA131_0>=EVENTS && LA131_0<=LAST)||(LA131_0>=UNIDIRECTIONAL && LA131_0<=CURRENT_TIMESTAMP)||LA131_0==SNAPSHOT||(LA131_0>=VARIABLE && LA131_0<=INDEX)||(LA131_0>=BOOLEAN_TRUE && LA131_0<=VALUE_NULL)||(LA131_0>=DEFINE && LA131_0<=MATCHES)||LA131_0==WHILE||(LA131_0>=MERGE && LA131_0<=MATCHED)||LA131_0==NUM_DOUBLE||(LA131_0>=IDENT && LA131_0<=LPAREN)||LA131_0==LBRACK||LA131_0==STAR||(LA131_0>=PLUS && LA131_0<=QUESTION)||(LA131_0>=STRING_LITERAL && LA131_0<=QUOTED_STRING_LITERAL)||LA131_0==MINUS||LA131_0==LCURLY||LA131_0==NUM_INT||(LA131_0>=TICKED_STRING_LITERAL && LA131_0<=NUM_FLOAT)) ) {
                alt131=1;
            }
            switch (alt131) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5667);
                    expressionWithTimeList344=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList344.getTree());
                    }
                    break;
            }
            RPAREN345=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5670); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN345);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA347=null;
        EsperEPL2GrammarParser.expression_return expression346 = null;
        EsperEPL2GrammarParser.expression_return expression348 = null;
        CommonTree COMMA347_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5730);
            expression346=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression346.getTree());
            loop132:
            do {
                int alt132=2;
                int LA132_0 = input.LA(1);
                if ( (LA132_0==COMMA) ) {
                    alt132=1;
                }
                switch (alt132) {
            	case 1 :
            	    {
            	    COMMA347=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5733); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA347);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr5735);
            	    expression348=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression348.getTree());
            	    }
            	    break;
            	default :
            	    break loop132;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA350=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement349 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement351 = null;
        CommonTree COMMA350_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5770);
            orderByListElement349=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement349.getTree());
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);
                if ( (LA133_0==COMMA) ) {
                    alt133=1;
                }
                switch (alt133) {
            	case 1 :
            	    {
            	    COMMA350=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5773); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA350);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5775);
            	    orderByListElement351=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement351.getTree());
            	    }
            	    break;
            	default :
            	    break loop133;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression352 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5800);
            expression352=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression352.getTree());
            int alt134=3;
            int LA134_0 = input.LA(1);
            if ( (LA134_0==ASC) ) {
                alt134=1;
            }
            else if ( (LA134_0==DESC) ) {
                alt134=2;
            }
            switch (alt134) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression353 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5847);
            evalOrExpression353=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression353.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN359=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter354 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod355 = null;
        EsperEPL2GrammarParser.number_return number356 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet357 = null;
        EsperEPL2GrammarParser.expression_return expression358 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr360 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN359_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt135=2;
            int LA135_0 = input.LA(1);
            if ( (LA135_0==AFTER) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5885);
                    outputLimitAfter354=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter354.getTree());
                    }
                    break;
            }
            int alt136=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt136=1;
                    }
                    break;
                case FIRST:
                    {
                    alt136=2;
                    }
                    break;
                case LAST:
                    {
                    alt136=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt136=4;
                    }
                    break;
            }
            switch (alt136) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5900); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5908); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5912); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt140=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt140=1;
                }
                break;
            case AT:
                {
                alt140=2;
                }
                break;
            case WHEN:
                {
                alt140=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt140=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 140, 0, input);
                throw nvae;
            }
            switch (alt140) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5943); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt138=2;
                    int LA138_0 = input.LA(1);
                    if ( (LA138_0==NUM_INT) ) {
                        int LA138_1 = input.LA(2);
                        if ( (LA138_1==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==EVENTS) ) {
                            alt138=2;
                        }
                        else if ( (LA138_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 138, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA138_0==NUM_LONG) ) {
                        int LA138_2 = input.LA(2);
                        if ( (LA138_2==EVENTS) ) {
                            alt138=2;
                        }
                        else if ( (LA138_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 138, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA138_0==NUM_FLOAT) ) {
                        int LA138_3 = input.LA(2);
                        if ( (LA138_3==EVENTS) ) {
                            alt138=2;
                        }
                        else if ( (LA138_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 138, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA138_0==NUM_DOUBLE) ) {
                        int LA138_4 = input.LA(2);
                        if ( (LA138_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==EVENTS) ) {
                            alt138=2;
                        }
                        else if ( (LA138_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 138, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA138_0==IDENT) ) {
                        int LA138_5 = input.LA(2);
                        if ( (LA138_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==EVENTS) ) {
                            alt138=2;
                        }
                        else if ( (LA138_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else if ( (LA138_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt138=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 138, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA138_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt138=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 138, 0, input);
                        throw nvae;
                    }
                    switch (alt138) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5969);
                            timePeriod355=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod355.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt137=2;
                            int LA137_0 = input.LA(1);
                            if ( (LA137_0==NUM_DOUBLE||LA137_0==NUM_INT||(LA137_0>=NUM_LONG && LA137_0<=NUM_FLOAT)) ) {
                                alt137=1;
                            }
                            else if ( (LA137_0==IDENT) ) {
                                alt137=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 137, 0, input);
                                throw nvae;
                            }
                            switch (alt137) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5980);
                                    number356=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number356.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5986); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5992); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit6023); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit6025);
                    crontabLimitParameterSet357=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet357.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6042); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit6044);
                    expression358=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression358.getTree());
                    int alt139=2;
                    int LA139_0 = input.LA(1);
                    if ( (LA139_0==THEN) ) {
                        alt139=1;
                    }
                    switch (alt139) {
                        case 1 :
                            {
                            THEN359=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit6047); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN359);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit6049);
                            onSetExpr360=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr360.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS363=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod361 = null;
        EsperEPL2GrammarParser.number_return number362 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS363_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6199); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt141=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA141_1 = input.LA(2);
                if ( (LA141_1==MIN||(LA141_1>=TIMEPERIOD_YEAR && LA141_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt141=1;
                }
                else if ( (LA141_1==EVENTS) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA141_2 = input.LA(2);
                if ( (LA141_2==MIN||(LA141_2>=TIMEPERIOD_YEAR && LA141_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt141=1;
                }
                else if ( (LA141_2==EVENTS) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA141_3 = input.LA(2);
                if ( (LA141_3==MIN||(LA141_3>=TIMEPERIOD_YEAR && LA141_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt141=1;
                }
                else if ( (LA141_3==EVENTS) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA141_4 = input.LA(2);
                if ( (LA141_4==MIN||(LA141_4>=TIMEPERIOD_YEAR && LA141_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt141=1;
                }
                else if ( (LA141_4==EVENTS) ) {
                    alt141=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 141, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt141=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 141, 0, input);
                throw nvae;
            }
            switch (alt141) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6202);
                    timePeriod361=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod361.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6206);
                    number362=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number362.getTree());
                    EVENTS363=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6208); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS363);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt142=2;
            int LA142_0 = input.LA(1);
            if ( (LA142_0==NUM_DOUBLE||LA142_0==PLUS||LA142_0==MINUS||LA142_0==NUM_INT||(LA142_0>=NUM_LONG && LA142_0<=NUM_FLOAT)) ) {
                alt142=1;
            }
            else if ( (LA142_0==IDENT) ) {
                alt142=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 142, 0, input);
                throw nvae;
            }
            switch (alt142) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6254);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6260); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt145=2;
            int LA145_0 = input.LA(1);
            if ( (LA145_0==OFFSET||LA145_0==COMMA) ) {
                alt145=1;
            }
            switch (alt145) {
                case 1 :
                    {
                    int alt143=2;
                    int LA143_0 = input.LA(1);
                    if ( (LA143_0==COMMA) ) {
                        alt143=1;
                    }
                    else if ( (LA143_0==OFFSET) ) {
                        alt143=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 143, 0, input);
                        throw nvae;
                    }
                    switch (alt143) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6267); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6273); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt144=2;
                    int LA144_0 = input.LA(1);
                    if ( (LA144_0==NUM_DOUBLE||LA144_0==PLUS||LA144_0==MINUS||LA144_0==NUM_INT||(LA144_0>=NUM_LONG && LA144_0<=NUM_FLOAT)) ) {
                        alt144=1;
                    }
                    else if ( (LA144_0==IDENT) ) {
                        alt144=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 144, 0, input);
                        throw nvae;
                    }
                    switch (alt144) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6279);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6285); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN364=null;
        Token COMMA366=null;
        Token COMMA368=null;
        Token COMMA370=null;
        Token COMMA372=null;
        Token COMMA374=null;
        Token RPAREN376=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime365 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime367 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime369 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime371 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime373 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime375 = null;
        CommonTree LPAREN364_tree=null;
        CommonTree COMMA366_tree=null;
        CommonTree COMMA368_tree=null;
        CommonTree COMMA370_tree=null;
        CommonTree COMMA372_tree=null;
        CommonTree COMMA374_tree=null;
        CommonTree RPAREN376_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN364=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6337); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN364);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6339);
            expressionWithTime365=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime365.getTree());
            COMMA366=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA366);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6343);
            expressionWithTime367=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime367.getTree());
            COMMA368=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6345); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA368);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6347);
            expressionWithTime369=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime369.getTree());
            COMMA370=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6349); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA370);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6351);
            expressionWithTime371=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime371.getTree());
            COMMA372=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6353); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA372);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6355);
            expressionWithTime373=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime373.getTree());
            int alt146=2;
            int LA146_0 = input.LA(1);
            if ( (LA146_0==COMMA) ) {
                alt146=1;
            }
            switch (alt146) {
                case 1 :
                    {
                    COMMA374=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6358); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA374);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6360);
                    expressionWithTime375=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime375.getTree());
                    }
                    break;
            }
            RPAREN376=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6364); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN376);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN377=null;
        Token THEN379=null;
        EsperEPL2GrammarParser.expression_return expression378 = null;
        EsperEPL2GrammarParser.expression_return expression380 = null;
        CommonTree WHEN377_tree=null;
        CommonTree THEN379_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN377=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6394); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6397);
            expression378=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression378.getTree());
            THEN379=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6399); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6402);
            expression380=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression380.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE381=null;
        EsperEPL2GrammarParser.expression_return expression382 = null;
        CommonTree ELSE381_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE381=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6415); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6418);
            expression382=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression382.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression383 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6431);
            caseExpression383=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression383.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE384=null;
        Token END387=null;
        Token CASE388=null;
        Token END392=null;
        EsperEPL2GrammarParser.whenClause_return whenClause385 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause386 = null;
        EsperEPL2GrammarParser.expression_return expression389 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause390 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause391 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression393 = null;
        CommonTree CASE384_tree=null;
        CommonTree END387_tree=null;
        CommonTree CASE388_tree=null;
        CommonTree END392_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt151=3;
            int LA151_0 = input.LA(1);
            if ( (LA151_0==CASE) ) {
                int LA151_1 = input.LA(2);
                if ( (LA151_1==WHEN) ) {
                    alt151=1;
                }
                else if ( (LA151_1==WINDOW||LA151_1==ESCAPE||(LA151_1>=NOT_EXPR && LA151_1<=EVERY_EXPR)||(LA151_1>=SUM && LA151_1<=COUNT)||LA151_1==CASE||LA151_1==OUTER||(LA151_1>=JOIN && LA151_1<=FULL)||(LA151_1>=EVENTS && LA151_1<=LAST)||(LA151_1>=UNIDIRECTIONAL && LA151_1<=CURRENT_TIMESTAMP)||LA151_1==SNAPSHOT||(LA151_1>=VARIABLE && LA151_1<=INDEX)||(LA151_1>=BOOLEAN_TRUE && LA151_1<=VALUE_NULL)||(LA151_1>=DEFINE && LA151_1<=MATCHES)||LA151_1==WHILE||(LA151_1>=MERGE && LA151_1<=MATCHED)||LA151_1==NUM_DOUBLE||(LA151_1>=IDENT && LA151_1<=LPAREN)||(LA151_1>=PLUS && LA151_1<=QUESTION)||(LA151_1>=STRING_LITERAL && LA151_1<=QUOTED_STRING_LITERAL)||LA151_1==MINUS||LA151_1==LCURLY||LA151_1==NUM_INT||(LA151_1>=TICKED_STRING_LITERAL && LA151_1<=NUM_FLOAT)) ) {
                    alt151=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 151, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA151_0==WINDOW||LA151_0==ESCAPE||(LA151_0>=NOT_EXPR && LA151_0<=EVERY_EXPR)||(LA151_0>=SUM && LA151_0<=COUNT)||LA151_0==OUTER||(LA151_0>=JOIN && LA151_0<=FULL)||(LA151_0>=EVENTS && LA151_0<=LAST)||(LA151_0>=UNIDIRECTIONAL && LA151_0<=CURRENT_TIMESTAMP)||LA151_0==SNAPSHOT||(LA151_0>=VARIABLE && LA151_0<=INDEX)||(LA151_0>=BOOLEAN_TRUE && LA151_0<=VALUE_NULL)||(LA151_0>=DEFINE && LA151_0<=MATCHES)||LA151_0==WHILE||(LA151_0>=MERGE && LA151_0<=MATCHED)||LA151_0==NUM_DOUBLE||(LA151_0>=IDENT && LA151_0<=LPAREN)||(LA151_0>=PLUS && LA151_0<=QUESTION)||(LA151_0>=STRING_LITERAL && LA151_0<=QUOTED_STRING_LITERAL)||LA151_0==MINUS||LA151_0==LCURLY||LA151_0==NUM_INT||(LA151_0>=TICKED_STRING_LITERAL && LA151_0<=NUM_FLOAT)) ) {
                alt151=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);
                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE384=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE384_tree = (CommonTree)adaptor.create(CASE384);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE384_tree, root_0);
                    }
                    int cnt147=0;
                    loop147:
                    do {
                        int alt147=2;
                        int LA147_0 = input.LA(1);
                        if ( (LA147_0==WHEN) ) {
                            alt147=1;
                        }
                        switch (alt147) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6448);
                    	    whenClause385=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause385.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt147 >= 1 ) break loop147;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(147, input);
                                throw eee;
                        }
                        cnt147++;
                    } while (true);
                    int alt148=2;
                    int LA148_0 = input.LA(1);
                    if ( (LA148_0==ELSE) ) {
                        alt148=1;
                    }
                    switch (alt148) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6451);
                            elseClause386=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause386.getTree());
                            }
                            break;
                    }
                    END387=(Token)match(input,END,FOLLOW_END_in_caseExpression6454); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE388=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE388);
                    pushFollow(FOLLOW_expression_in_caseExpression6467);
                    expression389=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression389.getTree());
                    int cnt149=0;
                    loop149:
                    do {
                        int alt149=2;
                        int LA149_0 = input.LA(1);
                        if ( (LA149_0==WHEN) ) {
                            alt149=1;
                        }
                        switch (alt149) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6469);
                    	    whenClause390=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause390.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt149 >= 1 ) break loop149;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(149, input);
                                throw eee;
                        }
                        cnt149++;
                    } while (true);
                    int alt150=2;
                    int LA150_0 = input.LA(1);
                    if ( (LA150_0==ELSE) ) {
                        alt150=1;
                    }
                    switch (alt150) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6472);
                            elseClause391=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause391.getTree());
                            }
                            break;
                    }
                    END392=(Token)match(input,END,FOLLOW_END_in_caseExpression6475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END392);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6499);
                    evalOrExpression393=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression393.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression394 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression395 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6510);
            evalAndExpression394=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression394.getTree());
            loop152:
            do {
                int alt152=2;
                int LA152_0 = input.LA(1);
                if ( (LA152_0==OR_EXPR) ) {
                    alt152=1;
                }
                switch (alt152) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6515); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6517);
            	    evalAndExpression395=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression395.getTree());
            	    }
            	    break;
            	default :
            	    break loop152;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression396 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression397 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6549);
            bitWiseExpression396=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression396.getTree());
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);
                if ( (LA153_0==AND_EXPR) ) {
                    alt153=1;
                }
                switch (alt153) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6554); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6556);
            	    bitWiseExpression397=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression397.getTree());
            	    }
            	    break;
            	default :
            	    break loop153;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND399=null;
        Token BOR400=null;
        Token BXOR401=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression398 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression402 = null;
        CommonTree BAND399_tree=null;
        CommonTree BOR400_tree=null;
        CommonTree BXOR401_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6588);
            negatedExpression398=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression398.getTree());
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);
                if ( (LA155_0==BOR||(LA155_0>=BAND && LA155_0<=BXOR)) ) {
                    alt155=1;
                }
                switch (alt155) {
            	case 1 :
            	    {
            	    int alt154=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt154=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt154=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt154=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 154, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt154) {
            	        case 1 :
            	            {
            	            BAND399=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6593); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND399_tree = (CommonTree)adaptor.create(BAND399);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND399_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR400=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6596); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR400_tree = (CommonTree)adaptor.create(BOR400);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR400_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR401=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6599); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR401_tree = (CommonTree)adaptor.create(BXOR401);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR401_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6603);
            	    negatedExpression402=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression402.getTree());
            	    }
            	    break;
            	default :
            	    break loop155;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR404=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression403 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression405 = null;
        CommonTree NOT_EXPR404_tree=null;
        try {
            int alt156=2;
            int LA156_0 = input.LA(1);
            if ( (LA156_0==WINDOW||LA156_0==ESCAPE||LA156_0==EVERY_EXPR||(LA156_0>=SUM && LA156_0<=COUNT)||LA156_0==OUTER||(LA156_0>=JOIN && LA156_0<=FULL)||(LA156_0>=EVENTS && LA156_0<=LAST)||(LA156_0>=UNIDIRECTIONAL && LA156_0<=CURRENT_TIMESTAMP)||LA156_0==SNAPSHOT||(LA156_0>=VARIABLE && LA156_0<=INDEX)||(LA156_0>=BOOLEAN_TRUE && LA156_0<=VALUE_NULL)||(LA156_0>=DEFINE && LA156_0<=MATCHES)||LA156_0==WHILE||(LA156_0>=MERGE && LA156_0<=MATCHED)||LA156_0==NUM_DOUBLE||(LA156_0>=IDENT && LA156_0<=LPAREN)||(LA156_0>=PLUS && LA156_0<=QUESTION)||(LA156_0>=STRING_LITERAL && LA156_0<=QUOTED_STRING_LITERAL)||LA156_0==MINUS||LA156_0==LCURLY||LA156_0==NUM_INT||(LA156_0>=TICKED_STRING_LITERAL && LA156_0<=NUM_FLOAT)) ) {
                alt156=1;
            }
            else if ( (LA156_0==NOT_EXPR) ) {
                alt156=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 156, 0, input);
                throw nvae;
            }
            switch (alt156) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6618);
                    evalEqualsExpression403=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression403.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR404=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6624); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR404_tree = (CommonTree)adaptor.create(NOT_EXPR404);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR404_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6627);
                    evalEqualsExpression405=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression405.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR407=null;
        Token LPAREN409=null;
        Token RPAREN411=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression406 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression408 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList410 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression412 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR407_tree=null;
        CommonTree LPAREN409_tree=null;
        CommonTree RPAREN411_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6640);
            evalRelationalExpression406=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression406.getTree());
            loop162:
            do {
                int alt162=2;
                int LA162_0 = input.LA(1);
                if ( (LA162_0==IS||LA162_0==EQUALS||(LA162_0>=SQL_NE && LA162_0<=NOT_EQUAL)) ) {
                    alt162=1;
                }
                switch (alt162) {
            	case 1 :
            	    {
            	    int alt157=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt157=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA157_2 = input.LA(2);
            	        if ( (LA157_2==NOT_EXPR) ) {
            	            alt157=3;
            	        }
            	        else if ( (LA157_2==WINDOW||LA157_2==ESCAPE||LA157_2==EVERY_EXPR||(LA157_2>=SUM && LA157_2<=COUNT)||LA157_2==OUTER||(LA157_2>=JOIN && LA157_2<=FULL)||(LA157_2>=ALL && LA157_2<=SOME)||(LA157_2>=EVENTS && LA157_2<=LAST)||(LA157_2>=UNIDIRECTIONAL && LA157_2<=CURRENT_TIMESTAMP)||LA157_2==SNAPSHOT||(LA157_2>=VARIABLE && LA157_2<=INDEX)||(LA157_2>=BOOLEAN_TRUE && LA157_2<=VALUE_NULL)||(LA157_2>=DEFINE && LA157_2<=MATCHES)||LA157_2==WHILE||(LA157_2>=MERGE && LA157_2<=MATCHED)||LA157_2==NUM_DOUBLE||(LA157_2>=IDENT && LA157_2<=LPAREN)||(LA157_2>=PLUS && LA157_2<=QUESTION)||(LA157_2>=STRING_LITERAL && LA157_2<=QUOTED_STRING_LITERAL)||LA157_2==MINUS||LA157_2==LCURLY||LA157_2==NUM_INT||(LA157_2>=TICKED_STRING_LITERAL && LA157_2<=NUM_FLOAT)) ) {
            	            alt157=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 157, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt157=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt157=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 157, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt157) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6653); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6671); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6685); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR407=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6687); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR407);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6701); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6715); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt161=2;
            	    int LA161_0 = input.LA(1);
            	    if ( (LA161_0==WINDOW||LA161_0==ESCAPE||LA161_0==EVERY_EXPR||(LA161_0>=SUM && LA161_0<=COUNT)||LA161_0==OUTER||(LA161_0>=JOIN && LA161_0<=FULL)||(LA161_0>=EVENTS && LA161_0<=LAST)||(LA161_0>=UNIDIRECTIONAL && LA161_0<=CURRENT_TIMESTAMP)||LA161_0==SNAPSHOT||(LA161_0>=VARIABLE && LA161_0<=INDEX)||(LA161_0>=BOOLEAN_TRUE && LA161_0<=VALUE_NULL)||(LA161_0>=DEFINE && LA161_0<=MATCHES)||LA161_0==WHILE||(LA161_0>=MERGE && LA161_0<=MATCHED)||LA161_0==NUM_DOUBLE||(LA161_0>=IDENT && LA161_0<=LPAREN)||(LA161_0>=PLUS && LA161_0<=QUESTION)||(LA161_0>=STRING_LITERAL && LA161_0<=QUOTED_STRING_LITERAL)||LA161_0==MINUS||LA161_0==LCURLY||LA161_0==NUM_INT||(LA161_0>=TICKED_STRING_LITERAL && LA161_0<=NUM_FLOAT)) ) {
            	        alt161=1;
            	    }
            	    else if ( ((LA161_0>=ALL && LA161_0<=SOME)) ) {
            	        alt161=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 161, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt161) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6745);
            	            evalRelationalExpression408=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression408.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt158=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt158=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt158=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt158=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 158, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt158) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6762); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6768); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6774); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt160=2;
            	            int LA160_0 = input.LA(1);
            	            if ( (LA160_0==LPAREN) ) {
            	                int LA160_1 = input.LA(2);
            	                if ( (LA160_1==SELECT) ) {
            	                    alt160=2;
            	                }
            	                else if ( (LA160_1==WINDOW||LA160_1==ESCAPE||(LA160_1>=NOT_EXPR && LA160_1<=EVERY_EXPR)||(LA160_1>=SUM && LA160_1<=COUNT)||LA160_1==CASE||LA160_1==OUTER||(LA160_1>=JOIN && LA160_1<=FULL)||(LA160_1>=EVENTS && LA160_1<=LAST)||(LA160_1>=UNIDIRECTIONAL && LA160_1<=CURRENT_TIMESTAMP)||LA160_1==SNAPSHOT||(LA160_1>=VARIABLE && LA160_1<=INDEX)||(LA160_1>=BOOLEAN_TRUE && LA160_1<=VALUE_NULL)||(LA160_1>=DEFINE && LA160_1<=MATCHES)||LA160_1==WHILE||(LA160_1>=MERGE && LA160_1<=MATCHED)||LA160_1==NUM_DOUBLE||(LA160_1>=IDENT && LA160_1<=RPAREN)||(LA160_1>=PLUS && LA160_1<=QUESTION)||(LA160_1>=STRING_LITERAL && LA160_1<=QUOTED_STRING_LITERAL)||LA160_1==MINUS||LA160_1==LCURLY||LA160_1==NUM_INT||(LA160_1>=TICKED_STRING_LITERAL && LA160_1<=NUM_FLOAT)) ) {
            	                    alt160=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 160, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 160, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt160) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN409=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6780); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN409);
            	                    int alt159=2;
            	                    int LA159_0 = input.LA(1);
            	                    if ( (LA159_0==WINDOW||LA159_0==ESCAPE||(LA159_0>=NOT_EXPR && LA159_0<=EVERY_EXPR)||(LA159_0>=SUM && LA159_0<=COUNT)||LA159_0==CASE||LA159_0==OUTER||(LA159_0>=JOIN && LA159_0<=FULL)||(LA159_0>=EVENTS && LA159_0<=LAST)||(LA159_0>=UNIDIRECTIONAL && LA159_0<=CURRENT_TIMESTAMP)||LA159_0==SNAPSHOT||(LA159_0>=VARIABLE && LA159_0<=INDEX)||(LA159_0>=BOOLEAN_TRUE && LA159_0<=VALUE_NULL)||(LA159_0>=DEFINE && LA159_0<=MATCHES)||LA159_0==WHILE||(LA159_0>=MERGE && LA159_0<=MATCHED)||LA159_0==NUM_DOUBLE||(LA159_0>=IDENT && LA159_0<=LPAREN)||(LA159_0>=PLUS && LA159_0<=QUESTION)||(LA159_0>=STRING_LITERAL && LA159_0<=QUOTED_STRING_LITERAL)||LA159_0==MINUS||LA159_0==LCURLY||LA159_0==NUM_INT||(LA159_0>=TICKED_STRING_LITERAL && LA159_0<=NUM_FLOAT)) ) {
            	                        alt159=1;
            	                    }
            	                    switch (alt159) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6782);
            	                            expressionList410=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList410.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN411=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6785); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN411);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6790);
            	                    subSelectGroupExpression412=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression412.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop162;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN415=null;
        Token RPAREN417=null;
        Token COMMA421=null;
        Token IN_SET423=null;
        Token BETWEEN425=null;
        Token LIKE427=null;
        Token ESCAPE429=null;
        Token REGEXP431=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr413 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr414 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList416 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression418 = null;
        EsperEPL2GrammarParser.expression_return expression419 = null;
        EsperEPL2GrammarParser.expression_return expression420 = null;
        EsperEPL2GrammarParser.expression_return expression422 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery424 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList426 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr428 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant430 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr432 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN415_tree=null;
        CommonTree RPAREN417_tree=null;
        CommonTree COMMA421_tree=null;
        CommonTree IN_SET423_tree=null;
        CommonTree BETWEEN425_tree=null;
        CommonTree LIKE427_tree=null;
        CommonTree ESCAPE429_tree=null;
        CommonTree REGEXP431_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6918);
            concatenationExpr413=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr413.getTree());
            int alt176=2;
            int LA176_0 = input.LA(1);
            if ( (LA176_0==EOF||(LA176_0>=OR_EXPR && LA176_0<=AND_EXPR)||(LA176_0>=WHERE && LA176_0<=AS)||(LA176_0>=ELSE && LA176_0<=FROM)||LA176_0==IS||(LA176_0>=GROUP && LA176_0<=HAVING)||LA176_0==ALL||LA176_0==OUTPUT||LA176_0==INSERT||(LA176_0>=ORDER && LA176_0<=DESC)||LA176_0==PATTERN||(LA176_0>=TIMEPERIOD_SEC && LA176_0<=TIMEPERIOD_SECONDS)||LA176_0==ROW_LIMIT_EXPR||LA176_0==MEASURES||(LA176_0>=AFTER && LA176_0<=FOR)||LA176_0==COMMA||(LA176_0>=RPAREN && LA176_0<=EQUALS)||LA176_0==RBRACK||LA176_0==BOR||LA176_0==COLON||(LA176_0>=BAND && LA176_0<=GE)||LA176_0==RCURLY||LA176_0==FOLLOWMAX_END) ) {
                alt176=1;
            }
            else if ( ((LA176_0>=IN_SET && LA176_0<=REGEXP)||LA176_0==NOT_EXPR) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);
                throw nvae;
            }
            switch (alt176) {
                case 1 :
                    {
                    {
                    loop168:
                    do {
                        int alt168=2;
                        int LA168_0 = input.LA(1);
                        if ( ((LA168_0>=LT && LA168_0<=GE)) ) {
                            alt168=1;
                        }
                        switch (alt168) {
                    	case 1 :
                    	    {
                    	    int alt163=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt163=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt163=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt163=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt163=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 163, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt163) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6950); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6954); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6958); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6962); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt167=2;
                    	    int LA167_0 = input.LA(1);
                    	    if ( (LA167_0==WINDOW||LA167_0==ESCAPE||LA167_0==EVERY_EXPR||(LA167_0>=SUM && LA167_0<=COUNT)||LA167_0==OUTER||(LA167_0>=JOIN && LA167_0<=FULL)||(LA167_0>=EVENTS && LA167_0<=LAST)||(LA167_0>=UNIDIRECTIONAL && LA167_0<=CURRENT_TIMESTAMP)||LA167_0==SNAPSHOT||(LA167_0>=VARIABLE && LA167_0<=INDEX)||(LA167_0>=BOOLEAN_TRUE && LA167_0<=VALUE_NULL)||(LA167_0>=DEFINE && LA167_0<=MATCHES)||LA167_0==WHILE||(LA167_0>=MERGE && LA167_0<=MATCHED)||LA167_0==NUM_DOUBLE||(LA167_0>=IDENT && LA167_0<=LPAREN)||(LA167_0>=PLUS && LA167_0<=QUESTION)||(LA167_0>=STRING_LITERAL && LA167_0<=QUOTED_STRING_LITERAL)||LA167_0==MINUS||LA167_0==LCURLY||LA167_0==NUM_INT||(LA167_0>=TICKED_STRING_LITERAL && LA167_0<=NUM_FLOAT)) ) {
                    	        alt167=1;
                    	    }
                    	    else if ( ((LA167_0>=ALL && LA167_0<=SOME)) ) {
                    	        alt167=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 167, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt167) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6986);
                    	            concatenationExpr414=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr414.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt164=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt164=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt164=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt164=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 164, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt164) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression7003); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression7009); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression7015); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt166=2;
                    	            int LA166_0 = input.LA(1);
                    	            if ( (LA166_0==LPAREN) ) {
                    	                int LA166_1 = input.LA(2);
                    	                if ( (LA166_1==SELECT) ) {
                    	                    alt166=2;
                    	                }
                    	                else if ( (LA166_1==WINDOW||LA166_1==ESCAPE||(LA166_1>=NOT_EXPR && LA166_1<=EVERY_EXPR)||(LA166_1>=SUM && LA166_1<=COUNT)||LA166_1==CASE||LA166_1==OUTER||(LA166_1>=JOIN && LA166_1<=FULL)||(LA166_1>=EVENTS && LA166_1<=LAST)||(LA166_1>=UNIDIRECTIONAL && LA166_1<=CURRENT_TIMESTAMP)||LA166_1==SNAPSHOT||(LA166_1>=VARIABLE && LA166_1<=INDEX)||(LA166_1>=BOOLEAN_TRUE && LA166_1<=VALUE_NULL)||(LA166_1>=DEFINE && LA166_1<=MATCHES)||LA166_1==WHILE||(LA166_1>=MERGE && LA166_1<=MATCHED)||LA166_1==NUM_DOUBLE||(LA166_1>=IDENT && LA166_1<=RPAREN)||(LA166_1>=PLUS && LA166_1<=QUESTION)||(LA166_1>=STRING_LITERAL && LA166_1<=QUOTED_STRING_LITERAL)||LA166_1==MINUS||LA166_1==LCURLY||LA166_1==NUM_INT||(LA166_1>=TICKED_STRING_LITERAL && LA166_1<=NUM_FLOAT)) ) {
                    	                    alt166=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 166, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 166, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt166) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN415=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7021); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN415);
                    	                    int alt165=2;
                    	                    int LA165_0 = input.LA(1);
                    	                    if ( (LA165_0==WINDOW||LA165_0==ESCAPE||(LA165_0>=NOT_EXPR && LA165_0<=EVERY_EXPR)||(LA165_0>=SUM && LA165_0<=COUNT)||LA165_0==CASE||LA165_0==OUTER||(LA165_0>=JOIN && LA165_0<=FULL)||(LA165_0>=EVENTS && LA165_0<=LAST)||(LA165_0>=UNIDIRECTIONAL && LA165_0<=CURRENT_TIMESTAMP)||LA165_0==SNAPSHOT||(LA165_0>=VARIABLE && LA165_0<=INDEX)||(LA165_0>=BOOLEAN_TRUE && LA165_0<=VALUE_NULL)||(LA165_0>=DEFINE && LA165_0<=MATCHES)||LA165_0==WHILE||(LA165_0>=MERGE && LA165_0<=MATCHED)||LA165_0==NUM_DOUBLE||(LA165_0>=IDENT && LA165_0<=LPAREN)||(LA165_0>=PLUS && LA165_0<=QUESTION)||(LA165_0>=STRING_LITERAL && LA165_0<=QUOTED_STRING_LITERAL)||LA165_0==MINUS||LA165_0==LCURLY||LA165_0==NUM_INT||(LA165_0>=TICKED_STRING_LITERAL && LA165_0<=NUM_FLOAT)) ) {
                    	                        alt165=1;
                    	                    }
                    	                    switch (alt165) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression7023);
                    	                            expressionList416=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList416.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN417=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7026); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN417);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7031);
                    	                    subSelectGroupExpression418=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression418.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop168;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt169=2;
                    int LA169_0 = input.LA(1);
                    if ( (LA169_0==NOT_EXPR) ) {
                        alt169=1;
                    }
                    switch (alt169) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7127); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt175=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA175_1 = input.LA(2);
                        if ( (LA175_1==LPAREN) ) {
                            int LA175_5 = input.LA(3);
                            if ( (LA175_5==SELECT) ) {
                                alt175=2;
                            }
                            else if ( (LA175_5==WINDOW||LA175_5==ESCAPE||(LA175_5>=NOT_EXPR && LA175_5<=EVERY_EXPR)||(LA175_5>=SUM && LA175_5<=COUNT)||LA175_5==CASE||LA175_5==OUTER||(LA175_5>=JOIN && LA175_5<=FULL)||(LA175_5>=EVENTS && LA175_5<=LAST)||(LA175_5>=UNIDIRECTIONAL && LA175_5<=CURRENT_TIMESTAMP)||LA175_5==SNAPSHOT||(LA175_5>=VARIABLE && LA175_5<=INDEX)||(LA175_5>=BOOLEAN_TRUE && LA175_5<=VALUE_NULL)||(LA175_5>=DEFINE && LA175_5<=MATCHES)||LA175_5==WHILE||(LA175_5>=MERGE && LA175_5<=MATCHED)||LA175_5==NUM_DOUBLE||(LA175_5>=IDENT && LA175_5<=LPAREN)||(LA175_5>=PLUS && LA175_5<=QUESTION)||(LA175_5>=STRING_LITERAL && LA175_5<=QUOTED_STRING_LITERAL)||LA175_5==MINUS||LA175_5==LCURLY||LA175_5==NUM_INT||(LA175_5>=TICKED_STRING_LITERAL && LA175_5<=NUM_FLOAT)) ) {
                                alt175=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 175, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA175_1==LBRACK) ) {
                            alt175=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 175, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt175=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt175=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt175=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 175, 0, input);
                        throw nvae;
                    }
                    switch (alt175) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7154); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt170=2;
                            int LA170_0 = input.LA(1);
                            if ( (LA170_0==LPAREN) ) {
                                alt170=1;
                            }
                            else if ( (LA170_0==LBRACK) ) {
                                alt170=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 170, 0, input);
                                throw nvae;
                            }
                            switch (alt170) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7166); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7172); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7175);
                            expression419=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression419.getTree());
                            int alt172=2;
                            int LA172_0 = input.LA(1);
                            if ( (LA172_0==COLON) ) {
                                alt172=1;
                            }
                            else if ( (LA172_0==COMMA||LA172_0==RPAREN||LA172_0==RBRACK) ) {
                                alt172=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 172, 0, input);
                                throw nvae;
                            }
                            switch (alt172) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7197); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7200);
                                    expression420=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression420.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop171:
                                    do {
                                        int alt171=2;
                                        int LA171_0 = input.LA(1);
                                        if ( (LA171_0==COMMA) ) {
                                            alt171=1;
                                        }
                                        switch (alt171) {
                                    	case 1 :
                                    	    {
                                    	    COMMA421=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7226); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA421);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7228);
                                    	    expression422=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression422.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop171;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt173=2;
                            int LA173_0 = input.LA(1);
                            if ( (LA173_0==RPAREN) ) {
                                alt173=1;
                            }
                            else if ( (LA173_0==RBRACK) ) {
                                alt173=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 173, 0, input);
                                throw nvae;
                            }
                            switch (alt173) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7254); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7260); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET423=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7383); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET423);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7385);
                            inSubSelectQuery424=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery424.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN425=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7431); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN425);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7433);
                            betweenList426=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList426.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE427=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7483); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE427);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7485);
                            concatenationExpr428=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr428.getTree());
                            int alt174=2;
                            int LA174_0 = input.LA(1);
                            if ( (LA174_0==ESCAPE) ) {
                                alt174=1;
                            }
                            switch (alt174) {
                                case 1 :
                                    {
                                    ESCAPE429=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7488); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE429);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7490);
                                    stringconstant430=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant430.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP431=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7542); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP431);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7544);
                            concatenationExpr432=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr432.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr433 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7606);
            subQueryExpr433=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr433.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR436=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression434 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression435 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression437 = null;
        CommonTree c_tree=null;
        CommonTree LOR436_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7631);
            additiveExpression434=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression434.getTree());
            int alt178=2;
            int LA178_0 = input.LA(1);
            if ( (LA178_0==LOR) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7637); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7639);
                    additiveExpression435=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression435.getTree());
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);
                        if ( (LA177_0==LOR) ) {
                            alt177=1;
                        }
                        switch (alt177) {
                    	case 1 :
                    	    {
                    	    LOR436=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7643); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR436);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7645);
                    	    additiveExpression437=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression437.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop177;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS439=null;
        Token MINUS440=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression438 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression441 = null;
        CommonTree PLUS439_tree=null;
        CommonTree MINUS440_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7686);
            multiplyExpression438=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression438.getTree());
            loop180:
            do {
                int alt180=2;
                int LA180_0 = input.LA(1);
                if ( (LA180_0==PLUS||LA180_0==MINUS) ) {
                    alt180=1;
                }
                switch (alt180) {
            	case 1 :
            	    {
            	    int alt179=2;
            	    int LA179_0 = input.LA(1);
            	    if ( (LA179_0==PLUS) ) {
            	        alt179=1;
            	    }
            	    else if ( (LA179_0==MINUS) ) {
            	        alt179=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 179, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt179) {
            	        case 1 :
            	            {
            	            PLUS439=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7691); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS439_tree = (CommonTree)adaptor.create(PLUS439);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS439_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS440=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7694); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS440_tree = (CommonTree)adaptor.create(MINUS440);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS440_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7698);
            	    multiplyExpression441=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression441.getTree());
            	    }
            	    break;
            	default :
            	    break loop180;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR443=null;
        Token DIV444=null;
        Token MOD445=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression442 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression446 = null;
        CommonTree STAR443_tree=null;
        CommonTree DIV444_tree=null;
        CommonTree MOD445_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7712);
            unaryExpression442=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression442.getTree());
            loop182:
            do {
                int alt182=2;
                int LA182_0 = input.LA(1);
                if ( (LA182_0==STAR||(LA182_0>=DIV && LA182_0<=MOD)) ) {
                    alt182=1;
                }
                switch (alt182) {
            	case 1 :
            	    {
            	    int alt181=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt181=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt181=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt181=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 181, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt181) {
            	        case 1 :
            	            {
            	            STAR443=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7717); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR443_tree = (CommonTree)adaptor.create(STAR443);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR443_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV444=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7720); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV444_tree = (CommonTree)adaptor.create(DIV444);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV444_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD445=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7723); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD445_tree = (CommonTree)adaptor.create(MOD445);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD445_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7727);
            	    unaryExpression446=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression446.getTree());
            	    }
            	    break;
            	default :
            	    break loop182;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS447=null;
        Token LPAREN451=null;
        Token RPAREN453=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty448 = null;
        EsperEPL2GrammarParser.constant_return constant449 = null;
        EsperEPL2GrammarParser.substitution_return substitution450 = null;
        EsperEPL2GrammarParser.expression_return expression452 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass454 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass455 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction456 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc457 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression458 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression459 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression460 = null;
        CommonTree d_tree=null;
        CommonTree MINUS447_tree=null;
        CommonTree LPAREN451_tree=null;
        CommonTree RPAREN453_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt185=9;
            alt185 = dfa185.predict(input);
            switch (alt185) {
                case 1 :
                    {
                    MINUS447=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7742); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS447);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7744);
                    eventProperty448=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty448.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression7757);
                    constant449=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant449.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression7762);
                    substitution450=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution450.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN451=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN451);
                    pushFollow(FOLLOW_expression_in_unaryExpression7769);
                    expression452=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression452.getTree());
                    RPAREN453=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN453);
                    int alt184=2;
                    int LA184_0 = input.LA(1);
                    if ( (LA184_0==DOT) ) {
                        alt184=1;
                    }
                    switch (alt184) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7776); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7778);
                            libFunctionNoClass454=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass454.getTree());
                            loop183:
                            do {
                                int alt183=2;
                                int LA183_0 = input.LA(1);
                                if ( (LA183_0==DOT) ) {
                                    alt183=1;
                                }
                                switch (alt183) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7783); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7785);
                            	    libFunctionNoClass455=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass455.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop183;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7822);
                    eventPropertyOrLibFunction456=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction456.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7834);
                    builtinFunc457=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc457.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7840);
                    arrayExpression458=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression458.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7845);
                    subSelectExpression459=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression459.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7850);
                    existsSubSelectExpression460=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression460.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr461 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7867);
            subQueryExpr461=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr461.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr462 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7889);
            subQueryExpr462=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr462.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS463=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr464 = null;
        CommonTree EXISTS463_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS463=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7911); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS463);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7913);
            subQueryExpr464=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr464.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN465=null;
        Token SELECT466=null;
        Token DISTINCT467=null;
        Token FROM469=null;
        Token WHERE471=null;
        Token RPAREN473=null;
        EsperEPL2GrammarParser.selectionList_return selectionList468 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr470 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause472 = null;
        CommonTree LPAREN465_tree=null;
        CommonTree SELECT466_tree=null;
        CommonTree DISTINCT467_tree=null;
        CommonTree FROM469_tree=null;
        CommonTree WHERE471_tree=null;
        CommonTree RPAREN473_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN465=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7946); if (state.failed) return retval;
            SELECT466=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7952); if (state.failed) return retval;
            int alt186=2;
            int LA186_0 = input.LA(1);
            if ( (LA186_0==DISTINCT) ) {
                alt186=1;
            }
            switch (alt186) {
                case 1 :
                    {
                    DISTINCT467=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7955); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT467_tree = (CommonTree)adaptor.create(DISTINCT467);
                    adaptor.addChild(root_0, DISTINCT467_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr7958);
            selectionList468=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList468.getTree());
            FROM469=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7965); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7968);
            subSelectFilterExpr470=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr470.getTree());
            int alt187=2;
            int LA187_0 = input.LA(1);
            if ( (LA187_0==WHERE) ) {
                alt187=1;
            }
            switch (alt187) {
                case 1 :
                    {
                    WHERE471=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7976); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7979);
                    whereClause472=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause472.getTree());
                    }
                    break;
            }
            RPAREN473=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7988); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT475=null;
        Token DOT477=null;
        Token AS479=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression474 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression476 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression478 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT475_tree=null;
        CommonTree DOT477_tree=null;
        CommonTree AS479_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr8012);
            eventFilterExpression474=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression474.getTree());
            int alt189=2;
            int LA189_0 = input.LA(1);
            if ( (LA189_0==DOT) ) {
                alt189=1;
            }
            switch (alt189) {
                case 1 :
                    {
                    DOT475=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8017); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT475);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8019);
                    viewExpression476=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression476.getTree());
                    loop188:
                    do {
                        int alt188=2;
                        int LA188_0 = input.LA(1);
                        if ( (LA188_0==DOT) ) {
                            alt188=1;
                        }
                        switch (alt188) {
                    	case 1 :
                    	    {
                    	    DOT477=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8022); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT477);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8024);
                    	    viewExpression478=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression478.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop188;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt190=3;
            int LA190_0 = input.LA(1);
            if ( (LA190_0==AS) ) {
                alt190=1;
            }
            else if ( (LA190_0==IDENT) ) {
                alt190=2;
            }
            switch (alt190) {
                case 1 :
                    {
                    AS479=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr8031); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS479);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt191=3;
            int LA191_0 = input.LA(1);
            if ( (LA191_0==RETAINUNION) ) {
                alt191=1;
            }
            else if ( (LA191_0==RETAININTERSECTION) ) {
                alt191=2;
            }
            switch (alt191) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr8048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8052); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY480=null;
        Token COMMA482=null;
        Token RCURLY484=null;
        EsperEPL2GrammarParser.expression_return expression481 = null;
        EsperEPL2GrammarParser.expression_return expression483 = null;
        CommonTree LCURLY480_tree=null;
        CommonTree COMMA482_tree=null;
        CommonTree RCURLY484_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            LCURLY480=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression8092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY480);
            int alt193=2;
            int LA193_0 = input.LA(1);
            if ( (LA193_0==WINDOW||LA193_0==ESCAPE||(LA193_0>=NOT_EXPR && LA193_0<=EVERY_EXPR)||(LA193_0>=SUM && LA193_0<=COUNT)||LA193_0==CASE||LA193_0==OUTER||(LA193_0>=JOIN && LA193_0<=FULL)||(LA193_0>=EVENTS && LA193_0<=LAST)||(LA193_0>=UNIDIRECTIONAL && LA193_0<=CURRENT_TIMESTAMP)||LA193_0==SNAPSHOT||(LA193_0>=VARIABLE && LA193_0<=INDEX)||(LA193_0>=BOOLEAN_TRUE && LA193_0<=VALUE_NULL)||(LA193_0>=DEFINE && LA193_0<=MATCHES)||LA193_0==WHILE||(LA193_0>=MERGE && LA193_0<=MATCHED)||LA193_0==NUM_DOUBLE||(LA193_0>=IDENT && LA193_0<=LPAREN)||(LA193_0>=PLUS && LA193_0<=QUESTION)||(LA193_0>=STRING_LITERAL && LA193_0<=QUOTED_STRING_LITERAL)||LA193_0==MINUS||LA193_0==LCURLY||LA193_0==NUM_INT||(LA193_0>=TICKED_STRING_LITERAL && LA193_0<=NUM_FLOAT)) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression8095);
                    expression481=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression481.getTree());
                    loop192:
                    do {
                        int alt192=2;
                        int LA192_0 = input.LA(1);
                        if ( (LA192_0==COMMA) ) {
                            alt192=1;
                        }
                        switch (alt192) {
                    	case 1 :
                    	    {
                    	    COMMA482=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression8098); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA482);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression8100);
                    	    expression483=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression483.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop192;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY484=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression8107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY484);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SUM485=null;
        Token LPAREN486=null;
        Token ALL487=null;
        Token DISTINCT488=null;
        Token RPAREN490=null;
        Token AVG491=null;
        Token LPAREN492=null;
        Token ALL493=null;
        Token DISTINCT494=null;
        Token RPAREN496=null;
        Token COUNT497=null;
        Token LPAREN498=null;
        Token ALL499=null;
        Token DISTINCT500=null;
        Token STAR502=null;
        Token RPAREN503=null;
        Token MEDIAN504=null;
        Token LPAREN505=null;
        Token ALL506=null;
        Token DISTINCT507=null;
        Token RPAREN509=null;
        Token STDDEV510=null;
        Token LPAREN511=null;
        Token ALL512=null;
        Token DISTINCT513=null;
        Token RPAREN515=null;
        Token AVEDEV516=null;
        Token LPAREN517=null;
        Token ALL518=null;
        Token DISTINCT519=null;
        Token RPAREN521=null;
        Token COALESCE525=null;
        Token LPAREN526=null;
        Token COMMA528=null;
        Token COMMA530=null;
        Token RPAREN532=null;
        Token PREVIOUS533=null;
        Token LPAREN534=null;
        Token COMMA536=null;
        Token RPAREN538=null;
        Token PREVIOUSTAIL539=null;
        Token LPAREN540=null;
        Token COMMA542=null;
        Token RPAREN544=null;
        Token PREVIOUSCOUNT545=null;
        Token LPAREN546=null;
        Token RPAREN548=null;
        Token PREVIOUSWINDOW549=null;
        Token LPAREN550=null;
        Token RPAREN552=null;
        Token PRIOR553=null;
        Token LPAREN554=null;
        Token NUM_INT555=null;
        Token COMMA556=null;
        Token RPAREN558=null;
        Token INSTANCEOF559=null;
        Token LPAREN560=null;
        Token COMMA562=null;
        Token COMMA564=null;
        Token RPAREN566=null;
        Token TYPEOF567=null;
        Token LPAREN568=null;
        Token RPAREN570=null;
        Token CAST571=null;
        Token LPAREN572=null;
        Token COMMA574=null;
        Token AS575=null;
        Token RPAREN577=null;
        Token EXISTS578=null;
        Token LPAREN579=null;
        Token RPAREN581=null;
        Token CURRENT_TIMESTAMP582=null;
        Token LPAREN583=null;
        Token RPAREN584=null;
        EsperEPL2GrammarParser.expression_return expression489 = null;
        EsperEPL2GrammarParser.expression_return expression495 = null;
        EsperEPL2GrammarParser.expression_return expression501 = null;
        EsperEPL2GrammarParser.expression_return expression508 = null;
        EsperEPL2GrammarParser.expression_return expression514 = null;
        EsperEPL2GrammarParser.expression_return expression520 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation522 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation523 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation524 = null;
        EsperEPL2GrammarParser.expression_return expression527 = null;
        EsperEPL2GrammarParser.expression_return expression529 = null;
        EsperEPL2GrammarParser.expression_return expression531 = null;
        EsperEPL2GrammarParser.expression_return expression535 = null;
        EsperEPL2GrammarParser.expression_return expression537 = null;
        EsperEPL2GrammarParser.expression_return expression541 = null;
        EsperEPL2GrammarParser.expression_return expression543 = null;
        EsperEPL2GrammarParser.expression_return expression547 = null;
        EsperEPL2GrammarParser.expression_return expression551 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty557 = null;
        EsperEPL2GrammarParser.expression_return expression561 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier563 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier565 = null;
        EsperEPL2GrammarParser.expression_return expression569 = null;
        EsperEPL2GrammarParser.expression_return expression573 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier576 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty580 = null;
        CommonTree SUM485_tree=null;
        CommonTree LPAREN486_tree=null;
        CommonTree ALL487_tree=null;
        CommonTree DISTINCT488_tree=null;
        CommonTree RPAREN490_tree=null;
        CommonTree AVG491_tree=null;
        CommonTree LPAREN492_tree=null;
        CommonTree ALL493_tree=null;
        CommonTree DISTINCT494_tree=null;
        CommonTree RPAREN496_tree=null;
        CommonTree COUNT497_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree ALL499_tree=null;
        CommonTree DISTINCT500_tree=null;
        CommonTree STAR502_tree=null;
        CommonTree RPAREN503_tree=null;
        CommonTree MEDIAN504_tree=null;
        CommonTree LPAREN505_tree=null;
        CommonTree ALL506_tree=null;
        CommonTree DISTINCT507_tree=null;
        CommonTree RPAREN509_tree=null;
        CommonTree STDDEV510_tree=null;
        CommonTree LPAREN511_tree=null;
        CommonTree ALL512_tree=null;
        CommonTree DISTINCT513_tree=null;
        CommonTree RPAREN515_tree=null;
        CommonTree AVEDEV516_tree=null;
        CommonTree LPAREN517_tree=null;
        CommonTree ALL518_tree=null;
        CommonTree DISTINCT519_tree=null;
        CommonTree RPAREN521_tree=null;
        CommonTree COALESCE525_tree=null;
        CommonTree LPAREN526_tree=null;
        CommonTree COMMA528_tree=null;
        CommonTree COMMA530_tree=null;
        CommonTree RPAREN532_tree=null;
        CommonTree PREVIOUS533_tree=null;
        CommonTree LPAREN534_tree=null;
        CommonTree COMMA536_tree=null;
        CommonTree RPAREN538_tree=null;
        CommonTree PREVIOUSTAIL539_tree=null;
        CommonTree LPAREN540_tree=null;
        CommonTree COMMA542_tree=null;
        CommonTree RPAREN544_tree=null;
        CommonTree PREVIOUSCOUNT545_tree=null;
        CommonTree LPAREN546_tree=null;
        CommonTree RPAREN548_tree=null;
        CommonTree PREVIOUSWINDOW549_tree=null;
        CommonTree LPAREN550_tree=null;
        CommonTree RPAREN552_tree=null;
        CommonTree PRIOR553_tree=null;
        CommonTree LPAREN554_tree=null;
        CommonTree NUM_INT555_tree=null;
        CommonTree COMMA556_tree=null;
        CommonTree RPAREN558_tree=null;
        CommonTree INSTANCEOF559_tree=null;
        CommonTree LPAREN560_tree=null;
        CommonTree COMMA562_tree=null;
        CommonTree COMMA564_tree=null;
        CommonTree RPAREN566_tree=null;
        CommonTree TYPEOF567_tree=null;
        CommonTree LPAREN568_tree=null;
        CommonTree RPAREN570_tree=null;
        CommonTree CAST571_tree=null;
        CommonTree LPAREN572_tree=null;
        CommonTree COMMA574_tree=null;
        CommonTree AS575_tree=null;
        CommonTree RPAREN577_tree=null;
        CommonTree EXISTS578_tree=null;
        CommonTree LPAREN579_tree=null;
        CommonTree RPAREN581_tree=null;
        CommonTree CURRENT_TIMESTAMP582_tree=null;
        CommonTree LPAREN583_tree=null;
        CommonTree RPAREN584_tree=null;
        try {
            int alt207=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt207=1;
                }
                break;
            case AVG:
                {
                alt207=2;
                }
                break;
            case COUNT:
                {
                alt207=3;
                }
                break;
            case MEDIAN:
                {
                alt207=4;
                }
                break;
            case STDDEV:
                {
                alt207=5;
                }
                break;
            case AVEDEV:
                {
                alt207=6;
                }
                break;
            case FIRST:
                {
                alt207=7;
                }
                break;
            case LAST:
                {
                alt207=8;
                }
                break;
            case WINDOW:
                {
                alt207=9;
                }
                break;
            case COALESCE:
                {
                alt207=10;
                }
                break;
            case PREVIOUS:
                {
                alt207=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt207=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt207=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt207=14;
                }
                break;
            case PRIOR:
                {
                alt207=15;
                }
                break;
            case INSTANCEOF:
                {
                alt207=16;
                }
                break;
            case TYPEOF:
                {
                alt207=17;
                }
                break;
            case CAST:
                {
                alt207=18;
                }
                break;
            case EXISTS:
                {
                alt207=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt207=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 207, 0, input);
                throw nvae;
            }
            switch (alt207) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM485=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc8130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM485_tree = (CommonTree)adaptor.create(SUM485);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM485_tree, root_0);
                    }
                    LPAREN486=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8133); if (state.failed) return retval;
                    int alt194=3;
                    int LA194_0 = input.LA(1);
                    if ( (LA194_0==ALL) ) {
                        alt194=1;
                    }
                    else if ( (LA194_0==DISTINCT) ) {
                        alt194=2;
                    }
                    switch (alt194) {
                        case 1 :
                            {
                            ALL487=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8137); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT488=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8142); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT488_tree = (CommonTree)adaptor.create(DISTINCT488);
                            adaptor.addChild(root_0, DISTINCT488_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8146);
                    expression489=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression489.getTree());
                    RPAREN490=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8148); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG491=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc8154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG491_tree = (CommonTree)adaptor.create(AVG491);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG491_tree, root_0);
                    }
                    LPAREN492=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8157); if (state.failed) return retval;
                    int alt195=3;
                    int LA195_0 = input.LA(1);
                    if ( (LA195_0==ALL) ) {
                        alt195=1;
                    }
                    else if ( (LA195_0==DISTINCT) ) {
                        alt195=2;
                    }
                    switch (alt195) {
                        case 1 :
                            {
                            ALL493=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8161); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT494=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8166); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT494_tree = (CommonTree)adaptor.create(DISTINCT494);
                            adaptor.addChild(root_0, DISTINCT494_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8170);
                    expression495=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression495.getTree());
                    RPAREN496=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8172); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT497=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8178); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT497_tree = (CommonTree)adaptor.create(COUNT497);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT497_tree, root_0);
                    }
                    LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8181); if (state.failed) return retval;
                    int alt197=2;
                    int LA197_0 = input.LA(1);
                    if ( (LA197_0==WINDOW||LA197_0==ESCAPE||(LA197_0>=NOT_EXPR && LA197_0<=EVERY_EXPR)||(LA197_0>=SUM && LA197_0<=COUNT)||LA197_0==CASE||LA197_0==OUTER||(LA197_0>=JOIN && LA197_0<=FULL)||(LA197_0>=DISTINCT && LA197_0<=ALL)||(LA197_0>=EVENTS && LA197_0<=LAST)||(LA197_0>=UNIDIRECTIONAL && LA197_0<=CURRENT_TIMESTAMP)||LA197_0==SNAPSHOT||(LA197_0>=VARIABLE && LA197_0<=INDEX)||(LA197_0>=BOOLEAN_TRUE && LA197_0<=VALUE_NULL)||(LA197_0>=DEFINE && LA197_0<=MATCHES)||LA197_0==WHILE||(LA197_0>=MERGE && LA197_0<=MATCHED)||LA197_0==NUM_DOUBLE||(LA197_0>=IDENT && LA197_0<=LPAREN)||(LA197_0>=PLUS && LA197_0<=QUESTION)||(LA197_0>=STRING_LITERAL && LA197_0<=QUOTED_STRING_LITERAL)||LA197_0==MINUS||LA197_0==LCURLY||LA197_0==NUM_INT||(LA197_0>=TICKED_STRING_LITERAL && LA197_0<=NUM_FLOAT)) ) {
                        alt197=1;
                    }
                    else if ( (LA197_0==STAR) ) {
                        alt197=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 197, 0, input);
                        throw nvae;
                    }
                    switch (alt197) {
                        case 1 :
                            {
                            {
                            int alt196=3;
                            int LA196_0 = input.LA(1);
                            if ( (LA196_0==ALL) ) {
                                alt196=1;
                            }
                            else if ( (LA196_0==DISTINCT) ) {
                                alt196=2;
                            }
                            switch (alt196) {
                                case 1 :
                                    {
                                    ALL499=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8193); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT500=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8198); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT500_tree = (CommonTree)adaptor.create(DISTINCT500);
                                    adaptor.addChild(root_0, DISTINCT500_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8202);
                            expression501=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression501.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR502=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8213); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    RPAREN503=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8224); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN504=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8230); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN504_tree = (CommonTree)adaptor.create(MEDIAN504);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN504_tree, root_0);
                    }
                    LPAREN505=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8233); if (state.failed) return retval;
                    int alt198=3;
                    int LA198_0 = input.LA(1);
                    if ( (LA198_0==ALL) ) {
                        alt198=1;
                    }
                    else if ( (LA198_0==DISTINCT) ) {
                        alt198=2;
                    }
                    switch (alt198) {
                        case 1 :
                            {
                            ALL506=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8237); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT507=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8242); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT507_tree = (CommonTree)adaptor.create(DISTINCT507);
                            adaptor.addChild(root_0, DISTINCT507_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8246);
                    expression508=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression508.getTree());
                    RPAREN509=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8248); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV510=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8254); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV510_tree = (CommonTree)adaptor.create(STDDEV510);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV510_tree, root_0);
                    }
                    LPAREN511=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8257); if (state.failed) return retval;
                    int alt199=3;
                    int LA199_0 = input.LA(1);
                    if ( (LA199_0==ALL) ) {
                        alt199=1;
                    }
                    else if ( (LA199_0==DISTINCT) ) {
                        alt199=2;
                    }
                    switch (alt199) {
                        case 1 :
                            {
                            ALL512=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8261); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT513=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8266); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT513_tree = (CommonTree)adaptor.create(DISTINCT513);
                            adaptor.addChild(root_0, DISTINCT513_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8270);
                    expression514=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression514.getTree());
                    RPAREN515=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8272); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV516=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8278); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV516_tree = (CommonTree)adaptor.create(AVEDEV516);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV516_tree, root_0);
                    }
                    LPAREN517=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8281); if (state.failed) return retval;
                    int alt200=3;
                    int LA200_0 = input.LA(1);
                    if ( (LA200_0==ALL) ) {
                        alt200=1;
                    }
                    else if ( (LA200_0==DISTINCT) ) {
                        alt200=2;
                    }
                    switch (alt200) {
                        case 1 :
                            {
                            ALL518=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8285); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT519=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8290); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT519_tree = (CommonTree)adaptor.create(DISTINCT519);
                            adaptor.addChild(root_0, DISTINCT519_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8294);
                    expression520=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression520.getTree());
                    RPAREN521=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8296); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8302);
                    firstAggregation522=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation522.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8307);
                    lastAggregation523=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation523.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8312);
                    windowAggregation524=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation524.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE525=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE525_tree = (CommonTree)adaptor.create(COALESCE525);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE525_tree, root_0);
                    }
                    LPAREN526=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8320); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8323);
                    expression527=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression527.getTree());
                    COMMA528=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8325); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8328);
                    expression529=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression529.getTree());
                    loop201:
                    do {
                        int alt201=2;
                        int LA201_0 = input.LA(1);
                        if ( (LA201_0==COMMA) ) {
                            alt201=1;
                        }
                        switch (alt201) {
                    	case 1 :
                    	    {
                    	    COMMA530=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8331); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8334);
                    	    expression531=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression531.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop201;
                        }
                    } while (true);
                    RPAREN532=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8338); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS533=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8344); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS533_tree = (CommonTree)adaptor.create(PREVIOUS533);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS533_tree, root_0);
                    }
                    LPAREN534=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8347); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8350);
                    expression535=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression535.getTree());
                    int alt202=2;
                    int LA202_0 = input.LA(1);
                    if ( (LA202_0==COMMA) ) {
                        alt202=1;
                    }
                    switch (alt202) {
                        case 1 :
                            {
                            COMMA536=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8353); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8356);
                            expression537=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression537.getTree());
                            }
                            break;
                    }
                    RPAREN538=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8360); if (state.failed) return retval;
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL539=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8366); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL539_tree = (CommonTree)adaptor.create(PREVIOUSTAIL539);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSTAIL539_tree, root_0);
                    }
                    LPAREN540=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8369); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8372);
                    expression541=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression541.getTree());
                    int alt203=2;
                    int LA203_0 = input.LA(1);
                    if ( (LA203_0==COMMA) ) {
                        alt203=1;
                    }
                    switch (alt203) {
                        case 1 :
                            {
                            COMMA542=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8375); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8378);
                            expression543=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression543.getTree());
                            }
                            break;
                    }
                    RPAREN544=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8382); if (state.failed) return retval;
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT545=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8388); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT545_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT545);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT545_tree, root_0);
                    }
                    LPAREN546=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8391); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8394);
                    expression547=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression547.getTree());
                    RPAREN548=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8396); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSWINDOW549=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8402); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSWINDOW549_tree = (CommonTree)adaptor.create(PREVIOUSWINDOW549);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSWINDOW549_tree, root_0);
                    }
                    LPAREN550=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8405); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8408);
                    expression551=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression551.getTree());
                    RPAREN552=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8410); if (state.failed) return retval;
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR553=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc8416); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR553_tree = (CommonTree)adaptor.create(PRIOR553);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR553_tree, root_0);
                    }
                    LPAREN554=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8419); if (state.failed) return retval;
                    NUM_INT555=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc8422); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT555_tree = (CommonTree)adaptor.create(NUM_INT555);
                    adaptor.addChild(root_0, NUM_INT555_tree);
                    }
                    COMMA556=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8424); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8427);
                    eventProperty557=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty557.getTree());
                    RPAREN558=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8429); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF559=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc8439); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF559_tree = (CommonTree)adaptor.create(INSTANCEOF559);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF559_tree, root_0);
                    }
                    LPAREN560=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8442); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8445);
                    expression561=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression561.getTree());
                    COMMA562=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8447); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8450);
                    classIdentifier563=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier563.getTree());
                    loop204:
                    do {
                        int alt204=2;
                        int LA204_0 = input.LA(1);
                        if ( (LA204_0==COMMA) ) {
                            alt204=1;
                        }
                        switch (alt204) {
                    	case 1 :
                    	    {
                    	    COMMA564=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8453); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8456);
                    	    classIdentifier565=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier565.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop204;
                        }
                    } while (true);
                    RPAREN566=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8460); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF567=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc8466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF567_tree = (CommonTree)adaptor.create(TYPEOF567);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF567_tree, root_0);
                    }
                    LPAREN568=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8469); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8472);
                    expression569=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression569.getTree());
                    RPAREN570=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8474); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST571=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST571_tree = (CommonTree)adaptor.create(CAST571);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST571_tree, root_0);
                    }
                    LPAREN572=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8483); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8486);
                    expression573=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression573.getTree());
                    int alt205=2;
                    int LA205_0 = input.LA(1);
                    if ( (LA205_0==COMMA) ) {
                        alt205=1;
                    }
                    else if ( (LA205_0==AS) ) {
                        alt205=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 205, 0, input);
                        throw nvae;
                    }
                    switch (alt205) {
                        case 1 :
                            {
                            COMMA574=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8489); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            AS575=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8494); if (state.failed) return retval;
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8498);
                    classIdentifier576=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier576.getTree());
                    RPAREN577=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8500); if (state.failed) return retval;
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS578=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8506); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS578_tree = (CommonTree)adaptor.create(EXISTS578);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS578_tree, root_0);
                    }
                    LPAREN579=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8509); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8512);
                    eventProperty580=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty580.getTree());
                    RPAREN581=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8514); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CURRENT_TIMESTAMP582=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8520); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP582_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP582);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP582_tree, root_0);
                    }
                    int alt206=2;
                    int LA206_0 = input.LA(1);
                    if ( (LA206_0==LPAREN) ) {
                        alt206=1;
                    }
                    switch (alt206) {
                        case 1 :
                            {
                            LPAREN583=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8524); if (state.failed) return retval;
                            RPAREN584=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8527); if (state.failed) return retval;
                            }
                            break;
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FIRST585=null;
        Token LPAREN586=null;
        Token COMMA588=null;
        Token RPAREN590=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr587 = null;
        EsperEPL2GrammarParser.expression_return expression589 = null;
        CommonTree FIRST585_tree=null;
        CommonTree LPAREN586_tree=null;
        CommonTree COMMA588_tree=null;
        CommonTree RPAREN590_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            FIRST585=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST585);
            LPAREN586=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN586);
            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation8546);
            accessAggExpr587=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr587.getTree());
            int alt208=2;
            int LA208_0 = input.LA(1);
            if ( (LA208_0==COMMA) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    {
                    COMMA588=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8549); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA588);
                    pushFollow(FOLLOW_expression_in_firstAggregation8551);
                    expression589=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression589.getTree());
                    }
                    break;
            }
            RPAREN590=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN590);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST591=null;
        Token LPAREN592=null;
        Token COMMA594=null;
        Token RPAREN596=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr593 = null;
        EsperEPL2GrammarParser.expression_return expression595 = null;
        CommonTree LAST591_tree=null;
        CommonTree LPAREN592_tree=null;
        CommonTree COMMA594_tree=null;
        CommonTree RPAREN596_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            LAST591=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8580); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST591);
            LPAREN592=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8582); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN592);
            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8584);
            accessAggExpr593=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr593.getTree());
            int alt209=2;
            int LA209_0 = input.LA(1);
            if ( (LA209_0==COMMA) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    {
                    COMMA594=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA594);
                    pushFollow(FOLLOW_expression_in_lastAggregation8589);
                    expression595=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression595.getTree());
                    }
                    break;
            }
            RPAREN596=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8593); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN596);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WINDOW597=null;
        Token LPAREN598=null;
        Token RPAREN600=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr599 = null;
        CommonTree WINDOW597_tree=null;
        CommonTree LPAREN598_tree=null;
        CommonTree RPAREN600_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            WINDOW597=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW597);
            LPAREN598=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8621); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN598);
            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8623);
            accessAggExpr599=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr599.getTree());
            RPAREN600=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8625); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN600);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector601 = null;
        EsperEPL2GrammarParser.expression_return expression602 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt210=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt210=1;
                }
                break;
            case IDENT:
                {
                int LA210_2 = input.LA(2);
                if ( (LA210_2==DOT) ) {
                    int LA210_69 = input.LA(3);
                    if ( (LA210_69==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt210=2;
                    }
                    else if ( (LA210_69==WINDOW||LA210_69==ESCAPE||LA210_69==EVERY_EXPR||(LA210_69>=SUM && LA210_69<=COUNT)||LA210_69==OUTER||(LA210_69>=JOIN && LA210_69<=FULL)||(LA210_69>=EVENTS && LA210_69<=LAST)||(LA210_69>=UNIDIRECTIONAL && LA210_69<=PREVIOUSTAIL)||LA210_69==PRIOR||(LA210_69>=WEEKDAY && LA210_69<=CAST)||LA210_69==SNAPSHOT||(LA210_69>=VARIABLE && LA210_69<=INDEX)||(LA210_69>=DEFINE && LA210_69<=MATCHES)||LA210_69==WHILE||(LA210_69>=MERGE && LA210_69<=MATCHED)||LA210_69==IDENT||LA210_69==TICKED_STRING_LITERAL) ) {
                        alt210=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 210, 69, input);
                        throw nvae;
                    }
                }
                else if ( ((LA210_2>=IN_SET && LA210_2<=REGEXP)||(LA210_2>=OR_EXPR && LA210_2<=NOT_EXPR)||LA210_2==IS||LA210_2==COMMA||(LA210_2>=LPAREN && LA210_2<=EQUALS)||LA210_2==LBRACK||(LA210_2>=STAR && LA210_2<=QUESTION)||(LA210_2>=BAND && LA210_2<=MOD)||LA210_2==ESCAPECHAR) ) {
                    alt210=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 210, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt210=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 210, 0, input);
                throw nvae;
            }
            switch (alt210) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8671);
                    propertyStreamSelector601=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector601.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expression_in_accessAggExpr8676);
                    expression602=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression602.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MAX603=null;
        Token MIN604=null;
        Token LPAREN605=null;
        Token COMMA607=null;
        Token COMMA609=null;
        Token RPAREN611=null;
        EsperEPL2GrammarParser.expression_return expression606 = null;
        EsperEPL2GrammarParser.expression_return expression608 = null;
        EsperEPL2GrammarParser.expression_return expression610 = null;
        CommonTree MAX603_tree=null;
        CommonTree MIN604_tree=null;
        CommonTree LPAREN605_tree=null;
        CommonTree COMMA607_tree=null;
        CommonTree COMMA609_tree=null;
        CommonTree RPAREN611_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt211=2;
            int LA211_0 = input.LA(1);
            if ( (LA211_0==MAX) ) {
                alt211=1;
            }
            else if ( (LA211_0==MIN) ) {
                alt211=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 211, 0, input);
                throw nvae;
            }
            switch (alt211) {
                case 1 :
                    {
                    MAX603=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8689); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX603_tree = (CommonTree)adaptor.create(MAX603);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX603_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    MIN604=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN604_tree = (CommonTree)adaptor.create(MIN604);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN604_tree, root_0);
                    }
                    }
                    break;
            }
            LPAREN605=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8698); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8701);
            expression606=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression606.getTree());
            int alt213=2;
            int LA213_0 = input.LA(1);
            if ( (LA213_0==COMMA) ) {
                alt213=1;
            }
            switch (alt213) {
                case 1 :
                    {
                    COMMA607=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8704); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8707);
                    expression608=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression608.getTree());
                    loop212:
                    do {
                        int alt212=2;
                        int LA212_0 = input.LA(1);
                        if ( (LA212_0==COMMA) ) {
                            alt212=1;
                        }
                        switch (alt212) {
                    	case 1 :
                    	    {
                    	    COMMA609=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8710); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8713);
                    	    expression610=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression610.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop212;
                        }
                    } while (true);
                    }
                    break;
            }
            RPAREN611=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8720); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty612 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction613 = null;
        try {
            int alt214=2;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==IDENT) ) {
                int LA214_1 = input.LA(2);
                if ( (LA214_1==DOT) ) {
                    int LA214_48 = input.LA(3);
                    if ( (LA214_48==IDENT) ) {
                        int LA214_288 = input.LA(4);
                        if ( (LA214_288==DOT) ) {
                            int LA214_662 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 662, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_288==LPAREN) ) {
                            int LA214_663 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 663, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_288==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_288==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 288, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA214_48==TICKED_STRING_LITERAL) ) {
                        int LA214_289 = input.LA(4);
                        if ( (LA214_289==LPAREN) ) {
                            int LA214_722 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 722, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_289==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_289==DOT) ) {
                            int LA214_781 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 781, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 289, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA214_48==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==MAX) ) {
                        int LA214_296 = input.LA(4);
                        if ( (LA214_296==LPAREN) ) {
                            int LA214_782 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 782, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_296==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_296==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 296, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA214_48==MIN) ) {
                        int LA214_297 = input.LA(4);
                        if ( (LA214_297==LPAREN) ) {
                            int LA214_842 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 842, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_297==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_297==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 297, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA214_48==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_48==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 214, 48, input);
                        throw nvae;
                    }
                }
                else if ( (LA214_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt214=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA214_344 = input.LA(4);
                        if ( ((LA214_344>=IN_SET && LA214_344<=REGEXP)||(LA214_344>=OR_EXPR && LA214_344<=NOT_EXPR)||LA214_344==IS||LA214_344==COMMA||LA214_344==EQUALS||(LA214_344>=STAR && LA214_344<=PLUS)||(LA214_344>=BAND && LA214_344<=MOD)) ) {
                            alt214=2;
                        }
                        else if ( (LA214_344==RPAREN) ) {
                            int LA214_922 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 922, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 344, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA214_345 = input.LA(4);
                        if ( (LA214_345==RPAREN) ) {
                            int LA214_928 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 928, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA214_345>=IN_SET && LA214_345<=REGEXP)||(LA214_345>=OR_EXPR && LA214_345<=NOT_EXPR)||LA214_345==IS||LA214_345==COMMA||LA214_345==EQUALS||(LA214_345>=STAR && LA214_345<=PLUS)||(LA214_345>=BAND && LA214_345<=MOD)) ) {
                            alt214=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 345, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 214, 49, input);
                        throw nvae;
                    }
                }
                else if ( (LA214_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA214_0==TICKED_STRING_LITERAL) ) {
                int LA214_2 = input.LA(2);
                if ( (LA214_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt214=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA214_414 = input.LA(4);
                        if ( ((LA214_414>=IN_SET && LA214_414<=REGEXP)||(LA214_414>=OR_EXPR && LA214_414<=NOT_EXPR)||LA214_414==IS||LA214_414==COMMA||LA214_414==EQUALS||(LA214_414>=STAR && LA214_414<=PLUS)||(LA214_414>=BAND && LA214_414<=MOD)) ) {
                            alt214=2;
                        }
                        else if ( (LA214_414==RPAREN) ) {
                            int LA214_974 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 974, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 414, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA214_415 = input.LA(4);
                        if ( (LA214_415==RPAREN) ) {
                            int LA214_980 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 980, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA214_415>=IN_SET && LA214_415<=REGEXP)||(LA214_415>=OR_EXPR && LA214_415<=NOT_EXPR)||LA214_415==IS||LA214_415==COMMA||LA214_415==EQUALS||(LA214_415>=STAR && LA214_415<=PLUS)||(LA214_415>=BAND && LA214_415<=MOD)) ) {
                            alt214=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 415, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 214, 108, input);
                        throw nvae;
                    }
                }
                else if ( (LA214_2==DOT) ) {
                    int LA214_109 = input.LA(3);
                    if ( (LA214_109==IDENT) ) {
                        int LA214_475 = input.LA(4);
                        if ( (LA214_475==DOT) ) {
                            int LA214_1006 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1006, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_475==LPAREN) ) {
                            int LA214_1007 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1007, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_475==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_475==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 475, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA214_109==TICKED_STRING_LITERAL) ) {
                        int LA214_476 = input.LA(4);
                        if ( (LA214_476==LPAREN) ) {
                            int LA214_1066 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1066, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_476==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_476==DOT) ) {
                            int LA214_1125 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1125, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 476, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA214_109==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==MAX) ) {
                        int LA214_483 = input.LA(4);
                        if ( (LA214_483==LPAREN) ) {
                            int LA214_1126 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1126, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_483==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_483==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 483, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA214_109==MIN) ) {
                        int LA214_484 = input.LA(4);
                        if ( (LA214_484==LPAREN) ) {
                            int LA214_1186 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1186, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA214_484==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else if ( (LA214_484==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt214=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 484, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA214_109==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else if ( (LA214_109==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt214=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 214, 109, input);
                        throw nvae;
                    }
                }
                else if ( (LA214_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA214_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==MAX) ) {
                int LA214_9 = input.LA(2);
                if ( (LA214_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt214=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA214_531 = input.LA(4);
                        if ( ((LA214_531>=IN_SET && LA214_531<=REGEXP)||(LA214_531>=OR_EXPR && LA214_531<=NOT_EXPR)||LA214_531==IS||LA214_531==COMMA||LA214_531==EQUALS||(LA214_531>=STAR && LA214_531<=PLUS)||(LA214_531>=BAND && LA214_531<=MOD)) ) {
                            alt214=2;
                        }
                        else if ( (LA214_531==RPAREN) ) {
                            int LA214_1266 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1266, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 531, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA214_532 = input.LA(4);
                        if ( (LA214_532==RPAREN) ) {
                            int LA214_1272 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1272, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA214_532>=IN_SET && LA214_532<=REGEXP)||(LA214_532>=OR_EXPR && LA214_532<=NOT_EXPR)||LA214_532==IS||LA214_532==COMMA||LA214_532==EQUALS||(LA214_532>=STAR && LA214_532<=PLUS)||(LA214_532>=BAND && LA214_532<=MOD)) ) {
                            alt214=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 532, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 214, 168, input);
                        throw nvae;
                    }
                }
                else if ( (LA214_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA214_0==MIN) ) {
                int LA214_10 = input.LA(2);
                if ( (LA214_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt214=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA214_601 = input.LA(4);
                        if ( ((LA214_601>=IN_SET && LA214_601<=REGEXP)||(LA214_601>=OR_EXPR && LA214_601<=NOT_EXPR)||LA214_601==IS||LA214_601==COMMA||LA214_601==EQUALS||(LA214_601>=STAR && LA214_601<=PLUS)||(LA214_601>=BAND && LA214_601<=MOD)) ) {
                            alt214=2;
                        }
                        else if ( (LA214_601==RPAREN) ) {
                            int LA214_1318 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1318, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 601, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA214_602 = input.LA(4);
                        if ( (LA214_602==RPAREN) ) {
                            int LA214_1324 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt214=1;
                            }
                            else if ( (true) ) {
                                alt214=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 214, 1324, input);
                                throw nvae;
                            }
                        }
                        else if ( ((LA214_602>=IN_SET && LA214_602<=REGEXP)||(LA214_602>=OR_EXPR && LA214_602<=NOT_EXPR)||LA214_602==IS||LA214_602==COMMA||LA214_602==EQUALS||(LA214_602>=STAR && LA214_602<=PLUS)||(LA214_602>=BAND && LA214_602<=MOD)) ) {
                            alt214=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 214, 602, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 214, 228, input);
                        throw nvae;
                    }
                }
                else if ( (LA214_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else if ( (LA214_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt214=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 214, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA214_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else if ( (LA214_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt214=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);
                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8739);
                    eventProperty612=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty612.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8744);
                    libFunction613=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction613.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT615=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass614 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass616 = null;
        CommonTree DOT615_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction8756);
            libFunctionWithClass614=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass614.getTree());
            loop215:
            do {
                int alt215=2;
                int LA215_0 = input.LA(1);
                if ( (LA215_0==DOT) ) {
                    alt215=1;
                }
                switch (alt215) {
            	case 1 :
            	    {
            	    DOT615=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8759); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT615);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction8761);
            	    libFunctionNoClass616=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass616.getTree());
            	    }
            	    break;
            	default :
            	    break loop215;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT618=null;
        Token LPAREN620=null;
        Token RPAREN622=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy617 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent619 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs621 = null;
        CommonTree DOT618_tree=null;
        CommonTree LPAREN620_tree=null;
        CommonTree RPAREN622_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt216=2;
            int LA216_0 = input.LA(1);
            if ( (LA216_0==IDENT) ) {
                int LA216_1 = input.LA(2);
                if ( (LA216_1==DOT) ) {
                    alt216=1;
                }
            }
            else if ( (LA216_0==TICKED_STRING_LITERAL) ) {
                int LA216_2 = input.LA(2);
                if ( (LA216_2==DOT) ) {
                    alt216=1;
                }
            }
            switch (alt216) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8791);
                    classIdentifierNonGreedy617=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy617.getTree());
                    DOT618=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass8793); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT618);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass8797);
            funcIdent619=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent619.getTree());
            LPAREN620=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass8799); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN620);
            int alt217=2;
            int LA217_0 = input.LA(1);
            if ( (LA217_0==WINDOW||LA217_0==ESCAPE||(LA217_0>=NOT_EXPR && LA217_0<=EVERY_EXPR)||(LA217_0>=SUM && LA217_0<=COUNT)||LA217_0==CASE||LA217_0==OUTER||(LA217_0>=JOIN && LA217_0<=FULL)||(LA217_0>=DISTINCT && LA217_0<=ALL)||(LA217_0>=EVENTS && LA217_0<=LAST)||(LA217_0>=UNIDIRECTIONAL && LA217_0<=CURRENT_TIMESTAMP)||LA217_0==SNAPSHOT||(LA217_0>=VARIABLE && LA217_0<=INDEX)||(LA217_0>=BOOLEAN_TRUE && LA217_0<=VALUE_NULL)||(LA217_0>=DEFINE && LA217_0<=MATCHES)||LA217_0==WHILE||(LA217_0>=MERGE && LA217_0<=MATCHED)||LA217_0==NUM_DOUBLE||(LA217_0>=IDENT && LA217_0<=LPAREN)||(LA217_0>=PLUS && LA217_0<=QUESTION)||(LA217_0>=STRING_LITERAL && LA217_0<=QUOTED_STRING_LITERAL)||LA217_0==MINUS||LA217_0==LCURLY||LA217_0==NUM_INT||(LA217_0>=TICKED_STRING_LITERAL && LA217_0<=NUM_FLOAT)) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass8802);
                    libFunctionArgs621=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs621.getTree());
                    }
                    break;
            }
            RPAREN622=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass8806); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN622);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN624=null;
        Token RPAREN626=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent623 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs625 = null;
        CommonTree LPAREN624_tree=null;
        CommonTree RPAREN626_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass8835);
            funcIdent623=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent623.getTree());
            LPAREN624=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass8837); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN624);
            int alt218=2;
            int LA218_0 = input.LA(1);
            if ( (LA218_0==WINDOW||LA218_0==ESCAPE||(LA218_0>=NOT_EXPR && LA218_0<=EVERY_EXPR)||(LA218_0>=SUM && LA218_0<=COUNT)||LA218_0==CASE||LA218_0==OUTER||(LA218_0>=JOIN && LA218_0<=FULL)||(LA218_0>=DISTINCT && LA218_0<=ALL)||(LA218_0>=EVENTS && LA218_0<=LAST)||(LA218_0>=UNIDIRECTIONAL && LA218_0<=CURRENT_TIMESTAMP)||LA218_0==SNAPSHOT||(LA218_0>=VARIABLE && LA218_0<=INDEX)||(LA218_0>=BOOLEAN_TRUE && LA218_0<=VALUE_NULL)||(LA218_0>=DEFINE && LA218_0<=MATCHES)||LA218_0==WHILE||(LA218_0>=MERGE && LA218_0<=MATCHED)||LA218_0==NUM_DOUBLE||(LA218_0>=IDENT && LA218_0<=LPAREN)||(LA218_0>=PLUS && LA218_0<=QUESTION)||(LA218_0>=STRING_LITERAL && LA218_0<=QUOTED_STRING_LITERAL)||LA218_0==MINUS||LA218_0==LCURLY||LA218_0==NUM_INT||(LA218_0>=TICKED_STRING_LITERAL && LA218_0<=NUM_FLOAT)) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass8840);
                    libFunctionArgs625=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs625.getTree());
                    }
                    break;
            }
            RPAREN626=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass8844); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN626);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent627 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt219=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt219=1;
                }
                break;
            case MAX:
                {
                alt219=2;
                }
                break;
            case MIN:
                {
                alt219=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);
                throw nvae;
            }
            switch (alt219) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8870);
                    escapableIdent627=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent627.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL628=null;
        Token DISTINCT629=null;
        Token COMMA631=null;
        EsperEPL2GrammarParser.expression_return expression630 = null;
        EsperEPL2GrammarParser.expression_return expression632 = null;
        CommonTree ALL628_tree=null;
        CommonTree DISTINCT629_tree=null;
        CommonTree COMMA631_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt220=3;
            int LA220_0 = input.LA(1);
            if ( (LA220_0==ALL) ) {
                alt220=1;
            }
            else if ( (LA220_0==DISTINCT) ) {
                alt220=2;
            }
            switch (alt220) {
                case 1 :
                    {
                    ALL628=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8907); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT629=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8912); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT629_tree = (CommonTree)adaptor.create(DISTINCT629);
                    adaptor.addChild(root_0, DISTINCT629_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_libFunctionArgs8916);
            expression630=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression630.getTree());
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);
                if ( (LA221_0==COMMA) ) {
                    alt221=1;
                }
                switch (alt221) {
            	case 1 :
            	    {
            	    COMMA631=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8919); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8922);
            	    expression632=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression632.getTree());
            	    }
            	    break;
            	default :
            	    break loop221;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR634=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr633 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr635 = null;
        CommonTree AND_EXPR634_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8936);
            concatenationExpr633=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr633.getTree());
            AND_EXPR634=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8938); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8941);
            concatenationExpr635=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr635.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression636 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression8969);
            followedByExpression636=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression636.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression637 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat638 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8988);
            orExpression637=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression637.getTree());
            loop222:
            do {
                int alt222=2;
                int LA222_0 = input.LA(1);
                if ( ((LA222_0>=FOLLOWED_BY && LA222_0<=FOLLOWMAX_BEGIN)) ) {
                    alt222=1;
                }
                switch (alt222) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression8991);
            	    followedByRepeat638=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat638.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop222;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END640=null;
        EsperEPL2GrammarParser.expression_return expression639 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression641 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END640_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt223=2;
            int LA223_0 = input.LA(1);
            if ( (LA223_0==FOLLOWED_BY) ) {
                alt223=1;
            }
            else if ( (LA223_0==FOLLOWMAX_BEGIN) ) {
                alt223=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 223, 0, input);
                throw nvae;
            }
            switch (alt223) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat9044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat9053);
                    expression639=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression639.getTree());
                    FOLLOWMAX_END640=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat9055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END640);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat9059);
            orExpression641=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression641.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression642 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression643 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression9088);
            andExpression642=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression642.getTree());
            loop224:
            do {
                int alt224=2;
                int LA224_0 = input.LA(1);
                if ( (LA224_0==OR_EXPR) ) {
                    alt224=1;
                }
                switch (alt224) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression9093); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression9095);
            	    andExpression643=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression643.getTree());
            	    }
            	    break;
            	default :
            	    break loop224;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression644 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression645 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression9127);
            matchUntilExpression644=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression644.getTree());
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);
                if ( (LA225_0==AND_EXPR) ) {
                    alt225=1;
                }
                switch (alt225) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression9132); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression9134);
            	    matchUntilExpression645=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression645.getTree());
            	    }
            	    break;
            	default :
            	    break loop225;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression646 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression647 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt226=2;
            int LA226_0 = input.LA(1);
            if ( (LA226_0==LBRACK) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression9169);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9173);
            qualifyExpression646=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression646.getTree());
            int alt227=2;
            int LA227_0 = input.LA(1);
            if ( (LA227_0==UNTIL) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression9178); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9180);
                    qualifyExpression647=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression647.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList648 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix649 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt230=2;
            int LA230_0 = input.LA(1);
            if ( ((LA230_0>=NOT_EXPR && LA230_0<=EVERY_DISTINCT_EXPR)) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    {
                    int alt228=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt228=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt228=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt228=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 228, 0, input);
                        throw nvae;
                    }
                    switch (alt228) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression9245); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression9251); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9257); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression9259);
                            distinctExpressionList648=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList648.getTree());
                            }
                            break;
                    }
                    int alt229=2;
                    int LA229_0 = input.LA(1);
                    if ( (LA229_0==LBRACK) ) {
                        alt229=1;
                    }
                    switch (alt229) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression9265);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression9274);
            guardPostFix649=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix649.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN650=null;
        Token COMMA652=null;
        Token RPAREN654=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom651 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom653 = null;
        CommonTree LPAREN650_tree=null;
        CommonTree COMMA652_tree=null;
        CommonTree RPAREN654_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN650=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList9389); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN650);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9391);
            distinctExpressionAtom651=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom651.getTree());
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);
                if ( (LA231_0==COMMA) ) {
                    alt231=1;
                }
                switch (alt231) {
            	case 1 :
            	    {
            	    COMMA652=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList9394); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA652);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9396);
            	    distinctExpressionAtom653=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom653.getTree());
            	    }
            	    break;
            	default :
            	    break loop231;
                }
            } while (true);
            RPAREN654=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList9400); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN654);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime655 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom9423);
            expressionWithTime655=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime655.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN658=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression656 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression657 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression659 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression660 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN658_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt232=2;
            int LA232_0 = input.LA(1);
            if ( (LA232_0==IDENT||LA232_0==TICKED_STRING_LITERAL) ) {
                alt232=1;
            }
            else if ( (LA232_0==LPAREN) ) {
                alt232=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);
                throw nvae;
            }
            switch (alt232) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix9438);
                    atomicExpression656=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression656.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix9444); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix9446);
                    patternExpression657=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression657.getTree());
                    RPAREN658=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix9448); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN658);
                    }
                    break;
            }
            int alt233=3;
            int LA233_0 = input.LA(1);
            if ( (LA233_0==WHERE) ) {
                alt233=1;
            }
            else if ( (LA233_0==WHILE) ) {
                alt233=2;
            }
            switch (alt233) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix9455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix9457);
                    guardWhereExpression659=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression659.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix9465); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix9467);
                    guardWhileExpression660=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression660.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression661 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression662 = null;
        try {
            int alt234=2;
            int LA234_0 = input.LA(1);
            if ( (LA234_0==IDENT) ) {
                int LA234_1 = input.LA(2);
                if ( (LA234_1==COLON) ) {
                    alt234=1;
                }
                else if ( (LA234_1==EOF||(LA234_1>=OR_EXPR && LA234_1<=AND_EXPR)||LA234_1==WHERE||LA234_1==UNTIL||LA234_1==WHILE||(LA234_1>=LPAREN && LA234_1<=RBRACK)||(LA234_1>=FOLLOWED_BY && LA234_1<=FOLLOWMAX_BEGIN)) ) {
                    alt234=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 234, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA234_0==TICKED_STRING_LITERAL) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);
                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression9529);
                    observerExpression661=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression661.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression9533);
                    patternFilterExpression662=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression662.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON663=null;
        Token LPAREN664=null;
        Token RPAREN666=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList665 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON663_tree=null;
        CommonTree LPAREN664_tree=null;
        CommonTree RPAREN666_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9548); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON663=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression9550); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON663);
            int alt235=2;
            int LA235_0 = input.LA(1);
            if ( (LA235_0==IDENT) ) {
                alt235=1;
            }
            else if ( (LA235_0==AT) ) {
                alt235=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);
                throw nvae;
            }
            switch (alt235) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9555); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression9561); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN664=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression9564); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN664);
            int alt236=2;
            int LA236_0 = input.LA(1);
            if ( (LA236_0==WINDOW||LA236_0==ESCAPE||(LA236_0>=NOT_EXPR && LA236_0<=EVERY_EXPR)||(LA236_0>=SUM && LA236_0<=COUNT)||LA236_0==CASE||LA236_0==OUTER||(LA236_0>=JOIN && LA236_0<=FULL)||(LA236_0>=EVENTS && LA236_0<=LAST)||(LA236_0>=UNIDIRECTIONAL && LA236_0<=CURRENT_TIMESTAMP)||LA236_0==SNAPSHOT||(LA236_0>=VARIABLE && LA236_0<=INDEX)||(LA236_0>=BOOLEAN_TRUE && LA236_0<=VALUE_NULL)||(LA236_0>=DEFINE && LA236_0<=MATCHES)||LA236_0==WHILE||(LA236_0>=MERGE && LA236_0<=MATCHED)||LA236_0==NUM_DOUBLE||(LA236_0>=IDENT && LA236_0<=LPAREN)||LA236_0==LBRACK||LA236_0==STAR||(LA236_0>=PLUS && LA236_0<=QUESTION)||(LA236_0>=STRING_LITERAL && LA236_0<=QUOTED_STRING_LITERAL)||LA236_0==MINUS||LA236_0==LCURLY||LA236_0==NUM_INT||(LA236_0>=TICKED_STRING_LITERAL && LA236_0<=NUM_FLOAT)) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression9566);
                    expressionWithTimeList665=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList665.getTree());
                    }
                    break;
            }
            RPAREN666=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression9569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN666);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT667=null;
        Token COLON668=null;
        Token IDENT669=null;
        Token LPAREN670=null;
        Token RPAREN672=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList671 = null;
        CommonTree IDENT667_tree=null;
        CommonTree COLON668_tree=null;
        CommonTree IDENT669_tree=null;
        CommonTree LPAREN670_tree=null;
        CommonTree RPAREN672_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT667=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9618); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT667_tree = (CommonTree)adaptor.create(IDENT667);
            adaptor.addChild(root_0, IDENT667_tree);
            }
            COLON668=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression9620); if (state.failed) return retval;
            IDENT669=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9623); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT669_tree = (CommonTree)adaptor.create(IDENT669);
            adaptor.addChild(root_0, IDENT669_tree);
            }
            LPAREN670=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression9625); if (state.failed) return retval;
            int alt237=2;
            int LA237_0 = input.LA(1);
            if ( (LA237_0==WINDOW||LA237_0==ESCAPE||(LA237_0>=NOT_EXPR && LA237_0<=EVERY_EXPR)||(LA237_0>=SUM && LA237_0<=COUNT)||LA237_0==CASE||LA237_0==OUTER||(LA237_0>=JOIN && LA237_0<=FULL)||(LA237_0>=EVENTS && LA237_0<=LAST)||(LA237_0>=UNIDIRECTIONAL && LA237_0<=CURRENT_TIMESTAMP)||LA237_0==SNAPSHOT||(LA237_0>=VARIABLE && LA237_0<=INDEX)||(LA237_0>=BOOLEAN_TRUE && LA237_0<=VALUE_NULL)||(LA237_0>=DEFINE && LA237_0<=MATCHES)||LA237_0==WHILE||(LA237_0>=MERGE && LA237_0<=MATCHED)||LA237_0==NUM_DOUBLE||(LA237_0>=IDENT && LA237_0<=LPAREN)||LA237_0==LBRACK||LA237_0==STAR||(LA237_0>=PLUS && LA237_0<=QUESTION)||(LA237_0>=STRING_LITERAL && LA237_0<=QUOTED_STRING_LITERAL)||LA237_0==MINUS||LA237_0==LCURLY||LA237_0==NUM_INT||(LA237_0>=TICKED_STRING_LITERAL && LA237_0<=NUM_FLOAT)) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression9629);
                    expressionWithTimeList671=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList671.getTree());
                    }
                    break;
            }
            RPAREN672=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression9633); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN673=null;
        Token RPAREN675=null;
        EsperEPL2GrammarParser.expression_return expression674 = null;
        CommonTree LPAREN673_tree=null;
        CommonTree RPAREN675_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN673=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression9646); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression9649);
            expression674=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression674.getTree());
            RPAREN675=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression9651); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK676=null;
        Token RBRACK680=null;
        EsperEPL2GrammarParser.expression_return expression677 = null;
        EsperEPL2GrammarParser.expression_return expression678 = null;
        EsperEPL2GrammarParser.expression_return expression679 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK676_tree=null;
        CommonTree RBRACK680_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK676=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange9672); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK676);
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( (LA240_0==WINDOW||LA240_0==ESCAPE||(LA240_0>=NOT_EXPR && LA240_0<=EVERY_EXPR)||(LA240_0>=SUM && LA240_0<=COUNT)||LA240_0==CASE||LA240_0==OUTER||(LA240_0>=JOIN && LA240_0<=FULL)||(LA240_0>=EVENTS && LA240_0<=LAST)||(LA240_0>=UNIDIRECTIONAL && LA240_0<=CURRENT_TIMESTAMP)||LA240_0==SNAPSHOT||(LA240_0>=VARIABLE && LA240_0<=INDEX)||(LA240_0>=BOOLEAN_TRUE && LA240_0<=VALUE_NULL)||(LA240_0>=DEFINE && LA240_0<=MATCHES)||LA240_0==WHILE||(LA240_0>=MERGE && LA240_0<=MATCHED)||LA240_0==NUM_DOUBLE||(LA240_0>=IDENT && LA240_0<=LPAREN)||(LA240_0>=PLUS && LA240_0<=QUESTION)||(LA240_0>=STRING_LITERAL && LA240_0<=QUOTED_STRING_LITERAL)||LA240_0==MINUS||LA240_0==LCURLY||LA240_0==NUM_INT||(LA240_0>=TICKED_STRING_LITERAL && LA240_0<=NUM_FLOAT)) ) {
                alt240=1;
            }
            else if ( (LA240_0==COLON) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);
                throw nvae;
            }
            switch (alt240) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9679);
                    expression677=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression677.getTree());
                    int alt239=2;
                    int LA239_0 = input.LA(1);
                    if ( (LA239_0==COLON) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9684); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt238=2;
                            int LA238_0 = input.LA(1);
                            if ( (LA238_0==WINDOW||LA238_0==ESCAPE||(LA238_0>=NOT_EXPR && LA238_0<=EVERY_EXPR)||(LA238_0>=SUM && LA238_0<=COUNT)||LA238_0==CASE||LA238_0==OUTER||(LA238_0>=JOIN && LA238_0<=FULL)||(LA238_0>=EVENTS && LA238_0<=LAST)||(LA238_0>=UNIDIRECTIONAL && LA238_0<=CURRENT_TIMESTAMP)||LA238_0==SNAPSHOT||(LA238_0>=VARIABLE && LA238_0<=INDEX)||(LA238_0>=BOOLEAN_TRUE && LA238_0<=VALUE_NULL)||(LA238_0>=DEFINE && LA238_0<=MATCHES)||LA238_0==WHILE||(LA238_0>=MERGE && LA238_0<=MATCHED)||LA238_0==NUM_DOUBLE||(LA238_0>=IDENT && LA238_0<=LPAREN)||(LA238_0>=PLUS && LA238_0<=QUESTION)||(LA238_0>=STRING_LITERAL && LA238_0<=QUOTED_STRING_LITERAL)||LA238_0==MINUS||LA238_0==LCURLY||LA238_0==NUM_INT||(LA238_0>=TICKED_STRING_LITERAL && LA238_0<=NUM_FLOAT)) ) {
                                alt238=1;
                            }
                            switch (alt238) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9687);
                                    expression678=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression678.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange9709);
                    expression679=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression679.getTree());
                    }
                    break;
            }
            RBRACK680=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9720); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK680);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS681=null;
        Token LPAREN683=null;
        Token RPAREN685=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier682 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList684 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression686 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS681_tree=null;
        CommonTree LPAREN683_tree=null;
        CommonTree RPAREN685_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==IDENT) ) {
                int LA241_1 = input.LA(2);
                if ( (LA241_1==EQUALS) ) {
                    alt241=1;
                }
            }
            switch (alt241) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9807); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS681=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9809); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS681);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9818);
            classIdentifier682=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier682.getTree());
            int alt243=2;
            int LA243_0 = input.LA(1);
            if ( (LA243_0==LPAREN) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    {
                    LPAREN683=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9829); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN683);
                    int alt242=2;
                    int LA242_0 = input.LA(1);
                    if ( (LA242_0==WINDOW||LA242_0==ESCAPE||(LA242_0>=NOT_EXPR && LA242_0<=EVERY_EXPR)||(LA242_0>=SUM && LA242_0<=COUNT)||LA242_0==CASE||LA242_0==OUTER||(LA242_0>=JOIN && LA242_0<=FULL)||(LA242_0>=EVENTS && LA242_0<=LAST)||(LA242_0>=UNIDIRECTIONAL && LA242_0<=CURRENT_TIMESTAMP)||LA242_0==SNAPSHOT||(LA242_0>=VARIABLE && LA242_0<=INDEX)||(LA242_0>=BOOLEAN_TRUE && LA242_0<=VALUE_NULL)||(LA242_0>=DEFINE && LA242_0<=MATCHES)||LA242_0==WHILE||(LA242_0>=MERGE && LA242_0<=MATCHED)||LA242_0==NUM_DOUBLE||(LA242_0>=IDENT && LA242_0<=LPAREN)||(LA242_0>=PLUS && LA242_0<=QUESTION)||(LA242_0>=STRING_LITERAL && LA242_0<=QUOTED_STRING_LITERAL)||LA242_0==MINUS||LA242_0==LCURLY||LA242_0==NUM_INT||(LA242_0>=TICKED_STRING_LITERAL && LA242_0<=NUM_FLOAT)) ) {
                        alt242=1;
                    }
                    switch (alt242) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9831);
                            expressionList684=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList684.getTree());
                            }
                            break;
                    }
                    RPAREN685=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9834); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN685);
                    }
                    break;
            }
            int alt244=2;
            int LA244_0 = input.LA(1);
            if ( (LA244_0==LBRACK) ) {
                alt244=1;
            }
            switch (alt244) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9846);
                    propertyExpression686=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression686.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic687 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic688 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9891);
            propertyExpressionAtomic687=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic687.getTree());
            loop245:
            do {
                int alt245=2;
                int LA245_0 = input.LA(1);
                if ( (LA245_0==LBRACK) ) {
                    alt245=1;
                }
                switch (alt245) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9894);
            	    propertyExpressionAtomic688=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic688.getTree());
            	    }
            	    break;
            	default :
            	    break loop245;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK689=null;
        Token SELECT690=null;
        Token FROM692=null;
        Token AS694=null;
        Token IDENT695=null;
        Token WHERE696=null;
        Token RBRACK698=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList691 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty693 = null;
        EsperEPL2GrammarParser.expression_return expression697 = null;
        CommonTree LBRACK689_tree=null;
        CommonTree SELECT690_tree=null;
        CommonTree FROM692_tree=null;
        CommonTree AS694_tree=null;
        CommonTree IDENT695_tree=null;
        CommonTree WHERE696_tree=null;
        CommonTree RBRACK698_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK689=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK689);
            int alt246=2;
            int LA246_0 = input.LA(1);
            if ( (LA246_0==SELECT) ) {
                alt246=1;
            }
            switch (alt246) {
                case 1 :
                    {
                    SELECT690=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT690);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9929);
                    propertySelectionList691=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList691.getTree());
                    FROM692=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM692);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9935);
            eventProperty693=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty693.getTree());
            int alt247=2;
            int LA247_0 = input.LA(1);
            if ( (LA247_0==AS) ) {
                alt247=1;
            }
            switch (alt247) {
                case 1 :
                    {
                    AS694=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS694);
                    IDENT695=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT695);
                    }
                    break;
            }
            int alt248=2;
            int LA248_0 = input.LA(1);
            if ( (LA248_0==WHERE) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    WHERE696=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9945); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE696);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9947);
                    expression697=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression697.getTree());
                    }
                    break;
            }
            RBRACK698=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK698);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA700=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement699 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement701 = null;
        CommonTree COMMA700_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10001);
            propertySelectionListElement699=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement699.getTree());
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);
                if ( (LA249_0==COMMA) ) {
                    alt249=1;
                }
                switch (alt249) {
            	case 1 :
            	    {
            	    COMMA700=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList10004); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10007);
            	    propertySelectionListElement701=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement701.getTree());
            	    }
            	    break;
            	default :
            	    break loop249;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS704=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector702 = null;
        EsperEPL2GrammarParser.expression_return expression703 = null;
        CommonTree s_tree=null;
        CommonTree AS704_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt251=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt251=1;
                }
                break;
            case IDENT:
                {
                int LA251_2 = input.LA(2);
                if ( (LA251_2==DOT) ) {
                    int LA251_69 = input.LA(3);
                    if ( (LA251_69==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt251=2;
                    }
                    else if ( (LA251_69==WINDOW||LA251_69==ESCAPE||LA251_69==EVERY_EXPR||(LA251_69>=SUM && LA251_69<=COUNT)||LA251_69==OUTER||(LA251_69>=JOIN && LA251_69<=FULL)||(LA251_69>=EVENTS && LA251_69<=LAST)||(LA251_69>=UNIDIRECTIONAL && LA251_69<=PREVIOUSTAIL)||LA251_69==PRIOR||(LA251_69>=WEEKDAY && LA251_69<=CAST)||LA251_69==SNAPSHOT||(LA251_69>=VARIABLE && LA251_69<=INDEX)||(LA251_69>=DEFINE && LA251_69<=MATCHES)||LA251_69==WHILE||(LA251_69>=MERGE && LA251_69<=MATCHED)||LA251_69==IDENT||LA251_69==TICKED_STRING_LITERAL) ) {
                        alt251=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 251, 69, input);
                        throw nvae;
                    }
                }
                else if ( ((LA251_2>=IN_SET && LA251_2<=REGEXP)||(LA251_2>=OR_EXPR && LA251_2<=NOT_EXPR)||LA251_2==AS||LA251_2==FROM||LA251_2==IS||LA251_2==COMMA||LA251_2==LPAREN||LA251_2==EQUALS||LA251_2==LBRACK||(LA251_2>=STAR && LA251_2<=QUESTION)||(LA251_2>=BAND && LA251_2<=MOD)||LA251_2==ESCAPECHAR) ) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt251=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);
                throw nvae;
            }
            switch (alt251) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement10033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement10049);
                    propertyStreamSelector702=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector702.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement10054);
                    expression703=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression703.getTree());
                    int alt250=2;
                    int LA250_0 = input.LA(1);
                    if ( (LA250_0==AS) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            {
                            AS704=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement10057); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS704);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10061);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT705=null;
        Token STAR706=null;
        Token AS707=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT705_tree=null;
        CommonTree STAR706_tree=null;
        CommonTree AS707_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10105); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT705=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector10107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT705);
            STAR706=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector10109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR706);
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( (LA252_0==AS) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    {
                    AS707=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector10112); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS707);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS708=null;
        Token LPAREN710=null;
        Token RPAREN712=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier709 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList711 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression713 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS708_tree=null;
        CommonTree LPAREN710_tree=null;
        CommonTree RPAREN712_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt253=2;
            int LA253_0 = input.LA(1);
            if ( (LA253_0==IDENT) ) {
                int LA253_1 = input.LA(2);
                if ( (LA253_1==EQUALS) ) {
                    alt253=1;
                }
            }
            switch (alt253) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression10163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS708=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression10165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS708);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression10174);
            classIdentifier709=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier709.getTree());
            int alt255=2;
            int LA255_0 = input.LA(1);
            if ( (LA255_0==LPAREN) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    LPAREN710=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression10185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN710);
                    int alt254=2;
                    int LA254_0 = input.LA(1);
                    if ( (LA254_0==WINDOW||LA254_0==ESCAPE||(LA254_0>=NOT_EXPR && LA254_0<=EVERY_EXPR)||(LA254_0>=SUM && LA254_0<=COUNT)||LA254_0==CASE||LA254_0==OUTER||(LA254_0>=JOIN && LA254_0<=FULL)||(LA254_0>=EVENTS && LA254_0<=LAST)||(LA254_0>=UNIDIRECTIONAL && LA254_0<=CURRENT_TIMESTAMP)||LA254_0==SNAPSHOT||(LA254_0>=VARIABLE && LA254_0<=INDEX)||(LA254_0>=BOOLEAN_TRUE && LA254_0<=VALUE_NULL)||(LA254_0>=DEFINE && LA254_0<=MATCHES)||LA254_0==WHILE||(LA254_0>=MERGE && LA254_0<=MATCHED)||LA254_0==NUM_DOUBLE||(LA254_0>=IDENT && LA254_0<=LPAREN)||(LA254_0>=PLUS && LA254_0<=QUESTION)||(LA254_0>=STRING_LITERAL && LA254_0<=QUOTED_STRING_LITERAL)||LA254_0==MINUS||LA254_0==LCURLY||LA254_0==NUM_INT||(LA254_0>=TICKED_STRING_LITERAL && LA254_0<=NUM_FLOAT)) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression10187);
                            expressionList711=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList711.getTree());
                            }
                            break;
                    }
                    RPAREN712=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression10190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN712);
                    }
                    break;
            }
            int alt256=2;
            int LA256_0 = input.LA(1);
            if ( (LA256_0==LBRACK) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression10202);
                    propertyExpression713=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression713.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT714=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT714_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier10257);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);
                if ( (LA257_0==DOT) ) {
                    int LA257_21 = input.LA(2);
                    if ( (LA257_21==IDENT) ) {
                        int LA257_46 = input.LA(3);
                        if ( (LA257_46==EOF||LA257_46==CREATE||(LA257_46>=OR_EXPR && LA257_46<=AS)||LA257_46==SELECT||(LA257_46>=INNER && LA257_46<=ON)||(LA257_46>=GROUP && LA257_46<=HAVING)||LA257_46==OUTPUT||LA257_46==INSERT||LA257_46==ORDER||(LA257_46>=UNIDIRECTIONAL && LA257_46<=RETAININTERSECTION)||LA257_46==DELETE||LA257_46==SET||LA257_46==UNTIL||LA257_46==ROW_LIMIT_EXPR||(LA257_46>=UPDATE && LA257_46<=MATCH_RECOGNIZE)||(LA257_46>=FOR && LA257_46<=WHILE)||LA257_46==MERGE||(LA257_46>=COMMA && LA257_46<=RPAREN)||(LA257_46>=DOT && LA257_46<=RBRACK)||LA257_46==RCURLY||(LA257_46>=FOLLOWED_BY && LA257_46<=FOLLOWMAX_BEGIN)||LA257_46==TICKED_STRING_LITERAL||LA257_46==EMAILAT) ) {
                            alt257=1;
                        }
                    }
                    else if ( (LA257_21==TICKED_STRING_LITERAL) ) {
                        alt257=1;
                    }
                }
                switch (alt257) {
            	case 1 :
            	    {
            	    DOT714=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier10276); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT714);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier10280);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop257;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT715=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT715_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10325);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);
                if ( (LA258_0==IDENT||LA258_0==TICKED_STRING_LITERAL) ) {
                    alt258=2;
                }
                else if ( (LA258_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA258_4 = input.LA(3);
                        if ( (LA258_4==IDENT||LA258_4==DOT||LA258_4==TICKED_STRING_LITERAL) ) {
                            alt258=1;
                        }
                        else if ( (LA258_4==LPAREN) ) {
                            alt258=2;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA258_5 = input.LA(3);
                        if ( (LA258_5==LPAREN) ) {
                            alt258=2;
                        }
                        else if ( (LA258_5==IDENT||LA258_5==DOT||LA258_5==TICKED_STRING_LITERAL) ) {
                            alt258=1;
                        }
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt258=2;
                        }
                        break;
                    }
                }
                switch (alt258) {
            	case 1 :
            	    {
            	    DOT715=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy10360); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT715);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10364);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop258;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA717=null;
        EsperEPL2GrammarParser.expression_return expression716 = null;
        EsperEPL2GrammarParser.expression_return expression718 = null;
        CommonTree COMMA717_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList10406);
            expression716=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression716.getTree());
            loop259:
            do {
                int alt259=2;
                int LA259_0 = input.LA(1);
                if ( (LA259_0==COMMA) ) {
                    alt259=1;
                }
                switch (alt259) {
            	case 1 :
            	    {
            	    COMMA717=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10409); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10412);
            	    expression718=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression718.getTree());
            	    }
            	    break;
            	default :
            	    break loop259;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA720=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime719 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime721 = null;
        CommonTree COMMA720_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10440);
            expressionWithTime719=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime719.getTree());
            loop260:
            do {
                int alt260=2;
                int LA260_0 = input.LA(1);
                if ( (LA260_0==COMMA) ) {
                    alt260=1;
                }
                switch (alt260) {
            	case 1 :
            	    {
            	    COMMA720=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList10443); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10446);
            	    expressionWithTime721=expressionWithTime();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime721.getTree());
            	    }
            	    break;
            	default :
            	    break loop260;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand722 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand723 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod724 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable725 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand726 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand727 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator728 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator729 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList730 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar731 = null;
        try {
            int alt261=10;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==LAST) ) {
                int LA261_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt261=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt261=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==LW) ) {
                int LA261_2 = input.LA(2);
                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt261=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt261=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==NUM_INT) ) {
                int LA261_3 = input.LA(2);
                if ( (LA261_3==TIMEPERIOD_SECONDS) ) {
                    int LA261_144 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 144, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_3==TIMEPERIOD_SECOND) ) {
                    int LA261_145 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 145, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_3==TIMEPERIOD_SEC) ) {
                    int LA261_146 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 146, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt261=5;
                }
                else if ( (LA261_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt261=7;
                }
                else if ( (LA261_3==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt261=8;
                }
                else if ( (LA261_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==NUM_LONG) ) {
                int LA261_4 = input.LA(2);
                if ( (LA261_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt261=5;
                }
                else if ( (LA261_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_SECONDS) ) {
                    int LA261_200 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 200, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_4==TIMEPERIOD_SECOND) ) {
                    int LA261_201 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 201, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_4==TIMEPERIOD_SEC) ) {
                    int LA261_202 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 202, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_4==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt261=7;
                }
                else if ( (LA261_4==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt261=8;
                }
                else if ( (LA261_4==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_4==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==NUM_FLOAT) ) {
                int LA261_5 = input.LA(2);
                if ( (LA261_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==TIMEPERIOD_SECONDS) ) {
                    int LA261_267 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 267, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_5==TIMEPERIOD_SECOND) ) {
                    int LA261_268 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 268, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_5==TIMEPERIOD_SEC) ) {
                    int LA261_269 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 269, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt261=5;
                }
                else if ( (LA261_5==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt261=7;
                }
                else if ( (LA261_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt261=8;
                }
                else if ( (LA261_5==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_5==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==NUM_DOUBLE) ) {
                int LA261_6 = input.LA(2);
                if ( (LA261_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==TIMEPERIOD_SECONDS) ) {
                    int LA261_317 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 317, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_6==TIMEPERIOD_SECOND) ) {
                    int LA261_318 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 318, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_6==TIMEPERIOD_SEC) ) {
                    int LA261_319 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 319, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt261=5;
                }
                else if ( (LA261_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt261=8;
                }
                else if ( (LA261_6==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt261=7;
                }
                else if ( (LA261_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==IDENT) ) {
                int LA261_7 = input.LA(2);
                if ( (LA261_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt261=7;
                }
                else if ( (LA261_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt261=5;
                }
                else if ( (LA261_7==TIMEPERIOD_SECONDS) ) {
                    int LA261_360 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 360, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_7==TIMEPERIOD_SECOND) ) {
                    int LA261_361 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 361, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_7==TIMEPERIOD_SEC) ) {
                    int LA261_362 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 362, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_7==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt261=8;
                }
                else if ( (LA261_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==QUESTION) ) {
                int LA261_8 = input.LA(2);
                if ( (LA261_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt261=7;
                }
                else if ( (LA261_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==TIMEPERIOD_SECONDS) ) {
                    int LA261_423 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 423, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_8==TIMEPERIOD_SECOND) ) {
                    int LA261_424 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 424, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_8==TIMEPERIOD_SEC) ) {
                    int LA261_425 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt261=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt261=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 261, 425, input);
                        throw nvae;
                    }
                }
                else if ( (LA261_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt261=4;
                }
                else if ( (LA261_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt261=5;
                }
                else if ( (LA261_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt261=3;
                }
                else if ( (LA261_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt261=8;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==MERGE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==MATCHED) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==TYPEOF) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt261=4;
            }
            else if ( (LA261_0==STAR) ) {
                int LA261_68 = input.LA(2);
                if ( (LA261_68==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt261=6;
                }
                else if ( (LA261_68==COMMA||LA261_68==RPAREN) ) {
                    alt261=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 261, 68, input);
                    throw nvae;
                }
            }
            else if ( (LA261_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt261=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);
                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime10472);
                    lastOperand722=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand722.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime10483);
                    lastWeekdayOperand723=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand723.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime10494);
                    timePeriod724=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod724.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime10505);
                    expressionQualifyable725=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable725.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime10516);
                    rangeOperand726=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand726.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime10528);
                    frequencyOperand727=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand727.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime10539);
                    lastOperator728=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator728.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime10551);
                    weekDayOperator729=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator729.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime10563);
                    numericParameterList730=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList730.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime10568);
                    numberSetStar731=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar731.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression732 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10579);
            expression732=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression732.getTree());
            int alt262=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt262=1;
                    }
                    break;
                case DESC:
                    {
                    alt262=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt262=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt262=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt262=5;
                    }
                    break;
            }
            switch (alt262) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10588); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10596); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10600); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR733=null;
        CommonTree STAR733_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR733=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10657); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR733);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW734=null;
        CommonTree LW734_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW734=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10677); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW734_tree = (CommonTree)adaptor.create(LW734);
            root_0 = (CommonTree)adaptor.becomeRoot(LW734_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST735=null;
        CommonTree LAST735_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST735=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10690); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST735_tree = (CommonTree)adaptor.create(LAST735);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST735_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR736=null;
        Token DIV737=null;
        EsperEPL2GrammarParser.number_return number738 = null;
        EsperEPL2GrammarParser.substitution_return substitution739 = null;
        CommonTree i_tree=null;
        CommonTree STAR736_tree=null;
        CommonTree DIV737_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR736=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10702); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR736);
            DIV737=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV737);
            int alt263=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt263=1;
                }
                break;
            case IDENT:
                {
                alt263=2;
                }
                break;
            case QUESTION:
                {
                alt263=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);
                throw nvae;
            }
            switch (alt263) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10707);
                    number738=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number738.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10713);
                    substitution739=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution739.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON742=null;
        EsperEPL2GrammarParser.number_return number740 = null;
        EsperEPL2GrammarParser.substitution_return substitution741 = null;
        EsperEPL2GrammarParser.number_return number743 = null;
        EsperEPL2GrammarParser.substitution_return substitution744 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON742_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt264=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt264=1;
                }
                break;
            case IDENT:
                {
                alt264=2;
                }
                break;
            case QUESTION:
                {
                alt264=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);
                throw nvae;
            }
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10762);
                    number740=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number740.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10766); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10768);
                    substitution741=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution741.getTree());
                    }
                    break;
            }
            COLON742=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON742);
            int alt265=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt265=1;
                }
                break;
            case IDENT:
                {
                alt265=2;
                }
                break;
            case QUESTION:
                {
                alt265=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);
                throw nvae;
            }
            switch (alt265) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10774);
                    number743=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number743.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10780);
                    substitution744=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution744.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST747=null;
        EsperEPL2GrammarParser.number_return number745 = null;
        EsperEPL2GrammarParser.substitution_return substitution746 = null;
        CommonTree i_tree=null;
        CommonTree LAST747_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt266=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt266=1;
                }
                break;
            case IDENT:
                {
                alt266=2;
                }
                break;
            case QUESTION:
                {
                alt266=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);
                throw nvae;
            }
            switch (alt266) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10894);
                    number745=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number745.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10898); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10900);
                    substitution746=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution746.getTree());
                    }
                    break;
            }
            LAST747=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10903); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST747);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY750=null;
        EsperEPL2GrammarParser.number_return number748 = null;
        EsperEPL2GrammarParser.substitution_return substitution749 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY750_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt267=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt267=1;
                }
                break;
            case IDENT:
                {
                alt267=2;
                }
                break;
            case QUESTION:
                {
                alt267=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);
                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10951);
                    number748=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number748.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10957);
                    substitution749=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution749.getTree());
                    }
                    break;
            }
            WEEKDAY750=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY750);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK751=null;
        Token COMMA753=null;
        Token RBRACK755=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter752 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter754 = null;
        CommonTree LBRACK751_tree=null;
        CommonTree COMMA753_tree=null;
        CommonTree RBRACK755_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK751=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList11007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK751);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList11009);
            numericListParameter752=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter752.getTree());
            loop268:
            do {
                int alt268=2;
                int LA268_0 = input.LA(1);
                if ( (LA268_0==COMMA) ) {
                    alt268=1;
                }
                switch (alt268) {
            	case 1 :
            	    {
            	    COMMA753=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList11012); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA753);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList11014);
            	    numericListParameter754=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter754.getTree());
            	    }
            	    break;
            	default :
            	    break loop268;
                }
            } while (true);
            RBRACK755=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList11018); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK755);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand756 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand757 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant758 = null;
        try {
            int alt269=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA269_1 = input.LA(2);
                if ( (LA269_1==COMMA||LA269_1==RBRACK) ) {
                    alt269=3;
                }
                else if ( (LA269_1==COLON) ) {
                    alt269=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 269, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA269_2 = input.LA(2);
                if ( (LA269_2==COMMA||LA269_2==RBRACK) ) {
                    alt269=3;
                }
                else if ( (LA269_2==COLON) ) {
                    alt269=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 269, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA269_3 = input.LA(2);
                if ( (LA269_3==COLON) ) {
                    alt269=1;
                }
                else if ( (LA269_3==COMMA||LA269_3==RBRACK) ) {
                    alt269=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 269, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA269_4 = input.LA(2);
                if ( (LA269_4==COLON) ) {
                    alt269=1;
                }
                else if ( (LA269_4==COMMA||LA269_4==RBRACK) ) {
                    alt269=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 269, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt269=1;
                }
                break;
            case STAR:
                {
                alt269=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt269=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);
                throw nvae;
            }
            switch (alt269) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter11040);
                    rangeOperand756=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand756.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter11046);
                    frequencyOperand757=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand757.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter11051);
                    numberconstant758=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant758.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT760=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic759 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic761 = null;
        CommonTree DOT760_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty11067);
            eventPropertyAtomic759=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic759.getTree());
            loop270:
            do {
                int alt270=2;
                int LA270_0 = input.LA(1);
                if ( (LA270_0==DOT) ) {
                    alt270=1;
                }
                switch (alt270) {
            	case 1 :
            	    {
            	    DOT760=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty11070); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT760);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty11072);
            	    eventPropertyAtomic761=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic761.getTree());
            	    }
            	    break;
            	default :
            	    break loop270;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK763=null;
        Token RPAREN764=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent762 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK763_tree=null;
        CommonTree RPAREN764_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic11098);
            eventPropertyIdent762=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent762.getTree());
            int alt274=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt274=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt274=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt274=3;
                    }
                    break;
            }
            switch (alt274) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic11107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic11111); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK763=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic11113); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK763);
                    int alt271=2;
                    int LA271_0 = input.LA(1);
                    if ( (LA271_0==QUESTION) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11118); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic11132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt272=2;
                    int LA272_0 = input.LA(1);
                    if ( (LA272_0==STRING_LITERAL) ) {
                        alt272=1;
                    }
                    else if ( (LA272_0==QUOTED_STRING_LITERAL) ) {
                        alt272=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 272, 0, input);
                        throw nvae;
                    }
                    switch (alt272) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic11137); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic11143); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN764=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic11146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN764);
                    int alt273=2;
                    int LA273_0 = input.LA(1);
                    if ( (LA273_0==QUESTION) ) {
                        alt273=1;
                    }
                    switch (alt273) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11151); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11165); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR765=null;
        Token DOT766=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR765_tree=null;
        CommonTree DOT766_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11288);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);
                if ( (LA276_0==ESCAPECHAR) ) {
                    alt276=1;
                }
                switch (alt276) {
            	case 1 :
            	    {
            	    ESCAPECHAR765=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent11300); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR765);
            	    DOT766=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent11302); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT766);
            	    int alt275=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt275=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA275_5 = input.LA(2);
            	            if ( (LA275_5==EOF||(LA275_5>=IN_SET && LA275_5<=NOT_EXPR)||(LA275_5>=WHERE && LA275_5<=AS)||(LA275_5>=ELSE && LA275_5<=FROM)||(LA275_5>=INNER && LA275_5<=FULL)||LA275_5==IS||(LA275_5>=GROUP && LA275_5<=HAVING)||LA275_5==ALL||LA275_5==OUTPUT||LA275_5==INSERT||(LA275_5>=ORDER && LA275_5<=DESC)||LA275_5==PATTERN||(LA275_5>=TIMEPERIOD_SEC && LA275_5<=TIMEPERIOD_SECONDS)||LA275_5==ROW_LIMIT_EXPR||(LA275_5>=MATCH_RECOGNIZE && LA275_5<=MEASURES)||(LA275_5>=AFTER && LA275_5<=FOR)||LA275_5==COMMA||(LA275_5>=LPAREN && LA275_5<=COLON)||(LA275_5>=BAND && LA275_5<=MOD)||LA275_5==RCURLY||(LA275_5>=FOLLOWMAX_END && LA275_5<=ESCAPECHAR)) ) {
            	                alt275=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA275_25 = input.LA(2);
            	            if ( (LA275_25==LPAREN) ) {
            	                int LA275_176 = input.LA(3);
            	                if ( ((LA275_176>=STRING_LITERAL && LA275_176<=QUOTED_STRING_LITERAL)) ) {
            	                    alt275=1;
            	                }
            	            }
            	            else if ( (LA275_25==EOF||(LA275_25>=IN_SET && LA275_25<=NOT_EXPR)||(LA275_25>=WHERE && LA275_25<=AS)||(LA275_25>=ELSE && LA275_25<=FROM)||(LA275_25>=INNER && LA275_25<=FULL)||LA275_25==IS||(LA275_25>=GROUP && LA275_25<=HAVING)||LA275_25==ALL||LA275_25==OUTPUT||LA275_25==INSERT||(LA275_25>=ORDER && LA275_25<=DESC)||LA275_25==PATTERN||(LA275_25>=TIMEPERIOD_SEC && LA275_25<=TIMEPERIOD_SECONDS)||LA275_25==ROW_LIMIT_EXPR||(LA275_25>=MATCH_RECOGNIZE && LA275_25<=MEASURES)||(LA275_25>=AFTER && LA275_25<=FOR)||LA275_25==COMMA||(LA275_25>=RPAREN && LA275_25<=COLON)||(LA275_25>=BAND && LA275_25<=MOD)||LA275_25==RCURLY||(LA275_25>=FOLLOWMAX_END && LA275_25<=ESCAPECHAR)) ) {
            	                alt275=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA275_40 = input.LA(2);
            	            if ( (LA275_40==EOF||(LA275_40>=IN_SET && LA275_40<=NOT_EXPR)||(LA275_40>=WHERE && LA275_40<=AS)||(LA275_40>=ELSE && LA275_40<=FROM)||(LA275_40>=INNER && LA275_40<=FULL)||LA275_40==IS||(LA275_40>=GROUP && LA275_40<=HAVING)||LA275_40==ALL||LA275_40==OUTPUT||LA275_40==INSERT||(LA275_40>=ORDER && LA275_40<=DESC)||LA275_40==PATTERN||(LA275_40>=TIMEPERIOD_SEC && LA275_40<=TIMEPERIOD_SECONDS)||LA275_40==ROW_LIMIT_EXPR||(LA275_40>=MATCH_RECOGNIZE && LA275_40<=MEASURES)||(LA275_40>=AFTER && LA275_40<=FOR)||LA275_40==COMMA||(LA275_40>=LPAREN && LA275_40<=COLON)||(LA275_40>=BAND && LA275_40<=MOD)||LA275_40==RCURLY||(LA275_40>=FOLLOWMAX_END && LA275_40<=ESCAPECHAR)) ) {
            	                alt275=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA275_41 = input.LA(2);
            	            if ( (LA275_41==EOF||(LA275_41>=IN_SET && LA275_41<=NOT_EXPR)||(LA275_41>=WHERE && LA275_41<=AS)||(LA275_41>=ELSE && LA275_41<=FROM)||(LA275_41>=INNER && LA275_41<=FULL)||LA275_41==IS||(LA275_41>=GROUP && LA275_41<=HAVING)||LA275_41==ALL||LA275_41==OUTPUT||LA275_41==INSERT||(LA275_41>=ORDER && LA275_41<=DESC)||LA275_41==PATTERN||(LA275_41>=TIMEPERIOD_SEC && LA275_41<=TIMEPERIOD_SECONDS)||LA275_41==ROW_LIMIT_EXPR||(LA275_41>=MATCH_RECOGNIZE && LA275_41<=MEASURES)||(LA275_41>=AFTER && LA275_41<=FOR)||LA275_41==COMMA||(LA275_41>=LPAREN && LA275_41<=COLON)||(LA275_41>=BAND && LA275_41<=MOD)||LA275_41==RCURLY||(LA275_41>=FOLLOWMAX_END && LA275_41<=ESCAPECHAR)) ) {
            	                alt275=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA275_43 = input.LA(2);
            	            if ( (LA275_43==EOF||(LA275_43>=IN_SET && LA275_43<=NOT_EXPR)||(LA275_43>=WHERE && LA275_43<=AS)||(LA275_43>=ELSE && LA275_43<=FROM)||(LA275_43>=INNER && LA275_43<=FULL)||LA275_43==IS||(LA275_43>=GROUP && LA275_43<=HAVING)||LA275_43==ALL||LA275_43==OUTPUT||LA275_43==INSERT||(LA275_43>=ORDER && LA275_43<=DESC)||LA275_43==PATTERN||(LA275_43>=TIMEPERIOD_SEC && LA275_43<=TIMEPERIOD_SECONDS)||LA275_43==ROW_LIMIT_EXPR||(LA275_43>=MATCH_RECOGNIZE && LA275_43<=MEASURES)||(LA275_43>=AFTER && LA275_43<=FOR)||LA275_43==COMMA||(LA275_43>=LPAREN && LA275_43<=COLON)||(LA275_43>=BAND && LA275_43<=MOD)||LA275_43==RCURLY||(LA275_43>=FOLLOWMAX_END && LA275_43<=ESCAPECHAR)) ) {
            	                alt275=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA275_44 = input.LA(2);
            	            if ( (LA275_44==PATTERN) ) {
            	                int LA275_445 = input.LA(3);
            	                if ( (LA275_445==LPAREN) ) {
            	                    alt275=1;
            	                }
            	            }
            	            else if ( (LA275_44==EOF||(LA275_44>=IN_SET && LA275_44<=NOT_EXPR)||(LA275_44>=WHERE && LA275_44<=AS)||(LA275_44>=ELSE && LA275_44<=FROM)||(LA275_44>=INNER && LA275_44<=FULL)||LA275_44==IS||(LA275_44>=GROUP && LA275_44<=HAVING)||LA275_44==ALL||LA275_44==OUTPUT||LA275_44==INSERT||(LA275_44>=ORDER && LA275_44<=DESC)||(LA275_44>=TIMEPERIOD_SEC && LA275_44<=TIMEPERIOD_SECONDS)||LA275_44==ROW_LIMIT_EXPR||(LA275_44>=MATCH_RECOGNIZE && LA275_44<=MEASURES)||(LA275_44>=AFTER && LA275_44<=FOR)||LA275_44==COMMA||(LA275_44>=LPAREN && LA275_44<=COLON)||(LA275_44>=BAND && LA275_44<=MOD)||LA275_44==RCURLY||(LA275_44>=FOLLOWMAX_END && LA275_44<=ESCAPECHAR)) ) {
            	                alt275=1;
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt275) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11306);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop276;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT767=null;
        Token COUNT768=null;
        Token ESCAPE769=null;
        Token EVERY_EXPR770=null;
        Token SUM771=null;
        Token AVG772=null;
        Token MAX773=null;
        Token MIN774=null;
        Token COALESCE775=null;
        Token MEDIAN776=null;
        Token STDDEV777=null;
        Token AVEDEV778=null;
        Token EVENTS779=null;
        Token FIRST780=null;
        Token LAST781=null;
        Token WHILE782=null;
        Token MERGE783=null;
        Token MATCHED784=null;
        Token UNIDIRECTIONAL785=null;
        Token RETAINUNION786=null;
        Token RETAININTERSECTION787=null;
        Token UNTIL788=null;
        Token PATTERN789=null;
        Token SQL790=null;
        Token METADATASQL791=null;
        Token PREVIOUS792=null;
        Token PREVIOUSTAIL793=null;
        Token PRIOR794=null;
        Token WEEKDAY795=null;
        Token LW796=null;
        Token INSTANCEOF797=null;
        Token TYPEOF798=null;
        Token CAST799=null;
        Token SNAPSHOT800=null;
        Token VARIABLE801=null;
        Token INDEX802=null;
        Token WINDOW803=null;
        Token LEFT804=null;
        Token RIGHT805=null;
        Token OUTER806=null;
        Token FULL807=null;
        Token JOIN808=null;
        Token DEFINE809=null;
        Token PARTITION810=null;
        Token MATCHES811=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT767_tree=null;
        CommonTree COUNT768_tree=null;
        CommonTree ESCAPE769_tree=null;
        CommonTree EVERY_EXPR770_tree=null;
        CommonTree SUM771_tree=null;
        CommonTree AVG772_tree=null;
        CommonTree MAX773_tree=null;
        CommonTree MIN774_tree=null;
        CommonTree COALESCE775_tree=null;
        CommonTree MEDIAN776_tree=null;
        CommonTree STDDEV777_tree=null;
        CommonTree AVEDEV778_tree=null;
        CommonTree EVENTS779_tree=null;
        CommonTree FIRST780_tree=null;
        CommonTree LAST781_tree=null;
        CommonTree WHILE782_tree=null;
        CommonTree MERGE783_tree=null;
        CommonTree MATCHED784_tree=null;
        CommonTree UNIDIRECTIONAL785_tree=null;
        CommonTree RETAINUNION786_tree=null;
        CommonTree RETAININTERSECTION787_tree=null;
        CommonTree UNTIL788_tree=null;
        CommonTree PATTERN789_tree=null;
        CommonTree SQL790_tree=null;
        CommonTree METADATASQL791_tree=null;
        CommonTree PREVIOUS792_tree=null;
        CommonTree PREVIOUSTAIL793_tree=null;
        CommonTree PRIOR794_tree=null;
        CommonTree WEEKDAY795_tree=null;
        CommonTree LW796_tree=null;
        CommonTree INSTANCEOF797_tree=null;
        CommonTree TYPEOF798_tree=null;
        CommonTree CAST799_tree=null;
        CommonTree SNAPSHOT800_tree=null;
        CommonTree VARIABLE801_tree=null;
        CommonTree INDEX802_tree=null;
        CommonTree WINDOW803_tree=null;
        CommonTree LEFT804_tree=null;
        CommonTree RIGHT805_tree=null;
        CommonTree OUTER806_tree=null;
        CommonTree FULL807_tree=null;
        CommonTree JOIN808_tree=null;
        CommonTree DEFINE809_tree=null;
        CommonTree PARTITION810_tree=null;
        CommonTree MATCHES811_tree=null;
        try {
            int alt277=47;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt277=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt277=2;
                }
                break;
            case AT:
                {
                alt277=3;
                }
                break;
            case COUNT:
                {
                alt277=4;
                }
                break;
            case ESCAPE:
                {
                alt277=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt277=6;
                }
                break;
            case SUM:
                {
                alt277=7;
                }
                break;
            case AVG:
                {
                alt277=8;
                }
                break;
            case MAX:
                {
                alt277=9;
                }
                break;
            case MIN:
                {
                alt277=10;
                }
                break;
            case COALESCE:
                {
                alt277=11;
                }
                break;
            case MEDIAN:
                {
                alt277=12;
                }
                break;
            case STDDEV:
                {
                alt277=13;
                }
                break;
            case AVEDEV:
                {
                alt277=14;
                }
                break;
            case EVENTS:
                {
                alt277=15;
                }
                break;
            case FIRST:
                {
                alt277=16;
                }
                break;
            case LAST:
                {
                alt277=17;
                }
                break;
            case WHILE:
                {
                alt277=18;
                }
                break;
            case MERGE:
                {
                alt277=19;
                }
                break;
            case MATCHED:
                {
                alt277=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt277=21;
                }
                break;
            case RETAINUNION:
                {
                alt277=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt277=23;
                }
                break;
            case UNTIL:
                {
                alt277=24;
                }
                break;
            case PATTERN:
                {
                alt277=25;
                }
                break;
            case SQL:
                {
                alt277=26;
                }
                break;
            case METADATASQL:
                {
                alt277=27;
                }
                break;
            case PREVIOUS:
                {
                alt277=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt277=29;
                }
                break;
            case PRIOR:
                {
                alt277=30;
                }
                break;
            case WEEKDAY:
                {
                alt277=31;
                }
                break;
            case LW:
                {
                alt277=32;
                }
                break;
            case INSTANCEOF:
                {
                alt277=33;
                }
                break;
            case TYPEOF:
                {
                alt277=34;
                }
                break;
            case CAST:
                {
                alt277=35;
                }
                break;
            case SNAPSHOT:
                {
                alt277=36;
                }
                break;
            case VARIABLE:
                {
                alt277=37;
                }
                break;
            case INDEX:
                {
                alt277=38;
                }
                break;
            case WINDOW:
                {
                alt277=39;
                }
                break;
            case LEFT:
                {
                alt277=40;
                }
                break;
            case RIGHT:
                {
                alt277=41;
                }
                break;
            case OUTER:
                {
                alt277=42;
                }
                break;
            case FULL:
                {
                alt277=43;
                }
                break;
            case JOIN:
                {
                alt277=44;
                }
                break;
            case DEFINE:
                {
                alt277=45;
                }
                break;
            case PARTITION:
                {
                alt277=46;
                }
                break;
            case MATCHES:
                {
                alt277=47;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);
                throw nvae;
            }
            switch (alt277) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent11345); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11354); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT767=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent11361); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT767_tree = (CommonTree)adaptor.create(AT767);
                    adaptor.addChild(root_0, AT767_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT768=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent11368); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT768_tree = (CommonTree)adaptor.create(COUNT768);
                    adaptor.addChild(root_0, COUNT768_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE769=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent11375); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE769_tree = (CommonTree)adaptor.create(ESCAPE769);
                    adaptor.addChild(root_0, ESCAPE769_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR770=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11386); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR770_tree = (CommonTree)adaptor.create(EVERY_EXPR770);
                    adaptor.addChild(root_0, EVERY_EXPR770_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM771=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent11393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM771_tree = (CommonTree)adaptor.create(SUM771);
                    adaptor.addChild(root_0, SUM771_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG772=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent11400); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG772_tree = (CommonTree)adaptor.create(AVG772);
                    adaptor.addChild(root_0, AVG772_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX773=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent11407); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX773_tree = (CommonTree)adaptor.create(MAX773);
                    adaptor.addChild(root_0, MAX773_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN774=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent11414); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN774_tree = (CommonTree)adaptor.create(MIN774);
                    adaptor.addChild(root_0, MIN774_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE775=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent11421); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE775_tree = (CommonTree)adaptor.create(COALESCE775);
                    adaptor.addChild(root_0, COALESCE775_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN776=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent11428); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN776_tree = (CommonTree)adaptor.create(MEDIAN776);
                    adaptor.addChild(root_0, MEDIAN776_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV777=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent11435); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV777_tree = (CommonTree)adaptor.create(STDDEV777);
                    adaptor.addChild(root_0, STDDEV777_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV778=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent11442); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV778_tree = (CommonTree)adaptor.create(AVEDEV778);
                    adaptor.addChild(root_0, AVEDEV778_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS779=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent11449); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS779_tree = (CommonTree)adaptor.create(EVENTS779);
                    adaptor.addChild(root_0, EVENTS779_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST780=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent11456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST780_tree = (CommonTree)adaptor.create(FIRST780);
                    adaptor.addChild(root_0, FIRST780_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST781=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent11463); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST781_tree = (CommonTree)adaptor.create(LAST781);
                    adaptor.addChild(root_0, LAST781_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE782=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent11470); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE782_tree = (CommonTree)adaptor.create(WHILE782);
                    adaptor.addChild(root_0, WHILE782_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE783=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent11477); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE783_tree = (CommonTree)adaptor.create(MERGE783);
                    adaptor.addChild(root_0, MERGE783_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED784=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent11484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED784_tree = (CommonTree)adaptor.create(MATCHED784);
                    adaptor.addChild(root_0, MATCHED784_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL785=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11491); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL785_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL785);
                    adaptor.addChild(root_0, UNIDIRECTIONAL785_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION786=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent11498); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION786_tree = (CommonTree)adaptor.create(RETAINUNION786);
                    adaptor.addChild(root_0, RETAINUNION786_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION787=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION787_tree = (CommonTree)adaptor.create(RETAININTERSECTION787);
                    adaptor.addChild(root_0, RETAININTERSECTION787_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL788=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent11512); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL788_tree = (CommonTree)adaptor.create(UNTIL788);
                    adaptor.addChild(root_0, UNTIL788_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN789=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent11519); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN789_tree = (CommonTree)adaptor.create(PATTERN789);
                    adaptor.addChild(root_0, PATTERN789_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL790=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent11526); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL790_tree = (CommonTree)adaptor.create(SQL790);
                    adaptor.addChild(root_0, SQL790_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL791=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent11533); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL791_tree = (CommonTree)adaptor.create(METADATASQL791);
                    adaptor.addChild(root_0, METADATASQL791_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS792=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent11540); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS792_tree = (CommonTree)adaptor.create(PREVIOUS792);
                    adaptor.addChild(root_0, PREVIOUS792_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL793=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11547); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL793_tree = (CommonTree)adaptor.create(PREVIOUSTAIL793);
                    adaptor.addChild(root_0, PREVIOUSTAIL793_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR794=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent11554); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR794_tree = (CommonTree)adaptor.create(PRIOR794);
                    adaptor.addChild(root_0, PRIOR794_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY795=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent11561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY795_tree = (CommonTree)adaptor.create(WEEKDAY795);
                    adaptor.addChild(root_0, WEEKDAY795_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW796=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent11568); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW796_tree = (CommonTree)adaptor.create(LW796);
                    adaptor.addChild(root_0, LW796_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF797=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent11575); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF797_tree = (CommonTree)adaptor.create(INSTANCEOF797);
                    adaptor.addChild(root_0, INSTANCEOF797_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF798=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent11582); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF798_tree = (CommonTree)adaptor.create(TYPEOF798);
                    adaptor.addChild(root_0, TYPEOF798_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST799=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent11589); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST799_tree = (CommonTree)adaptor.create(CAST799);
                    adaptor.addChild(root_0, CAST799_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT800=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent11596); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT800_tree = (CommonTree)adaptor.create(SNAPSHOT800);
                    adaptor.addChild(root_0, SNAPSHOT800_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE801=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent11603); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE801_tree = (CommonTree)adaptor.create(VARIABLE801);
                    adaptor.addChild(root_0, VARIABLE801_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX802=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11612); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX802_tree = (CommonTree)adaptor.create(INDEX802);
                    adaptor.addChild(root_0, INDEX802_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW803=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11621); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW803_tree = (CommonTree)adaptor.create(WINDOW803);
                    adaptor.addChild(root_0, WINDOW803_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT804=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11628); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT804_tree = (CommonTree)adaptor.create(LEFT804);
                    adaptor.addChild(root_0, LEFT804_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT805=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11635); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT805_tree = (CommonTree)adaptor.create(RIGHT805);
                    adaptor.addChild(root_0, RIGHT805_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER806=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11642); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER806_tree = (CommonTree)adaptor.create(OUTER806);
                    adaptor.addChild(root_0, OUTER806_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL807=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11649); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL807_tree = (CommonTree)adaptor.create(FULL807);
                    adaptor.addChild(root_0, FULL807_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN808=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11656); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN808_tree = (CommonTree)adaptor.create(JOIN808);
                    adaptor.addChild(root_0, JOIN808_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE809=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11663); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE809_tree = (CommonTree)adaptor.create(DEFINE809);
                    adaptor.addChild(root_0, DEFINE809_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION810=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11670); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION810_tree = (CommonTree)adaptor.create(PARTITION810);
                    adaptor.addChild(root_0, PARTITION810_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES811=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES811_tree = (CommonTree)adaptor.create(MATCHES811);
                    adaptor.addChild(root_0, MATCHES811_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt278=2;
            int LA278_0 = input.LA(1);
            if ( (LA278_0==IDENT) ) {
                alt278=1;
            }
            else if ( (LA278_0==TICKED_STRING_LITERAL) ) {
                alt278=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);
                throw nvae;
            }
            switch (alt278) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT812=null;
        CommonTree t_tree=null;
        CommonTree IDENT812_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt279=2;
            int LA279_0 = input.LA(1);
            if ( (LA279_0==IDENT) ) {
                alt279=1;
            }
            else if ( (LA279_0==TICKED_STRING_LITERAL) ) {
                alt279=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 279, 0, input);
                throw nvae;
            }
            switch (alt279) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT812=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT812_tree = (CommonTree)adaptor.create(IDENT812);
                    adaptor.addChild(root_0, IDENT812_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11729); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart813 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart814 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart815 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart816 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart817 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart818 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart819 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart820 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart821 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart822 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart823 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart824 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart825 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart826 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart827 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart828 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart829 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart830 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart831 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart832 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart833 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart834 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart835 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart836 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart837 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart838 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart839 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart840 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart841 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart842 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart843 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart844 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart845 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart846 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart847 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart848 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt308=8;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt308=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt308=6;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt308=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt308=7;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt308=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt308=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt308=2;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt308=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt308=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt308=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt308=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt308=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt308=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt308=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt308=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt308=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt308=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt308=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt308=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt308=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt308=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt308=3;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt308=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt308=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt308=7;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt308=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt308=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt308=2;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt308=1;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt308=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt308=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt308=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt308=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt308=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt308=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt308=6;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt308=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt308=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt308=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt308=8;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt308=7;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt308=6;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt308=8;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt308=4;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt308=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt308=5;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt308=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt308=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 308, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 308, 0, input);
                throw nvae;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod11754);
                    yearPart813=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart813.getTree());
                    int alt280=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA280_1 = input.LA(2);
                            if ( ((LA280_1>=TIMEPERIOD_MONTH && LA280_1<=TIMEPERIOD_MONTHS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA280_2 = input.LA(2);
                            if ( ((LA280_2>=TIMEPERIOD_MONTH && LA280_2<=TIMEPERIOD_MONTHS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA280_3 = input.LA(2);
                            if ( ((LA280_3>=TIMEPERIOD_MONTH && LA280_3<=TIMEPERIOD_MONTHS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA280_4 = input.LA(2);
                            if ( ((LA280_4>=TIMEPERIOD_MONTH && LA280_4<=TIMEPERIOD_MONTHS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA280_5 = input.LA(2);
                            if ( ((LA280_5>=TIMEPERIOD_MONTH && LA280_5<=TIMEPERIOD_MONTHS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA280_6 = input.LA(2);
                            if ( ((LA280_6>=TIMEPERIOD_MONTH && LA280_6<=TIMEPERIOD_MONTHS)) ) {
                                alt280=1;
                            }
                            }
                            break;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod11756);
                            monthPart814=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart814.getTree());
                            }
                            break;
                    }
                    int alt281=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA281_1 = input.LA(2);
                            if ( ((LA281_1>=TIMEPERIOD_WEEK && LA281_1<=TIMEPERIOD_WEEKS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA281_2 = input.LA(2);
                            if ( ((LA281_2>=TIMEPERIOD_WEEK && LA281_2<=TIMEPERIOD_WEEKS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA281_3 = input.LA(2);
                            if ( ((LA281_3>=TIMEPERIOD_WEEK && LA281_3<=TIMEPERIOD_WEEKS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA281_4 = input.LA(2);
                            if ( ((LA281_4>=TIMEPERIOD_WEEK && LA281_4<=TIMEPERIOD_WEEKS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA281_5 = input.LA(2);
                            if ( ((LA281_5>=TIMEPERIOD_WEEK && LA281_5<=TIMEPERIOD_WEEKS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA281_6 = input.LA(2);
                            if ( ((LA281_6>=TIMEPERIOD_WEEK && LA281_6<=TIMEPERIOD_WEEKS)) ) {
                                alt281=1;
                            }
                            }
                            break;
                    }
                    switch (alt281) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod11759);
                            weekPart815=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart815.getTree());
                            }
                            break;
                    }
                    int alt282=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA282_1 = input.LA(2);
                            if ( ((LA282_1>=TIMEPERIOD_DAY && LA282_1<=TIMEPERIOD_DAYS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA282_2 = input.LA(2);
                            if ( ((LA282_2>=TIMEPERIOD_DAY && LA282_2<=TIMEPERIOD_DAYS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA282_3 = input.LA(2);
                            if ( ((LA282_3>=TIMEPERIOD_DAY && LA282_3<=TIMEPERIOD_DAYS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA282_4 = input.LA(2);
                            if ( ((LA282_4>=TIMEPERIOD_DAY && LA282_4<=TIMEPERIOD_DAYS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA282_5 = input.LA(2);
                            if ( ((LA282_5>=TIMEPERIOD_DAY && LA282_5<=TIMEPERIOD_DAYS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA282_6 = input.LA(2);
                            if ( ((LA282_6>=TIMEPERIOD_DAY && LA282_6<=TIMEPERIOD_DAYS)) ) {
                                alt282=1;
                            }
                            }
                            break;
                    }
                    switch (alt282) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11762);
                            dayPart816=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart816.getTree());
                            }
                            break;
                    }
                    int alt283=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA283_1 = input.LA(2);
                            if ( ((LA283_1>=TIMEPERIOD_HOUR && LA283_1<=TIMEPERIOD_HOURS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA283_2 = input.LA(2);
                            if ( ((LA283_2>=TIMEPERIOD_HOUR && LA283_2<=TIMEPERIOD_HOURS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA283_3 = input.LA(2);
                            if ( ((LA283_3>=TIMEPERIOD_HOUR && LA283_3<=TIMEPERIOD_HOURS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA283_4 = input.LA(2);
                            if ( ((LA283_4>=TIMEPERIOD_HOUR && LA283_4<=TIMEPERIOD_HOURS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA283_5 = input.LA(2);
                            if ( ((LA283_5>=TIMEPERIOD_HOUR && LA283_5<=TIMEPERIOD_HOURS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA283_6 = input.LA(2);
                            if ( ((LA283_6>=TIMEPERIOD_HOUR && LA283_6<=TIMEPERIOD_HOURS)) ) {
                                alt283=1;
                            }
                            }
                            break;
                    }
                    switch (alt283) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11765);
                            hourPart817=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart817.getTree());
                            }
                            break;
                    }
                    int alt284=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA284_1 = input.LA(2);
                            if ( (LA284_1==MIN||(LA284_1>=TIMEPERIOD_MINUTE && LA284_1<=TIMEPERIOD_MINUTES)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA284_2 = input.LA(2);
                            if ( (LA284_2==MIN||(LA284_2>=TIMEPERIOD_MINUTE && LA284_2<=TIMEPERIOD_MINUTES)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA284_3 = input.LA(2);
                            if ( (LA284_3==MIN||(LA284_3>=TIMEPERIOD_MINUTE && LA284_3<=TIMEPERIOD_MINUTES)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA284_4 = input.LA(2);
                            if ( (LA284_4==MIN||(LA284_4>=TIMEPERIOD_MINUTE && LA284_4<=TIMEPERIOD_MINUTES)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA284_5 = input.LA(2);
                            if ( (LA284_5==MIN||(LA284_5>=TIMEPERIOD_MINUTE && LA284_5<=TIMEPERIOD_MINUTES)) ) {
                                alt284=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA284_6 = input.LA(2);
                            if ( (LA284_6==MIN||(LA284_6>=TIMEPERIOD_MINUTE && LA284_6<=TIMEPERIOD_MINUTES)) ) {
                                alt284=1;
                            }
                            }
                            break;
                    }
                    switch (alt284) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11768);
                            minutePart818=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart818.getTree());
                            }
                            break;
                    }
                    int alt285=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA285_1 = input.LA(2);
                            if ( ((LA285_1>=TIMEPERIOD_SEC && LA285_1<=TIMEPERIOD_SECONDS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA285_2 = input.LA(2);
                            if ( ((LA285_2>=TIMEPERIOD_SEC && LA285_2<=TIMEPERIOD_SECONDS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA285_3 = input.LA(2);
                            if ( ((LA285_3>=TIMEPERIOD_SEC && LA285_3<=TIMEPERIOD_SECONDS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA285_4 = input.LA(2);
                            if ( ((LA285_4>=TIMEPERIOD_SEC && LA285_4<=TIMEPERIOD_SECONDS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA285_5 = input.LA(2);
                            if ( ((LA285_5>=TIMEPERIOD_SEC && LA285_5<=TIMEPERIOD_SECONDS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA285_6 = input.LA(2);
                            if ( ((LA285_6>=TIMEPERIOD_SEC && LA285_6<=TIMEPERIOD_SECONDS)) ) {
                                alt285=1;
                            }
                            }
                            break;
                    }
                    switch (alt285) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11771);
                            secondPart819=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart819.getTree());
                            }
                            break;
                    }
                    int alt286=2;
                    int LA286_0 = input.LA(1);
                    if ( (LA286_0==NUM_DOUBLE||LA286_0==IDENT||LA286_0==QUESTION||LA286_0==NUM_INT||(LA286_0>=NUM_LONG && LA286_0<=NUM_FLOAT)) ) {
                        alt286=1;
                    }
                    switch (alt286) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11774);
                            millisecondPart820=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart820.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod11780);
                    monthPart821=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart821.getTree());
                    int alt287=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA287_1 = input.LA(2);
                            if ( ((LA287_1>=TIMEPERIOD_WEEK && LA287_1<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA287_2 = input.LA(2);
                            if ( ((LA287_2>=TIMEPERIOD_WEEK && LA287_2<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA287_3 = input.LA(2);
                            if ( ((LA287_3>=TIMEPERIOD_WEEK && LA287_3<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA287_4 = input.LA(2);
                            if ( ((LA287_4>=TIMEPERIOD_WEEK && LA287_4<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA287_5 = input.LA(2);
                            if ( ((LA287_5>=TIMEPERIOD_WEEK && LA287_5<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA287_6 = input.LA(2);
                            if ( ((LA287_6>=TIMEPERIOD_WEEK && LA287_6<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod11782);
                            weekPart822=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart822.getTree());
                            }
                            break;
                    }
                    int alt288=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA288_1 = input.LA(2);
                            if ( ((LA288_1>=TIMEPERIOD_DAY && LA288_1<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA288_2 = input.LA(2);
                            if ( ((LA288_2>=TIMEPERIOD_DAY && LA288_2<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA288_3 = input.LA(2);
                            if ( ((LA288_3>=TIMEPERIOD_DAY && LA288_3<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA288_4 = input.LA(2);
                            if ( ((LA288_4>=TIMEPERIOD_DAY && LA288_4<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA288_5 = input.LA(2);
                            if ( ((LA288_5>=TIMEPERIOD_DAY && LA288_5<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA288_6 = input.LA(2);
                            if ( ((LA288_6>=TIMEPERIOD_DAY && LA288_6<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11785);
                            dayPart823=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart823.getTree());
                            }
                            break;
                    }
                    int alt289=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA289_1 = input.LA(2);
                            if ( ((LA289_1>=TIMEPERIOD_HOUR && LA289_1<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA289_2 = input.LA(2);
                            if ( ((LA289_2>=TIMEPERIOD_HOUR && LA289_2<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA289_3 = input.LA(2);
                            if ( ((LA289_3>=TIMEPERIOD_HOUR && LA289_3<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA289_4 = input.LA(2);
                            if ( ((LA289_4>=TIMEPERIOD_HOUR && LA289_4<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA289_5 = input.LA(2);
                            if ( ((LA289_5>=TIMEPERIOD_HOUR && LA289_5<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA289_6 = input.LA(2);
                            if ( ((LA289_6>=TIMEPERIOD_HOUR && LA289_6<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11788);
                            hourPart824=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart824.getTree());
                            }
                            break;
                    }
                    int alt290=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA290_1 = input.LA(2);
                            if ( (LA290_1==MIN||(LA290_1>=TIMEPERIOD_MINUTE && LA290_1<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA290_2 = input.LA(2);
                            if ( (LA290_2==MIN||(LA290_2>=TIMEPERIOD_MINUTE && LA290_2<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA290_3 = input.LA(2);
                            if ( (LA290_3==MIN||(LA290_3>=TIMEPERIOD_MINUTE && LA290_3<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA290_4 = input.LA(2);
                            if ( (LA290_4==MIN||(LA290_4>=TIMEPERIOD_MINUTE && LA290_4<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA290_5 = input.LA(2);
                            if ( (LA290_5==MIN||(LA290_5>=TIMEPERIOD_MINUTE && LA290_5<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA290_6 = input.LA(2);
                            if ( (LA290_6==MIN||(LA290_6>=TIMEPERIOD_MINUTE && LA290_6<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                    }
                    switch (alt290) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11791);
                            minutePart825=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart825.getTree());
                            }
                            break;
                    }
                    int alt291=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA291_1 = input.LA(2);
                            if ( ((LA291_1>=TIMEPERIOD_SEC && LA291_1<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA291_2 = input.LA(2);
                            if ( ((LA291_2>=TIMEPERIOD_SEC && LA291_2<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA291_3 = input.LA(2);
                            if ( ((LA291_3>=TIMEPERIOD_SEC && LA291_3<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA291_4 = input.LA(2);
                            if ( ((LA291_4>=TIMEPERIOD_SEC && LA291_4<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA291_5 = input.LA(2);
                            if ( ((LA291_5>=TIMEPERIOD_SEC && LA291_5<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA291_6 = input.LA(2);
                            if ( ((LA291_6>=TIMEPERIOD_SEC && LA291_6<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                    }
                    switch (alt291) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11794);
                            secondPart826=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart826.getTree());
                            }
                            break;
                    }
                    int alt292=2;
                    int LA292_0 = input.LA(1);
                    if ( (LA292_0==NUM_DOUBLE||LA292_0==IDENT||LA292_0==QUESTION||LA292_0==NUM_INT||(LA292_0>=NUM_LONG && LA292_0<=NUM_FLOAT)) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11797);
                            millisecondPart827=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart827.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod11803);
                    weekPart828=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart828.getTree());
                    int alt293=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA293_1 = input.LA(2);
                            if ( ((LA293_1>=TIMEPERIOD_DAY && LA293_1<=TIMEPERIOD_DAYS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA293_2 = input.LA(2);
                            if ( ((LA293_2>=TIMEPERIOD_DAY && LA293_2<=TIMEPERIOD_DAYS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA293_3 = input.LA(2);
                            if ( ((LA293_3>=TIMEPERIOD_DAY && LA293_3<=TIMEPERIOD_DAYS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA293_4 = input.LA(2);
                            if ( ((LA293_4>=TIMEPERIOD_DAY && LA293_4<=TIMEPERIOD_DAYS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA293_5 = input.LA(2);
                            if ( ((LA293_5>=TIMEPERIOD_DAY && LA293_5<=TIMEPERIOD_DAYS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA293_6 = input.LA(2);
                            if ( ((LA293_6>=TIMEPERIOD_DAY && LA293_6<=TIMEPERIOD_DAYS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                    }
                    switch (alt293) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11805);
                            dayPart829=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart829.getTree());
                            }
                            break;
                    }
                    int alt294=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA294_1 = input.LA(2);
                            if ( ((LA294_1>=TIMEPERIOD_HOUR && LA294_1<=TIMEPERIOD_HOURS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA294_2 = input.LA(2);
                            if ( ((LA294_2>=TIMEPERIOD_HOUR && LA294_2<=TIMEPERIOD_HOURS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA294_3 = input.LA(2);
                            if ( ((LA294_3>=TIMEPERIOD_HOUR && LA294_3<=TIMEPERIOD_HOURS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA294_4 = input.LA(2);
                            if ( ((LA294_4>=TIMEPERIOD_HOUR && LA294_4<=TIMEPERIOD_HOURS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA294_5 = input.LA(2);
                            if ( ((LA294_5>=TIMEPERIOD_HOUR && LA294_5<=TIMEPERIOD_HOURS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA294_6 = input.LA(2);
                            if ( ((LA294_6>=TIMEPERIOD_HOUR && LA294_6<=TIMEPERIOD_HOURS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                    }
                    switch (alt294) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11808);
                            hourPart830=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart830.getTree());
                            }
                            break;
                    }
                    int alt295=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA295_1 = input.LA(2);
                            if ( (LA295_1==MIN||(LA295_1>=TIMEPERIOD_MINUTE && LA295_1<=TIMEPERIOD_MINUTES)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA295_2 = input.LA(2);
                            if ( (LA295_2==MIN||(LA295_2>=TIMEPERIOD_MINUTE && LA295_2<=TIMEPERIOD_MINUTES)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA295_3 = input.LA(2);
                            if ( (LA295_3==MIN||(LA295_3>=TIMEPERIOD_MINUTE && LA295_3<=TIMEPERIOD_MINUTES)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA295_4 = input.LA(2);
                            if ( (LA295_4==MIN||(LA295_4>=TIMEPERIOD_MINUTE && LA295_4<=TIMEPERIOD_MINUTES)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA295_5 = input.LA(2);
                            if ( (LA295_5==MIN||(LA295_5>=TIMEPERIOD_MINUTE && LA295_5<=TIMEPERIOD_MINUTES)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA295_6 = input.LA(2);
                            if ( (LA295_6==MIN||(LA295_6>=TIMEPERIOD_MINUTE && LA295_6<=TIMEPERIOD_MINUTES)) ) {
                                alt295=1;
                            }
                            }
                            break;
                    }
                    switch (alt295) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11811);
                            minutePart831=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart831.getTree());
                            }
                            break;
                    }
                    int alt296=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA296_1 = input.LA(2);
                            if ( ((LA296_1>=TIMEPERIOD_SEC && LA296_1<=TIMEPERIOD_SECONDS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA296_2 = input.LA(2);
                            if ( ((LA296_2>=TIMEPERIOD_SEC && LA296_2<=TIMEPERIOD_SECONDS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA296_3 = input.LA(2);
                            if ( ((LA296_3>=TIMEPERIOD_SEC && LA296_3<=TIMEPERIOD_SECONDS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA296_4 = input.LA(2);
                            if ( ((LA296_4>=TIMEPERIOD_SEC && LA296_4<=TIMEPERIOD_SECONDS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA296_5 = input.LA(2);
                            if ( ((LA296_5>=TIMEPERIOD_SEC && LA296_5<=TIMEPERIOD_SECONDS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA296_6 = input.LA(2);
                            if ( ((LA296_6>=TIMEPERIOD_SEC && LA296_6<=TIMEPERIOD_SECONDS)) ) {
                                alt296=1;
                            }
                            }
                            break;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11814);
                            secondPart832=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart832.getTree());
                            }
                            break;
                    }
                    int alt297=2;
                    int LA297_0 = input.LA(1);
                    if ( (LA297_0==NUM_DOUBLE||LA297_0==IDENT||LA297_0==QUESTION||LA297_0==NUM_INT||(LA297_0>=NUM_LONG && LA297_0<=NUM_FLOAT)) ) {
                        alt297=1;
                    }
                    switch (alt297) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11817);
                            millisecondPart833=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart833.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11823);
                    dayPart834=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart834.getTree());
                    int alt298=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA298_1 = input.LA(2);
                            if ( ((LA298_1>=TIMEPERIOD_HOUR && LA298_1<=TIMEPERIOD_HOURS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA298_2 = input.LA(2);
                            if ( ((LA298_2>=TIMEPERIOD_HOUR && LA298_2<=TIMEPERIOD_HOURS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA298_3 = input.LA(2);
                            if ( ((LA298_3>=TIMEPERIOD_HOUR && LA298_3<=TIMEPERIOD_HOURS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA298_4 = input.LA(2);
                            if ( ((LA298_4>=TIMEPERIOD_HOUR && LA298_4<=TIMEPERIOD_HOURS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA298_5 = input.LA(2);
                            if ( ((LA298_5>=TIMEPERIOD_HOUR && LA298_5<=TIMEPERIOD_HOURS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA298_6 = input.LA(2);
                            if ( ((LA298_6>=TIMEPERIOD_HOUR && LA298_6<=TIMEPERIOD_HOURS)) ) {
                                alt298=1;
                            }
                            }
                            break;
                    }
                    switch (alt298) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11825);
                            hourPart835=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart835.getTree());
                            }
                            break;
                    }
                    int alt299=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA299_1 = input.LA(2);
                            if ( (LA299_1==MIN||(LA299_1>=TIMEPERIOD_MINUTE && LA299_1<=TIMEPERIOD_MINUTES)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA299_2 = input.LA(2);
                            if ( (LA299_2==MIN||(LA299_2>=TIMEPERIOD_MINUTE && LA299_2<=TIMEPERIOD_MINUTES)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA299_3 = input.LA(2);
                            if ( (LA299_3==MIN||(LA299_3>=TIMEPERIOD_MINUTE && LA299_3<=TIMEPERIOD_MINUTES)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA299_4 = input.LA(2);
                            if ( (LA299_4==MIN||(LA299_4>=TIMEPERIOD_MINUTE && LA299_4<=TIMEPERIOD_MINUTES)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA299_5 = input.LA(2);
                            if ( (LA299_5==MIN||(LA299_5>=TIMEPERIOD_MINUTE && LA299_5<=TIMEPERIOD_MINUTES)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA299_6 = input.LA(2);
                            if ( (LA299_6==MIN||(LA299_6>=TIMEPERIOD_MINUTE && LA299_6<=TIMEPERIOD_MINUTES)) ) {
                                alt299=1;
                            }
                            }
                            break;
                    }
                    switch (alt299) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11828);
                            minutePart836=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart836.getTree());
                            }
                            break;
                    }
                    int alt300=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA300_1 = input.LA(2);
                            if ( ((LA300_1>=TIMEPERIOD_SEC && LA300_1<=TIMEPERIOD_SECONDS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA300_2 = input.LA(2);
                            if ( ((LA300_2>=TIMEPERIOD_SEC && LA300_2<=TIMEPERIOD_SECONDS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA300_3 = input.LA(2);
                            if ( ((LA300_3>=TIMEPERIOD_SEC && LA300_3<=TIMEPERIOD_SECONDS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA300_4 = input.LA(2);
                            if ( ((LA300_4>=TIMEPERIOD_SEC && LA300_4<=TIMEPERIOD_SECONDS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA300_5 = input.LA(2);
                            if ( ((LA300_5>=TIMEPERIOD_SEC && LA300_5<=TIMEPERIOD_SECONDS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA300_6 = input.LA(2);
                            if ( ((LA300_6>=TIMEPERIOD_SEC && LA300_6<=TIMEPERIOD_SECONDS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11831);
                            secondPart837=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart837.getTree());
                            }
                            break;
                    }
                    int alt301=2;
                    int LA301_0 = input.LA(1);
                    if ( (LA301_0==NUM_DOUBLE||LA301_0==IDENT||LA301_0==QUESTION||LA301_0==NUM_INT||(LA301_0>=NUM_LONG && LA301_0<=NUM_FLOAT)) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11834);
                            millisecondPart838=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart838.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11840);
                    hourPart839=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart839.getTree());
                    int alt302=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA302_1 = input.LA(2);
                            if ( (LA302_1==MIN||(LA302_1>=TIMEPERIOD_MINUTE && LA302_1<=TIMEPERIOD_MINUTES)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA302_2 = input.LA(2);
                            if ( (LA302_2==MIN||(LA302_2>=TIMEPERIOD_MINUTE && LA302_2<=TIMEPERIOD_MINUTES)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA302_3 = input.LA(2);
                            if ( (LA302_3==MIN||(LA302_3>=TIMEPERIOD_MINUTE && LA302_3<=TIMEPERIOD_MINUTES)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA302_4 = input.LA(2);
                            if ( (LA302_4==MIN||(LA302_4>=TIMEPERIOD_MINUTE && LA302_4<=TIMEPERIOD_MINUTES)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA302_5 = input.LA(2);
                            if ( (LA302_5==MIN||(LA302_5>=TIMEPERIOD_MINUTE && LA302_5<=TIMEPERIOD_MINUTES)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA302_6 = input.LA(2);
                            if ( (LA302_6==MIN||(LA302_6>=TIMEPERIOD_MINUTE && LA302_6<=TIMEPERIOD_MINUTES)) ) {
                                alt302=1;
                            }
                            }
                            break;
                    }
                    switch (alt302) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11842);
                            minutePart840=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart840.getTree());
                            }
                            break;
                    }
                    int alt303=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA303_1 = input.LA(2);
                            if ( ((LA303_1>=TIMEPERIOD_SEC && LA303_1<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA303_2 = input.LA(2);
                            if ( ((LA303_2>=TIMEPERIOD_SEC && LA303_2<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA303_3 = input.LA(2);
                            if ( ((LA303_3>=TIMEPERIOD_SEC && LA303_3<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA303_4 = input.LA(2);
                            if ( ((LA303_4>=TIMEPERIOD_SEC && LA303_4<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA303_5 = input.LA(2);
                            if ( ((LA303_5>=TIMEPERIOD_SEC && LA303_5<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA303_6 = input.LA(2);
                            if ( ((LA303_6>=TIMEPERIOD_SEC && LA303_6<=TIMEPERIOD_SECONDS)) ) {
                                alt303=1;
                            }
                            }
                            break;
                    }
                    switch (alt303) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11845);
                            secondPart841=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart841.getTree());
                            }
                            break;
                    }
                    int alt304=2;
                    int LA304_0 = input.LA(1);
                    if ( (LA304_0==NUM_DOUBLE||LA304_0==IDENT||LA304_0==QUESTION||LA304_0==NUM_INT||(LA304_0>=NUM_LONG && LA304_0<=NUM_FLOAT)) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11848);
                            millisecondPart842=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart842.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11854);
                    minutePart843=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart843.getTree());
                    int alt305=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA305_1 = input.LA(2);
                            if ( ((LA305_1>=TIMEPERIOD_SEC && LA305_1<=TIMEPERIOD_SECONDS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA305_2 = input.LA(2);
                            if ( ((LA305_2>=TIMEPERIOD_SEC && LA305_2<=TIMEPERIOD_SECONDS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA305_3 = input.LA(2);
                            if ( ((LA305_3>=TIMEPERIOD_SEC && LA305_3<=TIMEPERIOD_SECONDS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA305_4 = input.LA(2);
                            if ( ((LA305_4>=TIMEPERIOD_SEC && LA305_4<=TIMEPERIOD_SECONDS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA305_5 = input.LA(2);
                            if ( ((LA305_5>=TIMEPERIOD_SEC && LA305_5<=TIMEPERIOD_SECONDS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA305_6 = input.LA(2);
                            if ( ((LA305_6>=TIMEPERIOD_SEC && LA305_6<=TIMEPERIOD_SECONDS)) ) {
                                alt305=1;
                            }
                            }
                            break;
                    }
                    switch (alt305) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11856);
                            secondPart844=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart844.getTree());
                            }
                            break;
                    }
                    int alt306=2;
                    int LA306_0 = input.LA(1);
                    if ( (LA306_0==NUM_DOUBLE||LA306_0==IDENT||LA306_0==QUESTION||LA306_0==NUM_INT||(LA306_0>=NUM_LONG && LA306_0<=NUM_FLOAT)) ) {
                        alt306=1;
                    }
                    switch (alt306) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11859);
                            millisecondPart845=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart845.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11865);
                    secondPart846=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart846.getTree());
                    int alt307=2;
                    int LA307_0 = input.LA(1);
                    if ( (LA307_0==NUM_DOUBLE||LA307_0==IDENT||LA307_0==QUESTION||LA307_0==NUM_INT||(LA307_0>=NUM_LONG && LA307_0<=NUM_FLOAT)) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11867);
                            millisecondPart847=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart847.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11873);
                    millisecondPart848=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart848.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS851=null;
        Token TIMEPERIOD_YEAR852=null;
        EsperEPL2GrammarParser.number_return number849 = null;
        EsperEPL2GrammarParser.substitution_return substitution850 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS851_tree=null;
        CommonTree TIMEPERIOD_YEAR852_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt309=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt309=1;
                }
                break;
            case IDENT:
                {
                alt309=2;
                }
                break;
            case QUESTION:
                {
                alt309=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 309, 0, input);
                throw nvae;
            }
            switch (alt309) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_yearPart11920);
                    number849=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number849.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart11924); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart11926);
                    substitution850=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution850.getTree());
                    }
                    break;
            }
            int alt310=2;
            int LA310_0 = input.LA(1);
            if ( (LA310_0==TIMEPERIOD_YEARS) ) {
                alt310=1;
            }
            else if ( (LA310_0==TIMEPERIOD_YEAR) ) {
                alt310=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 310, 0, input);
                throw nvae;
            }
            switch (alt310) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS851=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart11930); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS851);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR852=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart11934); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR852);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS855=null;
        Token TIMEPERIOD_MONTH856=null;
        EsperEPL2GrammarParser.number_return number853 = null;
        EsperEPL2GrammarParser.substitution_return substitution854 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS855_tree=null;
        CommonTree TIMEPERIOD_MONTH856_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt311=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt311=1;
                }
                break;
            case IDENT:
                {
                alt311=2;
                }
                break;
            case QUESTION:
                {
                alt311=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 311, 0, input);
                throw nvae;
            }
            switch (alt311) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_monthPart11982);
                    number853=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number853.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart11986); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart11988);
                    substitution854=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution854.getTree());
                    }
                    break;
            }
            int alt312=2;
            int LA312_0 = input.LA(1);
            if ( (LA312_0==TIMEPERIOD_MONTHS) ) {
                alt312=1;
            }
            else if ( (LA312_0==TIMEPERIOD_MONTH) ) {
                alt312=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 312, 0, input);
                throw nvae;
            }
            switch (alt312) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS855=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart11992); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS855);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH856=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart11996); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH856);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS859=null;
        Token TIMEPERIOD_WEEK860=null;
        EsperEPL2GrammarParser.number_return number857 = null;
        EsperEPL2GrammarParser.substitution_return substitution858 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS859_tree=null;
        CommonTree TIMEPERIOD_WEEK860_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt313=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt313=1;
                }
                break;
            case IDENT:
                {
                alt313=2;
                }
                break;
            case QUESTION:
                {
                alt313=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 313, 0, input);
                throw nvae;
            }
            switch (alt313) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekPart12044);
                    number857=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number857.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart12048); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart12050);
                    substitution858=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution858.getTree());
                    }
                    break;
            }
            int alt314=2;
            int LA314_0 = input.LA(1);
            if ( (LA314_0==TIMEPERIOD_WEEKS) ) {
                alt314=1;
            }
            else if ( (LA314_0==TIMEPERIOD_WEEK) ) {
                alt314=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);
                throw nvae;
            }
            switch (alt314) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS859=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart12054); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS859);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK860=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart12058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK860);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS863=null;
        Token TIMEPERIOD_DAY864=null;
        EsperEPL2GrammarParser.number_return number861 = null;
        EsperEPL2GrammarParser.substitution_return substitution862 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS863_tree=null;
        CommonTree TIMEPERIOD_DAY864_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt315=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt315=1;
                }
                break;
            case IDENT:
                {
                alt315=2;
                }
                break;
            case QUESTION:
                {
                alt315=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 315, 0, input);
                throw nvae;
            }
            switch (alt315) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart12106);
                    number861=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number861.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart12110); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart12112);
                    substitution862=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution862.getTree());
                    }
                    break;
            }
            int alt316=2;
            int LA316_0 = input.LA(1);
            if ( (LA316_0==TIMEPERIOD_DAYS) ) {
                alt316=1;
            }
            else if ( (LA316_0==TIMEPERIOD_DAY) ) {
                alt316=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 316, 0, input);
                throw nvae;
            }
            switch (alt316) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS863=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart12116); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS863);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY864=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart12120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY864);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS867=null;
        Token TIMEPERIOD_HOUR868=null;
        EsperEPL2GrammarParser.number_return number865 = null;
        EsperEPL2GrammarParser.substitution_return substitution866 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS867_tree=null;
        CommonTree TIMEPERIOD_HOUR868_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt317=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt317=1;
                }
                break;
            case IDENT:
                {
                alt317=2;
                }
                break;
            case QUESTION:
                {
                alt317=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 317, 0, input);
                throw nvae;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart12169);
                    number865=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number865.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart12173); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart12175);
                    substitution866=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution866.getTree());
                    }
                    break;
            }
            int alt318=2;
            int LA318_0 = input.LA(1);
            if ( (LA318_0==TIMEPERIOD_HOURS) ) {
                alt318=1;
            }
            else if ( (LA318_0==TIMEPERIOD_HOUR) ) {
                alt318=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);
                throw nvae;
            }
            switch (alt318) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS867=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart12179); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS867);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR868=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart12183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR868);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES871=null;
        Token TIMEPERIOD_MINUTE872=null;
        Token MIN873=null;
        EsperEPL2GrammarParser.number_return number869 = null;
        EsperEPL2GrammarParser.substitution_return substitution870 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES871_tree=null;
        CommonTree TIMEPERIOD_MINUTE872_tree=null;
        CommonTree MIN873_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt319=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt319=1;
                }
                break;
            case IDENT:
                {
                alt319=2;
                }
                break;
            case QUESTION:
                {
                alt319=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);
                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart12232);
                    number869=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number869.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart12236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart12238);
                    substitution870=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution870.getTree());
                    }
                    break;
            }
            int alt320=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt320=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt320=2;
                }
                break;
            case MIN:
                {
                alt320=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);
                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES871=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart12242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES871);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE872=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart12246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE872);
                    }
                    break;
                case 3 :
                    {
                    MIN873=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart12250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN873);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS876=null;
        Token TIMEPERIOD_SECOND877=null;
        Token TIMEPERIOD_SEC878=null;
        EsperEPL2GrammarParser.number_return number874 = null;
        EsperEPL2GrammarParser.substitution_return substitution875 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS876_tree=null;
        CommonTree TIMEPERIOD_SECOND877_tree=null;
        CommonTree TIMEPERIOD_SEC878_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt321=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt321=1;
                }
                break;
            case IDENT:
                {
                alt321=2;
                }
                break;
            case QUESTION:
                {
                alt321=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);
                throw nvae;
            }
            switch (alt321) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart12300);
                    number874=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number874.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart12304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart12306);
                    substitution875=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution875.getTree());
                    }
                    break;
            }
            int alt322=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt322=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt322=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt322=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 322, 0, input);
                throw nvae;
            }
            switch (alt322) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS876=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart12310); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS876);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND877=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart12314); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND877);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC878=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart12318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC878);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS881=null;
        Token TIMEPERIOD_MILLISECOND882=null;
        Token TIMEPERIOD_MILLISEC883=null;
        EsperEPL2GrammarParser.number_return number879 = null;
        EsperEPL2GrammarParser.substitution_return substitution880 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS881_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND882_tree=null;
        CommonTree TIMEPERIOD_MILLISEC883_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt323=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt323=1;
                }
                break;
            case IDENT:
                {
                alt323=2;
                }
                break;
            case QUESTION:
                {
                alt323=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);
                throw nvae;
            }
            switch (alt323) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart12368);
                    number879=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number879.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart12372); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart12374);
                    substitution880=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution880.getTree());
                    }
                    break;
            }
            int alt324=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt324=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt324=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt324=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);
                throw nvae;
            }
            switch (alt324) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS881=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart12378); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS881);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND882=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart12382); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND882);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC883=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart12386); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC883);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt325=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt325=1;
                }
                break;
            case NUM_LONG:
                {
                alt325=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt325=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt325=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 325, 0, input);
                throw nvae;
            }
            switch (alt325) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number12441); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number12458); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number12475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number12492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution12513); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant884 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant885 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt326=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt326=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt326=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt326=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt326=4;
                }
                break;
            case VALUE_NULL:
                {
                alt326=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);
                throw nvae;
            }
            switch (alt326) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant12532);
                    numberconstant884=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant884.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant12539);
                    stringconstant885=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant885.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant12552); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant12572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant12592); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number886 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt327=3;
            int LA327_0 = input.LA(1);
            if ( (LA327_0==MINUS) ) {
                alt327=1;
            }
            else if ( (LA327_0==PLUS) ) {
                alt327=2;
            }
            switch (alt327) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant12614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant12620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant12624);
            number886=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number886.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number886!=null?((CommonTree)number886.tree):null).getType(), "-" + (number886!=null?input.toString(number886.start,number886.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt328=2;
            int LA328_0 = input.LA(1);
            if ( (LA328_0==STRING_LITERAL) ) {
                alt328=1;
            }
            else if ( (LA328_0==QUOTED_STRING_LITERAL) ) {
                alt328=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);
                throw nvae;
            }
            switch (alt328) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant12653); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4564);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5964);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7828);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8666);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8734);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10044);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10467);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10478);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10489);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10500);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10511);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10523);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10534);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10545);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10558);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA185 dfa185 = new DFA185(this);
    static final String DFA185_eotS =
        "\u0ba8\uffff";
    static final String DFA185_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0b73\uffff";
    static final String DFA185_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\12\uffff\1\u011f\171\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\u012a\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73"+
        "\uffff\1\5\73\uffff\1\5\2\6\115\uffff\2\6\103\uffff\2\6\72\uffff"+
        "\2\6\112\uffff\2\6\103\uffff\2\6\103\uffff\2\6\103\uffff\2\6\71"+
        "\uffff\2\6\111\uffff\2\6\101\uffff\2\6\75\uffff\2\6\101\uffff\2"+
        "\6\101\uffff\2\6\101\uffff\2\6\162\uffff\1\0\30\uffff\1\0\53\uffff"+
        "\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\137\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\5\uffff\1\0\30\uffff\1\0\54\uffff"+
        "\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\5\uffff\1\0\140\uffff\1\0\5\uffff\1\0\141\uffff"+
        "\1\0\30\uffff\1\0\5\uffff";
    static final String DFA185_maxS =
        "\2\u0141\13\uffff\1\u0141\3\uffff\1\u013e\2\uffff\2\u013e\2\uffff"+
        "\4\u013e\1\uffff\2\u013e\12\uffff\3\u013e\2\uffff\3\u013e\3\uffff"+
        "\1\u013e\12\uffff\1\u011f\171\uffff\1\u0141\73\uffff\1\u0141\73"+
        "\uffff\1\u0141\73\uffff\1\u0141\73\uffff\1\u0141\73\uffff\1\u0141"+
        "\73\uffff\1\u0141\73\uffff\1\u0141\73\uffff\1\u0141\73\uffff\1\u0141"+
        "\73\uffff\1\u0141\73\uffff\1\u013a\73\uffff\1\u0141\73\uffff\1\u0141"+
        "\73\uffff\1\u0141\73\uffff\1\u0141\73\uffff\1\u013f\2\u0137\115"+
        "\uffff\2\u0137\103\uffff\2\u0137\72\uffff\2\u0137\112\uffff\2\u0137"+
        "\103\uffff\2\u0137\103\uffff\2\u0137\103\uffff\2\u0137\71\uffff"+
        "\2\u0137\111\uffff\2\u0137\101\uffff\2\u0137\75\uffff\2\u0137\101"+
        "\uffff\2\u0137\101\uffff\2\u0137\101\uffff\2\u0137\162\uffff\1\0"+
        "\30\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0"+
        "\137\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\5\uffff\1"+
        "\0\30\uffff\1\0\54\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1"+
        "\0\55\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\140\uffff\1"+
        "\0\5\uffff\1\0\141\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA185_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\56\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\1\62\uffff\1\10\1\4\u0405\uffff\115\6\2\uffff\103\6\2\uffff"+
        "\72\6\2\uffff\112\6\2\uffff\103\6\2\uffff\103\6\2\uffff\103\6\2"+
        "\uffff\71\6\2\uffff\111\6\2\uffff\101\6\2\uffff\73\6\4\uffff\101"+
        "\6\2\uffff\101\6\2\uffff\101\6\2\uffff\102\6\1\11\57\6\1\uffff\30"+
        "\6\1\uffff\53\6\1\uffff\5\6\1\uffff\53\6\1\uffff\5\6\1\uffff\30"+
        "\6\1\uffff\62\6\1\uffff\23\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\5\6\1\uffff\30\6\1\uffff\54\6\1\uffff\5\6\1\uffff\31"+
        "\6\1\uffff\31\6\1\uffff\55\6\1\uffff\5\6\1\uffff\55\6\1\uffff\5"+
        "\6\1\uffff\62\6\2\uffff\54\6\1\uffff\5\6\1\uffff\62\6\1\uffff\32"+
        "\6\1\uffff\23\6\1\uffff\30\6\1\uffff\5\6";
    static final String DFA185_specialS =
        "\1\0\u00b8\uffff\1\1\73\uffff\1\2\73\uffff\1\3\73\uffff\1\4\73"+
        "\uffff\1\5\73\uffff\1\6\73\uffff\1\7\73\uffff\1\10\73\uffff\1\11"+
        "\73\uffff\1\12\73\uffff\1\13\73\uffff\1\14\73\uffff\1\15\73\uffff"+
        "\1\16\73\uffff\1\17\73\uffff\1\20\73\uffff\1\21\1\22\1\23\115\uffff"+
        "\1\24\1\25\103\uffff\1\26\1\27\72\uffff\1\30\1\31\112\uffff\1\32"+
        "\1\33\103\uffff\1\34\1\35\103\uffff\1\36\1\37\103\uffff\1\40\1\41"+
        "\71\uffff\1\42\1\43\111\uffff\1\44\1\45\101\uffff\1\46\1\47\75\uffff"+
        "\1\50\1\51\101\uffff\1\52\1\53\101\uffff\1\54\1\55\101\uffff\1\56"+
        "\1\57\162\uffff\1\60\30\uffff\1\61\53\uffff\1\62\5\uffff\1\63\53"+
        "\uffff\1\64\5\uffff\1\65\137\uffff\1\66\30\uffff\1\67\30\uffff\1"+
        "\70\30\uffff\1\71\5\uffff\1\72\30\uffff\1\73\54\uffff\1\74\5\uffff"+
        "\1\75\31\uffff\1\76\31\uffff\1\77\55\uffff\1\100\5\uffff\1\101\55"+
        "\uffff\1\102\5\uffff\1\103\140\uffff\1\104\5\uffff\1\105\141\uffff"+
        "\1\106\30\uffff\1\107\5\uffff}>";
    static final String[] DFA185_transitionS = {
            "\1\64\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\51\1\52\1\75\1\76\1\53\1\77\2\16"+
            "\1\56\1\57\1\60\1\100\1\uffff\1\16\1\uffff\4\16\22\uffff\3\2"+
            "\5\uffff\3\16\2\uffff\1\16\1\uffff\2\16\u0094\uffff\1\2\16\uffff"+
            "\1\16\1\15\7\uffff\1\2\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff"+
            "\1\101\1\uffff\1\2\4\uffff\1\16\2\2",
            "\1\102\4\uffff\1\102\3\uffff\1\102\3\uffff\11\102\10\uffff"+
            "\1\102\1\uffff\4\102\12\uffff\3\102\11\uffff\10\102\2\uffff"+
            "\1\102\1\uffff\5\102\2\uffff\1\102\1\uffff\4\102\32\uffff\3"+
            "\102\2\uffff\1\102\1\uffff\2\102\u0094\uffff\1\2\16\uffff\1"+
            "\102\33\uffff\1\2\4\uffff\1\102\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\4\uffff\1\166\2\uffff\2\166\3\uffff\11\166\1\165\1"+
            "\166\6\uffff\1\166\1\uffff\4\166\12\uffff\3\166\11\uffff\22"+
            "\166\1\uffff\1\166\1\uffff\4\166\22\uffff\3\166\5\uffff\3\166"+
            "\2\uffff\1\166\1\uffff\2\166\u0094\uffff\1\166\16\uffff\2\166"+
            "\7\uffff\2\166\1\uffff\2\166\11\uffff\1\166\2\uffff\1\166\1"+
            "\uffff\1\166\4\uffff\3\166",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u00b9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u00f5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u0131\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u016d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u01a9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u01e5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u0221\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u025d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u0299\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u02d5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u0311\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u034d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u0389\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u03c5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u0401\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a6"+
            "\uffff\1\16\1\uffff\1\u043d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0479",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b0\4\uffff\1\u048e\2\uffff\1\u04be\1\u048f\3\uffff\1"+
            "\u0490\1\u0491\1\u0492\1\u0493\1\u0494\1\u0495\1\u0496\1\u0497"+
            "\1\u048d\1\uffff\1\u047e\6\uffff\1\u04b3\1\uffff\1\u04b5\1\u04b1"+
            "\1\u04b2\1\u04b4\5\uffff\1\u047d\1\u047c\3\uffff\1\u0498\1\u0499"+
            "\1\u049a\11\uffff\1\u049e\1\u049f\1\u04a0\1\u04a2\1\u04a3\1"+
            "\u04a4\1\u04a5\1\u04a6\1\u04b9\1\u04ba\1\u04a7\1\u04bb\1\u04a8"+
            "\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u04bc\1\uffff\1\u04ad\1\uffff"+
            "\1\u04ae\1\u04a1\1\u048c\1\u04af\22\uffff\1\u0485\1\u0486\1"+
            "\u0487\5\uffff\1\u04b6\1\u04b7\1\u04b8\2\uffff\1\u049b\1\uffff"+
            "\1\u049c\1\u049d\u0094\uffff\1\u0484\16\uffff\1\u048a\1\u0489"+
            "\5\uffff\1\u04bf\1\uffff\1\u0480\1\u0488\1\uffff\1\u047a\1\u047b"+
            "\11\uffff\1\u047f\2\uffff\1\u04bd\1\uffff\1\u0481\4\uffff\1"+
            "\u048b\1\u0482\1\u0483",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04f6\4\uffff\1\u04d4\2\uffff\1\u0504\1\u04d5\3\uffff\1"+
            "\u04d6\1\u04d7\1\u04d8\1\u04d9\1\u04da\1\u04db\1\u04dc\1\u04dd"+
            "\1\u04d3\1\uffff\1\u04c2\6\uffff\1\u04f9\1\uffff\1\u04fb\1\u04f7"+
            "\1\u04f8\1\u04fa\5\uffff\1\u04c1\1\u04c0\3\uffff\1\u04de\1\u04df"+
            "\1\u04e0\11\uffff\1\u04e4\1\u04e5\1\u04e6\1\u04e8\1\u04e9\1"+
            "\u04ea\1\u04eb\1\u04ec\1\u04ff\1\u0500\1\u04ed\1\u0501\1\u04ee"+
            "\1\u04ef\1\u04f0\1\u04f1\1\u04f2\1\u0502\1\uffff\1\u04f3\1\uffff"+
            "\1\u04f4\1\u04e7\1\u04d2\1\u04f5\22\uffff\1\u04cb\1\u04cc\1"+
            "\u04cd\5\uffff\1\u04fc\1\u04fd\1\u04fe\2\uffff\1\u04e1\1\uffff"+
            "\1\u04e2\1\u04e3\u0094\uffff\1\u04c8\16\uffff\1\u04d0\1\u04cf"+
            "\7\uffff\1\u04c4\1\u04ce\1\uffff\1\u04c9\1\u04ca\11\uffff\1"+
            "\u04c3\2\uffff\1\u0503\1\uffff\1\u04c5\4\uffff\1\u04d1\1\u04c6"+
            "\1\u04c7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u053b\4\uffff\1\u0519\2\uffff\1\u0549\1\u051a\3\uffff\1"+
            "\u051b\1\u051c\1\u051d\1\u051e\1\u051f\1\u0520\1\u0521\1\u0522"+
            "\1\u0518\1\uffff\1\u0507\6\uffff\1\u053e\1\uffff\1\u0540\1\u053c"+
            "\1\u053d\1\u053f\5\uffff\1\u0506\1\u0505\3\uffff\1\u0523\1\u0524"+
            "\1\u0525\11\uffff\1\u0529\1\u052a\1\u052b\1\u052d\1\u052e\1"+
            "\u052f\1\u0530\1\u0531\1\u0544\1\u0545\1\u0532\1\u0546\1\u0533"+
            "\1\u0534\1\u0535\1\u0536\1\u0537\1\u0547\1\uffff\1\u0538\1\uffff"+
            "\1\u0539\1\u052c\1\u0517\1\u053a\22\uffff\1\u0510\1\u0511\1"+
            "\u0512\5\uffff\1\u0541\1\u0542\1\u0543\2\uffff\1\u0526\1\uffff"+
            "\1\u0527\1\u0528\u0094\uffff\1\u050d\16\uffff\1\u0515\1\u0514"+
            "\7\uffff\1\u0509\1\u0513\1\uffff\1\u050e\1\u050f\11\uffff\1"+
            "\u0508\2\uffff\1\u0548\1\uffff\1\u050a\4\uffff\1\u0516\1\u050b"+
            "\1\u050c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u057e\4\uffff\1\u055c\2\uffff\1\u058c\1\u055d\3\uffff\1"+
            "\u055e\1\u055f\1\u0560\1\u0561\1\u0562\1\u0563\1\u0564\1\u0565"+
            "\1\u055b\1\uffff\1\u054c\6\uffff\1\u0581\1\uffff\1\u0583\1\u057f"+
            "\1\u0580\1\u0582\12\uffff\1\u0566\1\u0567\1\u0568\11\uffff\1"+
            "\u056c\1\u056d\1\u056e\1\u0570\1\u0571\1\u0572\1\u0573\1\u0574"+
            "\1\u0587\1\u0588\1\u0575\1\u0589\1\u0576\1\u0577\1\u0578\1\u0579"+
            "\1\u057a\1\u058a\1\uffff\1\u057b\1\uffff\1\u057c\1\u056f\1\u055a"+
            "\1\u057d\22\uffff\1\u0553\1\u0554\1\u0555\5\uffff\1\u0584\1"+
            "\u0585\1\u0586\2\uffff\1\u0569\1\uffff\1\u056a\1\u056b\u0094"+
            "\uffff\1\u0552\16\uffff\1\u0558\1\u0557\7\uffff\1\u054e\1\u0556"+
            "\1\uffff\1\u054a\1\u054b\11\uffff\1\u054d\2\uffff\1\u058b\1"+
            "\uffff\1\u054f\4\uffff\1\u0559\1\u0550\1\u0551",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05c3\4\uffff\1\u05a1\2\uffff\1\u05d1\1\u05a2\3\uffff\1"+
            "\u05a3\1\u05a4\1\u05a5\1\u05a6\1\u05a7\1\u05a8\1\u05a9\1\u05aa"+
            "\1\u05a0\1\uffff\1\u058f\6\uffff\1\u05c6\1\uffff\1\u05c8\1\u05c4"+
            "\1\u05c5\1\u05c7\5\uffff\1\u058e\1\u058d\3\uffff\1\u05ab\1\u05ac"+
            "\1\u05ad\11\uffff\1\u05b1\1\u05b2\1\u05b3\1\u05b5\1\u05b6\1"+
            "\u05b7\1\u05b8\1\u05b9\1\u05cc\1\u05cd\1\u05ba\1\u05ce\1\u05bb"+
            "\1\u05bc\1\u05bd\1\u05be\1\u05bf\1\u05cf\1\uffff\1\u05c0\1\uffff"+
            "\1\u05c1\1\u05b4\1\u059f\1\u05c2\22\uffff\1\u0598\1\u0599\1"+
            "\u059a\5\uffff\1\u05c9\1\u05ca\1\u05cb\2\uffff\1\u05ae\1\uffff"+
            "\1\u05af\1\u05b0\u0094\uffff\1\u0595\16\uffff\1\u059d\1\u059c"+
            "\7\uffff\1\u0591\1\u059b\1\uffff\1\u0596\1\u0597\11\uffff\1"+
            "\u0590\2\uffff\1\u05d0\1\uffff\1\u0592\4\uffff\1\u059e\1\u0593"+
            "\1\u0594",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0608\4\uffff\1\u05e6\2\uffff\1\u0616\1\u05e7\3\uffff\1"+
            "\u05e8\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\u05ed\1\u05ee\1\u05ef"+
            "\1\u05e5\1\uffff\1\u05d4\6\uffff\1\u060b\1\uffff\1\u060d\1\u0609"+
            "\1\u060a\1\u060c\5\uffff\1\u05d3\1\u05d2\3\uffff\1\u05f0\1\u05f1"+
            "\1\u05f2\11\uffff\1\u05f6\1\u05f7\1\u05f8\1\u05fa\1\u05fb\1"+
            "\u05fc\1\u05fd\1\u05fe\1\u0611\1\u0612\1\u05ff\1\u0613\1\u0600"+
            "\1\u0601\1\u0602\1\u0603\1\u0604\1\u0614\1\uffff\1\u0605\1\uffff"+
            "\1\u0606\1\u05f9\1\u05e4\1\u0607\22\uffff\1\u05dd\1\u05de\1"+
            "\u05df\5\uffff\1\u060e\1\u060f\1\u0610\2\uffff\1\u05f3\1\uffff"+
            "\1\u05f4\1\u05f5\u0094\uffff\1\u05da\16\uffff\1\u05e2\1\u05e1"+
            "\7\uffff\1\u05d6\1\u05e0\1\uffff\1\u05db\1\u05dc\11\uffff\1"+
            "\u05d5\2\uffff\1\u0615\1\uffff\1\u05d7\4\uffff\1\u05e3\1\u05d8"+
            "\1\u05d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u064d\4\uffff\1\u062b\2\uffff\1\u065b\1\u062c\3\uffff\1"+
            "\u062d\1\u062e\1\u062f\1\u0630\1\u0631\1\u0632\1\u0633\1\u0634"+
            "\1\u062a\1\uffff\1\u0619\6\uffff\1\u0650\1\uffff\1\u0652\1\u064e"+
            "\1\u064f\1\u0651\5\uffff\1\u0618\1\u0617\3\uffff\1\u0635\1\u0636"+
            "\1\u0637\11\uffff\1\u063b\1\u063c\1\u063d\1\u063f\1\u0640\1"+
            "\u0641\1\u0642\1\u0643\1\u0656\1\u0657\1\u0644\1\u0658\1\u0645"+
            "\1\u0646\1\u0647\1\u0648\1\u0649\1\u0659\1\uffff\1\u064a\1\uffff"+
            "\1\u064b\1\u063e\1\u0629\1\u064c\22\uffff\1\u0622\1\u0623\1"+
            "\u0624\5\uffff\1\u0653\1\u0654\1\u0655\2\uffff\1\u0638\1\uffff"+
            "\1\u0639\1\u063a\u0094\uffff\1\u061f\16\uffff\1\u0627\1\u0626"+
            "\7\uffff\1\u061b\1\u0625\1\uffff\1\u0620\1\u0621\11\uffff\1"+
            "\u061a\2\uffff\1\u065a\1\uffff\1\u061c\4\uffff\1\u0628\1\u061d"+
            "\1\u061e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0691\4\uffff\1\u066f\2\uffff\1\u069f\1\u0670\3\uffff\1"+
            "\u0671\1\u0672\1\u0673\1\u0674\1\u0675\1\u0676\1\u0677\1\u0678"+
            "\1\u066e\1\uffff\1\u065e\6\uffff\1\u0694\1\uffff\1\u0696\1\u0692"+
            "\1\u0693\1\u0695\12\uffff\1\u0679\1\u067a\1\u067b\11\uffff\1"+
            "\u067f\1\u0680\1\u0681\1\u0683\1\u0684\1\u0685\1\u0686\1\u0687"+
            "\1\u069a\1\u069b\1\u0688\1\u069c\1\u0689\1\u068a\1\u068b\1\u068c"+
            "\1\u068d\1\u069d\1\uffff\1\u068e\1\uffff\1\u068f\1\u0682\1\u066d"+
            "\1\u0690\22\uffff\1\u0667\1\u0668\1\u0669\5\uffff\1\u0697\1"+
            "\u0698\1\u0699\2\uffff\1\u067c\1\uffff\1\u067d\1\u067e\u0094"+
            "\uffff\1\u0664\16\uffff\1\u065d\1\u066b\5\uffff\1\u065c\1\uffff"+
            "\1\u0660\1\u066a\1\uffff\1\u0665\1\u0666\11\uffff\1\u065f\2"+
            "\uffff\1\u069e\1\uffff\1\u0661\4\uffff\1\u066c\1\u0662\1\u0663",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06d5\4\uffff\1\u06b3\2\uffff\1\u06e3\1\u06b4\3\uffff\1"+
            "\u06b5\1\u06b6\1\u06b7\1\u06b8\1\u06b9\1\u06ba\1\u06bb\1\u06bc"+
            "\1\u06b2\1\uffff\1\u06a4\6\uffff\1\u06d8\1\uffff\1\u06da\1\u06d6"+
            "\1\u06d7\1\u06d9\12\uffff\1\u06bd\1\u06be\1\u06bf\11\uffff\1"+
            "\u06c3\1\u06c4\1\u06c5\1\u06c7\1\u06c8\1\u06c9\1\u06ca\1\u06cb"+
            "\1\u06de\1\u06df\1\u06cc\1\u06e0\1\u06cd\1\u06ce\1\u06cf\1\u06d0"+
            "\1\u06d1\1\u06e1\1\uffff\1\u06d2\1\uffff\1\u06d3\1\u06c6\1\u06b1"+
            "\1\u06d4\22\uffff\1\u06ab\1\u06ac\1\u06ad\5\uffff\1\u06db\1"+
            "\u06dc\1\u06dd\2\uffff\1\u06c0\1\uffff\1\u06c1\1\u06c2\u0094"+
            "\uffff\1\u06aa\16\uffff\1\u06a3\1\u06af\5\uffff\1\u06a2\1\uffff"+
            "\1\u06a6\1\u06ae\1\uffff\1\u06a0\1\u06a1\11\uffff\1\u06a5\2"+
            "\uffff\1\u06e2\1\uffff\1\u06a7\4\uffff\1\u06b0\1\u06a8\1\u06a9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0718\4\uffff\1\u06f6\2\uffff\1\u0726\1\u06f7\3\uffff\1"+
            "\u06f8\1\u06f9\1\u06fa\1\u06fb\1\u06fc\1\u06fd\1\u06fe\1\u06ff"+
            "\1\u06f5\1\uffff\1\u06e4\6\uffff\1\u071b\1\uffff\1\u071d\1\u0719"+
            "\1\u071a\1\u071c\12\uffff\1\u0700\1\u0701\1\u0702\11\uffff\1"+
            "\u0706\1\u0707\1\u0708\1\u070a\1\u070b\1\u070c\1\u070d\1\u070e"+
            "\1\u0721\1\u0722\1\u070f\1\u0723\1\u0710\1\u0711\1\u0712\1\u0713"+
            "\1\u0714\1\u0724\1\uffff\1\u0715\1\uffff\1\u0716\1\u0709\1\u06f4"+
            "\1\u0717\22\uffff\1\u06ed\1\u06ee\1\u06ef\5\uffff\1\u071e\1"+
            "\u071f\1\u0720\2\uffff\1\u0703\1\uffff\1\u0704\1\u0705\u0094"+
            "\uffff\1\u06ea\16\uffff\1\u06f2\1\u06f1\7\uffff\1\u06e6\1\u06f0"+
            "\1\uffff\1\u06eb\1\u06ec\11\uffff\1\u06e5\2\uffff\1\u0725\1"+
            "\uffff\1\u06e7\4\uffff\1\u06f3\1\u06e8\1\u06e9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u075b\4\uffff\1\u0739\2\uffff\1\u0769\1\u073a\3\uffff\1"+
            "\u073b\1\u073c\1\u073d\1\u073e\1\u073f\1\u0740\1\u0741\1\u0742"+
            "\1\u0738\1\uffff\1\u0727\6\uffff\1\u075e\1\uffff\1\u0760\1\u075c"+
            "\1\u075d\1\u075f\12\uffff\1\u0743\1\u0744\1\u0745\11\uffff\1"+
            "\u0749\1\u074a\1\u074b\1\u074d\1\u074e\1\u074f\1\u0750\1\u0751"+
            "\1\u0764\1\u0765\1\u0752\1\u0766\1\u0753\1\u0754\1\u0755\1\u0756"+
            "\1\u0757\1\u0767\1\uffff\1\u0758\1\uffff\1\u0759\1\u074c\1\u0737"+
            "\1\u075a\22\uffff\1\u0730\1\u0731\1\u0732\5\uffff\1\u0761\1"+
            "\u0762\1\u0763\2\uffff\1\u0746\1\uffff\1\u0747\1\u0748\u0094"+
            "\uffff\1\u072d\16\uffff\1\u0735\1\u0734\7\uffff\1\u0729\1\u0733"+
            "\1\uffff\1\u072e\1\u072f\11\uffff\1\u0728\2\uffff\1\u0768\1"+
            "\uffff\1\u072a\4\uffff\1\u0736\1\u072b\1\u072c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u076a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07a1\4\uffff\1\u077f\2\uffff\1\u07af\1\u0780\3\uffff\1"+
            "\u0781\1\u0782\1\u0783\1\u0784\1\u0785\1\u0786\1\u0787\1\u0788"+
            "\1\u077e\1\uffff\1\u076f\6\uffff\1\u07a4\1\uffff\1\u07a6\1\u07a2"+
            "\1\u07a3\1\u07a5\12\uffff\1\u0789\1\u078a\1\u078b\11\uffff\1"+
            "\u078f\1\u0790\1\u0791\1\u0793\1\u0794\1\u0795\1\u0796\1\u0797"+
            "\1\u07aa\1\u07ab\1\u0798\1\u07ac\1\u0799\1\u079a\1\u079b\1\u079c"+
            "\1\u079d\1\u07ad\1\uffff\1\u079e\1\uffff\1\u079f\1\u0792\1\u077d"+
            "\1\u07a0\22\uffff\1\u0776\1\u0777\1\u0778\5\uffff\1\u07a7\1"+
            "\u07a8\1\u07a9\2\uffff\1\u078c\1\uffff\1\u078d\1\u078e\u0094"+
            "\uffff\1\u0775\16\uffff\1\u077b\1\u077a\7\uffff\1\u0771\1\u0779"+
            "\1\uffff\1\u076d\1\u076e\11\uffff\1\u0770\2\uffff\1\u07ae\1"+
            "\uffff\1\u0772\4\uffff\1\u077c\1\u0773\1\u0774",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07e4\4\uffff\1\u07c2\2\uffff\1\u07f2\1\u07c3\3\uffff\1"+
            "\u07c4\1\u07c5\1\u07c6\1\u07c7\1\u07c8\1\u07c9\1\u07ca\1\u07cb"+
            "\1\u07c1\1\uffff\1\u07b2\6\uffff\1\u07e7\1\uffff\1\u07e9\1\u07e5"+
            "\1\u07e6\1\u07e8\12\uffff\1\u07cc\1\u07cd\1\u07ce\11\uffff\1"+
            "\u07d2\1\u07d3\1\u07d4\1\u07d6\1\u07d7\1\u07d8\1\u07d9\1\u07da"+
            "\1\u07ed\1\u07ee\1\u07db\1\u07ef\1\u07dc\1\u07dd\1\u07de\1\u07df"+
            "\1\u07e0\1\u07f0\1\uffff\1\u07e1\1\uffff\1\u07e2\1\u07d5\1\u07c0"+
            "\1\u07e3\22\uffff\1\u07b9\1\u07ba\1\u07bb\5\uffff\1\u07ea\1"+
            "\u07eb\1\u07ec\2\uffff\1\u07cf\1\uffff\1\u07d0\1\u07d1\u0094"+
            "\uffff\1\u07b8\16\uffff\1\u07be\1\u07bd\7\uffff\1\u07b4\1\u07bc"+
            "\1\uffff\1\u07b0\1\u07b1\11\uffff\1\u07b3\2\uffff\1\u07f1\1"+
            "\uffff\1\u07b5\4\uffff\1\u07bf\1\u07b6\1\u07b7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0827\4\uffff\1\u0805\2\uffff\1\u0835\1\u0806\3\uffff\1"+
            "\u0807\1\u0808\1\u0809\1\u080a\1\u080b\1\u080c\1\u080d\1\u080e"+
            "\1\u0804\1\uffff\1\u07f5\6\uffff\1\u082a\1\uffff\1\u082c\1\u0828"+
            "\1\u0829\1\u082b\12\uffff\1\u080f\1\u0810\1\u0811\11\uffff\1"+
            "\u0815\1\u0816\1\u0817\1\u0819\1\u081a\1\u081b\1\u081c\1\u081d"+
            "\1\u0830\1\u0831\1\u081e\1\u0832\1\u081f\1\u0820\1\u0821\1\u0822"+
            "\1\u0823\1\u0833\1\uffff\1\u0824\1\uffff\1\u0825\1\u0818\1\u0803"+
            "\1\u0826\22\uffff\1\u07fc\1\u07fd\1\u07fe\5\uffff\1\u082d\1"+
            "\u082e\1\u082f\2\uffff\1\u0812\1\uffff\1\u0813\1\u0814\u0094"+
            "\uffff\1\u07fb\16\uffff\1\u0801\1\u0800\7\uffff\1\u07f7\1\u07ff"+
            "\1\uffff\1\u07f3\1\u07f4\11\uffff\1\u07f6\2\uffff\1\u0834\1"+
            "\uffff\1\u07f8\4\uffff\1\u0802\1\u07f9\1\u07fa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u086b\4\uffff\1\u0849\2\uffff\1\u0879\1\u084a\3\uffff\1"+
            "\u084b\1\u084c\1\u084d\1\u084e\1\u084f\1\u0850\1\u0851\1\u0852"+
            "\1\u0848\1\uffff\1\u083a\6\uffff\1\u086e\1\uffff\1\u0870\1\u086c"+
            "\1\u086d\1\u086f\12\uffff\1\u0853\1\u0854\1\u0855\11\uffff\1"+
            "\u0859\1\u085a\1\u085b\1\u085d\1\u085e\1\u085f\1\u0860\1\u0861"+
            "\1\u0874\1\u0875\1\u0862\1\u0876\1\u0863\1\u0864\1\u0865\1\u0866"+
            "\1\u0867\1\u0877\1\uffff\1\u0868\1\uffff\1\u0869\1\u085c\1\u0847"+
            "\1\u086a\22\uffff\1\u0841\1\u0842\1\u0843\5\uffff\1\u0871\1"+
            "\u0872\1\u0873\2\uffff\1\u0856\1\uffff\1\u0857\1\u0858\u0094"+
            "\uffff\1\u0840\16\uffff\1\u0839\1\u0845\5\uffff\1\u0838\1\uffff"+
            "\1\u083c\1\u0844\1\uffff\1\u0836\1\u0837\11\uffff\1\u083b\2"+
            "\uffff\1\u0878\1\uffff\1\u083d\4\uffff\1\u0846\1\u083e\1\u083f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08a1\4\uffff\1\u087f\3\uffff\1\u0880\3\uffff\1\u0881\1"+
            "\u0882\1\u0883\1\u0884\1\u0885\1\u0886\1\u0887\1\u0888\1\u087e"+
            "\1\u087a\7\uffff\1\u08a4\1\uffff\1\u08a6\1\u08a2\1\u08a3\1\u08a5"+
            "\12\uffff\1\u0889\1\u088a\1\u088b\11\uffff\1\u088f\1\u0890\1"+
            "\u0891\1\u0893\1\u0894\1\u0895\1\u0896\1\u0897\2\uffff\1\u0898"+
            "\1\uffff\1\u0899\1\u089a\1\u089b\1\u089c\1\u089d\2\uffff\1\u089e"+
            "\1\uffff\1\u089f\1\u0892\1\u087d\1\u08a0\32\uffff\1\u08a7\1"+
            "\u08a8\1\u08a9\2\uffff\1\u088c\1\uffff\1\u088d\1\u088e\u00a3"+
            "\uffff\1\u087b\40\uffff\1\u087c",
            "\1\u08bf\1\u08c0\1\u08c1\1\u08c2\1\uffff\1\u08bd\1\u08bc\1"+
            "\u08be\34\uffff\1\u08b6\u00f5\uffff\1\u08aa\1\u08b5\3\uffff"+
            "\1\u08ab\1\u08ba\1\u08ae\4\uffff\1\u08b9\1\u08bb\1\u08b7\1\u08b8"+
            "\1\u08b1\1\u08b2\1\u08b3\1\u08b4\1\u08b0\1\u08af\1\u08ac\1\u08ad",
            "\1\u08d8\1\u08d9\1\u08da\1\u08db\1\uffff\1\u08d6\1\u08d5\1"+
            "\u08d7\34\uffff\1\u08cf\u00f5\uffff\1\u08c3\1\u08ce\3\uffff"+
            "\1\u08c4\1\u08d3\1\u08c7\4\uffff\1\u08d2\1\u08d4\1\u08d0\1\u08d1"+
            "\1\u08ca\1\u08cb\1\u08cc\1\u08cd\1\u08c9\1\u08c8\1\u08c5\1\u08c6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08f1\1\u08f2\1\u08f3\1\u08f4\1\uffff\1\u08ee\1\u08ed\1"+
            "\u08f0\34\uffff\1\u08e7\u00f5\uffff\1\u08ef\1\u08e6\3\uffff"+
            "\1\u08dc\1\u08eb\1\u08df\4\uffff\1\u08ea\1\u08ec\1\u08e8\1\u08e9"+
            "\1\u08e2\1\u08e3\1\u08e4\1\u08e5\1\u08e1\1\u08e0\1\u08dd\1\u08de",
            "\1\u090a\1\u090b\1\u090c\1\u090d\1\uffff\1\u0908\1\u0907\1"+
            "\u0909\34\uffff\1\u0901\u00f5\uffff\1\u08f5\1\u0900\3\uffff"+
            "\1\u08f6\1\u0905\1\u08f9\4\uffff\1\u0904\1\u0906\1\u0902\1\u0903"+
            "\1\u08fc\1\u08fd\1\u08fe\1\u08ff\1\u08fb\1\u08fa\1\u08f7\1\u08f8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0923\1\u0924\1\u0925\1\u0926\1\uffff\1\u0920\1\u091f\1"+
            "\u0922\34\uffff\1\u0919\u00f5\uffff\1\u0921\1\u0918\3\uffff"+
            "\1\u090e\1\u091d\1\u0911\4\uffff\1\u091c\1\u091e\1\u091a\1\u091b"+
            "\1\u0914\1\u0915\1\u0916\1\u0917\1\u0913\1\u0912\1\u090f\1\u0910",
            "\1\u093c\1\u093d\1\u093e\1\u093f\1\uffff\1\u093a\1\u0939\1"+
            "\u093b\34\uffff\1\u0933\u00f5\uffff\1\u0927\1\u0932\3\uffff"+
            "\1\u0928\1\u0937\1\u092b\4\uffff\1\u0936\1\u0938\1\u0934\1\u0935"+
            "\1\u092e\1\u092f\1\u0930\1\u0931\1\u092d\1\u092c\1\u0929\1\u092a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0956\1\u0957\1\u0958\1\u0959\1\uffff\1\u0953\1\u0952\1"+
            "\u0955\34\uffff\1\u094c\u00f2\uffff\1\u0954\2\uffff\1\16\1\u094b"+
            "\3\uffff\1\u0941\1\u0950\1\u0944\4\uffff\1\u094f\1\u0951\1\u094d"+
            "\1\u094e\1\u0947\1\u0948\1\u0949\1\u094a\1\u0946\1\u0945\1\u0942"+
            "\1\u0943",
            "\1\u096f\1\u0970\1\u0971\1\u0972\1\uffff\1\u096c\1\u096b\1"+
            "\u096e\34\uffff\1\u0965\u00f2\uffff\1\u096d\2\uffff\1\16\1\u0964"+
            "\3\uffff\1\u095a\1\u0969\1\u095d\4\uffff\1\u0968\1\u096a\1\u0966"+
            "\1\u0967\1\u0960\1\u0961\1\u0962\1\u0963\1\u095f\1\u095e\1\u095b"+
            "\1\u095c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0989\1\u098a\1\u098b\1\u098c\1\uffff\1\u0986\1\u0985\1"+
            "\u0988\34\uffff\1\u097f\u00f5\uffff\1\u0987\1\u097e\3\uffff"+
            "\1\u0974\1\u0983\1\u0977\4\uffff\1\u0982\1\u0984\1\u0980\1\u0981"+
            "\1\u097a\1\u097b\1\u097c\1\u097d\1\u0979\1\u0978\1\u0975\1\u0976",
            "\1\u09a2\1\u09a3\1\u09a4\1\u09a5\1\uffff\1\u099f\1\u099e\1"+
            "\u09a1\34\uffff\1\u0998\u00f5\uffff\1\u09a0\1\u0997\3\uffff"+
            "\1\u098d\1\u099c\1\u0990\4\uffff\1\u099b\1\u099d\1\u0999\1\u099a"+
            "\1\u0993\1\u0994\1\u0995\1\u0996\1\u0992\1\u0991\1\u098e\1\u098f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09bb\1\u09bc\1\u09bd\1\u09be\1\uffff\1\u09b8\1\u09b7\1"+
            "\u09ba\34\uffff\1\u09b1\u00f5\uffff\1\u09b9\1\u09b0\3\uffff"+
            "\1\u09a6\1\u09b5\1\u09a9\4\uffff\1\u09b4\1\u09b6\1\u09b2\1\u09b3"+
            "\1\u09ac\1\u09ad\1\u09ae\1\u09af\1\u09ab\1\u09aa\1\u09a7\1\u09a8",
            "\1\u09d4\1\u09d5\1\u09d6\1\u09d7\1\uffff\1\u09d1\1\u09d0\1"+
            "\u09d3\34\uffff\1\u09ca\u00f5\uffff\1\u09d2\1\u09c9\3\uffff"+
            "\1\u09bf\1\u09ce\1\u09c2\4\uffff\1\u09cd\1\u09cf\1\u09cb\1\u09cc"+
            "\1\u09c5\1\u09c6\1\u09c7\1\u09c8\1\u09c4\1\u09c3\1\u09c0\1\u09c1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09ed\1\u09ee\1\u09ef\1\u09f0\1\uffff\1\u09eb\1\u09ea\1"+
            "\u09ec\34\uffff\1\u09e4\u00f5\uffff\1\u09d8\1\u09e3\3\uffff"+
            "\1\u09d9\1\u09e8\1\u09dc\4\uffff\1\u09e7\1\u09e9\1\u09e5\1\u09e6"+
            "\1\u09df\1\u09e0\1\u09e1\1\u09e2\1\u09de\1\u09dd\1\u09da\1\u09db",
            "\1\u0a06\1\u0a07\1\u0a08\1\u0a09\1\uffff\1\u0a04\1\u0a03\1"+
            "\u0a05\34\uffff\1\u09fd\u00f5\uffff\1\u09f1\1\u09fc\3\uffff"+
            "\1\u09f2\1\u0a01\1\u09f5\4\uffff\1\u0a00\1\u0a02\1\u09fe\1\u09ff"+
            "\1\u09f8\1\u09f9\1\u09fa\1\u09fb\1\u09f7\1\u09f6\1\u09f3\1\u09f4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a20\1\u0a21\1\u0a22\1\u0a23\1\uffff\1\u0a1c\1\u0a1b\1"+
            "\u0a1f\34\uffff\1\u0a15\u00f2\uffff\1\u0a1d\2\uffff\1\u0a1e"+
            "\1\u0a14\3\uffff\1\u0a0a\1\u0a19\1\u0a0d\4\uffff\1\u0a18\1\u0a1a"+
            "\1\u0a16\1\u0a17\1\u0a10\1\u0a11\1\u0a12\1\u0a13\1\u0a0f\1\u0a0e"+
            "\1\u0a0b\1\u0a0c",
            "\1\u0a3a\1\u0a3b\1\u0a3c\1\u0a3d\1\uffff\1\u0a37\1\u0a36\1"+
            "\u0a39\34\uffff\1\u0a30\u00f2\uffff\1\u0a38\2\uffff\1\u0a24"+
            "\1\u0a2f\3\uffff\1\u0a25\1\u0a34\1\u0a28\4\uffff\1\u0a33\1\u0a35"+
            "\1\u0a31\1\u0a32\1\u0a2b\1\u0a2c\1\u0a2d\1\u0a2e\1\u0a2a\1\u0a29"+
            "\1\u0a26\1\u0a27",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a54\1\u0a55\1\u0a56\1\u0a57\1\uffff\1\u0a51\1\u0a50\1"+
            "\u0a53\34\uffff\1\u0a4a\u00f2\uffff\1\u0a52\2\uffff\1\u0a3e"+
            "\1\u0a49\3\uffff\1\u0a3f\1\u0a4e\1\u0a42\4\uffff\1\u0a4d\1\u0a4f"+
            "\1\u0a4b\1\u0a4c\1\u0a45\1\u0a46\1\u0a47\1\u0a48\1\u0a44\1\u0a43"+
            "\1\u0a40\1\u0a41",
            "\1\u0a6e\1\u0a6f\1\u0a70\1\u0a71\1\uffff\1\u0a6b\1\u0a6a\1"+
            "\u0a6d\34\uffff\1\u0a64\u00f2\uffff\1\u0a6c\2\uffff\1\u0a58"+
            "\1\u0a63\3\uffff\1\u0a59\1\u0a68\1\u0a5c\4\uffff\1\u0a67\1\u0a69"+
            "\1\u0a65\1\u0a66\1\u0a5f\1\u0a60\1\u0a61\1\u0a62\1\u0a5e\1\u0a5d"+
            "\1\u0a5a\1\u0a5b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a88\1\u0a89\1\u0a8a\1\u0a8b\1\uffff\1\u0a84\1\u0a83\1"+
            "\u0a87\34\uffff\1\u0a7d\u00f2\uffff\1\u0a85\2\uffff\1\u0a86"+
            "\1\u0a7c\3\uffff\1\u0a72\1\u0a81\1\u0a75\4\uffff\1\u0a80\1\u0a82"+
            "\1\u0a7e\1\u0a7f\1\u0a78\1\u0a79\1\u0a7a\1\u0a7b\1\u0a77\1\u0a76"+
            "\1\u0a73\1\u0a74",
            "\1\u0aa2\1\u0aa3\1\u0aa4\1\u0aa5\1\uffff\1\u0a9f\1\u0a9e\1"+
            "\u0aa1\34\uffff\1\u0a98\u00f2\uffff\1\u0aa0\2\uffff\1\u0a8c"+
            "\1\u0a97\3\uffff\1\u0a8d\1\u0a9c\1\u0a90\4\uffff\1\u0a9b\1\u0a9d"+
            "\1\u0a99\1\u0a9a\1\u0a93\1\u0a94\1\u0a95\1\u0a96\1\u0a92\1\u0a91"+
            "\1\u0a8e\1\u0a8f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0abc\1\u0abd\1\u0abe\1\u0abf\1\uffff\1\u0ab8\1\u0ab7\1"+
            "\u0abb\34\uffff\1\u0ab1\u00f2\uffff\1\u0ab9\2\uffff\1\u0aba"+
            "\1\u0ab0\3\uffff\1\u0aa6\1\u0ab5\1\u0aa9\4\uffff\1\u0ab4\1\u0ab6"+
            "\1\u0ab2\1\u0ab3\1\u0aac\1\u0aad\1\u0aae\1\u0aaf\1\u0aab\1\u0aaa"+
            "\1\u0aa7\1\u0aa8",
            "\1\u0ad6\1\u0ad7\1\u0ad8\1\u0ad9\1\uffff\1\u0ad3\1\u0ad2\1"+
            "\u0ad5\34\uffff\1\u0acc\u00f2\uffff\1\u0ad4\2\uffff\1\u0ac0"+
            "\1\u0acb\3\uffff\1\u0ac1\1\u0ad0\1\u0ac4\4\uffff\1\u0acf\1\u0ad1"+
            "\1\u0acd\1\u0ace\1\u0ac7\1\u0ac8\1\u0ac9\1\u0aca\1\u0ac6\1\u0ac5"+
            "\1\u0ac2\1\u0ac3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0aef\1\u0af0\1\u0af1\1\u0af2\1\uffff\1\u0aec\1\u0aeb\1"+
            "\u0aee\34\uffff\1\u0ae5\u00f2\uffff\1\u0aed\2\uffff\1\16\1\u0ae4"+
            "\3\uffff\1\u0ada\1\u0ae9\1\u0add\4\uffff\1\u0ae8\1\u0aea\1\u0ae6"+
            "\1\u0ae7\1\u0ae0\1\u0ae1\1\u0ae2\1\u0ae3\1\u0adf\1\u0ade\1\u0adb"+
            "\1\u0adc",
            "\1\u0b0a\1\u0b0b\1\u0b0c\1\u0b0d\1\uffff\1\u0b07\1\u0b06\1"+
            "\u0b09\34\uffff\1\u0b00\u00f2\uffff\1\u0b08\2\uffff\1\16\1\u0aff"+
            "\3\uffff\1\u0af5\1\u0b04\1\u0af8\4\uffff\1\u0b03\1\u0b05\1\u0b01"+
            "\1\u0b02\1\u0afb\1\u0afc\1\u0afd\1\u0afe\1\u0afa\1\u0af9\1\u0af6"+
            "\1\u0af7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b23\1\u0b24\1\u0b25\1\u0b26\1\uffff\1\u0b20\1\u0b1f\1"+
            "\u0b22\34\uffff\1\u0b19\u00f5\uffff\1\u0b21\1\u0b18\3\uffff"+
            "\1\u0b0e\1\u0b1d\1\u0b11\4\uffff\1\u0b1c\1\u0b1e\1\u0b1a\1\u0b1b"+
            "\1\u0b14\1\u0b15\1\u0b16\1\u0b17\1\u0b13\1\u0b12\1\u0b0f\1\u0b10",
            "\1\u0b3c\1\u0b3d\1\u0b3e\1\u0b3f\1\uffff\1\u0b3a\1\u0b39\1"+
            "\u0b3b\34\uffff\1\u0b33\u00f5\uffff\1\u0b27\1\u0b32\3\uffff"+
            "\1\u0b28\1\u0b37\1\u0b2b\4\uffff\1\u0b36\1\u0b38\1\u0b34\1\u0b35"+
            "\1\u0b2e\1\u0b2f\1\u0b30\1\u0b31\1\u0b2d\1\u0b2c\1\u0b29\1\u0b2a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b56\1\u0b57\1\u0b58\1\u0b59\1\uffff\1\u0b52\1\u0b51\1"+
            "\u0b55\3\uffff\1\u0b54\30\uffff\1\u0b4b\u00f2\uffff\1\u0b53"+
            "\2\uffff\1\16\1\u0b4a\3\uffff\1\u0b40\1\u0b4f\1\u0b43\4\uffff"+
            "\1\u0b4e\1\u0b50\1\u0b4c\1\u0b4d\1\u0b46\1\u0b47\1\u0b48\1\u0b49"+
            "\1\u0b45\1\u0b44\1\u0b41\1\u0b42",
            "\1\u0b71\1\u0b72\1\u0b73\1\u0b74\1\uffff\1\u0b6d\1\u0b6c\1"+
            "\u0b70\3\uffff\1\u0b6f\30\uffff\1\u0b66\u00f2\uffff\1\u0b6e"+
            "\2\uffff\1\16\1\u0b65\3\uffff\1\u0b5b\1\u0b6a\1\u0b5e\4\uffff"+
            "\1\u0b69\1\u0b6b\1\u0b67\1\u0b68\1\u0b61\1\u0b62\1\u0b63\1\u0b64"+
            "\1\u0b60\1\u0b5f\1\u0b5c\1\u0b5d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b8b\1\u0b8c\1\u0b8d\1\u0b8e\1\uffff\1\u0b88\1\u0b87\1"+
            "\u0b8a\34\uffff\1\u0b81\u00f5\uffff\1\u0b89\1\u0b80\3\uffff"+
            "\1\u0b76\1\u0b85\1\u0b79\4\uffff\1\u0b84\1\u0b86\1\u0b82\1\u0b83"+
            "\1\u0b7c\1\u0b7d\1\u0b7e\1\u0b7f\1\u0b7b\1\u0b7a\1\u0b77\1\u0b78",
            "\1\u0ba4\1\u0ba5\1\u0ba6\1\u0ba7\1\uffff\1\u0ba1\1\u0ba0\1"+
            "\u0ba3\34\uffff\1\u0b9a\u00f5\uffff\1\u0ba2\1\u0b99\3\uffff"+
            "\1\u0b8f\1\u0b9e\1\u0b92\4\uffff\1\u0b9d\1\u0b9f\1\u0b9b\1\u0b9c"+
            "\1\u0b95\1\u0b96\1\u0b97\1\u0b98\1\u0b94\1\u0b93\1\u0b90\1\u0b91",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA185_eot = DFA.unpackEncodedString(DFA185_eotS);
    static final short[] DFA185_eof = DFA.unpackEncodedString(DFA185_eofS);
    static final char[] DFA185_min = DFA.unpackEncodedStringToUnsignedChars(DFA185_minS);
    static final char[] DFA185_max = DFA.unpackEncodedStringToUnsignedChars(DFA185_maxS);
    static final short[] DFA185_accept = DFA.unpackEncodedString(DFA185_acceptS);
    static final short[] DFA185_special = DFA.unpackEncodedString(DFA185_specialS);
    static final short[][] DFA185_transition;
    static {
        int numStates = DFA185_transitionS.length;
        DFA185_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA185_transition[i] = DFA.unpackEncodedString(DFA185_transitionS[i]);
        }
    }
    class DFA185 extends DFA {
        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = DFA185_eot;
            this.eof = DFA185_eof;
            this.min = DFA185_min;
            this.max = DFA185_max;
            this.accept = DFA185_accept;
            this.special = DFA185_special;
            this.transition = DFA185_transition;
        }
        public String getDescription() {
            return "1262:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 185, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA185_0 = input.LA(1);
                        int index185_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_0==MINUS) ) {s = 1;}
                        else if ( ((LA185_0>=BOOLEAN_TRUE && LA185_0<=VALUE_NULL)||LA185_0==NUM_DOUBLE||LA185_0==PLUS||(LA185_0>=STRING_LITERAL && LA185_0<=QUOTED_STRING_LITERAL)||LA185_0==NUM_INT||(LA185_0>=NUM_LONG && LA185_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA185_0==QUESTION) ) {s = 12;}
                        else if ( (LA185_0==LPAREN) ) {s = 13;}
                        else if ( (LA185_0==ESCAPE||LA185_0==EVERY_EXPR||(LA185_0>=MAX && LA185_0<=MIN)||LA185_0==OUTER||(LA185_0>=JOIN && LA185_0<=FULL)||LA185_0==EVENTS||(LA185_0>=UNIDIRECTIONAL && LA185_0<=METADATASQL)||(LA185_0>=WEEKDAY && LA185_0<=LW)||LA185_0==SNAPSHOT||(LA185_0>=VARIABLE && LA185_0<=INDEX)||(LA185_0>=DEFINE && LA185_0<=MATCHES)||LA185_0==WHILE||(LA185_0>=MERGE && LA185_0<=MATCHED)||LA185_0==IDENT||LA185_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA185_0==COUNT) ) {s = 17;}
                        else if ( (LA185_0==SUM) ) {s = 20;}
                        else if ( (LA185_0==AVG) ) {s = 21;}
                        else if ( (LA185_0==COALESCE) ) {s = 24;}
                        else if ( (LA185_0==MEDIAN) ) {s = 25;}
                        else if ( (LA185_0==STDDEV) ) {s = 26;}
                        else if ( (LA185_0==AVEDEV) ) {s = 27;}
                        else if ( (LA185_0==FIRST) ) {s = 29;}
                        else if ( (LA185_0==LAST) ) {s = 30;}
                        else if ( (LA185_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA185_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA185_0==PRIOR) ) {s = 43;}
                        else if ( (LA185_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA185_0==TYPEOF) ) {s = 47;}
                        else if ( (LA185_0==CAST) ) {s = 48;}
                        else if ( (LA185_0==WINDOW) ) {s = 52;}
                        else if ( (LA185_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA185_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 62;}
                        else if ( (LA185_0==EXISTS) ) {s = 63;}
                        else if ( (LA185_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA185_0==LCURLY) ) {s = 65;}
                        input.seek(index185_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA185_185 = input.LA(1);
                        int index185_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_185==STRING_LITERAL) ) {s = 1146;}
                        else if ( (LA185_185==QUOTED_STRING_LITERAL) ) {s = 1147;}
                        else if ( (LA185_185==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA185_185==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA185_185==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA185_185==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA185_185==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA185_185==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA185_185==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA185_185==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1155;}
                        else if ( (LA185_185==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1156;}
                        else if ( (LA185_185==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA185_185==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA185_185==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA185_185==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA185_185==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA185_185==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA185_185==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA185_185==AT) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA185_185==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA185_185==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA185_185==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA185_185==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA185_185==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA185_185==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA185_185==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA185_185==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA185_185==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA185_185==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA185_185==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA185_185==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA185_185==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA185_185==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA185_185==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA185_185==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA185_185==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA185_185==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA185_185==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA185_185==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA185_185==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA185_185==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA185_185==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA185_185==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA185_185==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA185_185==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA185_185==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA185_185==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA185_185==LW) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA185_185==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA185_185==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA185_185==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA185_185==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA185_185==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA185_185==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA185_185==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA185_185==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA185_185==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA185_185==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA185_185==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA185_185==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA185_185==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA185_185==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA185_185==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA185_185==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA185_185==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA185_185==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA185_185==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA185_185==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA185_185==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA185_185==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        input.seek(index185_185);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA185_245 = input.LA(1);
                        int index185_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_245==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA185_245==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA185_245==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA185_245==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA185_245==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA185_245==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA185_245==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA185_245==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA185_245==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA185_245==STRING_LITERAL) ) {s = 1225;}
                        else if ( (LA185_245==QUOTED_STRING_LITERAL) ) {s = 1226;}
                        else if ( (LA185_245==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA185_245==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA185_245==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA185_245==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA185_245==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA185_245==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA185_245==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA185_245==AT) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA185_245==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA185_245==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA185_245==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA185_245==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA185_245==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA185_245==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA185_245==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA185_245==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA185_245==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA185_245==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA185_245==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA185_245==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA185_245==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA185_245==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA185_245==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA185_245==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA185_245==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA185_245==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA185_245==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA185_245==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA185_245==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA185_245==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA185_245==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA185_245==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA185_245==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA185_245==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA185_245==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA185_245==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA185_245==LW) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA185_245==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA185_245==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA185_245==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA185_245==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA185_245==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA185_245==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA185_245==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA185_245==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA185_245==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA185_245==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA185_245==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA185_245==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA185_245==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA185_245==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA185_245==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA185_245==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA185_245==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA185_245==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA185_245==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA185_245==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA185_245==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        input.seek(index185_245);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA185_305 = input.LA(1);
                        int index185_305 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_305==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA185_305==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA185_305==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA185_305==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA185_305==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA185_305==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA185_305==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA185_305==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA185_305==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA185_305==STRING_LITERAL) ) {s = 1294;}
                        else if ( (LA185_305==QUOTED_STRING_LITERAL) ) {s = 1295;}
                        else if ( (LA185_305==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA185_305==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA185_305==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA185_305==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA185_305==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA185_305==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA185_305==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA185_305==AT) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA185_305==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA185_305==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA185_305==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA185_305==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA185_305==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA185_305==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA185_305==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA185_305==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA185_305==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA185_305==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA185_305==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA185_305==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA185_305==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA185_305==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA185_305==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA185_305==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA185_305==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA185_305==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA185_305==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA185_305==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA185_305==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA185_305==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA185_305==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA185_305==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA185_305==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA185_305==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA185_305==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA185_305==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA185_305==LW) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA185_305==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA185_305==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA185_305==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA185_305==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA185_305==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA185_305==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA185_305==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA185_305==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA185_305==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA185_305==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA185_305==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA185_305==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA185_305==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA185_305==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA185_305==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA185_305==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA185_305==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA185_305==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA185_305==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA185_305==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA185_305==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        input.seek(index185_305);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA185_365 = input.LA(1);
                        int index185_365 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_365==STRING_LITERAL) ) {s = 1354;}
                        else if ( (LA185_365==QUOTED_STRING_LITERAL) ) {s = 1355;}
                        else if ( (LA185_365==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA185_365==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA185_365==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA185_365==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA185_365==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA185_365==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA185_365==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA185_365==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA185_365==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA185_365==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA185_365==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA185_365==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA185_365==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA185_365==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA185_365==AT) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA185_365==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA185_365==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA185_365==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA185_365==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA185_365==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA185_365==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA185_365==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA185_365==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA185_365==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA185_365==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA185_365==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA185_365==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA185_365==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA185_365==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA185_365==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA185_365==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA185_365==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA185_365==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA185_365==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA185_365==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA185_365==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA185_365==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA185_365==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA185_365==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA185_365==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA185_365==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA185_365==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA185_365==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA185_365==LW) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA185_365==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA185_365==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA185_365==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA185_365==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA185_365==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA185_365==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA185_365==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA185_365==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA185_365==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA185_365==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA185_365==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA185_365==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA185_365==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA185_365==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA185_365==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA185_365==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA185_365==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA185_365==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA185_365==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA185_365==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA185_365==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        input.seek(index185_365);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA185_425 = input.LA(1);
                        int index185_425 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_425==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA185_425==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA185_425==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA185_425==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA185_425==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA185_425==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA185_425==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA185_425==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA185_425==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA185_425==STRING_LITERAL) ) {s = 1430;}
                        else if ( (LA185_425==QUOTED_STRING_LITERAL) ) {s = 1431;}
                        else if ( (LA185_425==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA185_425==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA185_425==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA185_425==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA185_425==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA185_425==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA185_425==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA185_425==AT) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA185_425==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA185_425==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA185_425==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA185_425==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA185_425==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA185_425==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA185_425==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA185_425==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA185_425==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA185_425==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA185_425==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA185_425==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA185_425==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA185_425==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA185_425==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA185_425==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA185_425==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA185_425==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA185_425==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA185_425==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA185_425==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA185_425==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA185_425==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA185_425==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA185_425==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA185_425==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA185_425==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA185_425==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA185_425==LW) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA185_425==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA185_425==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA185_425==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA185_425==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA185_425==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA185_425==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA185_425==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA185_425==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA185_425==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA185_425==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA185_425==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA185_425==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA185_425==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA185_425==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA185_425==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA185_425==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA185_425==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA185_425==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA185_425==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA185_425==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA185_425==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        input.seek(index185_425);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA185_485 = input.LA(1);
                        int index185_485 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_485==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA185_485==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA185_485==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA185_485==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA185_485==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA185_485==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA185_485==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA185_485==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA185_485==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA185_485==STRING_LITERAL) ) {s = 1499;}
                        else if ( (LA185_485==QUOTED_STRING_LITERAL) ) {s = 1500;}
                        else if ( (LA185_485==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA185_485==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA185_485==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA185_485==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA185_485==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA185_485==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA185_485==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA185_485==AT) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA185_485==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA185_485==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA185_485==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA185_485==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA185_485==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA185_485==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA185_485==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA185_485==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA185_485==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA185_485==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA185_485==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA185_485==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA185_485==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA185_485==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA185_485==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA185_485==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA185_485==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA185_485==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA185_485==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA185_485==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA185_485==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA185_485==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA185_485==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA185_485==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA185_485==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA185_485==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA185_485==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA185_485==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA185_485==LW) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA185_485==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA185_485==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA185_485==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA185_485==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA185_485==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA185_485==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA185_485==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA185_485==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA185_485==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA185_485==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA185_485==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA185_485==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA185_485==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA185_485==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA185_485==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA185_485==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA185_485==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA185_485==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA185_485==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA185_485==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA185_485==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        input.seek(index185_485);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA185_545 = input.LA(1);
                        int index185_545 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_545==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA185_545==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA185_545==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA185_545==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA185_545==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA185_545==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA185_545==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA185_545==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA185_545==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA185_545==STRING_LITERAL) ) {s = 1568;}
                        else if ( (LA185_545==QUOTED_STRING_LITERAL) ) {s = 1569;}
                        else if ( (LA185_545==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA185_545==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA185_545==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA185_545==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA185_545==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA185_545==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA185_545==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA185_545==AT) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA185_545==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA185_545==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA185_545==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA185_545==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA185_545==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA185_545==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA185_545==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA185_545==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA185_545==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA185_545==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA185_545==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA185_545==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA185_545==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA185_545==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA185_545==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA185_545==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA185_545==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA185_545==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA185_545==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA185_545==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA185_545==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA185_545==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA185_545==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA185_545==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA185_545==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA185_545==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA185_545==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA185_545==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA185_545==LW) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA185_545==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA185_545==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA185_545==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA185_545==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA185_545==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA185_545==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA185_545==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA185_545==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA185_545==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA185_545==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA185_545==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA185_545==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA185_545==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA185_545==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA185_545==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA185_545==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA185_545==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA185_545==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA185_545==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA185_545==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA185_545==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        input.seek(index185_545);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA185_605 = input.LA(1);
                        int index185_605 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_605==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA185_605==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA185_605==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA185_605==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA185_605==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA185_605==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA185_605==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA185_605==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA185_605==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA185_605==STRING_LITERAL) ) {s = 1637;}
                        else if ( (LA185_605==QUOTED_STRING_LITERAL) ) {s = 1638;}
                        else if ( (LA185_605==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA185_605==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA185_605==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA185_605==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA185_605==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA185_605==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA185_605==AT) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA185_605==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA185_605==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA185_605==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA185_605==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA185_605==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA185_605==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA185_605==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA185_605==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA185_605==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA185_605==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA185_605==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA185_605==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA185_605==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA185_605==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA185_605==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA185_605==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA185_605==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA185_605==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA185_605==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA185_605==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA185_605==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA185_605==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA185_605==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA185_605==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA185_605==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA185_605==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA185_605==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA185_605==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA185_605==LW) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA185_605==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA185_605==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA185_605==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA185_605==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA185_605==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA185_605==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA185_605==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA185_605==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA185_605==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA185_605==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA185_605==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA185_605==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA185_605==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA185_605==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA185_605==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA185_605==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA185_605==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA185_605==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA185_605==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA185_605==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA185_605==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        input.seek(index185_605);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA185_665 = input.LA(1);
                        int index185_665 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_665==STRING_LITERAL) ) {s = 1696;}
                        else if ( (LA185_665==QUOTED_STRING_LITERAL) ) {s = 1697;}
                        else if ( (LA185_665==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA185_665==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA185_665==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA185_665==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA185_665==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA185_665==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA185_665==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA185_665==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA185_665==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA185_665==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA185_665==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA185_665==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA185_665==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA185_665==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA185_665==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA185_665==AT) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA185_665==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA185_665==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA185_665==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA185_665==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA185_665==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA185_665==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA185_665==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA185_665==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA185_665==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA185_665==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA185_665==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA185_665==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA185_665==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA185_665==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA185_665==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA185_665==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA185_665==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA185_665==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA185_665==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA185_665==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA185_665==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA185_665==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA185_665==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA185_665==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA185_665==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA185_665==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA185_665==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA185_665==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA185_665==LW) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA185_665==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA185_665==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA185_665==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA185_665==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA185_665==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA185_665==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA185_665==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA185_665==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA185_665==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA185_665==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA185_665==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA185_665==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA185_665==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA185_665==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA185_665==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA185_665==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA185_665==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA185_665==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA185_665==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA185_665==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA185_665==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        input.seek(index185_665);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA185_725 = input.LA(1);
                        int index185_725 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_725==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA185_725==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA185_725==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA185_725==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA185_725==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA185_725==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA185_725==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA185_725==STRING_LITERAL) ) {s = 1771;}
                        else if ( (LA185_725==QUOTED_STRING_LITERAL) ) {s = 1772;}
                        else if ( (LA185_725==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA185_725==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA185_725==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA185_725==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA185_725==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA185_725==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA185_725==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA185_725==AT) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA185_725==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA185_725==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA185_725==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA185_725==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA185_725==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA185_725==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA185_725==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA185_725==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA185_725==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA185_725==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA185_725==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA185_725==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA185_725==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA185_725==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA185_725==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA185_725==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA185_725==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA185_725==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA185_725==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA185_725==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA185_725==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA185_725==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA185_725==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA185_725==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA185_725==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA185_725==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA185_725==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA185_725==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA185_725==LW) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA185_725==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA185_725==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA185_725==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA185_725==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA185_725==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA185_725==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA185_725==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA185_725==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA185_725==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA185_725==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA185_725==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA185_725==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA185_725==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA185_725==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA185_725==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA185_725==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA185_725==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA185_725==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA185_725==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA185_725==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA185_725==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        input.seek(index185_725);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA185_785 = input.LA(1);
                        int index185_785 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_785==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA185_785==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA185_785==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA185_785==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA185_785==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA185_785==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA185_785==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA185_785==STRING_LITERAL) ) {s = 1838;}
                        else if ( (LA185_785==QUOTED_STRING_LITERAL) ) {s = 1839;}
                        else if ( (LA185_785==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA185_785==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA185_785==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA185_785==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA185_785==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA185_785==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA185_785==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA185_785==AT) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA185_785==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA185_785==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA185_785==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA185_785==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA185_785==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA185_785==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA185_785==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA185_785==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA185_785==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA185_785==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA185_785==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA185_785==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA185_785==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA185_785==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA185_785==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA185_785==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA185_785==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA185_785==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA185_785==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA185_785==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA185_785==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA185_785==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA185_785==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA185_785==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA185_785==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA185_785==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA185_785==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA185_785==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA185_785==LW) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA185_785==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA185_785==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA185_785==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA185_785==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA185_785==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA185_785==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA185_785==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA185_785==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA185_785==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA185_785==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA185_785==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA185_785==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA185_785==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA185_785==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA185_785==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA185_785==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA185_785==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA185_785==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA185_785==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA185_785==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA185_785==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        input.seek(index185_785);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA185_845 = input.LA(1);
                        int index185_845 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_845==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( ((LA185_845>=STRING_LITERAL && LA185_845<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index185_845);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA185_905 = input.LA(1);
                        int index185_905 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_905==STRING_LITERAL) ) {s = 1901;}
                        else if ( (LA185_905==QUOTED_STRING_LITERAL) ) {s = 1902;}
                        else if ( (LA185_905==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA185_905==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA185_905==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA185_905==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA185_905==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA185_905==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA185_905==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA185_905==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA185_905==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA185_905==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA185_905==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA185_905==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA185_905==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA185_905==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA185_905==AT) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA185_905==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA185_905==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA185_905==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA185_905==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA185_905==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA185_905==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA185_905==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA185_905==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA185_905==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA185_905==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA185_905==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA185_905==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA185_905==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA185_905==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA185_905==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA185_905==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA185_905==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA185_905==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA185_905==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA185_905==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA185_905==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA185_905==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA185_905==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA185_905==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA185_905==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA185_905==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA185_905==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA185_905==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA185_905==LW) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA185_905==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA185_905==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA185_905==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA185_905==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA185_905==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA185_905==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA185_905==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA185_905==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA185_905==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA185_905==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA185_905==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA185_905==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA185_905==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA185_905==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA185_905==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA185_905==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA185_905==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA185_905==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA185_905==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA185_905==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA185_905==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        input.seek(index185_905);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA185_965 = input.LA(1);
                        int index185_965 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_965==STRING_LITERAL) ) {s = 1968;}
                        else if ( (LA185_965==QUOTED_STRING_LITERAL) ) {s = 1969;}
                        else if ( (LA185_965==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA185_965==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA185_965==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA185_965==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA185_965==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA185_965==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1975;}
                        else if ( (LA185_965==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1976;}
                        else if ( (LA185_965==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA185_965==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA185_965==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA185_965==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA185_965==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA185_965==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA185_965==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA185_965==AT) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA185_965==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA185_965==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA185_965==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA185_965==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA185_965==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA185_965==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA185_965==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA185_965==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA185_965==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA185_965==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA185_965==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA185_965==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA185_965==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA185_965==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA185_965==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA185_965==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA185_965==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA185_965==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA185_965==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA185_965==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA185_965==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA185_965==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA185_965==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA185_965==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA185_965==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA185_965==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA185_965==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA185_965==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA185_965==LW) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA185_965==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA185_965==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA185_965==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA185_965==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA185_965==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA185_965==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA185_965==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA185_965==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA185_965==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA185_965==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA185_965==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA185_965==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA185_965==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA185_965==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA185_965==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA185_965==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA185_965==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA185_965==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA185_965==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA185_965==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA185_965==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        input.seek(index185_965);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA185_1025 = input.LA(1);
                        int index185_1025 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1025==STRING_LITERAL) ) {s = 2035;}
                        else if ( (LA185_1025==QUOTED_STRING_LITERAL) ) {s = 2036;}
                        else if ( (LA185_1025==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA185_1025==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA185_1025==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA185_1025==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA185_1025==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA185_1025==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA185_1025==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA185_1025==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA185_1025==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA185_1025==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA185_1025==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA185_1025==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA185_1025==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA185_1025==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA185_1025==AT) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA185_1025==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA185_1025==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA185_1025==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA185_1025==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA185_1025==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA185_1025==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA185_1025==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA185_1025==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA185_1025==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA185_1025==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA185_1025==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA185_1025==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA185_1025==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA185_1025==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA185_1025==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA185_1025==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA185_1025==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA185_1025==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA185_1025==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA185_1025==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA185_1025==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA185_1025==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA185_1025==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA185_1025==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA185_1025==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA185_1025==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA185_1025==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA185_1025==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA185_1025==LW) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA185_1025==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA185_1025==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA185_1025==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA185_1025==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA185_1025==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA185_1025==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA185_1025==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA185_1025==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA185_1025==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA185_1025==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA185_1025==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA185_1025==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA185_1025==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA185_1025==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA185_1025==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA185_1025==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA185_1025==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA185_1025==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA185_1025==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA185_1025==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA185_1025==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        input.seek(index185_1025);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA185_1085 = input.LA(1);
                        int index185_1085 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1085==STRING_LITERAL) ) {s = 2102;}
                        else if ( (LA185_1085==QUOTED_STRING_LITERAL) ) {s = 2103;}
                        else if ( (LA185_1085==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA185_1085==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA185_1085==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA185_1085==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA185_1085==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA185_1085==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA185_1085==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA185_1085==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2111;}
                        else if ( (LA185_1085==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2112;}
                        else if ( (LA185_1085==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA185_1085==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA185_1085==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA185_1085==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA185_1085==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA185_1085==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA185_1085==AT) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA185_1085==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA185_1085==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA185_1085==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA185_1085==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA185_1085==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA185_1085==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA185_1085==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA185_1085==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA185_1085==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA185_1085==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA185_1085==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA185_1085==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA185_1085==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA185_1085==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA185_1085==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA185_1085==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA185_1085==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA185_1085==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA185_1085==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA185_1085==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA185_1085==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA185_1085==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA185_1085==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA185_1085==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA185_1085==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA185_1085==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA185_1085==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA185_1085==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA185_1085==LW) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA185_1085==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA185_1085==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA185_1085==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA185_1085==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA185_1085==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA185_1085==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA185_1085==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA185_1085==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA185_1085==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA185_1085==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA185_1085==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA185_1085==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA185_1085==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA185_1085==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA185_1085==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA185_1085==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA185_1085==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA185_1085==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA185_1085==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA185_1085==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA185_1085==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        input.seek(index185_1085);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA185_1145 = input.LA(1);
                        int index185_1145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1145==SELECT) ) {s = 2170;}
                        else if ( (LA185_1145==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA185_1145==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA185_1145==AT) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA185_1145==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA185_1145==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA185_1145==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA185_1145==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA185_1145==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA185_1145==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA185_1145==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA185_1145==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA185_1145==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA185_1145==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA185_1145==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA185_1145==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA185_1145==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA185_1145==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA185_1145==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA185_1145==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA185_1145==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA185_1145==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA185_1145==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA185_1145==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA185_1145==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA185_1145==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA185_1145==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA185_1145==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA185_1145==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA185_1145==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA185_1145==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA185_1145==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA185_1145==LW) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA185_1145==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA185_1145==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA185_1145==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA185_1145==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA185_1145==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA185_1145==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA185_1145==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA185_1145==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA185_1145==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA185_1145==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA185_1145==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA185_1145==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA185_1145==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA185_1145==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA185_1145==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        input.seek(index185_1145);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA185_1146 = input.LA(1);
                        int index185_1146 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1146==RPAREN) ) {s = 2218;}
                        else if ( (LA185_1146==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA185_1146==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA185_1146==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA185_1146==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA185_1146==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA185_1146==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA185_1146==LT) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA185_1146==GT) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA185_1146==LE) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA185_1146==GE) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA185_1146==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA185_1146==IS) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA185_1146==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA185_1146==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA185_1146==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA185_1146==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA185_1146==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA185_1146==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA185_1146==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA185_1146==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA185_1146==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA185_1146==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA185_1146==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA185_1146==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        input.seek(index185_1146);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA185_1147 = input.LA(1);
                        int index185_1147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1147==RPAREN) ) {s = 2243;}
                        else if ( (LA185_1147==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA185_1147==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA185_1147==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA185_1147==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA185_1147==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA185_1147==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA185_1147==LT) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA185_1147==GT) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA185_1147==LE) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA185_1147==GE) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA185_1147==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA185_1147==IS) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA185_1147==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA185_1147==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA185_1147==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA185_1147==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA185_1147==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA185_1147==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA185_1147==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA185_1147==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA185_1147==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA185_1147==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA185_1147==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA185_1147==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        input.seek(index185_1147);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA185_1225 = input.LA(1);
                        int index185_1225 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1225==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA185_1225==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA185_1225==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA185_1225==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA185_1225==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA185_1225==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA185_1225==LT) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA185_1225==GT) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA185_1225==LE) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA185_1225==GE) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA185_1225==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA185_1225==IS) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA185_1225==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA185_1225==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA185_1225==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA185_1225==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA185_1225==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA185_1225==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA185_1225==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA185_1225==RPAREN) ) {s = 2287;}
                        else if ( (LA185_1225==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA185_1225==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA185_1225==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA185_1225==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA185_1225==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        input.seek(index185_1225);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA185_1226 = input.LA(1);
                        int index185_1226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1226==RPAREN) ) {s = 2293;}
                        else if ( (LA185_1226==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA185_1226==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA185_1226==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA185_1226==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA185_1226==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA185_1226==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA185_1226==LT) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA185_1226==GT) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA185_1226==LE) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA185_1226==GE) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA185_1226==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA185_1226==IS) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA185_1226==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA185_1226==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA185_1226==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA185_1226==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA185_1226==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA185_1226==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA185_1226==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA185_1226==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA185_1226==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA185_1226==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA185_1226==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA185_1226==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        input.seek(index185_1226);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA185_1294 = input.LA(1);
                        int index185_1294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1294==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2318;}
                        else if ( (LA185_1294==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA185_1294==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA185_1294==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA185_1294==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA185_1294==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA185_1294==LT) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA185_1294==GT) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA185_1294==LE) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA185_1294==GE) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA185_1294==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA185_1294==IS) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA185_1294==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA185_1294==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA185_1294==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA185_1294==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA185_1294==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA185_1294==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA185_1294==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA185_1294==RPAREN) ) {s = 2337;}
                        else if ( (LA185_1294==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA185_1294==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA185_1294==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA185_1294==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA185_1294==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        input.seek(index185_1294);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA185_1295 = input.LA(1);
                        int index185_1295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1295==RPAREN) ) {s = 2343;}
                        else if ( (LA185_1295==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA185_1295==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA185_1295==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA185_1295==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA185_1295==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA185_1295==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA185_1295==LT) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA185_1295==GT) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA185_1295==LE) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA185_1295==GE) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA185_1295==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA185_1295==IS) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA185_1295==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA185_1295==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA185_1295==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA185_1295==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA185_1295==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA185_1295==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA185_1295==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA185_1295==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA185_1295==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA185_1295==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA185_1295==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA185_1295==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        input.seek(index185_1295);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA185_1354 = input.LA(1);
                        int index185_1354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1354==RPAREN) ) {s = 14;}
                        else if ( (LA185_1354==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA185_1354==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA185_1354==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA185_1354==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA185_1354==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA185_1354==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA185_1354==LT) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA185_1354==GT) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA185_1354==LE) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA185_1354==GE) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA185_1354==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA185_1354==IS) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA185_1354==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA185_1354==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA185_1354==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA185_1354==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA185_1354==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA185_1354==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA185_1354==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA185_1354==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA185_1354==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA185_1354==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA185_1354==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA185_1354==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA185_1354==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        input.seek(index185_1354);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA185_1355 = input.LA(1);
                        int index185_1355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1355==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA185_1355==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA185_1355==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA185_1355==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA185_1355==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA185_1355==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA185_1355==LT) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA185_1355==GT) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA185_1355==LE) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA185_1355==GE) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA185_1355==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA185_1355==IS) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA185_1355==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA185_1355==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA185_1355==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA185_1355==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA185_1355==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA185_1355==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA185_1355==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA185_1355==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA185_1355==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA185_1355==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA185_1355==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA185_1355==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA185_1355==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA185_1355==RPAREN) ) {s = 14;}
                        input.seek(index185_1355);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA185_1430 = input.LA(1);
                        int index185_1430 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1430==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA185_1430==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA185_1430==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA185_1430==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA185_1430==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA185_1430==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA185_1430==LT) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA185_1430==GT) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA185_1430==LE) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA185_1430==GE) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA185_1430==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA185_1430==IS) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA185_1430==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA185_1430==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA185_1430==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA185_1430==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA185_1430==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA185_1430==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA185_1430==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA185_1430==RPAREN) ) {s = 2439;}
                        else if ( (LA185_1430==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA185_1430==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA185_1430==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA185_1430==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA185_1430==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        input.seek(index185_1430);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA185_1431 = input.LA(1);
                        int index185_1431 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1431==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA185_1431==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA185_1431==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA185_1431==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA185_1431==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA185_1431==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA185_1431==LT) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA185_1431==GT) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA185_1431==LE) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA185_1431==GE) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA185_1431==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA185_1431==IS) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA185_1431==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA185_1431==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA185_1431==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA185_1431==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA185_1431==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA185_1431==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA185_1431==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA185_1431==RPAREN) ) {s = 2464;}
                        else if ( (LA185_1431==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA185_1431==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA185_1431==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA185_1431==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA185_1431==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        input.seek(index185_1431);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA185_1499 = input.LA(1);
                        int index185_1499 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1499==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2470;}
                        else if ( (LA185_1499==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA185_1499==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA185_1499==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA185_1499==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA185_1499==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA185_1499==LT) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA185_1499==GT) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA185_1499==LE) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA185_1499==GE) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA185_1499==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA185_1499==IS) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA185_1499==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA185_1499==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA185_1499==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA185_1499==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA185_1499==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA185_1499==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA185_1499==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA185_1499==RPAREN) ) {s = 2489;}
                        else if ( (LA185_1499==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA185_1499==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA185_1499==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA185_1499==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA185_1499==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        input.seek(index185_1499);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA185_1500 = input.LA(1);
                        int index185_1500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1500==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2495;}
                        else if ( (LA185_1500==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA185_1500==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA185_1500==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA185_1500==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA185_1500==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA185_1500==LT) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA185_1500==GT) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA185_1500==LE) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA185_1500==GE) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA185_1500==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA185_1500==IS) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA185_1500==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA185_1500==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA185_1500==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA185_1500==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA185_1500==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA185_1500==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA185_1500==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA185_1500==RPAREN) ) {s = 2514;}
                        else if ( (LA185_1500==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA185_1500==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA185_1500==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA185_1500==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA185_1500==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        input.seek(index185_1500);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA185_1568 = input.LA(1);
                        int index185_1568 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1568==RPAREN) ) {s = 2520;}
                        else if ( (LA185_1568==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA185_1568==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA185_1568==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA185_1568==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA185_1568==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA185_1568==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA185_1568==LT) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA185_1568==GT) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA185_1568==LE) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA185_1568==GE) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA185_1568==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA185_1568==IS) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA185_1568==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA185_1568==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA185_1568==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA185_1568==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA185_1568==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA185_1568==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA185_1568==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA185_1568==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA185_1568==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA185_1568==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA185_1568==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA185_1568==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        input.seek(index185_1568);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA185_1569 = input.LA(1);
                        int index185_1569 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1569==RPAREN) ) {s = 2545;}
                        else if ( (LA185_1569==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA185_1569==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA185_1569==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA185_1569==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA185_1569==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA185_1569==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA185_1569==LT) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA185_1569==GT) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA185_1569==LE) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA185_1569==GE) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA185_1569==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA185_1569==IS) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA185_1569==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA185_1569==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA185_1569==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA185_1569==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA185_1569==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA185_1569==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA185_1569==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA185_1569==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA185_1569==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA185_1569==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA185_1569==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA185_1569==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        input.seek(index185_1569);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA185_1637 = input.LA(1);
                        int index185_1637 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1637==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA185_1637==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA185_1637==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA185_1637==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA185_1637==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA185_1637==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA185_1637==LT) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA185_1637==GT) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA185_1637==LE) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA185_1637==GE) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA185_1637==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA185_1637==IS) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA185_1637==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA185_1637==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA185_1637==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA185_1637==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA185_1637==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA185_1637==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA185_1637==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA185_1637==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA185_1637==RPAREN) ) {s = 2590;}
                        else if ( (LA185_1637==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA185_1637==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA185_1637==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA185_1637==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA185_1637==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        input.seek(index185_1637);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA185_1638 = input.LA(1);
                        int index185_1638 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1638==RPAREN) ) {s = 2596;}
                        else if ( (LA185_1638==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA185_1638==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA185_1638==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA185_1638==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA185_1638==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA185_1638==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA185_1638==LT) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA185_1638==GT) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA185_1638==LE) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA185_1638==GE) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA185_1638==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA185_1638==IS) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA185_1638==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA185_1638==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA185_1638==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA185_1638==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA185_1638==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA185_1638==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA185_1638==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA185_1638==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2616;}
                        else if ( (LA185_1638==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA185_1638==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA185_1638==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA185_1638==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA185_1638==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        input.seek(index185_1638);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA185_1696 = input.LA(1);
                        int index185_1696 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1696==RPAREN) ) {s = 2622;}
                        else if ( (LA185_1696==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA185_1696==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA185_1696==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA185_1696==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA185_1696==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA185_1696==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA185_1696==LT) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA185_1696==GT) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA185_1696==LE) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA185_1696==GE) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA185_1696==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA185_1696==IS) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA185_1696==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA185_1696==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA185_1696==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA185_1696==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA185_1696==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA185_1696==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA185_1696==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA185_1696==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2642;}
                        else if ( (LA185_1696==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA185_1696==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA185_1696==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA185_1696==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA185_1696==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        input.seek(index185_1696);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA185_1697 = input.LA(1);
                        int index185_1697 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1697==RPAREN) ) {s = 2648;}
                        else if ( (LA185_1697==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA185_1697==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA185_1697==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA185_1697==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA185_1697==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA185_1697==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA185_1697==LT) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA185_1697==GT) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA185_1697==LE) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA185_1697==GE) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA185_1697==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA185_1697==IS) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA185_1697==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA185_1697==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA185_1697==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA185_1697==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA185_1697==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA185_1697==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA185_1697==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA185_1697==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2668;}
                        else if ( (LA185_1697==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA185_1697==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA185_1697==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA185_1697==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA185_1697==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        input.seek(index185_1697);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA185_1771 = input.LA(1);
                        int index185_1771 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1771==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA185_1771==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA185_1771==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA185_1771==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA185_1771==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA185_1771==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA185_1771==LT) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA185_1771==GT) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA185_1771==LE) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA185_1771==GE) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA185_1771==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA185_1771==IS) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA185_1771==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA185_1771==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA185_1771==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA185_1771==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA185_1771==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA185_1771==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA185_1771==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA185_1771==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA185_1771==RPAREN) ) {s = 2694;}
                        else if ( (LA185_1771==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA185_1771==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA185_1771==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA185_1771==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA185_1771==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        input.seek(index185_1771);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA185_1772 = input.LA(1);
                        int index185_1772 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1772==RPAREN) ) {s = 2700;}
                        else if ( (LA185_1772==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA185_1772==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA185_1772==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA185_1772==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA185_1772==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA185_1772==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA185_1772==LT) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA185_1772==GT) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA185_1772==LE) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA185_1772==GE) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA185_1772==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA185_1772==IS) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA185_1772==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA185_1772==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA185_1772==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA185_1772==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA185_1772==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA185_1772==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA185_1772==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA185_1772==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA185_1772==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA185_1772==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA185_1772==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA185_1772==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA185_1772==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        input.seek(index185_1772);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA185_1838 = input.LA(1);
                        int index185_1838 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1838==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA185_1838==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA185_1838==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA185_1838==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA185_1838==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA185_1838==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA185_1838==LT) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA185_1838==GT) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA185_1838==LE) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA185_1838==GE) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA185_1838==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA185_1838==IS) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA185_1838==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA185_1838==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA185_1838==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA185_1838==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA185_1838==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA185_1838==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA185_1838==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA185_1838==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA185_1838==RPAREN) ) {s = 2746;}
                        else if ( (LA185_1838==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA185_1838==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA185_1838==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA185_1838==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA185_1838==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        input.seek(index185_1838);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA185_1839 = input.LA(1);
                        int index185_1839 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1839==RPAREN) ) {s = 2752;}
                        else if ( (LA185_1839==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA185_1839==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA185_1839==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA185_1839==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA185_1839==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA185_1839==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA185_1839==LT) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA185_1839==GT) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA185_1839==LE) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA185_1839==GE) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA185_1839==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA185_1839==IS) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA185_1839==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA185_1839==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA185_1839==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA185_1839==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA185_1839==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA185_1839==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA185_1839==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA185_1839==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA185_1839==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA185_1839==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA185_1839==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA185_1839==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA185_1839==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        input.seek(index185_1839);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA185_1901 = input.LA(1);
                        int index185_1901 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1901==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA185_1901==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA185_1901==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA185_1901==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA185_1901==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA185_1901==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA185_1901==LT) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA185_1901==GT) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA185_1901==LE) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA185_1901==GE) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA185_1901==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA185_1901==IS) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA185_1901==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA185_1901==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA185_1901==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA185_1901==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA185_1901==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA185_1901==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA185_1901==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA185_1901==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA185_1901==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA185_1901==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA185_1901==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA185_1901==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA185_1901==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA185_1901==RPAREN) ) {s = 14;}
                        input.seek(index185_1901);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA185_1902 = input.LA(1);
                        int index185_1902 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1902==RPAREN) ) {s = 14;}
                        else if ( (LA185_1902==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA185_1902==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA185_1902==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA185_1902==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA185_1902==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA185_1902==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA185_1902==LT) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA185_1902==GT) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA185_1902==LE) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA185_1902==GE) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA185_1902==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA185_1902==IS) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA185_1902==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA185_1902==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA185_1902==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA185_1902==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA185_1902==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA185_1902==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA185_1902==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA185_1902==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA185_1902==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA185_1902==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA185_1902==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA185_1902==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA185_1902==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2829;}
                        input.seek(index185_1902);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA185_1968 = input.LA(1);
                        int index185_1968 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1968==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA185_1968==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA185_1968==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA185_1968==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA185_1968==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA185_1968==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA185_1968==LT) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA185_1968==GT) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA185_1968==LE) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA185_1968==GE) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA185_1968==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA185_1968==IS) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA185_1968==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA185_1968==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA185_1968==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA185_1968==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA185_1968==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA185_1968==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA185_1968==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA185_1968==RPAREN) ) {s = 2849;}
                        else if ( (LA185_1968==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA185_1968==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA185_1968==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA185_1968==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA185_1968==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        input.seek(index185_1968);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA185_1969 = input.LA(1);
                        int index185_1969 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_1969==RPAREN) ) {s = 2855;}
                        else if ( (LA185_1969==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA185_1969==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA185_1969==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA185_1969==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA185_1969==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA185_1969==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA185_1969==LT) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA185_1969==GT) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA185_1969==LE) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA185_1969==GE) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA185_1969==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA185_1969==IS) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA185_1969==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA185_1969==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA185_1969==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA185_1969==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA185_1969==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA185_1969==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA185_1969==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2874;}
                        else if ( (LA185_1969==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA185_1969==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA185_1969==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA185_1969==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA185_1969==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        input.seek(index185_1969);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA185_2035 = input.LA(1);
                        int index185_2035 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_2035==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2880;}
                        else if ( (LA185_2035==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA185_2035==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA185_2035==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA185_2035==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA185_2035==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA185_2035==LT) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA185_2035==GT) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA185_2035==LE) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA185_2035==GE) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA185_2035==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA185_2035==IS) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA185_2035==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA185_2035==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA185_2035==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA185_2035==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA185_2035==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA185_2035==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA185_2035==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA185_2035==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA185_2035==AS) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA185_2035==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA185_2035==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA185_2035==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA185_2035==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA185_2035==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA185_2035==RPAREN) ) {s = 14;}
                        input.seek(index185_2035);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA185_2036 = input.LA(1);
                        int index185_2036 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_2036==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA185_2036==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA185_2036==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA185_2036==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA185_2036==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA185_2036==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA185_2036==LT) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA185_2036==GT) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA185_2036==LE) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA185_2036==GE) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA185_2036==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA185_2036==IS) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA185_2036==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA185_2036==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA185_2036==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA185_2036==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA185_2036==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA185_2036==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA185_2036==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA185_2036==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA185_2036==AS) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA185_2036==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA185_2036==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA185_2036==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA185_2036==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA185_2036==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA185_2036==RPAREN) ) {s = 14;}
                        input.seek(index185_2036);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA185_2102 = input.LA(1);
                        int index185_2102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_2102==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2934;}
                        else if ( (LA185_2102==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA185_2102==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA185_2102==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA185_2102==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA185_2102==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA185_2102==LT) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA185_2102==GT) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA185_2102==LE) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA185_2102==GE) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA185_2102==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA185_2102==IS) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA185_2102==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA185_2102==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA185_2102==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA185_2102==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA185_2102==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA185_2102==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA185_2102==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA185_2102==RPAREN) ) {s = 2953;}
                        else if ( (LA185_2102==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA185_2102==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA185_2102==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA185_2102==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA185_2102==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        input.seek(index185_2102);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA185_2103 = input.LA(1);
                        int index185_2103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA185_2103==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2959;}
                        else if ( (LA185_2103==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA185_2103==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA185_2103==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA185_2103==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA185_2103==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA185_2103==LT) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA185_2103==GT) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA185_2103==LE) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA185_2103==GE) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA185_2103==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA185_2103==IS) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA185_2103==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA185_2103==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA185_2103==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA185_2103==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA185_2103==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA185_2103==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA185_2103==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA185_2103==RPAREN) ) {s = 2978;}
                        else if ( (LA185_2103==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA185_2103==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA185_2103==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA185_2103==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA185_2103==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        input.seek(index185_2103);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA185_2218 = input.LA(1);
                        int index185_2218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2218);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA185_2243 = input.LA(1);
                        int index185_2243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2243);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA185_2287 = input.LA(1);
                        int index185_2287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2287);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA185_2293 = input.LA(1);
                        int index185_2293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2293);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA185_2337 = input.LA(1);
                        int index185_2337 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2337);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA185_2343 = input.LA(1);
                        int index185_2343 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2343);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA185_2439 = input.LA(1);
                        int index185_2439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2439);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA185_2464 = input.LA(1);
                        int index185_2464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2464);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA185_2489 = input.LA(1);
                        int index185_2489 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2489);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA185_2514 = input.LA(1);
                        int index185_2514 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2514);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA185_2520 = input.LA(1);
                        int index185_2520 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2520);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA185_2545 = input.LA(1);
                        int index185_2545 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2545);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA185_2590 = input.LA(1);
                        int index185_2590 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2590);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA185_2596 = input.LA(1);
                        int index185_2596 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2596);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA185_2622 = input.LA(1);
                        int index185_2622 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2622);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA185_2648 = input.LA(1);
                        int index185_2648 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2648);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA185_2694 = input.LA(1);
                        int index185_2694 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2694);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA185_2700 = input.LA(1);
                        int index185_2700 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2700);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA185_2746 = input.LA(1);
                        int index185_2746 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2746);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA185_2752 = input.LA(1);
                        int index185_2752 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2752);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA185_2849 = input.LA(1);
                        int index185_2849 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2849);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA185_2855 = input.LA(1);
                        int index185_2855 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2855);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA185_2953 = input.LA(1);
                        int index185_2953 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2953);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA185_2978 = input.LA(1);
                        int index185_2978 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index185_2978);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1731 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1736 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1754 = new BitSet(new long[]{0x0040020008000010L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1760 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1790 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1814 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1816 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1820 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x05200C8140008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1874 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1876 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1880 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x85200C8140008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1934 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1937 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1940 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1961 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1992 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x05200C8000008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2033 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x85200C8040008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2124 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2165 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x07200C8020008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2168 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000020000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2171 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x05200C8000008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000020000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2213 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x87200C8060008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2216 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000020000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2219 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x85200C8040008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000020000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2232 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2265 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2270 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2275 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2280 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2285 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2290 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2295 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2298 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2312 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2315 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2321 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2324 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2328 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2331 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2335 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2341 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2344 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2351 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2354 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2357 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2364 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2367 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2374 = new BitSet(new long[]{0x0130800080004000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2377 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2384 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2387 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2390 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2397 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420008040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2417 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2422 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2426 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2429 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2443 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2492 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2496 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2500 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2510 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2541 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2545 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2552 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2564 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2566 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2569 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2571 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2579 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2616 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2623 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2626 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2630 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2636 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2643 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2645 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2653 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2687 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2704 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2706 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2709 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_mergeMatched2711 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeMatched2715 = new BitSet(new long[]{0x0000000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatched2728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatched2730 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatched2735 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatched2737 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatched2748 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2788 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched2790 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched2792 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched2795 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched2797 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatched2801 = new BitSet(new long[]{0x0040000000000000L});
    public static final BitSet FOLLOW_INSERT_in_mergeUnmatched2805 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeUnmatched2808 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_columnList_in_mergeUnmatched2810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeUnmatched2812 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeUnmatched2816 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_selectionList_in_mergeUnmatched2818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2860 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2862 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2868 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2870 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2873 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2877 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2883 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2885 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2894 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2896 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2898 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2905 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2907 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2914 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2916 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2918 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420008040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2994 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3013 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3015 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3018 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3020 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3027 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3080 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3082 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3086 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3088 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3093 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3126 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3137 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3179 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3183 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3188 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3230 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3232 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3235 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3264 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3266 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3291 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3295 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3308 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3336 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3342 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x80000004C0000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3345 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3347 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x80000004C0000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3352 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x80000004C0000000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3361 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000000C0000000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3365 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000000C0000000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3369 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000000C0000000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3384 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3403 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3420 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3423 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3512 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x85200CA040008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3515 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3537 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3541 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3543 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3549 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr3551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3582 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList3585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3587 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3649 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3652 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3696 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3699 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3701 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3737 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3785 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x85200CA040008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3787 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3828 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3856 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3887 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3891 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3894 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3898 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000020C0000000L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000020C0000000L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3924 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000140000000L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3926 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3929 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3934 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4025 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList4028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000002040000000L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement4057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement4063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr4088 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr4094 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr4098 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr4100 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr4103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr4105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr4107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4145 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4183 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4204 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4207 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4221 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4224 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4267 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4271 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4275 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4278 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4299 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4313 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4315 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4382 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4385 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4388 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4391 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4408 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4469 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4475 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4481 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4487 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4521 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4524 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4527 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4574 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4577 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4641 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4644 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4648 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4679 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4683 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4687 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4691 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4700 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4705 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4716 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4722 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4796 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4800 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4803 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA1C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4805 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4858 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4864 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4871 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4876 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4882 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4888 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4894 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4944 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4946 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4948 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4951 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4982 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4987 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4989 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem5014 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem5017 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem5022 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection5053 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection5056 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern5071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern5073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern5077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5099 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5103 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5107 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5111 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5115 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5119 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5155 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5183 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5188 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5268 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5270 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000001A000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5275 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5326 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000001A000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5332 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5338 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5344 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5396 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5399 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5401 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5428 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5430 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5432 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5457 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5459 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5504 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5509 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5515 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5519 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5588 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5590 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5593 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA1C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5653 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression5662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5665 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA9C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5733 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5773 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5775 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5800 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5885 = new BitSet(new long[]{0x0030800080004002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5900 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5904 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5908 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5912 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5980 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5986 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit6023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit6025 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6042 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_outputLimit6044 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit6047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit6049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6199 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6206 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6208 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6254 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6260 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420008040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6273 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420008040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6337 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6341 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6343 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6345 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6347 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6349 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6351 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6353 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6355 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6358 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6394 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_whenClause6397 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6399 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_whenClause6402 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6415 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_elseClause6418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6445 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6448 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6451 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6465 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_caseExpression6467 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6469 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6472 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6510 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6515 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6517 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6549 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6554 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6556 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6588 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000304000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6593 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6596 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6599 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6603 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000304000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6618 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6624 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6640 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00200000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6653 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6671 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6685 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6687 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6701 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6715 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6745 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00200000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6774 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6780 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA1C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6785 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00200000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6790 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000C00200000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6918 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000F000000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6950 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6954 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6958 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6962 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6986 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000F000000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression7003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression7009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression7015 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7021 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA1C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression7023 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7026 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000F000000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7031 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000F000000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7127 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000880000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7166 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7172 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000021120000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7197 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001100000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7226 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001120000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7431 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7433 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7483 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7485 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7490 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7542 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7631 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7637 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7639 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7643 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7645 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020008000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7691 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7694 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7698 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0020008000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7712 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0002000000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7717 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7720 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7723 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00C0002000000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7742 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7767 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7776 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7783 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7822 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7946 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7952 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7955 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr7958 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7965 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7968 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7976 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7988 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr8012 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8017 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8019 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8022 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8024 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000440000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr8031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8035 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8041 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr8048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression8092 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x87200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000020000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression8098 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_arrayExpression8100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000020000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc8130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8133 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8137 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8142 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc8154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8157 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8161 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8166 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8181 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8193 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8198 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8202 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8213 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8230 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8233 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8237 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8242 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8248 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8257 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8261 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8266 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8272 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8281 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8285 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8290 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8302 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8307 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8312 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8320 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8323 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8325 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8331 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8344 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8347 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8350 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8353 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8356 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8366 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8369 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8372 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8375 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8388 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8391 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8394 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8405 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc8416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8419 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc8422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8424 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc8439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8442 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8447 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8453 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8460 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc8466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8469 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8472 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8480 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8483 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8486 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8509 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8520 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8524 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8527 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8542 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8544 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation8546 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8549 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8555 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8582 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8587 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8621 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8625 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8676 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8698 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_maxFunc8701 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8704 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_maxFunc8707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8710 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_maxFunc8713 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction8756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction8759 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction8761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8791 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass8793 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass8797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass8799 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA1C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass8802 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass8806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass8835 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass8837 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA1C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass8840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass8844 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8907 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8912 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8916 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8919 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8922 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8936 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8938 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200D80C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8941 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression8991 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1800000000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat9044 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9051 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_followedByRepeat9053 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat9055 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat9059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9088 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression9093 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9095 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9127 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression9132 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9134 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression9169 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9173 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression9178 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9180 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression9245 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression9251 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9257 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression9259 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression9265 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression9274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList9389 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList9394 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList9400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom9423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix9438 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix9444 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x80000008C0000000L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix9446 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix9448 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix9455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix9457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix9465 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix9467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression9529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression9533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9548 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression9550 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression9561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression9564 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA9C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression9566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression9569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9618 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression9620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression9625 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA9C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression9629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression9633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression9646 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression9649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression9651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange9672 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200FA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000021000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9684 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DB0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9707 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9807 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9809 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9818 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000880000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9829 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA1C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9831 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9834 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9891 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9894 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9924 = new BitSet(new long[]{0x803801E80FFC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9927 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9929 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9931 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9935 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9940 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9945 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9947 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList10004 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10007 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement10033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement10049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement10054 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement10057 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10105 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector10107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector10109 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector10112 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression10163 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression10165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression10174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000880000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression10185 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA1C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression10187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression10190 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression10202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10257 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier10276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10280 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10325 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy10360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10364 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_expression_in_expressionList10406 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10409 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA0C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expression_in_expressionList10412 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList10443 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x85200DA8C0008000L,0x0000000000800003L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10446 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime10472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime10483 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime10494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime10505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime10516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime10528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime10539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime10551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime10563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime10568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10579 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10600 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10657 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10702 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0040000000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10713 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10766 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_number_in_rangeOperand10774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10778 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10894 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10898 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10900 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList11007 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x042001A040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList11009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001020000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList11012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x042001A040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList11014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001020000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList11018 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter11040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter11046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter11051 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty11067 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty11070 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x8000000040000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty11072 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic11098 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010880000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic11107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic11111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic11113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic11132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000C0000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic11137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic11143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic11146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11288 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent11300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent11302 = new BitSet(new long[]{0x803801E807FC4422L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0xC000000040000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent11345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent11361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent11368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent11375 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent11393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent11400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent11407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent11414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent11421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent11428 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent11435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent11442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent11449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent11456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent11463 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent11470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent11477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent11484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11491 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent11498 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11505 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent11512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent11519 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent11526 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent11533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent11540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent11554 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent11561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent11568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent11575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent11582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent11589 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent11596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent11603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11612 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11621 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11635 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11642 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11649 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11656 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11663 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11670 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11729 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod11754 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod11756 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11759 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11762 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11765 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11768 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod11780 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11785 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11791 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11805 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11808 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11811 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11814 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11823 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11842 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11845 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11854 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11856 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11865 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420018040008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11867 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_yearPart11920 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart11924 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart11926 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart11930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart11934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_monthPart11982 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart11986 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart11988 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart11992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart11996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekPart12044 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart12048 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart12050 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart12054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart12058 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart12106 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart12110 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart12112 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart12116 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart12120 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart12169 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart12173 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart12175 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart12179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart12183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart12232 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart12236 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart12238 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart12242 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart12246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart12250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart12300 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart12304 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart12306 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart12310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart12314 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart12318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart12368 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart12372 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart12374 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart12378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart12382 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart12386 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number12441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number12458 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number12475 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number12492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution12513 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant12532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant12539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant12552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant12572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant12592 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant12614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420008000008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant12620 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0420008000008000L,0x0000000000000003L});
    public static final BitSet FOLLOW_number_in_numberconstant12624 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant12653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12669 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5964 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10044 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10467 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10478 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10534 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10558 = new BitSet(new long[]{0x0000000000000002L});
}
