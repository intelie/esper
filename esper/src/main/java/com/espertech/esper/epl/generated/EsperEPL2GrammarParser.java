// $ANTLR 3.1.1 EsperEPL2Grammar.g 2009-09-03 13:47:48

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "INSERTINTO_EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_WINDOW_COL_TYPE_LIST", "CREATE_WINDOW_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "STAR", "BOR", "PLUS", "QUESTION", "LBRACK", "RBRACK", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=167;
    public static final int FLOAT_SUFFIX=315;
    public static final int STAR=256;
    public static final int NUMERIC_PARAM_LIST=107;
    public static final int MOD=276;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=149;
    public static final int BSR=297;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=173;
    public static final int TIMEPERIOD_MILLISECONDS=93;
    public static final int FULL_OUTERJOIN_EXPR=153;
    public static final int MATCHREC_PATTERN_CONCAT=240;
    public static final int INC=290;
    public static final int LNOT=286;
    public static final int RPAREN=255;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=263;
    public static final int BSR_ASSIGN=298;
    public static final int CAST_EXPR=202;
    public static final int MATCHES=104;
    public static final int STREAM_EXPR=148;
    public static final int TIMEPERIOD_SECONDS=90;
    public static final int NOT_EQUAL=268;
    public static final int METADATASQL=67;
    public static final int EVENT_FILTER_PROPERTY_EXPR=116;
    public static final int LAST_AGGREG=226;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=110;
    public static final int FOLLOWED_BY=280;
    public static final int HOUR_PART=178;
    public static final int RBRACK=261;
    public static final int MATCHREC_PATTERN_NESTED=242;
    public static final int MATCH_UNTIL_RANGE_CLOSED=217;
    public static final int GE=272;
    public static final int METHOD_JOIN_EXPR=213;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=115;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=114;
    public static final int MINUS_ASSIGN=291;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=126;
    public static final int NUM_DOUBLE=236;
    public static final int INSERTINTO_STREAM_NAME=190;
    public static final int LCURLY=277;
    public static final int TIMEPERIOD_MILLISEC=91;
    public static final int UNARY_MINUS=174;
    public static final int RETAINUNION=63;
    public static final int DBWHERE_CLAUSE=188;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=124;
    public static final int WS=307;
    public static final int EMAILAT=306;
    public static final int SUBSELECT_GROUP_EXPR=194;
    public static final int ON_SELECT_INSERT_EXPR=208;
    public static final int ESCAPECHAR=281;
    public static final int SL_COMMENT=308;
    public static final int NULL_TYPE=235;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=215;
    public static final int GT=270;
    public static final int BNOT=287;
    public static final int WHERE_EXPR=135;
    public static final int END=33;
    public static final int LAND=304;
    public static final int INNERJOIN_EXPR=150;
    public static final int NOT_REGEXP=185;
    public static final int MATCH_UNTIL_EXPR=214;
    public static final int EVENT_PROP_EXPR=157;
    public static final int LBRACK=260;
    public static final int VIEW_EXPR=132;
    public static final int ANNOTATION=222;
    public static final int LONG_TYPE=230;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=117;
    public static final int MATCHREC_PATTERN=238;
    public static final int TIMEPERIOD_SEC=88;
    public static final int TICKED_STRING_LITERAL=282;
    public static final int ON_SELECT_EXPR=207;
    public static final int MINUTE_PART=179;
    public static final int PATTERN_NOT_EXPR=113;
    public static final int SQL_NE=267;
    public static final int SUM=18;
    public static final int HexDigit=313;
    public static final int UPDATE_EXPR=227;
    public static final int LPAREN=254;
    public static final int IN_SUBSELECT_EXPR=196;
    public static final int AT=81;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=94;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=244;
    public static final int NOT_IN_RANGE=192;
    public static final int OFFSET=98;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=68;
    public static final int SECOND_PART=180;
    public static final int MATCH_RECOGNIZE=100;
    public static final int IDENT=251;
    public static final int DATABASE_JOIN_EXPR=134;
    public static final int BXOR=266;
    public static final int PLUS=258;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=82;
    public static final int EXISTS=70;
    public static final int EVENT_PROP_INDEXED=160;
    public static final int TIMEPERIOD_MILLISECOND=92;
    public static final int EVAL_NOTEQUALS_EXPR=141;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=216;
    public static final int CREATE_VARIABLE_EXPR=212;
    public static final int CREATE_WINDOW_COL_TYPE=220;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=245;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=111;
    public static final int RIGHT_OUTERJOIN_EXPR=152;
    public static final int NUMBERSETSTAR=221;
    public static final int LAST_OPERATOR=199;
    public static final int PATTERN_FILTER_EXPR=112;
    public static final int EVAL_AND_EXPR=138;
    public static final int LEFT_OUTERJOIN_EXPR=151;
    public static final int EPL_EXPR=237;
    public static final int GROUP_BY_EXPR=154;
    public static final int SET=78;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=73;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=158;
    public static final int MINUS=274;
    public static final int SEMI=305;
    public static final int STAR_ASSIGN=293;
    public static final int FIRST_AGGREG=225;
    public static final int COLON=262;
    public static final int EVAL_EQUALS_GROUP_EXPR=142;
    public static final int BAND_ASSIGN=303;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=168;
    public static final int VALUE_NULL=96;
    public static final int NOT_IN_SET=182;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=161;
    public static final int SL=299;
    public static final int NOT_IN_SUBSELECT_EXPR=197;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=130;
    public static final int SR=295;
    public static final int RCURLY=278;
    public static final int PLUS_ASSIGN=289;
    public static final int EXISTS_SUBSELECT_EXPR=195;
    public static final int DAY_PART=177;
    public static final int EVENT_FILTER_IN=125;
    public static final int DIV=275;
    public static final int OBJECT_PARAM_ORDERED_EXPR=109;
    public static final int OctalEscape=312;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=181;
    public static final int PRIOR=69;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=97;
    public static final int SELECTION_EXPR=145;
    public static final int LOR=273;
    public static final int CAST=74;
    public static final int LW=72;
    public static final int WILDCARD_SELECT=189;
    public static final int EXPONENT=314;
    public static final int LT=269;
    public static final int PATTERN_INCL_EXPR=133;
    public static final int ORDER_BY_EXPR=155;
    public static final int BOOL_TYPE=234;
    public static final int MOD_ASSIGN=294;
    public static final int ANNOTATION_ARRAY=223;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=198;
    public static final int EQUALS=252;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=64;
    public static final int DIV_ASSIGN=288;
    public static final int SL_ASSIGN=300;
    public static final int PATTERN=65;
    public static final int SQL=66;
    public static final int MATCHREC_AFTER_SKIP=243;
    public static final int WEEKDAY=71;
    public static final int FULL=40;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=176;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=95;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=143;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=231;
    public static final int TIMEPERIOD_SECOND=89;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=127;
    public static final int ANNOTATION_VALUE=224;
    public static final int SUBSELECT_EXPR=193;
    public static final int NUMERIC_PARAM_RANGE=106;
    public static final int CONCAT=172;
    public static final int CLASS_IDENT=129;
    public static final int MATCHREC_PATTERN_ALTER=241;
    public static final int ON_EXPR=205;
    public static final int CREATE_WINDOW_EXPR=203;
    public static final int PROPERTY_SELECTION_STREAM=119;
    public static final int ON_DELETE_EXPR=206;
    public static final int NUM_LONG=283;
    public static final int ON=41;
    public static final int TIME_PERIOD=175;
    public static final int DOUBLE_TYPE=232;
    public static final int DELETE=76;
    public static final int INT_TYPE=229;
    public static final int MATCHREC_PARTITION=249;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=137;
    public static final int ORDER_ELEMENT_EXPR=156;
    public static final int TIMEPERIOD_HOURS=85;
    public static final int VARIABLE=79;
    public static final int SUBSTITUTION=201;
    public static final int UNTIL=80;
    public static final int STRING_TYPE=233;
    public static final int NUM_INT=279;
    public static final int MATCHREC_DEFINE_ITEM=246;
    public static final int ON_SET_EXPR=211;
    public static final int STDDEV=24;
    public static final int NUM_FLOAT=284;
    public static final int ON_EXPR_FROM=210;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=310;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=118;
    public static final int WEEKDAY_OPERATOR=200;
    public static final int DEC=292;
    public static final int CREATE_WINDOW_COL_TYPE_LIST=219;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=301;
    public static final int NUMERIC_PARAM_FREQUENCY=108;
    public static final int SNAPSHOT=77;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=166;
    public static final int EVENT_FILTER_PARAM=122;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=163;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=99;
    public static final int DEFINE=102;
    public static final int TIMEPERIOD_DAYS=83;
    public static final int EVENT_FILTER_RANGE=123;
    public static final int ML_COMMENT=309;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=162;
    public static final int BOR_ASSIGN=302;
    public static final int COMMA=250;
    public static final int IS=42;
    public static final int PARTITION=103;
    public static final int WHEN_LIMIT_EXPR=169;
    public static final int TIMEPERIOD_LIMIT_EXPR=165;
    public static final int SOME=49;
    public static final int EQUAL=285;
    public static final int BOR=257;
    public static final int MATCHREC_MEASURE_ITEM=248;
    public static final int TIMEPERIOD_HOUR=84;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=128;
    public static final int IN_RANGE=191;
    public static final int DOT=253;
    public static final int MATCHREC_MEASURES=247;
    public static final int CURRENT_TIMESTAMP=75;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=120;
    public static final int INSERTINTO_EXPR=170;
    public static final int UNIDIRECTIONAL=62;
    public static final int HAVING_EXPR=136;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=218;
    public static final int EVAL_EQUALS_EXPR=140;
    public static final int TIMEPERIOD_MINUTES=87;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=184;
    public static final int EVENT_LIMIT_EXPR=164;
    public static final int TIMEPERIOD_MINUTE=86;
    public static final int NOT_BETWEEN=183;
    public static final int EVAL_OR_EXPR=139;
    public static final int ON_SELECT_INSERT_OUTPUT=209;
    public static final int MEASURES=101;
    public static final int AFTER=105;
    public static final int BAND=265;
    public static final int MATCHREC_PATTERN_ATOM=239;
    public static final int QUOTED_STRING_LITERAL=264;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=259;
    public static final int OBSERVER_EXPR=131;
    public static final int EVENT_FILTER_IDENT=121;
    public static final int EVENT_PROP_MAPPED=159;
    public static final int UnicodeEscape=311;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=186;
    public static final int SELECTION_ELEMENT_EXPR=146;
    public static final int CREATE_WINDOW_SELECT_EXPR=204;
    public static final int WINDOW=5;
    public static final int INSERTINTO_EXPRCOL=171;
    public static final int ON_SET_EXPR_ITEM=228;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=147;
    public static final int SR_ASSIGN=296;
    public static final int LE=271;
    public static final int DBFROM_CLAUSE=187;
    public static final int EVAL_IDENT=144;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after';");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:509:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:510:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:510:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:510:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:510:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1552);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1557);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1561); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:515:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:516:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:516:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:516:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:516:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1575);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1581);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1585); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: eplExpression, annotationEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 519:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:519:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:519:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:522:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:523:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:523:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1611);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1615); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:530:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:531:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:531:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1637);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:531:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);

                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);

                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:531:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1641); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:531:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:531:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1645);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:531:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1649);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueNoEnum, elementValuePairsNoEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 532:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:532:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:532:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:532:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:535:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:536:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:536:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1695); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1697);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:536:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:536:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1701); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:536:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:536:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1705);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:536:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1709);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1714); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueEnum, elementValuePairsEnum, classIdentifier
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 537:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:537:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:537:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:537:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:540:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:541:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:541:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1755);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:541:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:541:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1758); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1761);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:544:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:545:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:545:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1782);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:545:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:545:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1785); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1788);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:548:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:549:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:549:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1813); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1815);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: i, elementValueNoEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 550:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:550:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:553:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:554:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:554:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1852); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1854); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1856);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: elementValueEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 555:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:555:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:558:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:559:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:559:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1887);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:560:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:560:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:560:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1898);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 560:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:561:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1911);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:564:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:565:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:565:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1934);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:566:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:566:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:566:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum1945);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 566:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:567:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum1958);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:568:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum1966);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:571:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:572:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:572:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum1986); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:572:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:572:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1989);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:572:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:572:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum1992); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1994);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:572:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:572:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2005); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 573:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:573:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:573:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:576:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:577:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:577:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:577:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:577:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2037);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:577:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:577:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2040); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2042);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:577:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:577:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2049); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2053); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 578:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:578:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:578:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:584:1: eplExpression : ( selectExpr | createWindowExpr | createVariableExpr | onExpr | updateExpr );
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr52 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr53 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr54 = null;



        try {
            // EsperEPL2Grammar.g:585:2: ( selectExpr | createWindowExpr | createVariableExpr | onExpr | updateExpr )
            int alt17=5;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                int LA17_3 = input.LA(2);

                if ( (LA17_3==WINDOW) ) {
                    alt17=2;
                }
                else if ( (LA17_3==VARIABLE) ) {
                    alt17=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=4;
                }
                break;
            case UPDATE:
                {
                alt17=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:585:4: selectExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_selectExpr_in_eplExpression2085);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:586:4: createWindowExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2090);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:587:4: createVariableExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2095);
                    createVariableExpr52=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:588:4: onExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_onExpr_in_eplExpression2100);
                    onExpr53=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:589:4: updateExpr
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_updateExpr_in_eplExpression2105);
                    updateExpr54=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr54.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:592:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT55=null;
        Token SELECT57=null;
        Token FROM59=null;
        Token WHERE62=null;
        Token GROUP64=null;
        Token BY65=null;
        Token HAVING67=null;
        Token OUTPUT69=null;
        Token ORDER71=null;
        Token BY72=null;
        Token ROW_LIMIT_EXPR74=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr56 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause58 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause60 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog61 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause63 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr66 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause68 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit70 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr73 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit75 = null;


        CommonTree INSERT55_tree=null;
        CommonTree SELECT57_tree=null;
        CommonTree FROM59_tree=null;
        CommonTree WHERE62_tree=null;
        CommonTree GROUP64_tree=null;
        CommonTree BY65_tree=null;
        CommonTree HAVING67_tree=null;
        CommonTree OUTPUT69_tree=null;
        CommonTree ORDER71_tree=null;
        CommonTree BY72_tree=null;
        CommonTree ROW_LIMIT_EXPR74_tree=null;

        try {
            // EsperEPL2Grammar.g:593:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:593:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:593:4: ( INSERT insertIntoExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==INSERT) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:593:5: INSERT insertIntoExpr
                    {
                    INSERT55=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2118); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2121);
                    insertIntoExpr56=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr56.getTree());

                    }
                    break;

            }

            SELECT57=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2127); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2130);
            selectClause58=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause58.getTree());
            FROM59=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2134); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2137);
            fromClause60=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause60.getTree());
            // EsperEPL2Grammar.g:596:3: ( matchRecog )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==MATCH_RECOGNIZE) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:596:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2141);
                    matchRecog61=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog61.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:597:3: ( WHERE whereClause )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==WHERE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:597:4: WHERE whereClause
                    {
                    WHERE62=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2147); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2150);
                    whereClause63=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause63.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:598:3: ( GROUP BY groupByListExpr )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==GROUP) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:598:4: GROUP BY groupByListExpr
                    {
                    GROUP64=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2157); if (state.failed) return retval;
                    BY65=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2160); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2163);
                    groupByListExpr66=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr66.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:599:3: ( HAVING havingClause )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==HAVING) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:599:4: HAVING havingClause
                    {
                    HAVING67=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2170); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2173);
                    havingClause68=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause68.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:600:3: ( OUTPUT outputLimit )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==OUTPUT) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:600:4: OUTPUT outputLimit
                    {
                    OUTPUT69=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2180); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2183);
                    outputLimit70=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit70.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:601:3: ( ORDER BY orderByListExpr )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==ORDER) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:601:4: ORDER BY orderByListExpr
                    {
                    ORDER71=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2190); if (state.failed) return retval;
                    BY72=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2193); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2196);
                    orderByListExpr73=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr73.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:602:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ROW_LIMIT_EXPR) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:602:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR74=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2203); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2206);
                    rowLimit75=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit75.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:605:1: onExpr : ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ON76=null;
        Token AS79=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression77 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression78 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr80 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr81 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr82 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert83 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr84 = null;


        CommonTree i_tree=null;
        CommonTree ON76_tree=null;
        CommonTree AS79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:606:2: ( ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr ) -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ) )
            // EsperEPL2Grammar.g:606:4: ON ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            {
            ON76=(Token)match(input,ON,FOLLOW_ON_in_onExpr2221); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON76);

            // EsperEPL2Grammar.g:606:7: ( eventFilterExpression | patternInclusionExpression )
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==IDENT||LA26_0==TICKED_STRING_LITERAL) ) {
                alt26=1;
            }
            else if ( (LA26_0==PATTERN) ) {
                alt26=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 26, 0, input);

                throw nvae;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:606:8: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onExpr2224);
                    eventFilterExpression77=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression77.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:606:32: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onExpr2228);
                    patternInclusionExpression78=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression78.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:606:60: ( AS i= IDENT | i= IDENT )?
            int alt27=3;
            int LA27_0 = input.LA(1);

            if ( (LA27_0==AS) ) {
                alt27=1;
            }
            else if ( (LA27_0==IDENT) ) {
                alt27=2;
            }
            switch (alt27) {
                case 1 :
                    // EsperEPL2Grammar.g:606:61: AS i= IDENT
                    {
                    AS79=(Token)match(input,AS,FOLLOW_AS_in_onExpr2232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS79);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2236); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:606:74: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExpr2242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:607:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr )
            int alt31=3;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt31=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt31=2;
                }
                break;
            case SET:
                {
                alt31=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }

            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:607:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2250);
                    onDeleteExpr80=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr80.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:607:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2254);
                    onSelectExpr81=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr81.getTree());
                    // EsperEPL2Grammar.g:607:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt30=2;
                    int LA30_0 = input.LA(1);

                    if ( (LA30_0==INSERT) ) {
                        alt30=1;
                    }
                    switch (alt30) {
                        case 1 :
                            // EsperEPL2Grammar.g:607:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:607:33: ( onSelectInsertExpr )+
                            int cnt28=0;
                            loop28:
                            do {
                                int alt28=2;
                                int LA28_0 = input.LA(1);

                                if ( (LA28_0==INSERT) ) {
                                    alt28=1;
                                }


                                switch (alt28) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:607:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2257);
                            	    onSelectInsertExpr82=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr82.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt28 >= 1 ) break loop28;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(28, input);
                                        throw eee;
                                }
                                cnt28++;
                            } while (true);

                            // EsperEPL2Grammar.g:607:53: ( outputClauseInsert )?
                            int alt29=2;
                            int LA29_0 = input.LA(1);

                            if ( (LA29_0==OUTPUT) ) {
                                alt29=1;
                            }
                            switch (alt29) {
                                case 1 :
                                    // EsperEPL2Grammar.g:607:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2260);
                                    outputClauseInsert83=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert83.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:607:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2267);
                    onSetExpr84=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr84.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onSelectExpr, eventFilterExpression, patternInclusionExpression, outputClauseInsert, i, onSetExpr, onSelectInsertExpr, onDeleteExpr
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 608:3: -> ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
            {
                // EsperEPL2Grammar.g:608:6: ^( ON_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                // EsperEPL2Grammar.g:608:16: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:608:39: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:608:67: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:608:71: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:608:85: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:608:99: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:608:119: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:608:139: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:611:1: updateExpr : UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token UPDATE85=null;
        Token ISTREAM86=null;
        Token AS88=null;
        Token SET89=null;
        Token COMMA91=null;
        Token WHERE93=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier87 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment90 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment92 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause94 = null;


        CommonTree i_tree=null;
        CommonTree UPDATE85_tree=null;
        CommonTree ISTREAM86_tree=null;
        CommonTree AS88_tree=null;
        CommonTree SET89_tree=null;
        CommonTree COMMA91_tree=null;
        CommonTree WHERE93_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:612:2: ( UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:612:4: UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE85=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2313); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE85);

            ISTREAM86=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM86);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2317);
            classIdentifier87=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier87.getTree());
            // EsperEPL2Grammar.g:612:35: ( AS i= IDENT | i= IDENT )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:612:36: AS i= IDENT
                    {
                    AS88=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS88);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2324); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:612:49: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2330); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET89=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2336); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET89);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2338);
            onSetAssignment90=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment90.getTree());
            // EsperEPL2Grammar.g:613:23: ( COMMA onSetAssignment )*
            loop33:
            do {
                int alt33=2;
                int LA33_0 = input.LA(1);

                if ( (LA33_0==COMMA) ) {
                    alt33=1;
                }


                switch (alt33) {
            	case 1 :
            	    // EsperEPL2Grammar.g:613:24: COMMA onSetAssignment
            	    {
            	    COMMA91=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2341); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA91);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2343);
            	    onSetAssignment92=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment92.getTree());

            	    }
            	    break;

            	default :
            	    break loop33;
                }
            } while (true);

            // EsperEPL2Grammar.g:614:3: ( WHERE whereClause )?
            int alt34=2;
            int LA34_0 = input.LA(1);

            if ( (LA34_0==WHERE) ) {
                alt34=1;
            }
            switch (alt34) {
                case 1 :
                    // EsperEPL2Grammar.g:614:4: WHERE whereClause
                    {
                    WHERE93=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2351); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE93);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2353);
                    whereClause94=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause94.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, whereClause, onSetAssignment, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 615:3: -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:615:6: ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:615:36: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:615:57: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:618:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT95=null;
        Token SELECT97=null;
        Token DISTINCT98=null;
        Token WHERE101=null;
        Token GROUP103=null;
        Token BY104=null;
        Token HAVING106=null;
        Token ORDER108=null;
        Token BY109=null;
        Token ROW_LIMIT_EXPR111=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr96 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList99 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom100 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause102 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr105 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause107 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr110 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit112 = null;


        CommonTree INSERT95_tree=null;
        CommonTree SELECT97_tree=null;
        CommonTree DISTINCT98_tree=null;
        CommonTree WHERE101_tree=null;
        CommonTree GROUP103_tree=null;
        CommonTree BY104_tree=null;
        CommonTree HAVING106_tree=null;
        CommonTree ORDER108_tree=null;
        CommonTree BY109_tree=null;
        CommonTree ROW_LIMIT_EXPR111_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:621:2: ( ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) )
            // EsperEPL2Grammar.g:621:4: ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            // EsperEPL2Grammar.g:621:4: ( INSERT insertIntoExpr )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==INSERT) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:621:5: INSERT insertIntoExpr
                    {
                    INSERT95=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT95);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2403);
                    insertIntoExpr96=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr96.getTree());

                    }
                    break;

            }

            SELECT97=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT97);

            // EsperEPL2Grammar.g:622:10: ( DISTINCT )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==DISTINCT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:622:10: DISTINCT
                    {
                    DISTINCT98=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2411); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT98);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2414);
            selectionList99=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList99.getTree());
            // EsperEPL2Grammar.g:623:3: ( onExprFrom )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==FROM) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:623:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2418);
                    onExprFrom100=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom100.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:624:3: ( WHERE whereClause )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:624:4: WHERE whereClause
                    {
                    WHERE101=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE101);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2426);
                    whereClause102=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause102.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:625:3: ( GROUP BY groupByListExpr )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==GROUP) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:625:4: GROUP BY groupByListExpr
                    {
                    GROUP103=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP103);

                    BY104=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY104);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2439);
                    groupByListExpr105=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr105.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:626:3: ( HAVING havingClause )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==HAVING) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:626:4: HAVING havingClause
                    {
                    HAVING106=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2446); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING106);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2448);
                    havingClause107=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause107.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:627:3: ( ORDER BY orderByListExpr )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==ORDER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:627:4: ORDER BY orderByListExpr
                    {
                    ORDER108=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER108);

                    BY109=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY109);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2459);
                    orderByListExpr110=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr110.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:628:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ROW_LIMIT_EXPR) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:628:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR111=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2466); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR111);

                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2468);
                    rowLimit112=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit112.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: orderByListExpr, DISTINCT, havingClause, rowLimit, onExprFrom, whereClause, selectionList, groupByListExpr, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 629:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
            {
                // EsperEPL2Grammar.g:629:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:629:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                // EsperEPL2Grammar.g:629:39: ( DISTINCT )?
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:629:63: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:629:75: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:629:88: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:629:105: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:629:119: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();
                // EsperEPL2Grammar.g:629:136: ( rowLimit )?
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());

                }
                stream_rowLimit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:632:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT113=null;
        Token SELECT115=null;
        Token WHERE117=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr114 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList116 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause118 = null;


        CommonTree INSERT113_tree=null;
        CommonTree SELECT115_tree=null;
        CommonTree WHERE117_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:635:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:635:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT113=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2527); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT113);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2529);
            insertIntoExpr114=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr114.getTree());
            SELECT115=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT115);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2535);
            selectionList116=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList116.getTree());
            // EsperEPL2Grammar.g:637:3: ( WHERE whereClause )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==WHERE) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:637:4: WHERE whereClause
                    {
                    WHERE117=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2540); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE117);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2542);
                    whereClause118=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause118.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, selectionList, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 638:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:638:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:638:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:641:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT119=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT119_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:642:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:642:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT119=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2573); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT119);

            // EsperEPL2Grammar.g:642:11: (f= FIRST | a= ALL )
            int alt44=2;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==FIRST) ) {
                alt44=1;
            }
            else if ( (LA44_0==ALL) ) {
                alt44=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 44, 0, input);

                throw nvae;
            }
            switch (alt44) {
                case 1 :
                    // EsperEPL2Grammar.g:642:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2578); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:642:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2584); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: f, a
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 643:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:643:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:643:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:643:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:646:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE120=null;
        Token WHERE122=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom121 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause123 = null;


        CommonTree DELETE120_tree=null;
        CommonTree WHERE122_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:649:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:649:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE120=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE120);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2630);
            onExprFrom121=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom121.getTree());
            // EsperEPL2Grammar.g:651:3: ( WHERE whereClause )?
            int alt45=2;
            int LA45_0 = input.LA(1);

            if ( (LA45_0==WHERE) ) {
                alt45=1;
            }
            switch (alt45) {
                case 1 :
                    // EsperEPL2Grammar.g:651:4: WHERE whereClause
                    {
                    WHERE122=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2635); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE122);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2637);
                    whereClause123=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause123.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 652:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:652:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:652:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:655:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET124=null;
        Token COMMA126=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment125 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment127 = null;


        CommonTree SET124_tree=null;
        CommonTree COMMA126_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:658:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:658:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET124=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2677); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET124);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2679);
            onSetAssignment125=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment125.getTree());
            // EsperEPL2Grammar.g:658:24: ( COMMA onSetAssignment )*
            loop46:
            do {
                int alt46=2;
                int LA46_0 = input.LA(1);

                if ( (LA46_0==COMMA) ) {
                    alt46=1;
                }


                switch (alt46) {
            	case 1 :
            	    // EsperEPL2Grammar.g:658:25: COMMA onSetAssignment
            	    {
            	    COMMA126=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2682); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA126);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2684);
            	    onSetAssignment127=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment127.getTree());

            	    }
            	    break;

            	default :
            	    break loop46;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 659:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:659:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:662:1: onSetAssignment : i= IDENT EQUALS expression -> ^( ON_SET_EXPR_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS128=null;
        EsperEPL2GrammarParser.expression_return expression129 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS128_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:663:2: (i= IDENT EQUALS expression -> ^( ON_SET_EXPR_ITEM $i expression ) )
            // EsperEPL2Grammar.g:663:4: i= IDENT EQUALS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onSetAssignment2711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            EQUALS128=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2713); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS128);

            pushFollow(FOLLOW_expression_in_onSetAssignment2715);
            expression129=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression129.getTree());


            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 664:3: -> ^( ON_SET_EXPR_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:664:6: ^( ON_SET_EXPR_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:667:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM130=null;
        Token AS131=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM130_tree=null;
        CommonTree AS131_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:668:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:668:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM130=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2741); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM130);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:668:17: ( AS i= IDENT | i= IDENT )?
            int alt47=3;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==AS) ) {
                alt47=1;
            }
            else if ( (LA47_0==IDENT) ) {
                alt47=2;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:668:18: AS i= IDENT
                    {
                    AS131=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2748); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS131);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2752); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:668:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2758); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 669:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:669:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:669:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:672:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE132=null;
        Token WINDOW133=null;
        Token DOT134=null;
        Token DOT136=null;
        Token AS138=null;
        Token LPAREN140=null;
        Token RPAREN142=null;
        Token WHERE143=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression135 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression137 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter139 = null;

        EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList141 = null;

        EsperEPL2GrammarParser.expression_return expression144 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE132_tree=null;
        CommonTree WINDOW133_tree=null;
        CommonTree DOT134_tree=null;
        CommonTree DOT136_tree=null;
        CommonTree AS138_tree=null;
        CommonTree LPAREN140_tree=null;
        CommonTree RPAREN142_tree=null;
        CommonTree WHERE143_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_createWindowColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnList");
        try {
            // EsperEPL2Grammar.g:673:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ) )
            // EsperEPL2Grammar.g:673:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE132=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE132);

            WINDOW133=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW133);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:673:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==DOT) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:673:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT134=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT134);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2797);
                    viewExpression135=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression135.getTree());
                    // EsperEPL2Grammar.g:673:46: ( DOT viewExpression )*
                    loop48:
                    do {
                        int alt48=2;
                        int LA48_0 = input.LA(1);

                        if ( (LA48_0==DOT) ) {
                            alt48=1;
                        }


                        switch (alt48) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:673:47: DOT viewExpression
                    	    {
                    	    DOT136=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2800); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT136);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2802);
                    	    viewExpression137=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression137.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop48;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:673:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt50=3;
            int LA50_0 = input.LA(1);

            if ( (LA50_0==RETAINUNION) ) {
                alt50=1;
            }
            else if ( (LA50_0==RETAININTERSECTION) ) {
                alt50=2;
            }
            switch (alt50) {
                case 1 :
                    // EsperEPL2Grammar.g:673:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr2811); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:673:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr2815); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:673:110: ( AS )?
            int alt51=2;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==AS) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:673:110: AS
                    {
                    AS138=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr2819); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS138);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:674:5: ( createWindowExprModelAfter | LPAREN createWindowColumnList RPAREN )
            int alt52=2;
            int LA52_0 = input.LA(1);

            if ( (LA52_0==SELECT||LA52_0==IDENT||LA52_0==TICKED_STRING_LITERAL) ) {
                alt52=1;
            }
            else if ( (LA52_0==LPAREN) ) {
                alt52=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 52, 0, input);

                throw nvae;
            }
            switch (alt52) {
                case 1 :
                    // EsperEPL2Grammar.g:675:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr2834);
                    createWindowExprModelAfter139=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter139.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:676:10: LPAREN createWindowColumnList RPAREN
                    {
                    LPAREN140=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr2849); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN140);

                    pushFollow(FOLLOW_createWindowColumnList_in_createWindowExpr2851);
                    createWindowColumnList141=createWindowColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowColumnList.add(createWindowColumnList141.getTree());
                    RPAREN142=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr2853); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN142);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:678:5: (i1= INSERT ( WHERE expression )? )?
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==INSERT) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:678:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr2870); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:678:16: ( WHERE expression )?
                    int alt53=2;
                    int LA53_0 = input.LA(1);

                    if ( (LA53_0==WHERE) ) {
                        alt53=1;
                    }
                    switch (alt53) {
                        case 1 :
                            // EsperEPL2Grammar.g:678:17: WHERE expression
                            {
                            WHERE143=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr2873); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE143);

                            pushFollow(FOLLOW_expression_in_createWindowExpr2875);
                            expression144=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression144.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: createWindowExprModelAfter, ri, ru, expression, i, ru, viewExpression, createWindowColumnList, INSERT, createWindowColumnList, ri, viewExpression, i, createWindowExprModelAfter
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 679:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:679:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:679:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:679:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:679:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:679:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:679:98: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();
                // EsperEPL2Grammar.g:680:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:680:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 681:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
            {
                // EsperEPL2Grammar.g:681:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createWindowColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:681:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:681:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:681:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:681:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:681:84: ( createWindowColumnList )?
                if ( stream_createWindowColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnList.nextTree());

                }
                stream_createWindowColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:684:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT145=null;
        Token FROM147=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList146 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier148 = null;


        CommonTree SELECT145_tree=null;
        CommonTree FROM147_tree=null;

        try {
            // EsperEPL2Grammar.g:685:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:685:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:685:4: ( SELECT createSelectionList FROM )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==SELECT) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:685:5: SELECT createSelectionList FROM
                    {
                    SELECT145=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter2962); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter2965);
                    createSelectionList146=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList146.getTree());
                    FROM147=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter2967); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter2972);
            classIdentifier148=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier148.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:688:1: createVariableExpr : CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token n=null;
        Token CREATE149=null;
        Token VARIABLE150=null;
        Token EQUALS151=null;
        EsperEPL2GrammarParser.expression_return expression152 = null;


        CommonTree t_tree=null;
        CommonTree n_tree=null;
        CommonTree CREATE149_tree=null;
        CommonTree VARIABLE150_tree=null;
        CommonTree EQUALS151_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:689:2: ( CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? ) )
            // EsperEPL2Grammar.g:689:4: CREATE VARIABLE t= IDENT n= IDENT ( EQUALS expression )?
            {
            CREATE149=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr2985); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE149);

            VARIABLE150=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr2987); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE150);

            t=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2991); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(t);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr2995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:689:36: ( EQUALS expression )?
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==EQUALS) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:689:37: EQUALS expression
                    {
                    EQUALS151=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr2998); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS151);

                    pushFollow(FOLLOW_expression_in_createVariableExpr3000);
                    expression152=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression152.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, t, n
            // token labels: t, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_t=new RewriteRuleTokenStream(adaptor,"token t",t);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 690:3: -> ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
            {
                // EsperEPL2Grammar.g:690:6: ^( CREATE_VARIABLE_EXPR $t $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_t.nextNode());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:690:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createWindowColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnList"
    // EsperEPL2Grammar.g:693:1: createWindowColumnList : createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createWindowColumnList_return createWindowColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnList_return retval = new EsperEPL2GrammarParser.createWindowColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA154=null;
        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement153 = null;

        EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement155 = null;


        CommonTree COMMA154_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createWindowColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createWindowColumnListElement");
         paraphrases.push("create window column list"); 
        try {
            // EsperEPL2Grammar.g:696:2: ( createWindowColumnListElement ( COMMA createWindowColumnListElement )* -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ ) )
            // EsperEPL2Grammar.g:696:4: createWindowColumnListElement ( COMMA createWindowColumnListElement )*
            {
            pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList3043);
            createWindowColumnListElement153=createWindowColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement153.getTree());
            // EsperEPL2Grammar.g:696:34: ( COMMA createWindowColumnListElement )*
            loop57:
            do {
                int alt57=2;
                int LA57_0 = input.LA(1);

                if ( (LA57_0==COMMA) ) {
                    alt57=1;
                }


                switch (alt57) {
            	case 1 :
            	    // EsperEPL2Grammar.g:696:35: COMMA createWindowColumnListElement
            	    {
            	    COMMA154=(Token)match(input,COMMA,FOLLOW_COMMA_in_createWindowColumnList3046); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA154);

            	    pushFollow(FOLLOW_createWindowColumnListElement_in_createWindowColumnList3048);
            	    createWindowColumnListElement155=createWindowColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createWindowColumnListElement.add(createWindowColumnListElement155.getTree());

            	    }
            	    break;

            	default :
            	    break loop57;
                }
            } while (true);



            // AST REWRITE
            // elements: createWindowColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 697:3: -> ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:697:6: ^( CREATE_WINDOW_COL_TYPE_LIST ( createWindowColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE_LIST, "CREATE_WINDOW_COL_TYPE_LIST"), root_1);

                if ( !(stream_createWindowColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createWindowColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowColumnListElement.nextTree());

                }
                stream_createWindowColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnList"

    public static class createWindowColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowColumnListElement"
    // EsperEPL2Grammar.g:700:1: createWindowColumnListElement : name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) ;
    public final EsperEPL2GrammarParser.createWindowColumnListElement_return createWindowColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowColumnListElement_return retval = new EsperEPL2GrammarParser.createWindowColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token type=null;

        CommonTree name_tree=null;
        CommonTree type_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");

        try {
            // EsperEPL2Grammar.g:701:2: (name= IDENT type= IDENT -> ^( CREATE_WINDOW_COL_TYPE $name $type) )
            // EsperEPL2Grammar.g:701:7: name= IDENT type= IDENT
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement3078); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            type=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowColumnListElement3082); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(type);



            // AST REWRITE
            // elements: type, name
            // token labels: name, type
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_type=new RewriteRuleTokenStream(adaptor,"token type",type);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 702:3: -> ^( CREATE_WINDOW_COL_TYPE $name $type)
            {
                // EsperEPL2Grammar.g:702:6: ^( CREATE_WINDOW_COL_TYPE $name $type)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_COL_TYPE, "CREATE_WINDOW_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_type.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:705:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA157=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement156 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement158 = null;


        CommonTree COMMA157_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:708:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:708:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3120);
            createSelectionListElement156=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement156.getTree());
            // EsperEPL2Grammar.g:708:31: ( COMMA createSelectionListElement )*
            loop58:
            do {
                int alt58=2;
                int LA58_0 = input.LA(1);

                if ( (LA58_0==COMMA) ) {
                    alt58=1;
                }


                switch (alt58) {
            	case 1 :
            	    // EsperEPL2Grammar.g:708:32: COMMA createSelectionListElement
            	    {
            	    COMMA157=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3123); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA157);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3125);
            	    createSelectionListElement158=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement158.getTree());

            	    }
            	    break;

            	default :
            	    break loop58;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 709:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:709:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:712:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS160=null;
        Token AS162=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty159 = null;

        EsperEPL2GrammarParser.constant_return constant161 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS160_tree=null;
        CommonTree AS162_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:713:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt60=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt60=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt60=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt60=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 60, 0, input);

                throw nvae;
            }

            switch (alt60) {
                case 1 :
                    // EsperEPL2Grammar.g:713:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3154); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 714:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:715:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3166);
                    eventProperty159=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty159.getTree());
                    // EsperEPL2Grammar.g:715:18: ( AS i= IDENT )?
                    int alt59=2;
                    int LA59_0 = input.LA(1);

                    if ( (LA59_0==AS) ) {
                        alt59=1;
                    }
                    switch (alt59) {
                        case 1 :
                            // EsperEPL2Grammar.g:715:19: AS i= IDENT
                            {
                            AS160=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3169); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS160);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3173); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: eventProperty, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 716:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:716:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:716:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:717:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3194);
                    constant161=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant161.getTree());
                    AS162=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3196); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS162);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 718:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:718:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:718:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:721:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO163=null;
        EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList164 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO163_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_insertIntoColumnList=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoColumnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:724:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )? -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? ) )
            // EsperEPL2Grammar.g:724:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( insertIntoColumnList )?
            {
            // EsperEPL2Grammar.g:724:4: (s= ISTREAM | s= RSTREAM )?
            int alt61=3;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==ISTREAM) ) {
                alt61=1;
            }
            else if ( (LA61_0==RSTREAM) ) {
                alt61=2;
            }
            switch (alt61) {
                case 1 :
                    // EsperEPL2Grammar.g:724:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3239); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:724:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3245); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO163=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3249); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO163);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3253); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:724:42: ( insertIntoColumnList )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LPAREN) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:724:43: insertIntoColumnList
                    {
                    pushFollow(FOLLOW_insertIntoColumnList_in_insertIntoExpr3256);
                    insertIntoColumnList164=insertIntoColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoColumnList.add(insertIntoColumnList164.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: s, insertIntoColumnList, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 725:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
            {
                // EsperEPL2Grammar.g:725:6: ^( INSERTINTO_EXPR ( $s)? $i ( insertIntoColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:725:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:725:31: ( insertIntoColumnList )?
                if ( stream_insertIntoColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoColumnList.nextTree());

                }
                stream_insertIntoColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class insertIntoColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoColumnList"
    // EsperEPL2Grammar.g:728:1: insertIntoColumnList : LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.insertIntoColumnList_return insertIntoColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoColumnList_return retval = new EsperEPL2GrammarParser.insertIntoColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN165=null;
        Token IDENT166=null;
        Token COMMA167=null;
        Token IDENT168=null;
        Token RPAREN169=null;

        CommonTree LPAREN165_tree=null;
        CommonTree IDENT166_tree=null;
        CommonTree COMMA167_tree=null;
        CommonTree IDENT168_tree=null;
        CommonTree RPAREN169_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");

        try {
            // EsperEPL2Grammar.g:729:2: ( LPAREN IDENT ( COMMA IDENT )* RPAREN -> ^( INSERTINTO_EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:729:5: LPAREN IDENT ( COMMA IDENT )* RPAREN
            {
            LPAREN165=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoColumnList3290); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN165);

            IDENT166=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT166);

            // EsperEPL2Grammar.g:729:18: ( COMMA IDENT )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // EsperEPL2Grammar.g:729:19: COMMA IDENT
            	    {
            	    COMMA167=(Token)match(input,COMMA,FOLLOW_COMMA_in_insertIntoColumnList3295); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA167);

            	    IDENT168=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoColumnList3297); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT168);


            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);

            RPAREN169=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoColumnList3301); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN169);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 730:3: -> ^( INSERTINTO_EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:730:6: ^( INSERTINTO_EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPRCOL, "INSERTINTO_EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:730:27: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoColumnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:733:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression170 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin171 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList172 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:736:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:736:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3336);
            streamExpression170=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression170.getTree());
            // EsperEPL2Grammar.g:736:21: ( regularJoin | outerJoinList )
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==EOF||LA64_0==WHERE||(LA64_0>=GROUP && LA64_0<=HAVING)||LA64_0==OUTPUT||LA64_0==ORDER||LA64_0==ROW_LIMIT_EXPR||LA64_0==MATCH_RECOGNIZE||LA64_0==COMMA) ) {
                alt64=1;
            }
            else if ( ((LA64_0>=INNER && LA64_0<=FULL)) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);

                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    // EsperEPL2Grammar.g:736:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3339);
                    regularJoin171=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin171.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:736:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3343);
                    outerJoinList172=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList172.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:739:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA173=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression174 = null;


        CommonTree COMMA173_tree=null;

        try {
            // EsperEPL2Grammar.g:740:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:740:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:740:4: ( COMMA streamExpression )*
            loop65:
            do {
                int alt65=2;
                int LA65_0 = input.LA(1);

                if ( (LA65_0==COMMA) ) {
                    alt65=1;
                }


                switch (alt65) {
            	case 1 :
            	    // EsperEPL2Grammar.g:740:5: COMMA streamExpression
            	    {
            	    COMMA173=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3357); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3360);
            	    streamExpression174=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression174.getTree());

            	    }
            	    break;

            	default :
            	    break loop65;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:743:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin175 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin176 = null;



        try {
            // EsperEPL2Grammar.g:744:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:744:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3374);
            outerJoin175=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin175.getTree());
            // EsperEPL2Grammar.g:744:14: ( outerJoin )*
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);

                if ( ((LA66_0>=INNER && LA66_0<=FULL)) ) {
                    alt66=1;
                }


                switch (alt66) {
            	case 1 :
            	    // EsperEPL2Grammar.g:744:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3377);
            	    outerJoin176=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin176.getTree());

            	    }
            	    break;

            	default :
            	    break loop66;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:747:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER177=null;
        Token JOIN178=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression179 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent180 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER177_tree=null;
        CommonTree JOIN178_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:750:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:750:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:750:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( ((LA69_0>=JOIN && LA69_0<=FULL)) ) {
                alt69=1;
            }
            else if ( (LA69_0==INNER) ) {
                alt69=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 69, 0, input);

                throw nvae;
            }
            switch (alt69) {
                case 1 :
                    // EsperEPL2Grammar.g:751:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:751:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( ((LA68_0>=LEFT && LA68_0<=FULL)) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // EsperEPL2Grammar.g:751:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:751:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt67=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt67=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt67=2;
                                }
                                break;
                            case FULL:
                                {
                                alt67=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 67, 0, input);

                                throw nvae;
                            }

                            switch (alt67) {
                                case 1 :
                                    // EsperEPL2Grammar.g:751:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3420); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:751:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3424); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:751:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3428); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER177=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3431); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER177);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:752:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:752:14: (i= INNER )
                    // EsperEPL2Grammar.g:752:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN178=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3466); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN178);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3468);
            streamExpression179=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression179.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3470);
            outerJoinIdent180=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent180.getTree());


            // AST REWRITE
            // elements: streamExpression, outerJoinIdent, outerJoinIdent, outerJoinIdent, streamExpression, outerJoinIdent, streamExpression, streamExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 754:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:754:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 755:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:755:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 756:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:756:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 757:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:757:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:760:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON181=null;
        Token AND_EXPR183=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair182 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair184 = null;


        CommonTree ON181_tree=null;
        CommonTree AND_EXPR183_tree=null;

        try {
            // EsperEPL2Grammar.g:761:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:761:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON181=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3535); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3538);
            outerJoinIdentPair182=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair182.getTree());
            // EsperEPL2Grammar.g:761:27: ( AND_EXPR outerJoinIdentPair )*
            loop70:
            do {
                int alt70=2;
                int LA70_0 = input.LA(1);

                if ( (LA70_0==AND_EXPR) ) {
                    alt70=1;
                }


                switch (alt70) {
            	case 1 :
            	    // EsperEPL2Grammar.g:761:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR183=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3541); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3544);
            	    outerJoinIdentPair184=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair184.getTree());

            	    }
            	    break;

            	default :
            	    break loop70;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:764:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS186=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty185 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty187 = null;


        CommonTree EQUALS186_tree=null;

        try {
            // EsperEPL2Grammar.g:765:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:765:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3559);
            eventProperty185=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty185.getTree());
            EQUALS186=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3561); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3564);
            eventProperty187=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty187.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:768:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression188 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:771:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:771:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause3586);
            evalOrExpression188=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression188.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 772:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:772:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:775:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList189 = null;


        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:778:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) )
            // EsperEPL2Grammar.g:778:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList
            {
            // EsperEPL2Grammar.g:778:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt71=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt71=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt71=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt71=3;
                    }
                    break;
            }

            switch (alt71) {
                case 1 :
                    // EsperEPL2Grammar.g:778:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause3622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:778:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause3628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:778:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause3634); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:778:43: (d= DISTINCT )?
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==DISTINCT) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:778:43: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause3640); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause3643);
            selectionList189=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList189.getTree());


            // AST REWRITE
            // elements: d, selectionList, s
            // token labels: d, s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 779:3: -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
            {
                // EsperEPL2Grammar.g:779:6: ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:779:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:779:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:782:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA191=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement190 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement192 = null;


        CommonTree COMMA191_tree=null;

        try {
            // EsperEPL2Grammar.g:783:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:783:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList3674);
            selectionListElement190=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement190.getTree());
            // EsperEPL2Grammar.g:783:25: ( COMMA selectionListElement )*
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( (LA73_0==COMMA) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    // EsperEPL2Grammar.g:783:26: COMMA selectionListElement
            	    {
            	    COMMA191=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList3677); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList3680);
            	    selectionListElement192=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement192.getTree());

            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:786:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS195=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector193 = null;

        EsperEPL2GrammarParser.expression_return expression194 = null;


        CommonTree s_tree=null;
        CommonTree AS195_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:788:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt75=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt75=1;
                }
                break;
            case IDENT:
                {
                int LA75_2 = input.LA(2);

                if ( (LA75_2==DOT) ) {
                    int LA75_61 = input.LA(3);

                    if ( (LA75_61==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt75=2;
                    }
                    else if ( (LA75_61==WINDOW||LA75_61==ESCAPE||LA75_61==EVERY_EXPR||(LA75_61>=SUM && LA75_61<=COUNT)||LA75_61==OUTER||(LA75_61>=JOIN && LA75_61<=FULL)||(LA75_61>=EVENTS && LA75_61<=LAST)||(LA75_61>=UNIDIRECTIONAL && LA75_61<=PRIOR)||(LA75_61>=WEEKDAY && LA75_61<=CAST)||LA75_61==SNAPSHOT||(LA75_61>=VARIABLE && LA75_61<=AT)||(LA75_61>=DEFINE && LA75_61<=MATCHES)||LA75_61==IDENT||LA75_61==TICKED_STRING_LITERAL) ) {
                        alt75=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 75, 61, input);

                        throw nvae;
                    }
                }
                else if ( (LA75_2==EOF||(LA75_2>=IN_SET && LA75_2<=REGEXP)||(LA75_2>=OR_EXPR && LA75_2<=NOT_EXPR)||(LA75_2>=WHERE && LA75_2<=AS)||LA75_2==FROM||LA75_2==IS||(LA75_2>=GROUP && LA75_2<=HAVING)||LA75_2==OUTPUT||LA75_2==INSERT||LA75_2==ORDER||LA75_2==ROW_LIMIT_EXPR||LA75_2==COMMA||LA75_2==EQUALS||LA75_2==LPAREN||(LA75_2>=STAR && LA75_2<=LBRACK)||(LA75_2>=BAND && LA75_2<=MOD)||LA75_2==ESCAPECHAR) ) {
                    alt75=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 75, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt75=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 75, 0, input);

                throw nvae;
            }

            switch (alt75) {
                case 1 :
                    // EsperEPL2Grammar.g:788:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement3706); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 788:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:789:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement3722);
                    streamSelector193=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector193.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:790:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement3727);
                    expression194=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression194.getTree());
                    // EsperEPL2Grammar.g:790:15: ( AS i= keywordAllowedIdent )?
                    int alt74=2;
                    int LA74_0 = input.LA(1);

                    if ( (LA74_0==AS) ) {
                        alt74=1;
                    }
                    switch (alt74) {
                        case 1 :
                            // EsperEPL2Grammar.g:790:16: AS i= keywordAllowedIdent
                            {
                            AS195=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement3730); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS195);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement3734);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 791:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:791:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 792:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:792:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 793:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:793:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:796:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT196=null;
        Token STAR197=null;
        Token AS198=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT196_tree=null;
        CommonTree STAR197_tree=null;
        CommonTree AS198_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:797:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:797:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT196=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector3792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT196);

            STAR197=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector3794); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR197);

            // EsperEPL2Grammar.g:797:21: ( AS i= IDENT )?
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==AS) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    // EsperEPL2Grammar.g:797:22: AS i= IDENT
                    {
                    AS198=(Token)match(input,AS,FOLLOW_AS_in_streamSelector3797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS198);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector3801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 798:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:798:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:798:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:802:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT203=null;
        Token DOT205=null;
        Token AS207=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression199 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression200 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression201 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression202 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression204 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression206 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT203_tree=null;
        CommonTree DOT205_tree=null;
        CommonTree AS207_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:803:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:803:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:803:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt77=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA77_1 = input.LA(2);

                if ( (LA77_1==EOF||(LA77_1>=WHERE && LA77_1<=AS)||(LA77_1>=INNER && LA77_1<=ON)||(LA77_1>=GROUP && LA77_1<=HAVING)||LA77_1==OUTPUT||LA77_1==ORDER||(LA77_1>=UNIDIRECTIONAL && LA77_1<=RETAININTERSECTION)||LA77_1==ROW_LIMIT_EXPR||LA77_1==MATCH_RECOGNIZE||(LA77_1>=COMMA && LA77_1<=LPAREN)||LA77_1==LBRACK) ) {
                    alt77=1;
                }
                else if ( (LA77_1==COLON) ) {
                    alt77=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 77, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt77=1;
                }
                break;
            case PATTERN:
                {
                alt77=2;
                }
                break;
            case SQL:
                {
                alt77=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 77, 0, input);

                throw nvae;
            }

            switch (alt77) {
                case 1 :
                    // EsperEPL2Grammar.g:803:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression3832);
                    eventFilterExpression199=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression199.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:803:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression3836);
                    patternInclusionExpression200=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression200.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:803:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression3840);
                    databaseJoinExpression201=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression201.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:803:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression3844);
                    methodJoinExpression202=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression202.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:804:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt79=2;
            int LA79_0 = input.LA(1);

            if ( (LA79_0==DOT) ) {
                alt79=1;
            }
            switch (alt79) {
                case 1 :
                    // EsperEPL2Grammar.g:804:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT203=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT203);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression3853);
                    viewExpression204=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression204.getTree());
                    // EsperEPL2Grammar.g:804:23: ( DOT viewExpression )*
                    loop78:
                    do {
                        int alt78=2;
                        int LA78_0 = input.LA(1);

                        if ( (LA78_0==DOT) ) {
                            alt78=1;
                        }


                        switch (alt78) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:804:24: DOT viewExpression
                    	    {
                    	    DOT205=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression3856); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT205);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression3858);
                    	    viewExpression206=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression206.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop78;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:804:47: ( AS i= IDENT | i= IDENT )?
            int alt80=3;
            int LA80_0 = input.LA(1);

            if ( (LA80_0==AS) ) {
                alt80=1;
            }
            else if ( (LA80_0==IDENT) ) {
                alt80=2;
            }
            switch (alt80) {
                case 1 :
                    // EsperEPL2Grammar.g:804:48: AS i= IDENT
                    {
                    AS207=(Token)match(input,AS,FOLLOW_AS_in_streamExpression3865); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS207);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3869); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:804:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression3875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:804:71: (u= UNIDIRECTIONAL )?
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( (LA81_0==UNIDIRECTIONAL) ) {
                alt81=1;
            }
            switch (alt81) {
                case 1 :
                    // EsperEPL2Grammar.g:804:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression3882); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:804:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt82=3;
            int LA82_0 = input.LA(1);

            if ( (LA82_0==RETAINUNION) ) {
                alt82=1;
            }
            else if ( (LA82_0==RETAININTERSECTION) ) {
                alt82=2;
            }
            switch (alt82) {
                case 1 :
                    // EsperEPL2Grammar.g:804:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression3889); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:804:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression3893); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, u, ri, ru, databaseJoinExpression, viewExpression, methodJoinExpression, i, patternInclusionExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 805:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:805:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:805:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:805:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:805:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:805:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:806:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:806:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:806:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:806:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:806:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:817:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE208=null;
        Token LPAREN209=null;
        Token RPAREN217=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy210 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures211 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection212 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip213 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern214 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval215 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine216 = null;


        CommonTree MATCH_RECOGNIZE208_tree=null;
        CommonTree LPAREN209_tree=null;
        CommonTree RPAREN217_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:818:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:818:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE208=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog3956); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE208);

            LPAREN209=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog3970); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN209);

            // EsperEPL2Grammar.g:820:4: ( matchRecogPartitionBy )?
            int alt83=2;
            int LA83_0 = input.LA(1);

            if ( (LA83_0==PARTITION) ) {
                alt83=1;
            }
            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:820:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog3976);
                    matchRecogPartitionBy210=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy210.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog3983);
            matchRecogMeasures211=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures211.getTree());
            // EsperEPL2Grammar.g:822:4: ( matchRecogMatchesSelection )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==ALL) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // EsperEPL2Grammar.g:822:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog3988);
                    matchRecogMatchesSelection212=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection212.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:823:4: ( matchRecogMatchesAfterSkip )?
            int alt85=2;
            int LA85_0 = input.LA(1);

            if ( (LA85_0==AFTER) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    // EsperEPL2Grammar.g:823:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog3994);
                    matchRecogMatchesAfterSkip213=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip213.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4000);
            matchRecogPattern214=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern214.getTree());
            // EsperEPL2Grammar.g:825:4: ( matchRecogMatchesInterval )?
            int alt86=2;
            int LA86_0 = input.LA(1);

            if ( (LA86_0==IDENT) ) {
                alt86=1;
            }
            switch (alt86) {
                case 1 :
                    // EsperEPL2Grammar.g:825:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4006);
                    matchRecogMatchesInterval215=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval215.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4012);
            matchRecogDefine216=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine216.getTree());
            RPAREN217=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4019); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN217);



            // AST REWRITE
            // elements: matchRecogMatchesAfterSkip, matchRecogPartitionBy, matchRecogMatchesInterval, matchRecogMatchesSelection, matchRecogPattern, matchRecogMeasures, MATCH_RECOGNIZE, matchRecogDefine
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 828:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:828:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:828:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:828:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:828:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:828:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:831:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION218=null;
        Token BY219=null;
        Token COMMA221=null;
        EsperEPL2GrammarParser.expression_return expression220 = null;

        EsperEPL2GrammarParser.expression_return expression222 = null;


        CommonTree PARTITION218_tree=null;
        CommonTree BY219_tree=null;
        CommonTree COMMA221_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:832:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:832:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION218=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4056); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION218);

            BY219=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4058); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY219);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4060);
            expression220=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression220.getTree());
            // EsperEPL2Grammar.g:832:28: ( COMMA expression )*
            loop87:
            do {
                int alt87=2;
                int LA87_0 = input.LA(1);

                if ( (LA87_0==COMMA) ) {
                    alt87=1;
                }


                switch (alt87) {
            	case 1 :
            	    // EsperEPL2Grammar.g:832:29: COMMA expression
            	    {
            	    COMMA221=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4063); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA221);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4065);
            	    expression222=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression222.getTree());

            	    }
            	    break;

            	default :
            	    break loop87;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 833:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:833:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:836:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES223=null;
        Token COMMA225=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem224 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem226 = null;


        CommonTree MEASURES223_tree=null;
        CommonTree COMMA225_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:837:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:837:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES223=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES223);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4096);
            matchRecogMeasureItem224=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem224.getTree());
            // EsperEPL2Grammar.g:837:35: ( COMMA matchRecogMeasureItem )*
            loop88:
            do {
                int alt88=2;
                int LA88_0 = input.LA(1);

                if ( (LA88_0==COMMA) ) {
                    alt88=1;
                }


                switch (alt88) {
            	case 1 :
            	    // EsperEPL2Grammar.g:837:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA225=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4099); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA225);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4101);
            	    matchRecogMeasureItem226=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem226.getTree());

            	    }
            	    break;

            	default :
            	    break loop88;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 838:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:838:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:838:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:841:1: matchRecogMeasureItem : expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS228=null;
        EsperEPL2GrammarParser.expression_return expression227 = null;


        CommonTree i_tree=null;
        CommonTree AS228_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:842:2: ( expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) )
            // EsperEPL2Grammar.g:842:4: expression ( AS (i= IDENT )? )?
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4126);
            expression227=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression227.getTree());
            // EsperEPL2Grammar.g:842:15: ( AS (i= IDENT )? )?
            int alt90=2;
            int LA90_0 = input.LA(1);

            if ( (LA90_0==AS) ) {
                alt90=1;
            }
            switch (alt90) {
                case 1 :
                    // EsperEPL2Grammar.g:842:16: AS (i= IDENT )?
                    {
                    AS228=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS228);

                    // EsperEPL2Grammar.g:842:19: (i= IDENT )?
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( (LA89_0==IDENT) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            // EsperEPL2Grammar.g:842:20: i= IDENT
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4134); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 843:3: -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
            {
                // EsperEPL2Grammar.g:843:6: ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:843:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:846:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL229=null;
        Token MATCHES230=null;

        CommonTree ALL229_tree=null;
        CommonTree MATCHES230_tree=null;

        try {
            // EsperEPL2Grammar.g:847:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:847:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL229=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL229_tree = (CommonTree)adaptor.create(ALL229);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL229_tree, root_0);
            }
            MATCHES230=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4168); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:850:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN231=null;
        Token LPAREN232=null;
        Token RPAREN234=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration233 = null;


        CommonTree PATTERN231_tree=null;
        CommonTree LPAREN232_tree=null;
        CommonTree RPAREN234_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:851:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:851:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN231=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN231);

            LPAREN232=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN232);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4187);
            matchRecogPatternAlteration233=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration233.getTree());
            RPAREN234=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN234);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 852:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:852:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:855:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER235=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER235_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:856:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:856:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER235=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4211); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER235);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4215);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4219);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4223);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4227);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4231);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i1, i2, i3, i4, i5
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"token i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"token i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"token i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"token i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"token i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 857:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:857:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:860:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod236 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:861:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:861:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4267); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4269);
            timePeriod236=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod236.getTree());


            // AST REWRITE
            // elements: i, timePeriod
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 862:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:862:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:865:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat237 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat238 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:866:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:866:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4295);
            matchRecogPatternConcat237=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat237.getTree());
            // EsperEPL2Grammar.g:866:28: (o= BOR matchRecogPatternConcat )*
            loop91:
            do {
                int alt91=2;
                int LA91_0 = input.LA(1);

                if ( (LA91_0==BOR) ) {
                    alt91=1;
                }


                switch (alt91) {
            	case 1 :
            	    // EsperEPL2Grammar.g:866:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4300); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4302);
            	    matchRecogPatternConcat238=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat238.getTree());

            	    }
            	    break;

            	default :
            	    break loop91;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 867:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:867:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 868:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:871:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary239 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:872:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:872:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:872:4: ( matchRecogPatternUnary )+
            int cnt92=0;
            loop92:
            do {
                int alt92=2;
                int LA92_0 = input.LA(1);

                if ( (LA92_0==IDENT||LA92_0==LPAREN) ) {
                    alt92=1;
                }


                switch (alt92) {
            	case 1 :
            	    // EsperEPL2Grammar.g:872:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4335);
            	    matchRecogPatternUnary239=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary239.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt92 >= 1 ) break loop92;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(92, input);
                        throw eee;
                }
                cnt92++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 873:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:873:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:876:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested240 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom241 = null;



        try {
            // EsperEPL2Grammar.g:877:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==LPAREN) ) {
                alt93=1;
            }
            else if ( (LA93_0==IDENT) ) {
                alt93=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 93, 0, input);

                throw nvae;
            }
            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:877:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4360);
                    matchRecogPatternNested240=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested240.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:878:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4366);
                    matchRecogPatternAtom241=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom241.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:881:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN242=null;
        Token RPAREN244=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration243 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN242_tree=null;
        CommonTree RPAREN244_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:882:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:882:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN242=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4378); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN242);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4380);
            matchRecogPatternAlteration243=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration243.getTree());
            RPAREN244=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4382); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN244);

            // EsperEPL2Grammar.g:882:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt94=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt94=1;
                    }
                    break;
                case PLUS:
                    {
                    alt94=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt94=3;
                    }
                    break;
            }

            switch (alt94) {
                case 1 :
                    // EsperEPL2Grammar.g:882:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:882:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4393); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:882:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, matchRecogPatternAlteration, p, q
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 883:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:883:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:883:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:883:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:883:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:886:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:887:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:887:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4438); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:887:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==STAR||(LA97_0>=PLUS && LA97_0<=QUESTION)) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // EsperEPL2Grammar.g:887:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:887:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt95=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt95=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt95=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt95=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 95, 0, input);

                        throw nvae;
                    }

                    switch (alt95) {
                        case 1 :
                            // EsperEPL2Grammar.g:887:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4444); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:887:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4450); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:887:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4456); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:887:44: (reluctant= QUESTION )?
                    int alt96=2;
                    int LA96_0 = input.LA(1);

                    if ( (LA96_0==QUESTION) ) {
                        alt96=1;
                    }
                    switch (alt96) {
                        case 1 :
                            // EsperEPL2Grammar.g:887:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4462); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i, p, reluctant, q
            // token labels: reluctant, s, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 888:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:888:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:888:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:888:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:888:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:888:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:891:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE245=null;
        Token COMMA247=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem246 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem248 = null;


        CommonTree DEFINE245_tree=null;
        CommonTree COMMA247_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:892:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:892:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE245=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4506); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE245);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4508);
            matchRecogDefineItem246=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem246.getTree());
            // EsperEPL2Grammar.g:892:32: ( COMMA matchRecogDefineItem )*
            loop98:
            do {
                int alt98=2;
                int LA98_0 = input.LA(1);

                if ( (LA98_0==COMMA) ) {
                    alt98=1;
                }


                switch (alt98) {
            	case 1 :
            	    // EsperEPL2Grammar.g:892:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA247=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine4511); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA247);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4513);
            	    matchRecogDefineItem248=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem248.getTree());

            	    }
            	    break;

            	default :
            	    break loop98;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 893:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:893:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:896:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS249=null;
        EsperEPL2GrammarParser.expression_return expression250 = null;


        CommonTree i_tree=null;
        CommonTree AS249_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:897:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:897:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem4540); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS249=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem4542); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS249);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem4544);
            expression250=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression250.getTree());


            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 898:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:898:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:901:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN251=null;
        Token LBRACK252=null;
        Token RBRACK254=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression253 = null;


        CommonTree PATTERN251_tree=null;
        CommonTree LBRACK252_tree=null;
        CommonTree RBRACK254_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:902:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:902:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN251=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression4569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN251);

            LBRACK252=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression4571); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK252);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression4573);
            patternExpression253=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression253.getTree());
            RBRACK254=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression4575); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK254);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 903:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:903:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:906:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL255=null;
        Token COLON256=null;
        Token LBRACK257=null;
        Token METADATASQL258=null;
        Token RBRACK259=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL255_tree=null;
        CommonTree COLON256_tree=null;
        CommonTree LBRACK257_tree=null;
        CommonTree METADATASQL258_tree=null;
        CommonTree RBRACK259_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:909:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:909:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL255=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression4608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL255);

            COLON256=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression4610); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON256);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression4614); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK257=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression4616); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK257);

            // EsperEPL2Grammar.g:909:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==STRING_LITERAL) ) {
                alt99=1;
            }
            else if ( (LA99_0==QUOTED_STRING_LITERAL) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);

                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    // EsperEPL2Grammar.g:909:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4621); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:909:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4627); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:909:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt101=2;
            int LA101_0 = input.LA(1);

            if ( (LA101_0==METADATASQL) ) {
                alt101=1;
            }
            switch (alt101) {
                case 1 :
                    // EsperEPL2Grammar.g:909:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL258=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression4631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL258);

                    // EsperEPL2Grammar.g:909:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==STRING_LITERAL) ) {
                        alt100=1;
                    }
                    else if ( (LA100_0==QUOTED_STRING_LITERAL) ) {
                        alt100=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 100, 0, input);

                        throw nvae;
                    }
                    switch (alt100) {
                        case 1 :
                            // EsperEPL2Grammar.g:909:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression4636); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:909:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4642); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK259=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression4647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK259);



            // AST REWRITE
            // elements: s, i, s2
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 910:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:910:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:910:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:913:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON260=null;
        Token LPAREN262=null;
        Token RPAREN264=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier261 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList263 = null;


        CommonTree i_tree=null;
        CommonTree COLON260_tree=null;
        CommonTree LPAREN262_tree=null;
        CommonTree RPAREN264_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:916:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:916:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression4698); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON260=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression4700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON260);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression4702);
            classIdentifier261=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier261.getTree());
            // EsperEPL2Grammar.g:916:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt103=2;
            int LA103_0 = input.LA(1);

            if ( (LA103_0==LPAREN) ) {
                alt103=1;
            }
            switch (alt103) {
                case 1 :
                    // EsperEPL2Grammar.g:916:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN262=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression4705); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN262);

                    // EsperEPL2Grammar.g:916:49: ( expressionList )?
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( (LA102_0==WINDOW||LA102_0==ESCAPE||(LA102_0>=NOT_EXPR && LA102_0<=EVERY_EXPR)||(LA102_0>=SUM && LA102_0<=COUNT)||LA102_0==CASE||LA102_0==OUTER||(LA102_0>=JOIN && LA102_0<=FULL)||(LA102_0>=EVENTS && LA102_0<=LAST)||(LA102_0>=UNIDIRECTIONAL && LA102_0<=CURRENT_TIMESTAMP)||LA102_0==SNAPSHOT||(LA102_0>=VARIABLE && LA102_0<=AT)||(LA102_0>=BOOLEAN_TRUE && LA102_0<=VALUE_NULL)||(LA102_0>=DEFINE && LA102_0<=MATCHES)||LA102_0==NUM_DOUBLE||LA102_0==IDENT||LA102_0==LPAREN||(LA102_0>=PLUS && LA102_0<=QUESTION)||(LA102_0>=STRING_LITERAL && LA102_0<=QUOTED_STRING_LITERAL)||LA102_0==MINUS||LA102_0==LCURLY||LA102_0==NUM_INT||(LA102_0>=TICKED_STRING_LITERAL && LA102_0<=NUM_FLOAT)) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            // EsperEPL2Grammar.g:916:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression4707);
                            expressionList263=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList263.getTree());

                            }
                            break;

                    }

                    RPAREN264=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression4710); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN264);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, i, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 917:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:917:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:917:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:920:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON265=null;
        Token LPAREN266=null;
        Token RPAREN268=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList267 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON265_tree=null;
        CommonTree LPAREN266_tree=null;
        CommonTree RPAREN268_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:923:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:923:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4763); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON265=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression4765); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON265);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression4769); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN266=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression4771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN266);

            // EsperEPL2Grammar.g:923:35: ( expressionWithTimeList )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==WINDOW||LA104_0==ESCAPE||(LA104_0>=NOT_EXPR && LA104_0<=EVERY_EXPR)||(LA104_0>=SUM && LA104_0<=COUNT)||LA104_0==CASE||LA104_0==OUTER||(LA104_0>=JOIN && LA104_0<=FULL)||(LA104_0>=EVENTS && LA104_0<=LAST)||(LA104_0>=UNIDIRECTIONAL && LA104_0<=CURRENT_TIMESTAMP)||LA104_0==SNAPSHOT||(LA104_0>=VARIABLE && LA104_0<=AT)||(LA104_0>=BOOLEAN_TRUE && LA104_0<=VALUE_NULL)||(LA104_0>=DEFINE && LA104_0<=MATCHES)||LA104_0==NUM_DOUBLE||LA104_0==IDENT||LA104_0==LPAREN||LA104_0==STAR||(LA104_0>=PLUS && LA104_0<=LBRACK)||(LA104_0>=STRING_LITERAL && LA104_0<=QUOTED_STRING_LITERAL)||LA104_0==MINUS||LA104_0==LCURLY||LA104_0==NUM_INT||(LA104_0>=TICKED_STRING_LITERAL && LA104_0<=NUM_FLOAT)) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:923:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression4773);
                    expressionWithTimeList267=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList267.getTree());

                    }
                    break;

            }

            RPAREN268=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression4776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN268);



            // AST REWRITE
            // elements: nm, expressionWithTimeList, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 924:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:924:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:924:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:927:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA270=null;
        EsperEPL2GrammarParser.expression_return expression269 = null;

        EsperEPL2GrammarParser.expression_return expression271 = null;


        CommonTree COMMA270_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:930:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:930:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr4815);
            expression269=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression269.getTree());
            // EsperEPL2Grammar.g:930:15: ( COMMA expression )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==COMMA) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // EsperEPL2Grammar.g:930:16: COMMA expression
            	    {
            	    COMMA270=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr4818); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA270);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr4820);
            	    expression271=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression271.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 931:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:931:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:934:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA273=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement272 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement274 = null;


        CommonTree COMMA273_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:937:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:937:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4855);
            orderByListElement272=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement272.getTree());
            // EsperEPL2Grammar.g:937:23: ( COMMA orderByListElement )*
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==COMMA) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // EsperEPL2Grammar.g:937:24: COMMA orderByListElement
            	    {
            	    COMMA273=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr4858); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA273);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr4860);
            	    orderByListElement274=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement274.getTree());

            	    }
            	    break;

            	default :
            	    break loop106;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 938:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:938:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:941:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression275 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:942:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:942:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement4885);
            expression275=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression275.getTree());
            // EsperEPL2Grammar.g:942:15: (d= ASC | d= DESC )?
            int alt107=3;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==ASC) ) {
                alt107=1;
            }
            else if ( (LA107_0==DESC) ) {
                alt107=2;
            }
            switch (alt107) {
                case 1 :
                    // EsperEPL2Grammar.g:942:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement4890); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:942:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement4894); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 943:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:943:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:943:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:946:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression276 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:949:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:949:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause4932);
            evalOrExpression276=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression276.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 950:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:950:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:953:1: outputLimit : ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN282=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter277 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod278 = null;

        EsperEPL2GrammarParser.number_return number279 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet280 = null;

        EsperEPL2GrammarParser.expression_return expression281 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr283 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN282_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:956:2: ( ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) )
            // EsperEPL2Grammar.g:956:9: ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            {
            // EsperEPL2Grammar.g:956:9: ( outputLimitAfter )?
            int alt108=2;
            int LA108_0 = input.LA(1);

            if ( (LA108_0==AFTER) ) {
                alt108=1;
            }
            switch (alt108) {
                case 1 :
                    // EsperEPL2Grammar.g:956:9: outputLimitAfter
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit4970);
                    outputLimitAfter277=outputLimitAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter277.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:957:10: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt109=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt109=1;
                    }
                    break;
                case FIRST:
                    {
                    alt109=2;
                    }
                    break;
                case LAST:
                    {
                    alt109=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt109=4;
                    }
                    break;
            }

            switch (alt109) {
                case 1 :
                    // EsperEPL2Grammar.g:957:11: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit4985); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:957:17: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit4989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:957:25: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit4993); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:957:32: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit4997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:958:10: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            int alt113=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt113=1;
                }
                break;
            case AT:
                {
                alt113=2;
                }
                break;
            case WHEN:
                {
                alt113=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
                {
                alt113=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }

            switch (alt113) {
                case 1 :
                    // EsperEPL2Grammar.g:959:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:959:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:959:14: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:960:7: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt111=2;
                    int LA111_0 = input.LA(1);

                    if ( (LA111_0==NUM_INT) ) {
                        int LA111_1 = input.LA(2);

                        if ( (LA111_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==EVENTS) ) {
                            alt111=2;
                        }
                        else if ( (LA111_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA111_0==NUM_LONG) ) {
                        int LA111_2 = input.LA(2);

                        if ( (LA111_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==EVENTS) ) {
                            alt111=2;
                        }
                        else if ( (LA111_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA111_0==NUM_FLOAT) ) {
                        int LA111_3 = input.LA(2);

                        if ( (LA111_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==EVENTS) ) {
                            alt111=2;
                        }
                        else if ( (LA111_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA111_0==NUM_DOUBLE) ) {
                        int LA111_4 = input.LA(2);

                        if ( (LA111_4==EVENTS) ) {
                            alt111=2;
                        }
                        else if ( (LA111_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA111_0==IDENT) ) {
                        int LA111_5 = input.LA(2);

                        if ( (LA111_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==EVENTS) ) {
                            alt111=2;
                        }
                        else if ( (LA111_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else if ( (LA111_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt111=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 111, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA111_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt111=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 111, 0, input);

                        throw nvae;
                    }
                    switch (alt111) {
                        case 1 :
                            // EsperEPL2Grammar.g:961:9: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5054);
                            timePeriod278=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod278.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:962:9: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:962:9: ( number | i= IDENT )
                            int alt110=2;
                            int LA110_0 = input.LA(1);

                            if ( (LA110_0==NUM_DOUBLE||LA110_0==NUM_INT||(LA110_0>=NUM_LONG && LA110_0<=NUM_FLOAT)) ) {
                                alt110=1;
                            }
                            else if ( (LA110_0==IDENT) ) {
                                alt110=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 110, 0, input);

                                throw nvae;
                            }
                            switch (alt110) {
                                case 1 :
                                    // EsperEPL2Grammar.g:962:10: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5065);
                                    number279=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number279.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:962:19: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5071); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:962:28: (e= EVENTS )
                            // EsperEPL2Grammar.g:962:29: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5077); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:966:5: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:966:5: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:966:7: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5108); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5110);
                    crontabLimitParameterSet280=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet280.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:968:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:968:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:968:7: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5127); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit5129);
                    expression281=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression281.getTree());
                    // EsperEPL2Grammar.g:968:26: ( THEN onSetExpr )?
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( (LA112_0==THEN) ) {
                        alt112=1;
                    }
                    switch (alt112) {
                        case 1 :
                            // EsperEPL2Grammar.g:968:27: THEN onSetExpr
                            {
                            THEN282=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5132); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN282);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5134);
                            onSetExpr283=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr283.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:970:10: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: i, outputLimitAfter, outputLimitAfter, k, k, expression, onSetExpr, number, outputLimitAfter, crontabLimitParameterSet, k, timePeriod, outputLimitAfter, k, outputLimitAfter
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 971:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:971:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:971:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:971:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:971:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:971:73: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 972:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
            if (ev != null) {
                // EsperEPL2Grammar.g:972:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:972:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                // EsperEPL2Grammar.g:972:63: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 973:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
            if (at != null) {
                // EsperEPL2Grammar.g:973:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:973:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                // EsperEPL2Grammar.g:973:74: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 974:6: -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
            if (wh != null) {
                // EsperEPL2Grammar.g:974:24: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:974:42: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:974:57: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:974:68: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 975:6: -> ^( AFTER_LIMIT_EXPR outputLimitAfter )
            {
                // EsperEPL2Grammar.g:975:9: ^( AFTER_LIMIT_EXPR outputLimitAfter )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimitAfter"
    // EsperEPL2Grammar.g:978:1: outputLimitAfter : a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) ;
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token EVENTS286=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod284 = null;

        EsperEPL2GrammarParser.number_return number285 = null;


        CommonTree a_tree=null;
        CommonTree EVENTS286_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:979:2: (a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) )
            // EsperEPL2Grammar.g:979:6: a= AFTER ( timePeriod | number EVENTS )
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter5284); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);

            // EsperEPL2Grammar.g:979:14: ( timePeriod | number EVENTS )
            int alt114=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA114_1 = input.LA(2);

                if ( (LA114_1==MIN||(LA114_1>=TIMEPERIOD_DAY && LA114_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt114=1;
                }
                else if ( (LA114_1==EVENTS) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA114_2 = input.LA(2);

                if ( (LA114_2==MIN||(LA114_2>=TIMEPERIOD_DAY && LA114_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt114=1;
                }
                else if ( (LA114_2==EVENTS) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA114_3 = input.LA(2);

                if ( (LA114_3==MIN||(LA114_3>=TIMEPERIOD_DAY && LA114_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt114=1;
                }
                else if ( (LA114_3==EVENTS) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA114_4 = input.LA(2);

                if ( (LA114_4==MIN||(LA114_4>=TIMEPERIOD_DAY && LA114_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt114=1;
                }
                else if ( (LA114_4==EVENTS) ) {
                    alt114=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 114, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt114=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }

            switch (alt114) {
                case 1 :
                    // EsperEPL2Grammar.g:979:15: timePeriod
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter5287);
                    timePeriod284=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod284.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:979:28: number EVENTS
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter5291);
                    number285=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number285.getTree());
                    EVENTS286=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter5293); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS286);


                    }
                    break;

            }



            // AST REWRITE
            // elements: timePeriod, number, AFTER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 980:6: -> ^( AFTER ( timePeriod )? ( number )? )
            {
                // EsperEPL2Grammar.g:980:9: ^( AFTER ( timePeriod )? ( number )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);

                // EsperEPL2Grammar.g:980:17: ( timePeriod )?
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());

                }
                stream_timePeriod.reset();
                // EsperEPL2Grammar.g:980:29: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimitAfter"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:983:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:986:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:986:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:986:6: (n1= numberconstant | i1= IDENT )
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==NUM_DOUBLE||LA115_0==PLUS||LA115_0==MINUS||LA115_0==NUM_INT||(LA115_0>=NUM_LONG && LA115_0<=NUM_FLOAT)) ) {
                alt115=1;
            }
            else if ( (LA115_0==IDENT) ) {
                alt115=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 115, 0, input);

                throw nvae;
            }
            switch (alt115) {
                case 1 :
                    // EsperEPL2Grammar.g:986:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5339);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:986:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:986:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==OFFSET||LA118_0==COMMA) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // EsperEPL2Grammar.g:986:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:986:38: (c= COMMA | o= OFFSET )
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==COMMA) ) {
                        alt116=1;
                    }
                    else if ( (LA116_0==OFFSET) ) {
                        alt116=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 116, 0, input);

                        throw nvae;
                    }
                    switch (alt116) {
                        case 1 :
                            // EsperEPL2Grammar.g:986:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5352); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:986:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5358); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:986:59: (n2= numberconstant | i2= IDENT )
                    int alt117=2;
                    int LA117_0 = input.LA(1);

                    if ( (LA117_0==NUM_DOUBLE||LA117_0==PLUS||LA117_0==MINUS||LA117_0==NUM_INT||(LA117_0>=NUM_LONG && LA117_0<=NUM_FLOAT)) ) {
                        alt117=1;
                    }
                    else if ( (LA117_0==IDENT) ) {
                        alt117=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 117, 0, input);

                        throw nvae;
                    }
                    switch (alt117) {
                        case 1 :
                            // EsperEPL2Grammar.g:986:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5364);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:986:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5370); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: n1, c, i1, n2, i2, o
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 987:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:987:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:987:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:987:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:987:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:987:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:987:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:987:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:990:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN287=null;
        Token COMMA289=null;
        Token COMMA291=null;
        Token COMMA293=null;
        Token COMMA295=null;
        Token COMMA297=null;
        Token RPAREN299=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime288 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime290 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime292 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime294 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime296 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime298 = null;


        CommonTree LPAREN287_tree=null;
        CommonTree COMMA289_tree=null;
        CommonTree COMMA291_tree=null;
        CommonTree COMMA293_tree=null;
        CommonTree COMMA295_tree=null;
        CommonTree COMMA297_tree=null;
        CommonTree RPAREN299_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:991:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:991:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN287=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5422); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN287);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5424);
            expressionWithTime288=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime288.getTree());
            COMMA289=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5426); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA289);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5428);
            expressionWithTime290=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime290.getTree());
            COMMA291=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA291);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5432);
            expressionWithTime292=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime292.getTree());
            COMMA293=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA293);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5436);
            expressionWithTime294=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime294.getTree());
            COMMA295=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5438); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA295);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5440);
            expressionWithTime296=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime296.getTree());
            // EsperEPL2Grammar.g:991:130: ( COMMA expressionWithTime )?
            int alt119=2;
            int LA119_0 = input.LA(1);

            if ( (LA119_0==COMMA) ) {
                alt119=1;
            }
            switch (alt119) {
                case 1 :
                    // EsperEPL2Grammar.g:991:131: COMMA expressionWithTime
                    {
                    COMMA297=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA297);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5445);
                    expressionWithTime298=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime298.getTree());

                    }
                    break;

            }

            RPAREN299=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN299);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 992:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:992:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:992:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:995:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN300=null;
        Token THEN302=null;
        EsperEPL2GrammarParser.expression_return expression301 = null;

        EsperEPL2GrammarParser.expression_return expression303 = null;


        CommonTree WHEN300_tree=null;
        CommonTree THEN302_tree=null;

        try {
            // EsperEPL2Grammar.g:996:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:996:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:996:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:996:5: WHEN expression THEN expression
            {
            WHEN300=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5479); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5482);
            expression301=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression301.getTree());
            THEN302=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5484); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5487);
            expression303=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression303.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:999:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE304=null;
        EsperEPL2GrammarParser.expression_return expression305 = null;


        CommonTree ELSE304_tree=null;

        try {
            // EsperEPL2Grammar.g:1000:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:1000:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1000:4: ( ELSE expression )
            // EsperEPL2Grammar.g:1000:5: ELSE expression
            {
            ELSE304=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5500); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5503);
            expression305=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression305.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:1004:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression306 = null;



        try {
            // EsperEPL2Grammar.g:1005:2: ( caseExpression )
            // EsperEPL2Grammar.g:1005:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression5516);
            caseExpression306=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression306.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:1008:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE307=null;
        Token END310=null;
        Token CASE311=null;
        Token END315=null;
        EsperEPL2GrammarParser.whenClause_return whenClause308 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause309 = null;

        EsperEPL2GrammarParser.expression_return expression312 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause313 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause314 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression316 = null;


        CommonTree CASE307_tree=null;
        CommonTree END310_tree=null;
        CommonTree CASE311_tree=null;
        CommonTree END315_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:1009:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt124=3;
            int LA124_0 = input.LA(1);

            if ( (LA124_0==CASE) ) {
                int LA124_1 = input.LA(2);

                if ( (LA124_1==WINDOW||LA124_1==ESCAPE||(LA124_1>=NOT_EXPR && LA124_1<=EVERY_EXPR)||(LA124_1>=SUM && LA124_1<=COUNT)||LA124_1==CASE||LA124_1==OUTER||(LA124_1>=JOIN && LA124_1<=FULL)||(LA124_1>=EVENTS && LA124_1<=LAST)||(LA124_1>=UNIDIRECTIONAL && LA124_1<=CURRENT_TIMESTAMP)||LA124_1==SNAPSHOT||(LA124_1>=VARIABLE && LA124_1<=AT)||(LA124_1>=BOOLEAN_TRUE && LA124_1<=VALUE_NULL)||(LA124_1>=DEFINE && LA124_1<=MATCHES)||LA124_1==NUM_DOUBLE||LA124_1==IDENT||LA124_1==LPAREN||(LA124_1>=PLUS && LA124_1<=QUESTION)||(LA124_1>=STRING_LITERAL && LA124_1<=QUOTED_STRING_LITERAL)||LA124_1==MINUS||LA124_1==LCURLY||LA124_1==NUM_INT||(LA124_1>=TICKED_STRING_LITERAL && LA124_1<=NUM_FLOAT)) ) {
                    alt124=2;
                }
                else if ( (LA124_1==WHEN) ) {
                    alt124=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 124, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA124_0==WINDOW||LA124_0==ESCAPE||(LA124_0>=NOT_EXPR && LA124_0<=EVERY_EXPR)||(LA124_0>=SUM && LA124_0<=COUNT)||LA124_0==OUTER||(LA124_0>=JOIN && LA124_0<=FULL)||(LA124_0>=EVENTS && LA124_0<=LAST)||(LA124_0>=UNIDIRECTIONAL && LA124_0<=CURRENT_TIMESTAMP)||LA124_0==SNAPSHOT||(LA124_0>=VARIABLE && LA124_0<=AT)||(LA124_0>=BOOLEAN_TRUE && LA124_0<=VALUE_NULL)||(LA124_0>=DEFINE && LA124_0<=MATCHES)||LA124_0==NUM_DOUBLE||LA124_0==IDENT||LA124_0==LPAREN||(LA124_0>=PLUS && LA124_0<=QUESTION)||(LA124_0>=STRING_LITERAL && LA124_0<=QUOTED_STRING_LITERAL)||LA124_0==MINUS||LA124_0==LCURLY||LA124_0==NUM_INT||(LA124_0>=TICKED_STRING_LITERAL && LA124_0<=NUM_FLOAT)) ) {
                alt124=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 124, 0, input);

                throw nvae;
            }
            switch (alt124) {
                case 1 :
                    // EsperEPL2Grammar.g:1009:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE307=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5530); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE307_tree = (CommonTree)adaptor.create(CASE307);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE307_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1009:52: ( whenClause )+
                    int cnt120=0;
                    loop120:
                    do {
                        int alt120=2;
                        int LA120_0 = input.LA(1);

                        if ( (LA120_0==WHEN) ) {
                            alt120=1;
                        }


                        switch (alt120) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1009:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5533);
                    	    whenClause308=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause308.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt120 >= 1 ) break loop120;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(120, input);
                                throw eee;
                        }
                        cnt120++;
                    } while (true);

                    // EsperEPL2Grammar.g:1009:64: ( elseClause )?
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( (LA121_0==ELSE) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            // EsperEPL2Grammar.g:1009:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5536);
                            elseClause309=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause309.getTree());

                            }
                            break;

                    }

                    END310=(Token)match(input,END,FOLLOW_END_in_caseExpression5539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1010:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE311=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression5550); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE311);

                    pushFollow(FOLLOW_expression_in_caseExpression5552);
                    expression312=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression312.getTree());
                    // EsperEPL2Grammar.g:1010:62: ( whenClause )+
                    int cnt122=0;
                    loop122:
                    do {
                        int alt122=2;
                        int LA122_0 = input.LA(1);

                        if ( (LA122_0==WHEN) ) {
                            alt122=1;
                        }


                        switch (alt122) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1010:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression5554);
                    	    whenClause313=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause313.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt122 >= 1 ) break loop122;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(122, input);
                                throw eee;
                        }
                        cnt122++;
                    } while (true);

                    // EsperEPL2Grammar.g:1010:74: ( elseClause )?
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==ELSE) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            // EsperEPL2Grammar.g:1010:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression5557);
                            elseClause314=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause314.getTree());

                            }
                            break;

                    }

                    END315=(Token)match(input,END,FOLLOW_END_in_caseExpression5560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END315);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: elseClause, expression, whenClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1011:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:1011:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:1011:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1012:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression5584);
                    evalOrExpression316=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression316.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:1015:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression317 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression318 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:1016:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:1016:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5595);
            evalAndExpression317=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression317.getTree());
            // EsperEPL2Grammar.g:1016:22: (op= OR_EXPR evalAndExpression )*
            loop125:
            do {
                int alt125=2;
                int LA125_0 = input.LA(1);

                if ( (LA125_0==OR_EXPR) ) {
                    alt125=1;
                }


                switch (alt125) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1016:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression5600); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression5602);
            	    evalAndExpression318=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression318.getTree());

            	    }
            	    break;

            	default :
            	    break loop125;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1017:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:1017:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:1017:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1018:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:1021:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression319 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression320 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:1022:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:1022:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5634);
            bitWiseExpression319=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression319.getTree());
            // EsperEPL2Grammar.g:1022:22: (op= AND_EXPR bitWiseExpression )*
            loop126:
            do {
                int alt126=2;
                int LA126_0 = input.LA(1);

                if ( (LA126_0==AND_EXPR) ) {
                    alt126=1;
                }


                switch (alt126) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1022:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression5639); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression5641);
            	    bitWiseExpression320=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression320.getTree());

            	    }
            	    break;

            	default :
            	    break loop126;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1023:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:1023:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1024:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:1027:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND322=null;
        Token BOR323=null;
        Token BXOR324=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression321 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression325 = null;


        CommonTree BAND322_tree=null;
        CommonTree BOR323_tree=null;
        CommonTree BXOR324_tree=null;

        try {
            // EsperEPL2Grammar.g:1028:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1028:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5673);
            negatedExpression321=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression321.getTree());
            // EsperEPL2Grammar.g:1028:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop128:
            do {
                int alt128=2;
                int LA128_0 = input.LA(1);

                if ( (LA128_0==BOR||(LA128_0>=BAND && LA128_0<=BXOR)) ) {
                    alt128=1;
                }


                switch (alt128) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1028:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1028:24: ( BAND | BOR | BXOR )
            	    int alt127=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt127=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt127=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt127=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 127, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt127) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1028:25: BAND
            	            {
            	            BAND322=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression5678); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND322_tree = (CommonTree)adaptor.create(BAND322);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND322_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1028:31: BOR
            	            {
            	            BOR323=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression5681); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR323_tree = (CommonTree)adaptor.create(BOR323);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR323_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1028:36: BXOR
            	            {
            	            BXOR324=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression5684); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR324_tree = (CommonTree)adaptor.create(BXOR324);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR324_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression5688);
            	    negatedExpression325=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression325.getTree());

            	    }
            	    break;

            	default :
            	    break loop128;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1031:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR327=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression326 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression328 = null;


        CommonTree NOT_EXPR327_tree=null;

        try {
            // EsperEPL2Grammar.g:1032:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==WINDOW||LA129_0==ESCAPE||LA129_0==EVERY_EXPR||(LA129_0>=SUM && LA129_0<=COUNT)||LA129_0==OUTER||(LA129_0>=JOIN && LA129_0<=FULL)||(LA129_0>=EVENTS && LA129_0<=LAST)||(LA129_0>=UNIDIRECTIONAL && LA129_0<=CURRENT_TIMESTAMP)||LA129_0==SNAPSHOT||(LA129_0>=VARIABLE && LA129_0<=AT)||(LA129_0>=BOOLEAN_TRUE && LA129_0<=VALUE_NULL)||(LA129_0>=DEFINE && LA129_0<=MATCHES)||LA129_0==NUM_DOUBLE||LA129_0==IDENT||LA129_0==LPAREN||(LA129_0>=PLUS && LA129_0<=QUESTION)||(LA129_0>=STRING_LITERAL && LA129_0<=QUOTED_STRING_LITERAL)||LA129_0==MINUS||LA129_0==LCURLY||LA129_0==NUM_INT||(LA129_0>=TICKED_STRING_LITERAL && LA129_0<=NUM_FLOAT)) ) {
                alt129=1;
            }
            else if ( (LA129_0==NOT_EXPR) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // EsperEPL2Grammar.g:1032:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5703);
                    evalEqualsExpression326=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression326.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1033:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR327=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression5709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR327_tree = (CommonTree)adaptor.create(NOT_EXPR327);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR327_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression5712);
                    evalEqualsExpression328=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression328.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1036:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR330=null;
        Token LPAREN332=null;
        Token RPAREN334=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression329 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression331 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList333 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression335 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR330_tree=null;
        CommonTree LPAREN332_tree=null;
        CommonTree RPAREN334_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1037:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1037:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5725);
            evalRelationalExpression329=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression329.getTree());
            // EsperEPL2Grammar.g:1037:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop135:
            do {
                int alt135=2;
                int LA135_0 = input.LA(1);

                if ( (LA135_0==IS||LA135_0==EQUALS||(LA135_0>=SQL_NE && LA135_0<=NOT_EQUAL)) ) {
                    alt135=1;
                }


                switch (alt135) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1038:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1038:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt130=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt130=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA130_2 = input.LA(2);

            	        if ( (LA130_2==NOT_EXPR) ) {
            	            alt130=3;
            	        }
            	        else if ( (LA130_2==WINDOW||LA130_2==ESCAPE||LA130_2==EVERY_EXPR||(LA130_2>=SUM && LA130_2<=COUNT)||LA130_2==OUTER||(LA130_2>=JOIN && LA130_2<=FULL)||(LA130_2>=ALL && LA130_2<=SOME)||(LA130_2>=EVENTS && LA130_2<=LAST)||(LA130_2>=UNIDIRECTIONAL && LA130_2<=CURRENT_TIMESTAMP)||LA130_2==SNAPSHOT||(LA130_2>=VARIABLE && LA130_2<=AT)||(LA130_2>=BOOLEAN_TRUE && LA130_2<=VALUE_NULL)||(LA130_2>=DEFINE && LA130_2<=MATCHES)||LA130_2==NUM_DOUBLE||LA130_2==IDENT||LA130_2==LPAREN||(LA130_2>=PLUS && LA130_2<=QUESTION)||(LA130_2>=STRING_LITERAL && LA130_2<=QUOTED_STRING_LITERAL)||LA130_2==MINUS||LA130_2==LCURLY||LA130_2==NUM_INT||(LA130_2>=TICKED_STRING_LITERAL && LA130_2<=NUM_FLOAT)) ) {
            	            alt130=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 130, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt130=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt130=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 130, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt130) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1038:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression5738); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1039:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5756); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1040:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression5770); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR330=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression5772); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR330);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1041:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression5786); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1042:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression5800); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1044:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt134=2;
            	    int LA134_0 = input.LA(1);

            	    if ( (LA134_0==WINDOW||LA134_0==ESCAPE||LA134_0==EVERY_EXPR||(LA134_0>=SUM && LA134_0<=COUNT)||LA134_0==OUTER||(LA134_0>=JOIN && LA134_0<=FULL)||(LA134_0>=EVENTS && LA134_0<=LAST)||(LA134_0>=UNIDIRECTIONAL && LA134_0<=CURRENT_TIMESTAMP)||LA134_0==SNAPSHOT||(LA134_0>=VARIABLE && LA134_0<=AT)||(LA134_0>=BOOLEAN_TRUE && LA134_0<=VALUE_NULL)||(LA134_0>=DEFINE && LA134_0<=MATCHES)||LA134_0==NUM_DOUBLE||LA134_0==IDENT||LA134_0==LPAREN||(LA134_0>=PLUS && LA134_0<=QUESTION)||(LA134_0>=STRING_LITERAL && LA134_0<=QUOTED_STRING_LITERAL)||LA134_0==MINUS||LA134_0==LCURLY||LA134_0==NUM_INT||(LA134_0>=TICKED_STRING_LITERAL && LA134_0<=NUM_FLOAT)) ) {
            	        alt134=1;
            	    }
            	    else if ( ((LA134_0>=ALL && LA134_0<=SOME)) ) {
            	        alt134=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 134, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt134) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1045:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression5830);
            	            evalRelationalExpression331=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression331.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1046:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1046:13: (a= ANY | a= SOME | a= ALL )
            	            int alt131=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt131=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt131=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt131=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 131, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt131) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1046:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression5847); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1046:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression5853); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1046:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression5859); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1046:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt133=2;
            	            int LA133_0 = input.LA(1);

            	            if ( (LA133_0==LPAREN) ) {
            	                int LA133_1 = input.LA(2);

            	                if ( (LA133_1==SELECT) ) {
            	                    alt133=2;
            	                }
            	                else if ( (LA133_1==WINDOW||LA133_1==ESCAPE||(LA133_1>=NOT_EXPR && LA133_1<=EVERY_EXPR)||(LA133_1>=SUM && LA133_1<=COUNT)||LA133_1==CASE||LA133_1==OUTER||(LA133_1>=JOIN && LA133_1<=FULL)||(LA133_1>=EVENTS && LA133_1<=LAST)||(LA133_1>=UNIDIRECTIONAL && LA133_1<=CURRENT_TIMESTAMP)||LA133_1==SNAPSHOT||(LA133_1>=VARIABLE && LA133_1<=AT)||(LA133_1>=BOOLEAN_TRUE && LA133_1<=VALUE_NULL)||(LA133_1>=DEFINE && LA133_1<=MATCHES)||LA133_1==NUM_DOUBLE||LA133_1==IDENT||(LA133_1>=LPAREN && LA133_1<=RPAREN)||(LA133_1>=PLUS && LA133_1<=QUESTION)||(LA133_1>=STRING_LITERAL && LA133_1<=QUOTED_STRING_LITERAL)||LA133_1==MINUS||LA133_1==LCURLY||LA133_1==NUM_INT||(LA133_1>=TICKED_STRING_LITERAL && LA133_1<=NUM_FLOAT)) ) {
            	                    alt133=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 133, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 133, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt133) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1046:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1046:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1046:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN332=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression5865); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN332);

            	                    // EsperEPL2Grammar.g:1046:48: ( expressionList )?
            	                    int alt132=2;
            	                    int LA132_0 = input.LA(1);

            	                    if ( (LA132_0==WINDOW||LA132_0==ESCAPE||(LA132_0>=NOT_EXPR && LA132_0<=EVERY_EXPR)||(LA132_0>=SUM && LA132_0<=COUNT)||LA132_0==CASE||LA132_0==OUTER||(LA132_0>=JOIN && LA132_0<=FULL)||(LA132_0>=EVENTS && LA132_0<=LAST)||(LA132_0>=UNIDIRECTIONAL && LA132_0<=CURRENT_TIMESTAMP)||LA132_0==SNAPSHOT||(LA132_0>=VARIABLE && LA132_0<=AT)||(LA132_0>=BOOLEAN_TRUE && LA132_0<=VALUE_NULL)||(LA132_0>=DEFINE && LA132_0<=MATCHES)||LA132_0==NUM_DOUBLE||LA132_0==IDENT||LA132_0==LPAREN||(LA132_0>=PLUS && LA132_0<=QUESTION)||(LA132_0>=STRING_LITERAL && LA132_0<=QUOTED_STRING_LITERAL)||LA132_0==MINUS||LA132_0==LCURLY||LA132_0==NUM_INT||(LA132_0>=TICKED_STRING_LITERAL && LA132_0<=NUM_FLOAT)) ) {
            	                        alt132=1;
            	                    }
            	                    switch (alt132) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1046:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression5867);
            	                            expressionList333=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList333.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN334=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression5870); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN334);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1046:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression5875);
            	                    subSelectGroupExpression335=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression335.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop135;
                }
            } while (true);



            // AST REWRITE
            // elements: evalRelationalExpression, subSelectGroupExpression, expressionList, a, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, subSelectGroupExpression, a, expressionList
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1049:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1049:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1050:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1050:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1050:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1050:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1051:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1051:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1052:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1052:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1052:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1052:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1053:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1056:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN338=null;
        Token RPAREN340=null;
        Token COMMA344=null;
        Token IN_SET346=null;
        Token BETWEEN348=null;
        Token LIKE350=null;
        Token ESCAPE352=null;
        Token REGEXP354=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr336 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr337 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList339 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression341 = null;

        EsperEPL2GrammarParser.expression_return expression342 = null;

        EsperEPL2GrammarParser.expression_return expression343 = null;

        EsperEPL2GrammarParser.expression_return expression345 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery347 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList349 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr351 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant353 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr355 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN338_tree=null;
        CommonTree RPAREN340_tree=null;
        CommonTree COMMA344_tree=null;
        CommonTree IN_SET346_tree=null;
        CommonTree BETWEEN348_tree=null;
        CommonTree LIKE350_tree=null;
        CommonTree ESCAPE352_tree=null;
        CommonTree REGEXP354_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1057:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1057:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6003);
            concatenationExpr336=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr336.getTree());
            // EsperEPL2Grammar.g:1058:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==EOF||(LA149_0>=OR_EXPR && LA149_0<=AND_EXPR)||(LA149_0>=WHERE && LA149_0<=AS)||(LA149_0>=ELSE && LA149_0<=FROM)||LA149_0==IS||(LA149_0>=GROUP && LA149_0<=HAVING)||LA149_0==ALL||LA149_0==OUTPUT||LA149_0==INSERT||(LA149_0>=ORDER && LA149_0<=DESC)||LA149_0==PATTERN||(LA149_0>=TIMEPERIOD_SEC && LA149_0<=TIMEPERIOD_SECONDS)||LA149_0==ROW_LIMIT_EXPR||LA149_0==MEASURES||LA149_0==AFTER||LA149_0==COMMA||LA149_0==EQUALS||LA149_0==RPAREN||LA149_0==BOR||(LA149_0>=RBRACK && LA149_0<=COLON)||(LA149_0>=BAND && LA149_0<=GE)||LA149_0==RCURLY) ) {
                alt149=1;
            }
            else if ( ((LA149_0>=IN_SET && LA149_0<=REGEXP)||LA149_0==NOT_EXPR) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    // EsperEPL2Grammar.g:1059:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1059:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1060:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1060:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop141:
                    do {
                        int alt141=2;
                        int LA141_0 = input.LA(1);

                        if ( ((LA141_0>=LT && LA141_0<=GE)) ) {
                            alt141=1;
                        }


                        switch (alt141) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1061:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1061:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt136=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt136=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt136=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt136=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt136=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 136, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt136) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1061:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6035); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1061:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6039); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1061:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6043); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1061:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6047); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1062:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt140=2;
                    	    int LA140_0 = input.LA(1);

                    	    if ( (LA140_0==WINDOW||LA140_0==ESCAPE||LA140_0==EVERY_EXPR||(LA140_0>=SUM && LA140_0<=COUNT)||LA140_0==OUTER||(LA140_0>=JOIN && LA140_0<=FULL)||(LA140_0>=EVENTS && LA140_0<=LAST)||(LA140_0>=UNIDIRECTIONAL && LA140_0<=CURRENT_TIMESTAMP)||LA140_0==SNAPSHOT||(LA140_0>=VARIABLE && LA140_0<=AT)||(LA140_0>=BOOLEAN_TRUE && LA140_0<=VALUE_NULL)||(LA140_0>=DEFINE && LA140_0<=MATCHES)||LA140_0==NUM_DOUBLE||LA140_0==IDENT||LA140_0==LPAREN||(LA140_0>=PLUS && LA140_0<=QUESTION)||(LA140_0>=STRING_LITERAL && LA140_0<=QUOTED_STRING_LITERAL)||LA140_0==MINUS||LA140_0==LCURLY||LA140_0==NUM_INT||(LA140_0>=TICKED_STRING_LITERAL && LA140_0<=NUM_FLOAT)) ) {
                    	        alt140=1;
                    	    }
                    	    else if ( ((LA140_0>=ALL && LA140_0<=SOME)) ) {
                    	        alt140=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 140, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt140) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1063:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6071);
                    	            concatenationExpr337=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr337.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1064:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1064:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt137=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt137=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt137=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt137=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 137, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt137) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1064:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6088); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1064:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6094); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1064:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6100); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1064:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt139=2;
                    	            int LA139_0 = input.LA(1);

                    	            if ( (LA139_0==LPAREN) ) {
                    	                int LA139_1 = input.LA(2);

                    	                if ( (LA139_1==SELECT) ) {
                    	                    alt139=2;
                    	                }
                    	                else if ( (LA139_1==WINDOW||LA139_1==ESCAPE||(LA139_1>=NOT_EXPR && LA139_1<=EVERY_EXPR)||(LA139_1>=SUM && LA139_1<=COUNT)||LA139_1==CASE||LA139_1==OUTER||(LA139_1>=JOIN && LA139_1<=FULL)||(LA139_1>=EVENTS && LA139_1<=LAST)||(LA139_1>=UNIDIRECTIONAL && LA139_1<=CURRENT_TIMESTAMP)||LA139_1==SNAPSHOT||(LA139_1>=VARIABLE && LA139_1<=AT)||(LA139_1>=BOOLEAN_TRUE && LA139_1<=VALUE_NULL)||(LA139_1>=DEFINE && LA139_1<=MATCHES)||LA139_1==NUM_DOUBLE||LA139_1==IDENT||(LA139_1>=LPAREN && LA139_1<=RPAREN)||(LA139_1>=PLUS && LA139_1<=QUESTION)||(LA139_1>=STRING_LITERAL && LA139_1<=QUOTED_STRING_LITERAL)||LA139_1==MINUS||LA139_1==LCURLY||LA139_1==NUM_INT||(LA139_1>=TICKED_STRING_LITERAL && LA139_1<=NUM_FLOAT)) ) {
                    	                    alt139=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 139, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 139, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt139) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1064:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1064:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1064:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN338=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6106); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN338);

                    	                    // EsperEPL2Grammar.g:1064:48: ( expressionList )?
                    	                    int alt138=2;
                    	                    int LA138_0 = input.LA(1);

                    	                    if ( (LA138_0==WINDOW||LA138_0==ESCAPE||(LA138_0>=NOT_EXPR && LA138_0<=EVERY_EXPR)||(LA138_0>=SUM && LA138_0<=COUNT)||LA138_0==CASE||LA138_0==OUTER||(LA138_0>=JOIN && LA138_0<=FULL)||(LA138_0>=EVENTS && LA138_0<=LAST)||(LA138_0>=UNIDIRECTIONAL && LA138_0<=CURRENT_TIMESTAMP)||LA138_0==SNAPSHOT||(LA138_0>=VARIABLE && LA138_0<=AT)||(LA138_0>=BOOLEAN_TRUE && LA138_0<=VALUE_NULL)||(LA138_0>=DEFINE && LA138_0<=MATCHES)||LA138_0==NUM_DOUBLE||LA138_0==IDENT||LA138_0==LPAREN||(LA138_0>=PLUS && LA138_0<=QUESTION)||(LA138_0>=STRING_LITERAL && LA138_0<=QUOTED_STRING_LITERAL)||LA138_0==MINUS||LA138_0==LCURLY||LA138_0==NUM_INT||(LA138_0>=TICKED_STRING_LITERAL && LA138_0<=NUM_FLOAT)) ) {
                    	                        alt138=1;
                    	                    }
                    	                    switch (alt138) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1064:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6108);
                    	                            expressionList339=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList339.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN340=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6111); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN340);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1064:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6116);
                    	                    subSelectGroupExpression341=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression341.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop141;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: g, concatenationExpr, concatenationExpr, concatenationExpr, expressionList, subSelectGroupExpression
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1068:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1068:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1069:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1069:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1069:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1069:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1070:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1072:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1072:6: (n= NOT_EXPR )?
                    int alt142=2;
                    int LA142_0 = input.LA(1);

                    if ( (LA142_0==NOT_EXPR) ) {
                        alt142=1;
                    }
                    switch (alt142) {
                        case 1 :
                            // EsperEPL2Grammar.g:1072:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6212); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1073:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt148=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA148_1 = input.LA(2);

                        if ( (LA148_1==LPAREN) ) {
                            int LA148_5 = input.LA(3);

                            if ( (LA148_5==SELECT) ) {
                                alt148=2;
                            }
                            else if ( (LA148_5==WINDOW||LA148_5==ESCAPE||(LA148_5>=NOT_EXPR && LA148_5<=EVERY_EXPR)||(LA148_5>=SUM && LA148_5<=COUNT)||LA148_5==CASE||LA148_5==OUTER||(LA148_5>=JOIN && LA148_5<=FULL)||(LA148_5>=EVENTS && LA148_5<=LAST)||(LA148_5>=UNIDIRECTIONAL && LA148_5<=CURRENT_TIMESTAMP)||LA148_5==SNAPSHOT||(LA148_5>=VARIABLE && LA148_5<=AT)||(LA148_5>=BOOLEAN_TRUE && LA148_5<=VALUE_NULL)||(LA148_5>=DEFINE && LA148_5<=MATCHES)||LA148_5==NUM_DOUBLE||LA148_5==IDENT||LA148_5==LPAREN||(LA148_5>=PLUS && LA148_5<=QUESTION)||(LA148_5>=STRING_LITERAL && LA148_5<=QUOTED_STRING_LITERAL)||LA148_5==MINUS||LA148_5==LCURLY||LA148_5==NUM_INT||(LA148_5>=TICKED_STRING_LITERAL && LA148_5<=NUM_FLOAT)) ) {
                                alt148=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 148, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA148_1==LBRACK) ) {
                            alt148=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 148, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt148=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt148=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt148=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 148, 0, input);

                        throw nvae;
                    }

                    switch (alt148) {
                        case 1 :
                            // EsperEPL2Grammar.g:1076:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1076:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1076:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6239); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1077:8: (l= LPAREN | l= LBRACK )
                            int alt143=2;
                            int LA143_0 = input.LA(1);

                            if ( (LA143_0==LPAREN) ) {
                                alt143=1;
                            }
                            else if ( (LA143_0==LBRACK) ) {
                                alt143=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 143, 0, input);

                                throw nvae;
                            }
                            switch (alt143) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1077:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6251); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1077:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6257); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6260);
                            expression342=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression342.getTree());
                            // EsperEPL2Grammar.g:1078:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt145=2;
                            int LA145_0 = input.LA(1);

                            if ( (LA145_0==COLON) ) {
                                alt145=1;
                            }
                            else if ( (LA145_0==COMMA||LA145_0==RPAREN||LA145_0==RBRACK) ) {
                                alt145=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 145, 0, input);

                                throw nvae;
                            }
                            switch (alt145) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1079:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1079:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1079:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6282); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1079:20: ( expression )
                                    // EsperEPL2Grammar.g:1079:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6285);
                                    expression343=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression343.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1081:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1081:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1081:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1081:10: ( COMMA expression )*
                                    loop144:
                                    do {
                                        int alt144=2;
                                        int LA144_0 = input.LA(1);

                                        if ( (LA144_0==COMMA) ) {
                                            alt144=1;
                                        }


                                        switch (alt144) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1081:11: COMMA expression
                                    	    {
                                    	    COMMA344=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6311); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA344);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6313);
                                    	    expression345=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression345.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop144;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1083:8: (r= RPAREN | r= RBRACK )
                            int alt146=2;
                            int LA146_0 = input.LA(1);

                            if ( (LA146_0==RPAREN) ) {
                                alt146=1;
                            }
                            else if ( (LA146_0==RBRACK) ) {
                                alt146=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 146, 0, input);

                                throw nvae;
                            }
                            switch (alt146) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1083:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6339); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1083:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6345); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: concatenationExpr, r, r, expression, IN_SET, concatenationExpr, expression, l, l, concatenationExpr, expression, l, l, concatenationExpr, r, expression, r
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1085:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1085:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1086:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1086:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1087:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1087:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1088:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1088:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1089:7: IN_SET inSubSelectQuery
                            {
                            IN_SET346=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6468); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET346);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6470);
                            inSubSelectQuery347=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery347.getTree());


                            // AST REWRITE
                            // elements: inSubSelectQuery, inSubSelectQuery, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1090:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1090:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1091:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1091:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1092:7: BETWEEN betweenList
                            {
                            BETWEEN348=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression6516); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN348);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression6518);
                            betweenList349=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList349.getTree());


                            // AST REWRITE
                            // elements: betweenList, concatenationExpr, betweenList, concatenationExpr, BETWEEN
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1093:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1093:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1094:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1094:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1095:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE350=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression6568); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE350);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6570);
                            concatenationExpr351=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr351.getTree());
                            // EsperEPL2Grammar.g:1095:30: ( ESCAPE stringconstant )?
                            int alt147=2;
                            int LA147_0 = input.LA(1);

                            if ( (LA147_0==ESCAPE) ) {
                                alt147=1;
                            }
                            switch (alt147) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1095:31: ESCAPE stringconstant
                                    {
                                    ESCAPE352=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression6573); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE352);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression6575);
                                    stringconstant353=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant353.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, stringconstant, stringconstant, LIKE
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1096:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1096:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1096:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1096:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1097:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1097:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1097:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1097:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1098:7: REGEXP concatenationExpr
                            {
                            REGEXP354=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression6627); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP354);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6629);
                            concatenationExpr355=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr355.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, REGEXP
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1099:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1099:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1100:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1100:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1105:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr356 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1106:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1106:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery6691);
            subQueryExpr356=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr356.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1107:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1107:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1110:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR359=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression357 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression358 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression360 = null;


        CommonTree c_tree=null;
        CommonTree LOR359_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1111:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1111:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6716);
            additiveExpression357=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression357.getTree());
            // EsperEPL2Grammar.g:1111:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LOR) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    // EsperEPL2Grammar.g:1111:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6722); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6724);
                    additiveExpression358=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression358.getTree());
                    // EsperEPL2Grammar.g:1111:50: ( LOR additiveExpression )*
                    loop150:
                    do {
                        int alt150=2;
                        int LA150_0 = input.LA(1);

                        if ( (LA150_0==LOR) ) {
                            alt150=1;
                        }


                        switch (alt150) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1111:52: LOR additiveExpression
                    	    {
                    	    LOR359=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr6728); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR359);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr6730);
                    	    additiveExpression360=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression360.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop150;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1112:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1112:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1113:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1116:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS362=null;
        Token MINUS363=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression361 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression364 = null;


        CommonTree PLUS362_tree=null;
        CommonTree MINUS363_tree=null;

        try {
            // EsperEPL2Grammar.g:1117:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1117:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6771);
            multiplyExpression361=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression361.getTree());
            // EsperEPL2Grammar.g:1117:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop153:
            do {
                int alt153=2;
                int LA153_0 = input.LA(1);

                if ( (LA153_0==PLUS||LA153_0==MINUS) ) {
                    alt153=1;
                }


                switch (alt153) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1117:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1117:25: ( PLUS | MINUS )
            	    int alt152=2;
            	    int LA152_0 = input.LA(1);

            	    if ( (LA152_0==PLUS) ) {
            	        alt152=1;
            	    }
            	    else if ( (LA152_0==MINUS) ) {
            	        alt152=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 152, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt152) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1117:26: PLUS
            	            {
            	            PLUS362=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression6776); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS362_tree = (CommonTree)adaptor.create(PLUS362);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS362_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1117:32: MINUS
            	            {
            	            MINUS363=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression6779); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS363_tree = (CommonTree)adaptor.create(MINUS363);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS363_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression6783);
            	    multiplyExpression364=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression364.getTree());

            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1120:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR366=null;
        Token DIV367=null;
        Token MOD368=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression365 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression369 = null;


        CommonTree STAR366_tree=null;
        CommonTree DIV367_tree=null;
        CommonTree MOD368_tree=null;

        try {
            // EsperEPL2Grammar.g:1121:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1121:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6797);
            unaryExpression365=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression365.getTree());
            // EsperEPL2Grammar.g:1121:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop155:
            do {
                int alt155=2;
                int LA155_0 = input.LA(1);

                if ( (LA155_0==STAR||(LA155_0>=DIV && LA155_0<=MOD)) ) {
                    alt155=1;
                }


                switch (alt155) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1121:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1121:22: ( STAR | DIV | MOD )
            	    int alt154=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt154=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt154=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt154=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 154, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt154) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1121:23: STAR
            	            {
            	            STAR366=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression6802); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR366_tree = (CommonTree)adaptor.create(STAR366);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR366_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1121:29: DIV
            	            {
            	            DIV367=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression6805); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV367_tree = (CommonTree)adaptor.create(DIV367);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV367_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1121:34: MOD
            	            {
            	            MOD368=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression6808); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD368_tree = (CommonTree)adaptor.create(MOD368);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD368_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression6812);
            	    unaryExpression369=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression369.getTree());

            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1124:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS370=null;
        Token LPAREN374=null;
        Token RPAREN376=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty371 = null;

        EsperEPL2GrammarParser.constant_return constant372 = null;

        EsperEPL2GrammarParser.substitution_return substitution373 = null;

        EsperEPL2GrammarParser.expression_return expression375 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction377 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc378 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression379 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression380 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression381 = null;


        CommonTree MINUS370_tree=null;
        CommonTree LPAREN374_tree=null;
        CommonTree RPAREN376_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1125:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt156=9;
            alt156 = dfa156.predict(input);
            switch (alt156) {
                case 1 :
                    // EsperEPL2Grammar.g:1125:4: MINUS eventProperty
                    {
                    MINUS370=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression6827); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS370);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression6829);
                    eventProperty371=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty371.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1125:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1125:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1126:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression6842);
                    constant372=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant372.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1127:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression6847);
                    substitution373=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution373.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1128:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN374=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression6852); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression6855);
                    expression375=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression375.getTree());
                    RPAREN376=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression6857); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1129:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression6863);
                    eventPropertyOrLibFunction377=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction377.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1130:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1130:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1130:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression6875);
                    builtinFunc378=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc378.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1131:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression6881);
                    arrayExpression379=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression379.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1132:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression6886);
                    subSelectExpression380=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression380.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1133:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression6891);
                    existsSubSelectExpression381=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression381.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1136:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr382 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1137:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1137:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression6908);
            subQueryExpr382=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr382.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1138:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1138:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1141:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr383 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1142:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1142:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression6930);
            subQueryExpr383=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr383.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1143:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1143:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1146:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS384=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr385 = null;


        CommonTree EXISTS384_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1147:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1147:4: EXISTS subQueryExpr
            {
            EXISTS384=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression6952); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS384);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression6954);
            subQueryExpr385=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr385.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1148:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1148:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1151:1: subQueryExpr : LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN386=null;
        Token SELECT387=null;
        Token DISTINCT388=null;
        Token FROM390=null;
        Token WHERE392=null;
        Token RPAREN394=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement389 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr391 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause393 = null;


        CommonTree LPAREN386_tree=null;
        CommonTree SELECT387_tree=null;
        CommonTree DISTINCT388_tree=null;
        CommonTree FROM390_tree=null;
        CommonTree WHERE392_tree=null;
        CommonTree RPAREN394_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1154:2: ( LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1154:4: LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN386=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr6987); if (state.failed) return retval;
            SELECT387=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr6993); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1155:11: ( DISTINCT )?
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==DISTINCT) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    // EsperEPL2Grammar.g:1155:11: DISTINCT
                    {
                    DISTINCT388=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr6996); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT388_tree = (CommonTree)adaptor.create(DISTINCT388);
                    adaptor.addChild(root_0, DISTINCT388_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr6999);
            selectionListElement389=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement389.getTree());
            FROM390=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7006); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7009);
            subSelectFilterExpr391=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr391.getTree());
            // EsperEPL2Grammar.g:1157:6: ( WHERE whereClause )?
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==WHERE) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    // EsperEPL2Grammar.g:1157:7: WHERE whereClause
                    {
                    WHERE392=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7017); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7020);
                    whereClause393=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause393.getTree());

                    }
                    break;

            }

            RPAREN394=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7029); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1161:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT396=null;
        Token DOT398=null;
        Token AS400=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression395 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression397 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression399 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT396_tree=null;
        CommonTree DOT398_tree=null;
        CommonTree AS400_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1164:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1164:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7053);
            eventFilterExpression395=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression395.getTree());
            // EsperEPL2Grammar.g:1165:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==DOT) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    // EsperEPL2Grammar.g:1165:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT396=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7058); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT396);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7060);
                    viewExpression397=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression397.getTree());
                    // EsperEPL2Grammar.g:1165:23: ( DOT viewExpression )*
                    loop159:
                    do {
                        int alt159=2;
                        int LA159_0 = input.LA(1);

                        if ( (LA159_0==DOT) ) {
                            alt159=1;
                        }


                        switch (alt159) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1165:24: DOT viewExpression
                    	    {
                    	    DOT398=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7063); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT398);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7065);
                    	    viewExpression399=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression399.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop159;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1165:47: ( AS i= IDENT | i= IDENT )?
            int alt161=3;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==AS) ) {
                alt161=1;
            }
            else if ( (LA161_0==IDENT) ) {
                alt161=2;
            }
            switch (alt161) {
                case 1 :
                    // EsperEPL2Grammar.g:1165:48: AS i= IDENT
                    {
                    AS400=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7072); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS400);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7076); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1165:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1165:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt162=3;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==RETAINUNION) ) {
                alt162=1;
            }
            else if ( (LA162_0==RETAININTERSECTION) ) {
                alt162=2;
            }
            switch (alt162) {
                case 1 :
                    // EsperEPL2Grammar.g:1165:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1165:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7093); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, eventFilterExpression, ru, viewExpression, i
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1166:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1166:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1166:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1166:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1166:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1166:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1169:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY401=null;
        Token COMMA403=null;
        Token RCURLY405=null;
        EsperEPL2GrammarParser.expression_return expression402 = null;

        EsperEPL2GrammarParser.expression_return expression404 = null;


        CommonTree LCURLY401_tree=null;
        CommonTree COMMA403_tree=null;
        CommonTree RCURLY405_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1170:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1170:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY401=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY401);

            // EsperEPL2Grammar.g:1170:11: ( expression ( COMMA expression )* )?
            int alt164=2;
            int LA164_0 = input.LA(1);

            if ( (LA164_0==WINDOW||LA164_0==ESCAPE||(LA164_0>=NOT_EXPR && LA164_0<=EVERY_EXPR)||(LA164_0>=SUM && LA164_0<=COUNT)||LA164_0==CASE||LA164_0==OUTER||(LA164_0>=JOIN && LA164_0<=FULL)||(LA164_0>=EVENTS && LA164_0<=LAST)||(LA164_0>=UNIDIRECTIONAL && LA164_0<=CURRENT_TIMESTAMP)||LA164_0==SNAPSHOT||(LA164_0>=VARIABLE && LA164_0<=AT)||(LA164_0>=BOOLEAN_TRUE && LA164_0<=VALUE_NULL)||(LA164_0>=DEFINE && LA164_0<=MATCHES)||LA164_0==NUM_DOUBLE||LA164_0==IDENT||LA164_0==LPAREN||(LA164_0>=PLUS && LA164_0<=QUESTION)||(LA164_0>=STRING_LITERAL && LA164_0<=QUOTED_STRING_LITERAL)||LA164_0==MINUS||LA164_0==LCURLY||LA164_0==NUM_INT||(LA164_0>=TICKED_STRING_LITERAL && LA164_0<=NUM_FLOAT)) ) {
                alt164=1;
            }
            switch (alt164) {
                case 1 :
                    // EsperEPL2Grammar.g:1170:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7136);
                    expression402=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression402.getTree());
                    // EsperEPL2Grammar.g:1170:23: ( COMMA expression )*
                    loop163:
                    do {
                        int alt163=2;
                        int LA163_0 = input.LA(1);

                        if ( (LA163_0==COMMA) ) {
                            alt163=1;
                        }


                        switch (alt163) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1170:24: COMMA expression
                    	    {
                    	    COMMA403=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7139); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA403);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression7141);
                    	    expression404=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression404.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop163;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY405=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7148); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY405);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1171:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1171:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1171:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1174:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM406=null;
        Token LPAREN407=null;
        Token ALL408=null;
        Token DISTINCT409=null;
        Token RPAREN411=null;
        Token AVG412=null;
        Token LPAREN413=null;
        Token ALL414=null;
        Token DISTINCT415=null;
        Token RPAREN417=null;
        Token COUNT418=null;
        Token LPAREN419=null;
        Token ALL420=null;
        Token DISTINCT421=null;
        Token STAR423=null;
        Token RPAREN424=null;
        Token MEDIAN425=null;
        Token LPAREN426=null;
        Token ALL427=null;
        Token DISTINCT428=null;
        Token RPAREN430=null;
        Token STDDEV431=null;
        Token LPAREN432=null;
        Token ALL433=null;
        Token DISTINCT434=null;
        Token RPAREN436=null;
        Token AVEDEV437=null;
        Token LPAREN438=null;
        Token ALL439=null;
        Token DISTINCT440=null;
        Token RPAREN442=null;
        Token COALESCE445=null;
        Token LPAREN446=null;
        Token COMMA448=null;
        Token COMMA450=null;
        Token RPAREN452=null;
        Token PREVIOUS453=null;
        Token LPAREN454=null;
        Token COMMA456=null;
        Token RPAREN458=null;
        Token PRIOR459=null;
        Token LPAREN460=null;
        Token NUM_INT461=null;
        Token COMMA462=null;
        Token RPAREN464=null;
        Token INSTANCEOF465=null;
        Token LPAREN466=null;
        Token COMMA468=null;
        Token COMMA470=null;
        Token RPAREN472=null;
        Token CAST473=null;
        Token LPAREN474=null;
        Token COMMA476=null;
        Token AS477=null;
        Token RPAREN479=null;
        Token EXISTS480=null;
        Token LPAREN481=null;
        Token RPAREN483=null;
        Token CURRENT_TIMESTAMP484=null;
        Token LPAREN485=null;
        Token RPAREN486=null;
        EsperEPL2GrammarParser.expression_return expression410 = null;

        EsperEPL2GrammarParser.expression_return expression416 = null;

        EsperEPL2GrammarParser.expression_return expression422 = null;

        EsperEPL2GrammarParser.expression_return expression429 = null;

        EsperEPL2GrammarParser.expression_return expression435 = null;

        EsperEPL2GrammarParser.expression_return expression441 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation443 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation444 = null;

        EsperEPL2GrammarParser.expression_return expression447 = null;

        EsperEPL2GrammarParser.expression_return expression449 = null;

        EsperEPL2GrammarParser.expression_return expression451 = null;

        EsperEPL2GrammarParser.expression_return expression455 = null;

        EsperEPL2GrammarParser.expression_return expression457 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty463 = null;

        EsperEPL2GrammarParser.expression_return expression467 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier469 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier471 = null;

        EsperEPL2GrammarParser.expression_return expression475 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier478 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty482 = null;


        CommonTree SUM406_tree=null;
        CommonTree LPAREN407_tree=null;
        CommonTree ALL408_tree=null;
        CommonTree DISTINCT409_tree=null;
        CommonTree RPAREN411_tree=null;
        CommonTree AVG412_tree=null;
        CommonTree LPAREN413_tree=null;
        CommonTree ALL414_tree=null;
        CommonTree DISTINCT415_tree=null;
        CommonTree RPAREN417_tree=null;
        CommonTree COUNT418_tree=null;
        CommonTree LPAREN419_tree=null;
        CommonTree ALL420_tree=null;
        CommonTree DISTINCT421_tree=null;
        CommonTree STAR423_tree=null;
        CommonTree RPAREN424_tree=null;
        CommonTree MEDIAN425_tree=null;
        CommonTree LPAREN426_tree=null;
        CommonTree ALL427_tree=null;
        CommonTree DISTINCT428_tree=null;
        CommonTree RPAREN430_tree=null;
        CommonTree STDDEV431_tree=null;
        CommonTree LPAREN432_tree=null;
        CommonTree ALL433_tree=null;
        CommonTree DISTINCT434_tree=null;
        CommonTree RPAREN436_tree=null;
        CommonTree AVEDEV437_tree=null;
        CommonTree LPAREN438_tree=null;
        CommonTree ALL439_tree=null;
        CommonTree DISTINCT440_tree=null;
        CommonTree RPAREN442_tree=null;
        CommonTree COALESCE445_tree=null;
        CommonTree LPAREN446_tree=null;
        CommonTree COMMA448_tree=null;
        CommonTree COMMA450_tree=null;
        CommonTree RPAREN452_tree=null;
        CommonTree PREVIOUS453_tree=null;
        CommonTree LPAREN454_tree=null;
        CommonTree COMMA456_tree=null;
        CommonTree RPAREN458_tree=null;
        CommonTree PRIOR459_tree=null;
        CommonTree LPAREN460_tree=null;
        CommonTree NUM_INT461_tree=null;
        CommonTree COMMA462_tree=null;
        CommonTree RPAREN464_tree=null;
        CommonTree INSTANCEOF465_tree=null;
        CommonTree LPAREN466_tree=null;
        CommonTree COMMA468_tree=null;
        CommonTree COMMA470_tree=null;
        CommonTree RPAREN472_tree=null;
        CommonTree CAST473_tree=null;
        CommonTree LPAREN474_tree=null;
        CommonTree COMMA476_tree=null;
        CommonTree AS477_tree=null;
        CommonTree RPAREN479_tree=null;
        CommonTree EXISTS480_tree=null;
        CommonTree LPAREN481_tree=null;
        CommonTree RPAREN483_tree=null;
        CommonTree CURRENT_TIMESTAMP484_tree=null;
        CommonTree LPAREN485_tree=null;
        CommonTree RPAREN486_tree=null;

        try {
            // EsperEPL2Grammar.g:1175:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt177=15;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt177=1;
                }
                break;
            case AVG:
                {
                alt177=2;
                }
                break;
            case COUNT:
                {
                alt177=3;
                }
                break;
            case MEDIAN:
                {
                alt177=4;
                }
                break;
            case STDDEV:
                {
                alt177=5;
                }
                break;
            case AVEDEV:
                {
                alt177=6;
                }
                break;
            case FIRST:
                {
                alt177=7;
                }
                break;
            case LAST:
                {
                alt177=8;
                }
                break;
            case COALESCE:
                {
                alt177=9;
                }
                break;
            case PREVIOUS:
                {
                alt177=10;
                }
                break;
            case PRIOR:
                {
                alt177=11;
                }
                break;
            case INSTANCEOF:
                {
                alt177=12;
                }
                break;
            case CAST:
                {
                alt177=13;
                }
                break;
            case EXISTS:
                {
                alt177=14;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt177=15;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }

            switch (alt177) {
                case 1 :
                    // EsperEPL2Grammar.g:1175:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM406=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM406_tree = (CommonTree)adaptor.create(SUM406);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM406_tree, root_0);
                    }
                    LPAREN407=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7174); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1175:17: ( ALL | DISTINCT )?
                    int alt165=3;
                    int LA165_0 = input.LA(1);

                    if ( (LA165_0==ALL) ) {
                        alt165=1;
                    }
                    else if ( (LA165_0==DISTINCT) ) {
                        alt165=2;
                    }
                    switch (alt165) {
                        case 1 :
                            // EsperEPL2Grammar.g:1175:18: ALL
                            {
                            ALL408=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7178); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1175:25: DISTINCT
                            {
                            DISTINCT409=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7183); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT409_tree = (CommonTree)adaptor.create(DISTINCT409);
                            adaptor.addChild(root_0, DISTINCT409_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7187);
                    expression410=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression410.getTree());
                    RPAREN411=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7189); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1176:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG412=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7195); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG412_tree = (CommonTree)adaptor.create(AVG412);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG412_tree, root_0);
                    }
                    LPAREN413=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7198); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1176:17: ( ALL | DISTINCT )?
                    int alt166=3;
                    int LA166_0 = input.LA(1);

                    if ( (LA166_0==ALL) ) {
                        alt166=1;
                    }
                    else if ( (LA166_0==DISTINCT) ) {
                        alt166=2;
                    }
                    switch (alt166) {
                        case 1 :
                            // EsperEPL2Grammar.g:1176:18: ALL
                            {
                            ALL414=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7202); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1176:25: DISTINCT
                            {
                            DISTINCT415=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7207); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT415_tree = (CommonTree)adaptor.create(DISTINCT415);
                            adaptor.addChild(root_0, DISTINCT415_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7211);
                    expression416=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression416.getTree());
                    RPAREN417=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7213); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1177:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT418=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7219); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT418_tree = (CommonTree)adaptor.create(COUNT418);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT418_tree, root_0);
                    }
                    LPAREN419=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7222); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1178:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt168=2;
                    int LA168_0 = input.LA(1);

                    if ( (LA168_0==WINDOW||LA168_0==ESCAPE||(LA168_0>=NOT_EXPR && LA168_0<=EVERY_EXPR)||(LA168_0>=SUM && LA168_0<=COUNT)||LA168_0==CASE||LA168_0==OUTER||(LA168_0>=JOIN && LA168_0<=FULL)||(LA168_0>=DISTINCT && LA168_0<=ALL)||(LA168_0>=EVENTS && LA168_0<=LAST)||(LA168_0>=UNIDIRECTIONAL && LA168_0<=CURRENT_TIMESTAMP)||LA168_0==SNAPSHOT||(LA168_0>=VARIABLE && LA168_0<=AT)||(LA168_0>=BOOLEAN_TRUE && LA168_0<=VALUE_NULL)||(LA168_0>=DEFINE && LA168_0<=MATCHES)||LA168_0==NUM_DOUBLE||LA168_0==IDENT||LA168_0==LPAREN||(LA168_0>=PLUS && LA168_0<=QUESTION)||(LA168_0>=STRING_LITERAL && LA168_0<=QUOTED_STRING_LITERAL)||LA168_0==MINUS||LA168_0==LCURLY||LA168_0==NUM_INT||(LA168_0>=TICKED_STRING_LITERAL && LA168_0<=NUM_FLOAT)) ) {
                        alt168=1;
                    }
                    else if ( (LA168_0==STAR) ) {
                        alt168=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 168, 0, input);

                        throw nvae;
                    }
                    switch (alt168) {
                        case 1 :
                            // EsperEPL2Grammar.g:1179:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1179:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1179:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1179:5: ( ALL | DISTINCT )?
                            int alt167=3;
                            int LA167_0 = input.LA(1);

                            if ( (LA167_0==ALL) ) {
                                alt167=1;
                            }
                            else if ( (LA167_0==DISTINCT) ) {
                                alt167=2;
                            }
                            switch (alt167) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1179:6: ALL
                                    {
                                    ALL420=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7234); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1179:13: DISTINCT
                                    {
                                    DISTINCT421=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7239); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT421_tree = (CommonTree)adaptor.create(DISTINCT421);
                                    adaptor.addChild(root_0, DISTINCT421_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc7243);
                            expression422=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression422.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1181:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1181:4: ( STAR )
                            // EsperEPL2Grammar.g:1181:5: STAR
                            {
                            STAR423=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc7254); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN424=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7265); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1184:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN425=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7271); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN425_tree = (CommonTree)adaptor.create(MEDIAN425);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN425_tree, root_0);
                    }
                    LPAREN426=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7274); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1184:20: ( ALL | DISTINCT )?
                    int alt169=3;
                    int LA169_0 = input.LA(1);

                    if ( (LA169_0==ALL) ) {
                        alt169=1;
                    }
                    else if ( (LA169_0==DISTINCT) ) {
                        alt169=2;
                    }
                    switch (alt169) {
                        case 1 :
                            // EsperEPL2Grammar.g:1184:21: ALL
                            {
                            ALL427=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7278); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1184:28: DISTINCT
                            {
                            DISTINCT428=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7283); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT428_tree = (CommonTree)adaptor.create(DISTINCT428);
                            adaptor.addChild(root_0, DISTINCT428_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7287);
                    expression429=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression429.getTree());
                    RPAREN430=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7289); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1185:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV431=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7295); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV431_tree = (CommonTree)adaptor.create(STDDEV431);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV431_tree, root_0);
                    }
                    LPAREN432=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7298); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1185:20: ( ALL | DISTINCT )?
                    int alt170=3;
                    int LA170_0 = input.LA(1);

                    if ( (LA170_0==ALL) ) {
                        alt170=1;
                    }
                    else if ( (LA170_0==DISTINCT) ) {
                        alt170=2;
                    }
                    switch (alt170) {
                        case 1 :
                            // EsperEPL2Grammar.g:1185:21: ALL
                            {
                            ALL433=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7302); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1185:28: DISTINCT
                            {
                            DISTINCT434=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7307); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT434_tree = (CommonTree)adaptor.create(DISTINCT434);
                            adaptor.addChild(root_0, DISTINCT434_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7311);
                    expression435=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression435.getTree());
                    RPAREN436=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7313); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1186:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV437=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7319); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV437_tree = (CommonTree)adaptor.create(AVEDEV437);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV437_tree, root_0);
                    }
                    LPAREN438=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7322); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1186:20: ( ALL | DISTINCT )?
                    int alt171=3;
                    int LA171_0 = input.LA(1);

                    if ( (LA171_0==ALL) ) {
                        alt171=1;
                    }
                    else if ( (LA171_0==DISTINCT) ) {
                        alt171=2;
                    }
                    switch (alt171) {
                        case 1 :
                            // EsperEPL2Grammar.g:1186:21: ALL
                            {
                            ALL439=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7326); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1186:28: DISTINCT
                            {
                            DISTINCT440=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7331); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT440_tree = (CommonTree)adaptor.create(DISTINCT440);
                            adaptor.addChild(root_0, DISTINCT440_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7335);
                    expression441=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression441.getTree());
                    RPAREN442=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7337); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1187:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7343);
                    firstAggregation443=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation443.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1188:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7348);
                    lastAggregation444=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation444.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1189:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE445=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7353); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE445_tree = (CommonTree)adaptor.create(COALESCE445);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE445_tree, root_0);
                    }
                    LPAREN446=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7356); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7359);
                    expression447=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression447.getTree());
                    COMMA448=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7361); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7364);
                    expression449=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression449.getTree());
                    // EsperEPL2Grammar.g:1189:51: ( COMMA expression )*
                    loop172:
                    do {
                        int alt172=2;
                        int LA172_0 = input.LA(1);

                        if ( (LA172_0==COMMA) ) {
                            alt172=1;
                        }


                        switch (alt172) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1189:52: COMMA expression
                    	    {
                    	    COMMA450=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7367); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7370);
                    	    expression451=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression451.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop172;
                        }
                    } while (true);

                    RPAREN452=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7374); if (state.failed) return retval;

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1190:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS453=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7380); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS453_tree = (CommonTree)adaptor.create(PREVIOUS453);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS453_tree, root_0);
                    }
                    LPAREN454=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7383); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7386);
                    expression455=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression455.getTree());
                    // EsperEPL2Grammar.g:1190:33: ( COMMA expression )?
                    int alt173=2;
                    int LA173_0 = input.LA(1);

                    if ( (LA173_0==COMMA) ) {
                        alt173=1;
                    }
                    switch (alt173) {
                        case 1 :
                            // EsperEPL2Grammar.g:1190:34: COMMA expression
                            {
                            COMMA456=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7389); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7392);
                            expression457=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression457.getTree());

                            }
                            break;

                    }

                    RPAREN458=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7396); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1191:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR459=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7402); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR459_tree = (CommonTree)adaptor.create(PRIOR459);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR459_tree, root_0);
                    }
                    LPAREN460=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7405); if (state.failed) return retval;
                    NUM_INT461=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7408); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT461_tree = (CommonTree)adaptor.create(NUM_INT461);
                    adaptor.addChild(root_0, NUM_INT461_tree);
                    }
                    COMMA462=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7410); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7413);
                    eventProperty463=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty463.getTree());
                    RPAREN464=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7415); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1194:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF465=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7425); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF465_tree = (CommonTree)adaptor.create(INSTANCEOF465);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF465_tree, root_0);
                    }
                    LPAREN466=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7428); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7431);
                    expression467=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression467.getTree());
                    COMMA468=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7433); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7436);
                    classIdentifier469=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier469.getTree());
                    // EsperEPL2Grammar.g:1194:58: ( COMMA classIdentifier )*
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);

                        if ( (LA174_0==COMMA) ) {
                            alt174=1;
                        }


                        switch (alt174) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1194:59: COMMA classIdentifier
                    	    {
                    	    COMMA470=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7439); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7442);
                    	    classIdentifier471=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier471.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop174;
                        }
                    } while (true);

                    RPAREN472=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7446); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1195:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST473=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc7452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST473_tree = (CommonTree)adaptor.create(CAST473);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST473_tree, root_0);
                    }
                    LPAREN474=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7455); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7458);
                    expression475=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression475.getTree());
                    // EsperEPL2Grammar.g:1195:29: ( COMMA | AS )
                    int alt175=2;
                    int LA175_0 = input.LA(1);

                    if ( (LA175_0==COMMA) ) {
                        alt175=1;
                    }
                    else if ( (LA175_0==AS) ) {
                        alt175=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 175, 0, input);

                        throw nvae;
                    }
                    switch (alt175) {
                        case 1 :
                            // EsperEPL2Grammar.g:1195:30: COMMA
                            {
                            COMMA476=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7461); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1195:39: AS
                            {
                            AS477=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc7466); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7470);
                    classIdentifier478=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier478.getTree());
                    RPAREN479=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7472); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1196:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS480=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc7478); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS480_tree = (CommonTree)adaptor.create(EXISTS480);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS480_tree, root_0);
                    }
                    LPAREN481=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7481); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7484);
                    eventProperty482=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty482.getTree());
                    RPAREN483=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7486); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1197:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP484=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7492); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP484_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP484);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP484_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1197:23: ( LPAREN RPAREN )?
                    int alt176=2;
                    int LA176_0 = input.LA(1);

                    if ( (LA176_0==LPAREN) ) {
                        alt176=1;
                    }
                    switch (alt176) {
                        case 1 :
                            // EsperEPL2Grammar.g:1197:24: LPAREN RPAREN
                            {
                            LPAREN485=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7496); if (state.failed) return retval;
                            RPAREN486=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7499); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1200:1: firstAggregation : FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token FIRST487=null;
        Token LPAREN488=null;
        Token RPAREN490=null;
        EsperEPL2GrammarParser.expression_return expression489 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree FIRST487_tree=null;
        CommonTree LPAREN488_tree=null;
        CommonTree RPAREN490_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1201:2: ( FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( FIRST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1201:4: FIRST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            FIRST487=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation7514); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST487);

            LPAREN488=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation7516); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN488);

            // EsperEPL2Grammar.g:1201:17: (a= ALL | d= DISTINCT )?
            int alt178=3;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==ALL) ) {
                alt178=1;
            }
            else if ( (LA178_0==DISTINCT) ) {
                alt178=2;
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1201:18: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_firstAggregation7521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1201:26: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_firstAggregation7527); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_firstAggregation7531);
            expression489=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression489.getTree());
            RPAREN490=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation7533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN490);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1202:4: -> ^( FIRST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1202:7: ^( FIRST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1202:22: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1205:1: lastAggregation : LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token LAST491=null;
        Token LPAREN492=null;
        Token RPAREN494=null;
        EsperEPL2GrammarParser.expression_return expression493 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree LAST491_tree=null;
        CommonTree LPAREN492_tree=null;
        CommonTree RPAREN494_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1206:2: ( LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN -> ^( LAST_AGGREG ( $d)? expression ) )
            // EsperEPL2Grammar.g:1206:4: LAST LPAREN (a= ALL | d= DISTINCT )? expression RPAREN
            {
            LAST491=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation7559); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST491);

            LPAREN492=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation7561); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN492);

            // EsperEPL2Grammar.g:1206:16: (a= ALL | d= DISTINCT )?
            int alt179=3;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==ALL) ) {
                alt179=1;
            }
            else if ( (LA179_0==DISTINCT) ) {
                alt179=2;
            }
            switch (alt179) {
                case 1 :
                    // EsperEPL2Grammar.g:1206:17: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_lastAggregation7566); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1206:25: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_lastAggregation7572); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_lastAggregation7576);
            expression493=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression493.getTree());
            RPAREN494=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation7578); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN494);



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1207:4: -> ^( LAST_AGGREG ( $d)? expression )
            {
                // EsperEPL2Grammar.g:1207:7: ^( LAST_AGGREG ( $d)? expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                // EsperEPL2Grammar.g:1207:21: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1210:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX495=null;
        Token MIN496=null;
        Token LPAREN497=null;
        Token COMMA499=null;
        Token COMMA501=null;
        Token RPAREN503=null;
        EsperEPL2GrammarParser.expression_return expression498 = null;

        EsperEPL2GrammarParser.expression_return expression500 = null;

        EsperEPL2GrammarParser.expression_return expression502 = null;


        CommonTree MAX495_tree=null;
        CommonTree MIN496_tree=null;
        CommonTree LPAREN497_tree=null;
        CommonTree COMMA499_tree=null;
        CommonTree COMMA501_tree=null;
        CommonTree RPAREN503_tree=null;

        try {
            // EsperEPL2Grammar.g:1211:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1211:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1211:4: ( MAX | MIN )
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==MAX) ) {
                alt180=1;
            }
            else if ( (LA180_0==MIN) ) {
                alt180=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }
            switch (alt180) {
                case 1 :
                    // EsperEPL2Grammar.g:1211:5: MAX
                    {
                    MAX495=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc7605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX495_tree = (CommonTree)adaptor.create(MAX495);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX495_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1211:12: MIN
                    {
                    MIN496=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc7610); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN496_tree = (CommonTree)adaptor.create(MIN496);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN496_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN497=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc7614); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc7617);
            expression498=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression498.getTree());
            // EsperEPL2Grammar.g:1211:37: ( COMMA expression ( COMMA expression )* )?
            int alt182=2;
            int LA182_0 = input.LA(1);

            if ( (LA182_0==COMMA) ) {
                alt182=1;
            }
            switch (alt182) {
                case 1 :
                    // EsperEPL2Grammar.g:1211:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA499=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7620); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc7623);
                    expression500=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression500.getTree());
                    // EsperEPL2Grammar.g:1211:56: ( COMMA expression )*
                    loop181:
                    do {
                        int alt181=2;
                        int LA181_0 = input.LA(1);

                        if ( (LA181_0==COMMA) ) {
                            alt181=1;
                        }


                        switch (alt181) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1211:57: COMMA expression
                    	    {
                    	    COMMA501=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc7626); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc7629);
                    	    expression502=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression502.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop181;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN503=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc7636); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1214:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty504 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction505 = null;



        try {
            // EsperEPL2Grammar.g:1215:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt183=2;
            alt183 = dfa183.predict(input);
            switch (alt183) {
                case 1 :
                    // EsperEPL2Grammar.g:1215:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction7655);
                    eventProperty504=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty504.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1216:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction7660);
                    libFunction505=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction505.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1219:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT507=null;
        Token LPAREN509=null;
        Token RPAREN511=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy506 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent508 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs510 = null;


        CommonTree DOT507_tree=null;
        CommonTree LPAREN509_tree=null;
        CommonTree RPAREN511_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1220:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1220:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1220:4: ( classIdentifierNonGreedy DOT )?
            int alt184=2;
            int LA184_0 = input.LA(1);

            if ( (LA184_0==IDENT) ) {
                int LA184_1 = input.LA(2);

                if ( (LA184_1==DOT) ) {
                    alt184=1;
                }
            }
            else if ( (LA184_0==TICKED_STRING_LITERAL) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    // EsperEPL2Grammar.g:1220:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction7673);
                    classIdentifierNonGreedy506=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy506.getTree());
                    DOT507=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction7675); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT507);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction7679);
            funcIdent508=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent508.getTree());
            LPAREN509=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction7681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN509);

            // EsperEPL2Grammar.g:1220:53: ( libFunctionArgs )?
            int alt185=2;
            int LA185_0 = input.LA(1);

            if ( (LA185_0==WINDOW||LA185_0==ESCAPE||(LA185_0>=NOT_EXPR && LA185_0<=EVERY_EXPR)||(LA185_0>=SUM && LA185_0<=COUNT)||LA185_0==CASE||LA185_0==OUTER||(LA185_0>=JOIN && LA185_0<=FULL)||(LA185_0>=DISTINCT && LA185_0<=ALL)||(LA185_0>=EVENTS && LA185_0<=LAST)||(LA185_0>=UNIDIRECTIONAL && LA185_0<=CURRENT_TIMESTAMP)||LA185_0==SNAPSHOT||(LA185_0>=VARIABLE && LA185_0<=AT)||(LA185_0>=BOOLEAN_TRUE && LA185_0<=VALUE_NULL)||(LA185_0>=DEFINE && LA185_0<=MATCHES)||LA185_0==NUM_DOUBLE||LA185_0==IDENT||LA185_0==LPAREN||(LA185_0>=PLUS && LA185_0<=QUESTION)||(LA185_0>=STRING_LITERAL && LA185_0<=QUOTED_STRING_LITERAL)||LA185_0==MINUS||LA185_0==LCURLY||LA185_0==NUM_INT||(LA185_0>=TICKED_STRING_LITERAL && LA185_0<=NUM_FLOAT)) ) {
                alt185=1;
            }
            switch (alt185) {
                case 1 :
                    // EsperEPL2Grammar.g:1220:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction7684);
                    libFunctionArgs510=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs510.getTree());

                    }
                    break;

            }

            RPAREN511=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction7688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN511);



            // AST REWRITE
            // elements: funcIdent, classIdentifierNonGreedy, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1221:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1221:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1221:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1221:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1224:1: funcIdent : ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        Token IDENT512=null;

        CommonTree max_tree=null;
        CommonTree min_tree=null;
        CommonTree IDENT512_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1225:2: ( IDENT | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt186=3;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt186=1;
                }
                break;
            case MAX:
                {
                alt186=2;
                }
                break;
            case MIN:
                {
                alt186=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 186, 0, input);

                throw nvae;
            }

            switch (alt186) {
                case 1 :
                    // EsperEPL2Grammar.g:1225:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT512=(Token)match(input,IDENT,FOLLOW_IDENT_in_funcIdent7718); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT512_tree = (CommonTree)adaptor.create(IDENT512);
                    adaptor.addChild(root_0, IDENT512_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1226:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent7725); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1226:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1227:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent7737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1227:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1230:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL513=null;
        Token DISTINCT514=null;
        Token COMMA516=null;
        EsperEPL2GrammarParser.expression_return expression515 = null;

        EsperEPL2GrammarParser.expression_return expression517 = null;


        CommonTree ALL513_tree=null;
        CommonTree DISTINCT514_tree=null;
        CommonTree COMMA516_tree=null;

        try {
            // EsperEPL2Grammar.g:1231:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1231:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1231:4: ( ALL | DISTINCT )?
            int alt187=3;
            int LA187_0 = input.LA(1);

            if ( (LA187_0==ALL) ) {
                alt187=1;
            }
            else if ( (LA187_0==DISTINCT) ) {
                alt187=2;
            }
            switch (alt187) {
                case 1 :
                    // EsperEPL2Grammar.g:1231:5: ALL
                    {
                    ALL513=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs7755); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1231:12: DISTINCT
                    {
                    DISTINCT514=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs7760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT514_tree = (CommonTree)adaptor.create(DISTINCT514);
                    adaptor.addChild(root_0, DISTINCT514_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs7764);
            expression515=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression515.getTree());
            // EsperEPL2Grammar.g:1231:34: ( COMMA expression )*
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);

                if ( (LA188_0==COMMA) ) {
                    alt188=1;
                }


                switch (alt188) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1231:35: COMMA expression
            	    {
            	    COMMA516=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs7767); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs7770);
            	    expression517=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression517.getTree());

            	    }
            	    break;

            	default :
            	    break loop188;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1234:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR519=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr518 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr520 = null;


        CommonTree AND_EXPR519_tree=null;

        try {
            // EsperEPL2Grammar.g:1235:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1235:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList7784);
            concatenationExpr518=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr518.getTree());
            AND_EXPR519=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList7786); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList7789);
            concatenationExpr520=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr520.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1244:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression521 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1247:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1247:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression7817);
            followedByExpression521=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression521.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1250:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression522 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression523 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1251:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1251:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression7829);
            orExpression522=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression522.getTree());
            // EsperEPL2Grammar.g:1251:17: (f= FOLLOWED_BY orExpression )*
            loop189:
            do {
                int alt189=2;
                int LA189_0 = input.LA(1);

                if ( (LA189_0==FOLLOWED_BY) ) {
                    alt189=1;
                }


                switch (alt189) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1251:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression7834); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression7836);
            	    orExpression523=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression523.getTree());

            	    }
            	    break;

            	default :
            	    break loop189;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1252:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1252:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1253:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1256:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression524 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression525 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1257:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1257:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression7875);
            andExpression524=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression524.getTree());
            // EsperEPL2Grammar.g:1257:18: (o= OR_EXPR andExpression )*
            loop190:
            do {
                int alt190=2;
                int LA190_0 = input.LA(1);

                if ( (LA190_0==OR_EXPR) ) {
                    alt190=1;
                }


                switch (alt190) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1257:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression7880); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression7882);
            	    andExpression525=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression525.getTree());

            	    }
            	    break;

            	default :
            	    break loop190;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, OR_EXPR, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1258:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1258:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1259:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1262:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression526 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression527 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1263:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1263:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression7914);
            matchUntilExpression526=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression526.getTree());
            // EsperEPL2Grammar.g:1263:25: (a= AND_EXPR matchUntilExpression )*
            loop191:
            do {
                int alt191=2;
                int LA191_0 = input.LA(1);

                if ( (LA191_0==AND_EXPR) ) {
                    alt191=1;
                }


                switch (alt191) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1263:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression7919); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression7921);
            	    matchUntilExpression527=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression527.getTree());

            	    }
            	    break;

            	default :
            	    break loop191;
                }
            } while (true);



            // AST REWRITE
            // elements: AND_EXPR, matchUntilExpression, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1264:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1264:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1265:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1268:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression528 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression529 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1269:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1269:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1269:4: (r= matchUntilRange )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==LBRACK) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1269:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression7956);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression7960);
            qualifyExpression528=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression528.getTree());
            // EsperEPL2Grammar.g:1269:43: (a= UNTIL qualifyExpression )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==UNTIL) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1269:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression7965); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression7967);
                    qualifyExpression529=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression529.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: matchUntilRange, qualifyExpression, matchUntilRange, qualifyExpression, qualifyExpression, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1270:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1270:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1271:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1271:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1272:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1272:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1273:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1276:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList530 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix531 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1277:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1277:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1277:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( ((LA196_0>=NOT_EXPR && LA196_0<=EVERY_DISTINCT_EXPR)) ) {
                alt196=1;
            }
            switch (alt196) {
                case 1 :
                    // EsperEPL2Grammar.g:1277:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1277:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt194=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt194=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt194=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt194=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 194, 0, input);

                        throw nvae;
                    }

                    switch (alt194) {
                        case 1 :
                            // EsperEPL2Grammar.g:1277:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression8032); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1277:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression8038); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1277:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8044); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression8046);
                            distinctExpressionList530=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList530.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1277:80: (r= matchUntilRange )?
                    int alt195=2;
                    int LA195_0 = input.LA(1);

                    if ( (LA195_0==LBRACK) ) {
                        alt195=1;
                    }
                    switch (alt195) {
                        case 1 :
                            // EsperEPL2Grammar.g:1277:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression8052);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression8061);
            guardPostFix531=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix531.getTree());


            // AST REWRITE
            // elements: EVERY_EXPR, guardPostFix, guardPostFix, guardPostFix, guardPostFix, distinctExpressionList, guardPostFix, guardPostFix, guardPostFix, EVERY_DISTINCT_EXPR, matchUntilRange, EVERY_DISTINCT_EXPR, matchUntilRange, distinctExpressionList, matchUntilRange, EVERY_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1279:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1279:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1280:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1280:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1281:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1281:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1282:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1282:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1282:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1283:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1283:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1283:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1284:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1284:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1284:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1285:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1288:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN532=null;
        Token COMMA534=null;
        Token RPAREN536=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom533 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom535 = null;


        CommonTree LPAREN532_tree=null;
        CommonTree COMMA534_tree=null;
        CommonTree RPAREN536_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1289:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1289:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN532=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList8176); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN532);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8178);
            distinctExpressionAtom533=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom533.getTree());
            // EsperEPL2Grammar.g:1289:34: ( COMMA distinctExpressionAtom )*
            loop197:
            do {
                int alt197=2;
                int LA197_0 = input.LA(1);

                if ( (LA197_0==COMMA) ) {
                    alt197=1;
                }


                switch (alt197) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1289:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA534=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList8181); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA534);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8183);
            	    distinctExpressionAtom535=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom535.getTree());

            	    }
            	    break;

            	default :
            	    break loop197;
                }
            } while (true);

            RPAREN536=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList8187); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN536);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1290:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1290:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1293:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression537 = null;



        try {
            // EsperEPL2Grammar.g:1294:2: ( expression )
            // EsperEPL2Grammar.g:1294:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8210);
            expression537=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression537.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1297:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token w=null;
        Token RPAREN540=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression538 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression539 = null;

        EsperEPL2GrammarParser.guardExpression_return guardExpression541 = null;


        CommonTree l_tree=null;
        CommonTree w_tree=null;
        CommonTree RPAREN540_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1298:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )? -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1298:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) (w= WHERE guardExpression )?
            {
            // EsperEPL2Grammar.g:1298:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==IDENT||LA198_0==TICKED_STRING_LITERAL) ) {
                alt198=1;
            }
            else if ( (LA198_0==LPAREN) ) {
                alt198=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 198, 0, input);

                throw nvae;
            }
            switch (alt198) {
                case 1 :
                    // EsperEPL2Grammar.g:1298:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix8225);
                    atomicExpression538=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression538.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1298:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix8231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix8233);
                    patternExpression539=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression539.getTree());
                    RPAREN540=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix8235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN540);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1298:59: (w= WHERE guardExpression )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==WHERE) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    // EsperEPL2Grammar.g:1298:60: w= WHERE guardExpression
                    {
                    w=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix8241); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(w);

                    pushFollow(FOLLOW_guardExpression_in_guardPostFix8243);
                    guardExpression541=guardExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardExpression.add(guardExpression541.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: atomicExpression, patternExpression, patternExpression, guardExpression, atomicExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1299:3: -> {$w != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
            if (w != null) {
                // EsperEPL2Grammar.g:1299:20: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1299:33: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1299:51: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1300:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1300:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1300:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1303:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression542 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression543 = null;



        try {
            // EsperEPL2Grammar.g:1304:2: ( observerExpression | patternFilterExpression )
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==IDENT) ) {
                int LA200_1 = input.LA(2);

                if ( (LA200_1==COLON) ) {
                    alt200=1;
                }
                else if ( (LA200_1==EOF||(LA200_1>=OR_EXPR && LA200_1<=AND_EXPR)||LA200_1==WHERE||LA200_1==UNTIL||(LA200_1>=EQUALS && LA200_1<=RPAREN)||(LA200_1>=LBRACK && LA200_1<=RBRACK)||LA200_1==FOLLOWED_BY) ) {
                    alt200=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 200, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA200_0==TICKED_STRING_LITERAL) ) {
                alt200=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 200, 0, input);

                throw nvae;
            }
            switch (alt200) {
                case 1 :
                    // EsperEPL2Grammar.g:1304:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8285);
                    observerExpression542=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression542.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1304:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8289);
                    patternFilterExpression543=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression543.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1307:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON544=null;
        Token LPAREN545=null;
        Token RPAREN547=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList546 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON544_tree=null;
        CommonTree LPAREN545_tree=null;
        CommonTree RPAREN547_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1308:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1308:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8304); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON544=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8306); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON544);

            // EsperEPL2Grammar.g:1308:19: (nm= IDENT | a= AT )
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==IDENT) ) {
                alt201=1;
            }
            else if ( (LA201_0==AT) ) {
                alt201=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }
            switch (alt201) {
                case 1 :
                    // EsperEPL2Grammar.g:1308:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8311); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1308:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN545=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8320); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN545);

            // EsperEPL2Grammar.g:1308:44: ( expressionWithTimeList )?
            int alt202=2;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==WINDOW||LA202_0==ESCAPE||(LA202_0>=NOT_EXPR && LA202_0<=EVERY_EXPR)||(LA202_0>=SUM && LA202_0<=COUNT)||LA202_0==CASE||LA202_0==OUTER||(LA202_0>=JOIN && LA202_0<=FULL)||(LA202_0>=EVENTS && LA202_0<=LAST)||(LA202_0>=UNIDIRECTIONAL && LA202_0<=CURRENT_TIMESTAMP)||LA202_0==SNAPSHOT||(LA202_0>=VARIABLE && LA202_0<=AT)||(LA202_0>=BOOLEAN_TRUE && LA202_0<=VALUE_NULL)||(LA202_0>=DEFINE && LA202_0<=MATCHES)||LA202_0==NUM_DOUBLE||LA202_0==IDENT||LA202_0==LPAREN||LA202_0==STAR||(LA202_0>=PLUS && LA202_0<=LBRACK)||(LA202_0>=STRING_LITERAL && LA202_0<=QUOTED_STRING_LITERAL)||LA202_0==MINUS||LA202_0==LCURLY||LA202_0==NUM_INT||(LA202_0>=TICKED_STRING_LITERAL && LA202_0<=NUM_FLOAT)) ) {
                alt202=1;
            }
            switch (alt202) {
                case 1 :
                    // EsperEPL2Grammar.g:1308:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8322);
                    expressionWithTimeList546=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList546.getTree());

                    }
                    break;

            }

            RPAREN547=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8325); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN547);



            // AST REWRITE
            // elements: expressionWithTimeList, ns, expressionWithTimeList, IDENT, ns, nm
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1309:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1309:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1309:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1309:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1310:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1310:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1310:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardExpression"
    // EsperEPL2Grammar.g:1313:1: guardExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardExpression_return guardExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardExpression_return retval = new EsperEPL2GrammarParser.guardExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT548=null;
        Token COLON549=null;
        Token IDENT550=null;
        Token LPAREN551=null;
        Token RPAREN553=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList552 = null;


        CommonTree IDENT548_tree=null;
        CommonTree COLON549_tree=null;
        CommonTree IDENT550_tree=null;
        CommonTree LPAREN551_tree=null;
        CommonTree RPAREN553_tree=null;

        try {
            // EsperEPL2Grammar.g:1314:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1314:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT548=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8374); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT548_tree = (CommonTree)adaptor.create(IDENT548);
            adaptor.addChild(root_0, IDENT548_tree);
            }
            COLON549=(Token)match(input,COLON,FOLLOW_COLON_in_guardExpression8376); if (state.failed) return retval;
            IDENT550=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardExpression8379); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT550_tree = (CommonTree)adaptor.create(IDENT550);
            adaptor.addChild(root_0, IDENT550_tree);
            }
            LPAREN551=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardExpression8381); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1314:31: ( expressionWithTimeList )?
            int alt203=2;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==WINDOW||LA203_0==ESCAPE||(LA203_0>=NOT_EXPR && LA203_0<=EVERY_EXPR)||(LA203_0>=SUM && LA203_0<=COUNT)||LA203_0==CASE||LA203_0==OUTER||(LA203_0>=JOIN && LA203_0<=FULL)||(LA203_0>=EVENTS && LA203_0<=LAST)||(LA203_0>=UNIDIRECTIONAL && LA203_0<=CURRENT_TIMESTAMP)||LA203_0==SNAPSHOT||(LA203_0>=VARIABLE && LA203_0<=AT)||(LA203_0>=BOOLEAN_TRUE && LA203_0<=VALUE_NULL)||(LA203_0>=DEFINE && LA203_0<=MATCHES)||LA203_0==NUM_DOUBLE||LA203_0==IDENT||LA203_0==LPAREN||LA203_0==STAR||(LA203_0>=PLUS && LA203_0<=LBRACK)||(LA203_0>=STRING_LITERAL && LA203_0<=QUOTED_STRING_LITERAL)||LA203_0==MINUS||LA203_0==LCURLY||LA203_0==NUM_INT||(LA203_0>=TICKED_STRING_LITERAL && LA203_0<=NUM_FLOAT)) ) {
                alt203=1;
            }
            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1314:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardExpression8385);
                    expressionWithTimeList552=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList552.getTree());

                    }
                    break;

            }

            RPAREN553=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardExpression8389); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1318:1: matchUntilRange : LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token d1=null;
        Token r=null;
        Token c1=null;
        Token db=null;
        Token db2=null;
        Token db3=null;
        Token LBRACK554=null;
        Token DOT555=null;
        Token DOT556=null;
        Token DOT557=null;
        Token DOT558=null;
        Token RBRACK559=null;

        CommonTree l_tree=null;
        CommonTree d1_tree=null;
        CommonTree r_tree=null;
        CommonTree c1_tree=null;
        CommonTree db_tree=null;
        CommonTree db2_tree=null;
        CommonTree db3_tree=null;
        CommonTree LBRACK554_tree=null;
        CommonTree DOT555_tree=null;
        CommonTree DOT556_tree=null;
        CommonTree DOT557_tree=null;
        CommonTree DOT558_tree=null;
        CommonTree RBRACK559_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1319:2: ( LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l) -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r) -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l) -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r) -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db) -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2) -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3) -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r) -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db) )
            // EsperEPL2Grammar.g:1319:4: LBRACK (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE ) RBRACK
            {
            LBRACK554=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange8403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK554);

            // EsperEPL2Grammar.g:1319:11: (l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )? | db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )? | DOT DOT r= NUM_INT | DOT db3= NUM_DOUBLE )
            int alt208=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt208=1;
                }
                break;
            case NUM_DOUBLE:
                {
                alt208=2;
                }
                break;
            case DOT:
                {
                int LA208_3 = input.LA(2);

                if ( (LA208_3==DOT) ) {
                    alt208=3;
                }
                else if ( (LA208_3==NUM_DOUBLE) ) {
                    alt208=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 208, 3, input);

                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 208, 0, input);

                throw nvae;
            }

            switch (alt208) {
                case 1 :
                    // EsperEPL2Grammar.g:1320:4: l= NUM_INT ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    {
                    l=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8412); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(l);

                    // EsperEPL2Grammar.g:1320:14: ( (d1= DOT DOT (r= NUM_INT )? ) | (c1= COLON r= NUM_INT ) )?
                    int alt205=3;
                    int LA205_0 = input.LA(1);

                    if ( (LA205_0==DOT) ) {
                        alt205=1;
                    }
                    else if ( (LA205_0==COLON) ) {
                        alt205=2;
                    }
                    switch (alt205) {
                        case 1 :
                            // EsperEPL2Grammar.g:1320:17: (d1= DOT DOT (r= NUM_INT )? )
                            {
                            // EsperEPL2Grammar.g:1320:17: (d1= DOT DOT (r= NUM_INT )? )
                            // EsperEPL2Grammar.g:1320:18: d1= DOT DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8420); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            DOT555=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8422); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(DOT555);

                            // EsperEPL2Grammar.g:1320:30: (r= NUM_INT )?
                            int alt204=2;
                            int LA204_0 = input.LA(1);

                            if ( (LA204_0==NUM_INT) ) {
                                alt204=1;
                            }
                            switch (alt204) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1320:30: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8426); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1321:17: (c1= COLON r= NUM_INT )
                            {
                            // EsperEPL2Grammar.g:1321:17: (c1= COLON r= NUM_INT )
                            // EsperEPL2Grammar.g:1321:18: c1= COLON r= NUM_INT
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange8450); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8454); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1323:8: db= NUM_DOUBLE (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    {
                    db=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8476); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db);

                    // EsperEPL2Grammar.g:1323:22: (d1= DOT (r= NUM_INT )? | db2= NUM_DOUBLE )?
                    int alt207=3;
                    int LA207_0 = input.LA(1);

                    if ( (LA207_0==DOT) ) {
                        alt207=1;
                    }
                    else if ( (LA207_0==NUM_DOUBLE) ) {
                        alt207=2;
                    }
                    switch (alt207) {
                        case 1 :
                            // EsperEPL2Grammar.g:1324:27: d1= DOT (r= NUM_INT )?
                            {
                            d1=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8508); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d1);

                            // EsperEPL2Grammar.g:1324:35: (r= NUM_INT )?
                            int alt206=2;
                            int LA206_0 = input.LA(1);

                            if ( (LA206_0==NUM_INT) ) {
                                alt206=1;
                            }
                            switch (alt206) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1324:35: r= NUM_INT
                                    {
                                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8512); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                                    }
                                    break;

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1326:27: db2= NUM_DOUBLE
                            {
                            db2=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8572); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db2);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1328:8: DOT DOT r= NUM_INT
                    {
                    DOT556=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT556);

                    DOT557=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8611); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT557);

                    r=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_matchUntilRange8615); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(r);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1329:8: DOT db3= NUM_DOUBLE
                    {
                    DOT558=(Token)match(input,DOT,FOLLOW_DOT_in_matchUntilRange8624); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT558);

                    db3=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_matchUntilRange8628); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(db3);


                    }
                    break;

            }

            RBRACK559=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange8639); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK559);



            // AST REWRITE
            // elements: l, l, l, r, db, r, r, db, db, db3, r, l, db, db2
            // token labels: db, r, l, db2, db3
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_db=new RewriteRuleTokenStream(adaptor,"token db",db);
            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
            RewriteRuleTokenStream stream_db2=new RewriteRuleTokenStream(adaptor,"token db2",db2);
            RewriteRuleTokenStream stream_db3=new RewriteRuleTokenStream(adaptor,"token db3",db3);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1332:3: -> {$l != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1332:47: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1333:3: -> {$l != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
            if (l != null && d1 != null) {
                // EsperEPL2Grammar.g:1333:34: ^( MATCH_UNTIL_RANGE_HALFOPEN $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1334:3: -> {$l != null && c1 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
            if (l != null && c1 != null) {
                // EsperEPL2Grammar.g:1334:34: ^( MATCH_UNTIL_RANGE_CLOSED $l $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1335:3: -> {$l != null}? ^( MATCH_UNTIL_RANGE_BOUNDED $l)
            if (l != null) {
                // EsperEPL2Grammar.g:1335:20: ^( MATCH_UNTIL_RANGE_BOUNDED $l)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_l.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1336:3: -> {$db != null && d1 != null && r != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
            if (db != null && d1 != null && r != null) {
                // EsperEPL2Grammar.g:1336:48: ^( MATCH_UNTIL_RANGE_CLOSED $db $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1337:3: -> {$db != null && d1 != null}? ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
            if (db != null && d1 != null) {
                // EsperEPL2Grammar.g:1337:35: ^( MATCH_UNTIL_RANGE_HALFOPEN $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1338:3: -> {$db != null && db2 != null}? ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
            if (db != null && db2 != null) {
                // EsperEPL2Grammar.g:1338:36: ^( MATCH_UNTIL_RANGE_CLOSED $db $db2)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());
                adaptor.addChild(root_1, stream_db2.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1339:3: -> {$db3 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
            if (db3 != null) {
                // EsperEPL2Grammar.g:1339:22: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db3)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db3.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1340:3: -> {$r != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
            if (r != null) {
                // EsperEPL2Grammar.g:1340:20: ^( MATCH_UNTIL_RANGE_HALFCLOSED $r)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_r.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1341:3: -> ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
            {
                // EsperEPL2Grammar.g:1341:6: ^( MATCH_UNTIL_RANGE_HALFCLOSED $db)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_db.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1349:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS560=null;
        Token LPAREN562=null;
        Token RPAREN564=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier561 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList563 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression565 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS560_tree=null;
        CommonTree LPAREN562_tree=null;
        CommonTree RPAREN564_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1352:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1352:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1352:9: (i= IDENT EQUALS )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==IDENT) ) {
                int LA209_1 = input.LA(2);

                if ( (LA209_1==EQUALS) ) {
                    alt209=1;
                }
            }
            switch (alt209) {
                case 1 :
                    // EsperEPL2Grammar.g:1352:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression8824); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS560=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression8826); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS560);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression8835);
            classIdentifier561=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier561.getTree());
            // EsperEPL2Grammar.g:1354:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( (LA211_0==LPAREN) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // EsperEPL2Grammar.g:1354:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN562=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression8846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN562);

                    // EsperEPL2Grammar.g:1354:17: ( expressionList )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==WINDOW||LA210_0==ESCAPE||(LA210_0>=NOT_EXPR && LA210_0<=EVERY_EXPR)||(LA210_0>=SUM && LA210_0<=COUNT)||LA210_0==CASE||LA210_0==OUTER||(LA210_0>=JOIN && LA210_0<=FULL)||(LA210_0>=EVENTS && LA210_0<=LAST)||(LA210_0>=UNIDIRECTIONAL && LA210_0<=CURRENT_TIMESTAMP)||LA210_0==SNAPSHOT||(LA210_0>=VARIABLE && LA210_0<=AT)||(LA210_0>=BOOLEAN_TRUE && LA210_0<=VALUE_NULL)||(LA210_0>=DEFINE && LA210_0<=MATCHES)||LA210_0==NUM_DOUBLE||LA210_0==IDENT||LA210_0==LPAREN||(LA210_0>=PLUS && LA210_0<=QUESTION)||(LA210_0>=STRING_LITERAL && LA210_0<=QUOTED_STRING_LITERAL)||LA210_0==MINUS||LA210_0==LCURLY||LA210_0==NUM_INT||(LA210_0>=TICKED_STRING_LITERAL && LA210_0<=NUM_FLOAT)) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // EsperEPL2Grammar.g:1354:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression8848);
                            expressionList563=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList563.getTree());

                            }
                            break;

                    }

                    RPAREN564=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression8851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN564);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1355:9: ( propertyExpression )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( (LA212_0==LBRACK) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // EsperEPL2Grammar.g:1355:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression8863);
                    propertyExpression565=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression565.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: propertyExpression, expressionList, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1356:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1356:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1356:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1356:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1356:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1359:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic566 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic567 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1360:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1360:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression8908);
            propertyExpressionAtomic566=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic566.getTree());
            // EsperEPL2Grammar.g:1360:29: ( propertyExpressionAtomic )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==LBRACK) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1360:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression8911);
            	    propertyExpressionAtomic567=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic567.getTree());

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1361:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1361:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1364:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK568=null;
        Token SELECT569=null;
        Token FROM571=null;
        Token AS573=null;
        Token IDENT574=null;
        Token WHERE575=null;
        Token RBRACK577=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList570 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty572 = null;

        EsperEPL2GrammarParser.expression_return expression576 = null;


        CommonTree LBRACK568_tree=null;
        CommonTree SELECT569_tree=null;
        CommonTree FROM571_tree=null;
        CommonTree AS573_tree=null;
        CommonTree IDENT574_tree=null;
        CommonTree WHERE575_tree=null;
        CommonTree RBRACK577_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1365:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1365:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK568=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic8941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK568);

            // EsperEPL2Grammar.g:1365:11: ( SELECT propertySelectionList FROM )?
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==SELECT) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1365:12: SELECT propertySelectionList FROM
                    {
                    SELECT569=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic8944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT569);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic8946);
                    propertySelectionList570=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList570.getTree());
                    FROM571=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic8948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM571);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic8952);
            eventProperty572=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty572.getTree());
            // EsperEPL2Grammar.g:1365:62: ( AS IDENT )?
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==AS) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1365:63: AS IDENT
                    {
                    AS573=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic8955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS573);

                    IDENT574=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic8957); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT574);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1365:74: ( WHERE expression )?
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==WHERE) ) {
                alt216=1;
            }
            switch (alt216) {
                case 1 :
                    // EsperEPL2Grammar.g:1365:75: WHERE expression
                    {
                    WHERE575=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic8962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE575);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic8964);
                    expression576=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression576.getTree());

                    }
                    break;

            }

            RBRACK577=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic8968); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK577);



            // AST REWRITE
            // elements: IDENT, propertySelectionList, eventProperty, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1366:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1366:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1366:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1366:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1366:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1366:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1369:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA579=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement578 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement580 = null;


        CommonTree COMMA579_tree=null;

        try {
            // EsperEPL2Grammar.g:1370:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1370:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9018);
            propertySelectionListElement578=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement578.getTree());
            // EsperEPL2Grammar.g:1370:33: ( COMMA propertySelectionListElement )*
            loop217:
            do {
                int alt217=2;
                int LA217_0 = input.LA(1);

                if ( (LA217_0==COMMA) ) {
                    alt217=1;
                }


                switch (alt217) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1370:34: COMMA propertySelectionListElement
            	    {
            	    COMMA579=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9021); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9024);
            	    propertySelectionListElement580=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement580.getTree());

            	    }
            	    break;

            	default :
            	    break loop217;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1373:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS583=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector581 = null;

        EsperEPL2GrammarParser.expression_return expression582 = null;


        CommonTree s_tree=null;
        CommonTree AS583_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1375:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt219=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt219=1;
                }
                break;
            case IDENT:
                {
                int LA219_2 = input.LA(2);

                if ( (LA219_2==DOT) ) {
                    int LA219_61 = input.LA(3);

                    if ( (LA219_61==STAR) && (synpred5_EsperEPL2Grammar())) {
                        alt219=2;
                    }
                    else if ( (LA219_61==WINDOW||LA219_61==ESCAPE||LA219_61==EVERY_EXPR||(LA219_61>=SUM && LA219_61<=COUNT)||LA219_61==OUTER||(LA219_61>=JOIN && LA219_61<=FULL)||(LA219_61>=EVENTS && LA219_61<=LAST)||(LA219_61>=UNIDIRECTIONAL && LA219_61<=PRIOR)||(LA219_61>=WEEKDAY && LA219_61<=CAST)||LA219_61==SNAPSHOT||(LA219_61>=VARIABLE && LA219_61<=AT)||(LA219_61>=DEFINE && LA219_61<=MATCHES)||LA219_61==IDENT||LA219_61==TICKED_STRING_LITERAL) ) {
                        alt219=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 219, 61, input);

                        throw nvae;
                    }
                }
                else if ( ((LA219_2>=IN_SET && LA219_2<=REGEXP)||(LA219_2>=OR_EXPR && LA219_2<=NOT_EXPR)||LA219_2==AS||LA219_2==FROM||LA219_2==IS||LA219_2==COMMA||LA219_2==EQUALS||LA219_2==LPAREN||(LA219_2>=STAR && LA219_2<=LBRACK)||(LA219_2>=BAND && LA219_2<=MOD)||LA219_2==ESCAPECHAR) ) {
                    alt219=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 219, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt219=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 219, 0, input);

                throw nvae;
            }

            switch (alt219) {
                case 1 :
                    // EsperEPL2Grammar.g:1375:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9050); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1375:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1376:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9066);
                    propertyStreamSelector581=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector581.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1377:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9071);
                    expression582=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression582.getTree());
                    // EsperEPL2Grammar.g:1377:15: ( AS i= keywordAllowedIdent )?
                    int alt218=2;
                    int LA218_0 = input.LA(1);

                    if ( (LA218_0==AS) ) {
                        alt218=1;
                    }
                    switch (alt218) {
                        case 1 :
                            // EsperEPL2Grammar.g:1377:16: AS i= keywordAllowedIdent
                            {
                            AS583=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9074); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS583);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9078);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1378:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1378:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1379:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1379:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1382:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT584=null;
        Token STAR585=null;
        Token AS586=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT584_tree=null;
        CommonTree STAR585_tree=null;
        CommonTree AS586_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1383:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1383:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT584=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9124); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT584);

            STAR585=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR585);

            // EsperEPL2Grammar.g:1383:21: ( AS i= IDENT )?
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( (LA220_0==AS) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    // EsperEPL2Grammar.g:1383:22: AS i= IDENT
                    {
                    AS586=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9129); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS586);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9133); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1384:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1384:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1384:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1387:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS587=null;
        Token LPAREN589=null;
        Token RPAREN591=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier588 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList590 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression592 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS587_tree=null;
        CommonTree LPAREN589_tree=null;
        CommonTree RPAREN591_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1390:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1390:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1390:9: (i= IDENT EQUALS )?
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==IDENT) ) {
                int LA221_1 = input.LA(2);

                if ( (LA221_1==EQUALS) ) {
                    alt221=1;
                }
            }
            switch (alt221) {
                case 1 :
                    // EsperEPL2Grammar.g:1390:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS587=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS587);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9191);
            classIdentifier588=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier588.getTree());
            // EsperEPL2Grammar.g:1392:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==LPAREN) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1392:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN589=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9202); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN589);

                    // EsperEPL2Grammar.g:1392:17: ( expressionList )?
                    int alt222=2;
                    int LA222_0 = input.LA(1);

                    if ( (LA222_0==WINDOW||LA222_0==ESCAPE||(LA222_0>=NOT_EXPR && LA222_0<=EVERY_EXPR)||(LA222_0>=SUM && LA222_0<=COUNT)||LA222_0==CASE||LA222_0==OUTER||(LA222_0>=JOIN && LA222_0<=FULL)||(LA222_0>=EVENTS && LA222_0<=LAST)||(LA222_0>=UNIDIRECTIONAL && LA222_0<=CURRENT_TIMESTAMP)||LA222_0==SNAPSHOT||(LA222_0>=VARIABLE && LA222_0<=AT)||(LA222_0>=BOOLEAN_TRUE && LA222_0<=VALUE_NULL)||(LA222_0>=DEFINE && LA222_0<=MATCHES)||LA222_0==NUM_DOUBLE||LA222_0==IDENT||LA222_0==LPAREN||(LA222_0>=PLUS && LA222_0<=QUESTION)||(LA222_0>=STRING_LITERAL && LA222_0<=QUOTED_STRING_LITERAL)||LA222_0==MINUS||LA222_0==LCURLY||LA222_0==NUM_INT||(LA222_0>=TICKED_STRING_LITERAL && LA222_0<=NUM_FLOAT)) ) {
                        alt222=1;
                    }
                    switch (alt222) {
                        case 1 :
                            // EsperEPL2Grammar.g:1392:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9204);
                            expressionList590=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList590.getTree());

                            }
                            break;

                    }

                    RPAREN591=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9207); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN591);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1393:9: ( propertyExpression )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==LBRACK) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // EsperEPL2Grammar.g:1393:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9219);
                    propertyExpression592=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression592.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, expressionList, propertyExpression, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1394:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1394:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1394:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1394:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1394:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1398:1: classIdentifier : i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT593=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT593_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1400:2: (i1= escapableIdent ( DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1400:4: i1= escapableIdent ( DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifier9274);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1401:6: ( DOT i2= escapableIdent )*
            loop225:
            do {
                int alt225=2;
                int LA225_0 = input.LA(1);

                if ( (LA225_0==DOT) ) {
                    int LA225_20 = input.LA(2);

                    if ( (LA225_20==IDENT) ) {
                        int LA225_42 = input.LA(3);

                        if ( (LA225_42==EOF||LA225_42==CREATE||(LA225_42>=OR_EXPR && LA225_42<=AS)||LA225_42==SELECT||(LA225_42>=INNER && LA225_42<=ON)||(LA225_42>=GROUP && LA225_42<=HAVING)||LA225_42==OUTPUT||LA225_42==INSERT||LA225_42==ORDER||(LA225_42>=UNIDIRECTIONAL && LA225_42<=RETAININTERSECTION)||LA225_42==DELETE||LA225_42==SET||LA225_42==UNTIL||LA225_42==ROW_LIMIT_EXPR||(LA225_42>=UPDATE && LA225_42<=MATCH_RECOGNIZE)||(LA225_42>=COMMA && LA225_42<=IDENT)||(LA225_42>=DOT && LA225_42<=RPAREN)||(LA225_42>=LBRACK && LA225_42<=RBRACK)||LA225_42==RCURLY||LA225_42==FOLLOWED_BY||LA225_42==TICKED_STRING_LITERAL||LA225_42==EMAILAT) ) {
                            alt225=1;
                        }


                    }
                    else if ( (LA225_20==TICKED_STRING_LITERAL) ) {
                        alt225=1;
                    }


                }


                switch (alt225) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1402:8: DOT i2= escapableIdent
            	    {
            	    DOT593=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9293); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT593);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifier9297);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop225;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1404:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1404:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1407:1: classIdentifierNonGreedy : i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT594=null;
        EsperEPL2GrammarParser.escapableIdent_return i1 = null;

        EsperEPL2GrammarParser.escapableIdent_return i2 = null;


        CommonTree DOT594_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableIdent=new RewriteRuleSubtreeStream(adaptor,"rule escapableIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1409:2: (i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1409:4: i1= escapableIdent ( options {greedy=false; } : DOT i2= escapableIdent )*
            {
            pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9342);
            i1=escapableIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableIdent.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1410:6: ( options {greedy=false; } : DOT i2= escapableIdent )*
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA226_2 = input.LA(3);

                        if ( (LA226_2==LPAREN) ) {
                            alt226=2;
                        }
                        else if ( (LA226_2==DOT) ) {
                            alt226=1;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        alt226=1;
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt226=2;
                        }
                        break;

                    }

                }


                switch (alt226) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1412:8: DOT i2= escapableIdent
            	    {
            	    DOT594=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9377); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT594);

            	    pushFollow(FOLLOW_escapableIdent_in_classIdentifierNonGreedy9381);
            	    i2=escapableIdent();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableIdent.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1414:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1414:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1417:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA596=null;
        EsperEPL2GrammarParser.expression_return expression595 = null;

        EsperEPL2GrammarParser.expression_return expression597 = null;


        CommonTree COMMA596_tree=null;

        try {
            // EsperEPL2Grammar.g:1418:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1418:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9423);
            expression595=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression595.getTree());
            // EsperEPL2Grammar.g:1418:22: ( COMMA expression )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==COMMA) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1418:23: COMMA expression
            	    {
            	    COMMA596=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9426); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9429);
            	    expression597=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression597.getTree());

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1421:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA599=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime598 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime600 = null;


        CommonTree COMMA599_tree=null;

        try {
            // EsperEPL2Grammar.g:1422:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1422:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9457);
            expressionWithTime598=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime598.getTree());
            // EsperEPL2Grammar.g:1422:30: ( COMMA expressionWithTime )*
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);

                if ( (LA228_0==COMMA) ) {
                    alt228=1;
                }


                switch (alt228) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1422:31: COMMA expressionWithTime
            	    {
            	    COMMA599=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9460); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9463);
            	    expressionWithTime600=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime600.getTree());

            	    }
            	    break;

            	default :
            	    break loop228;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1425:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand601 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand602 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod603 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable604 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand605 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand606 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator607 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator608 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList609 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar610 = null;



        try {
            // EsperEPL2Grammar.g:1426:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt229=10;
            alt229 = dfa229.predict(input);
            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1426:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime9489);
                    lastOperand601=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand601.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1427:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime9500);
                    lastWeekdayOperand602=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand602.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1428:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime9511);
                    timePeriod603=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod603.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1429:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime9522);
                    expressionQualifyable604=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable604.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1430:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime9533);
                    rangeOperand605=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand605.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1431:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime9545);
                    frequencyOperand606=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand606.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1432:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime9556);
                    lastOperator607=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator607.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1433:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime9568);
                    weekDayOperator608=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator608.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1434:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime9580);
                    numericParameterList609=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList609.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1435:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime9585);
                    numberSetStar610=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar610.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1438:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression611 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1439:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1439:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable9596);
            expression611=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression611.getTree());
            // EsperEPL2Grammar.g:1439:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt230=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt230=1;
                    }
                    break;
                case DESC:
                    {
                    alt230=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt230=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt230=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt230=5;
                    }
                    break;
            }

            switch (alt230) {
                case 1 :
                    // EsperEPL2Grammar.g:1439:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable9601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1439:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable9605); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1439:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9609); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1439:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9613); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1439:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9617); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, expression, a, d, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1440:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1440:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1440:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1440:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1441:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1441:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1441:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1442:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1446:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR612=null;

        CommonTree STAR612_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1447:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1447:4: STAR
            {
            STAR612=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar9674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR612);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1448:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1448:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1451:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW613=null;

        CommonTree LW613_tree=null;

        try {
            // EsperEPL2Grammar.g:1452:2: ( LW )
            // EsperEPL2Grammar.g:1452:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW613=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand9694); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW613_tree = (CommonTree)adaptor.create(LW613);
            root_0 = (CommonTree)adaptor.becomeRoot(LW613_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1455:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST614=null;

        CommonTree LAST614_tree=null;

        try {
            // EsperEPL2Grammar.g:1456:2: ( LAST )
            // EsperEPL2Grammar.g:1456:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST614=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand9707); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST614_tree = (CommonTree)adaptor.create(LAST614);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST614_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1459:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR615=null;
        Token DIV616=null;
        EsperEPL2GrammarParser.number_return number617 = null;

        EsperEPL2GrammarParser.substitution_return substitution618 = null;


        CommonTree i_tree=null;
        CommonTree STAR615_tree=null;
        CommonTree DIV616_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1460:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1460:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR615=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand9719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR615);

            DIV616=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand9721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV616);

            // EsperEPL2Grammar.g:1460:13: ( number | i= IDENT | substitution )
            int alt231=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt231=1;
                }
                break;
            case IDENT:
                {
                alt231=2;
                }
                break;
            case QUESTION:
                {
                alt231=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 231, 0, input);

                throw nvae;
            }

            switch (alt231) {
                case 1 :
                    // EsperEPL2Grammar.g:1460:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand9724);
                    number617=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number617.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1460:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand9728); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1460:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand9730);
                    substitution618=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution618.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1461:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1461:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1461:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1461:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1462:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1462:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1462:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1462:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1465:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON621=null;
        EsperEPL2GrammarParser.number_return number619 = null;

        EsperEPL2GrammarParser.substitution_return substitution620 = null;

        EsperEPL2GrammarParser.number_return number622 = null;

        EsperEPL2GrammarParser.substitution_return substitution623 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON621_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1466:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1466:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1466:4: ( number | i1= IDENT | substitution )
            int alt232=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt232=1;
                }
                break;
            case IDENT:
                {
                alt232=2;
                }
                break;
            case QUESTION:
                {
                alt232=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }

            switch (alt232) {
                case 1 :
                    // EsperEPL2Grammar.g:1466:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9779);
                    number619=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number619.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1466:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1466:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9785);
                    substitution620=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution620.getTree());

                    }
                    break;

            }

            COLON621=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand9788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON621);

            // EsperEPL2Grammar.g:1466:41: ( number | i2= IDENT | substitution )
            int alt233=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt233=1;
                }
                break;
            case IDENT:
                {
                alt233=2;
                }
                break;
            case QUESTION:
                {
                alt233=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }

            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1466:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand9791);
                    number622=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number622.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1466:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand9795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1466:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand9797);
                    substitution623=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution623.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i2, substitution, i1, substitution, number, substitution, number, i2, i1
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1467:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1467:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1467:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1467:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1467:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1467:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1468:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1468:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1468:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1468:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1468:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1468:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1469:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1469:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1469:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1469:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1469:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1469:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1470:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1470:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1470:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1470:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1473:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST626=null;
        EsperEPL2GrammarParser.number_return number624 = null;

        EsperEPL2GrammarParser.substitution_return substitution625 = null;


        CommonTree i_tree=null;
        CommonTree LAST626_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1474:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1474:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1474:4: ( number | i= IDENT | substitution )
            int alt234=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt234=1;
                }
                break;
            case IDENT:
                {
                alt234=2;
                }
                break;
            case QUESTION:
                {
                alt234=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }

            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1474:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator9911);
                    number624=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number624.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1474:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator9915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1474:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator9917);
                    substitution625=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution625.getTree());

                    }
                    break;

            }

            LAST626=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator9920); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST626);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1475:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1475:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1475:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1475:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1476:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1476:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1476:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1476:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1479:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY629=null;
        EsperEPL2GrammarParser.number_return number627 = null;

        EsperEPL2GrammarParser.substitution_return substitution628 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY629_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1480:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1480:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1480:4: ( number | i= IDENT | substitution )
            int alt235=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt235=1;
                }
                break;
            case IDENT:
                {
                alt235=2;
                }
                break;
            case QUESTION:
                {
                alt235=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 235, 0, input);

                throw nvae;
            }

            switch (alt235) {
                case 1 :
                    // EsperEPL2Grammar.g:1480:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator9968);
                    number627=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number627.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1480:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator9972); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1480:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator9974);
                    substitution628=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution628.getTree());

                    }
                    break;

            }

            WEEKDAY629=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator9977); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY629);



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1481:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1481:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1481:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1481:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1482:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1482:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1482:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1482:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1485:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK630=null;
        Token COMMA632=null;
        Token RBRACK634=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter631 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter633 = null;


        CommonTree LBRACK630_tree=null;
        CommonTree COMMA632_tree=null;
        CommonTree RBRACK634_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1486:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1486:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK630=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10024); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK630);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10026);
            numericListParameter631=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter631.getTree());
            // EsperEPL2Grammar.g:1486:32: ( COMMA numericListParameter )*
            loop236:
            do {
                int alt236=2;
                int LA236_0 = input.LA(1);

                if ( (LA236_0==COMMA) ) {
                    alt236=1;
                }


                switch (alt236) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1486:33: COMMA numericListParameter
            	    {
            	    COMMA632=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10029); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA632);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10031);
            	    numericListParameter633=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter633.getTree());

            	    }
            	    break;

            	default :
            	    break loop236;
                }
            } while (true);

            RBRACK634=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK634);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1487:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1487:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1490:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand635 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand636 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant637 = null;



        try {
            // EsperEPL2Grammar.g:1491:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt237=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA237_1 = input.LA(2);

                if ( (LA237_1==COMMA||LA237_1==RBRACK) ) {
                    alt237=3;
                }
                else if ( (LA237_1==COLON) ) {
                    alt237=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA237_2 = input.LA(2);

                if ( (LA237_2==COLON) ) {
                    alt237=1;
                }
                else if ( (LA237_2==COMMA||LA237_2==RBRACK) ) {
                    alt237=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA237_3 = input.LA(2);

                if ( (LA237_3==COMMA||LA237_3==RBRACK) ) {
                    alt237=3;
                }
                else if ( (LA237_3==COLON) ) {
                    alt237=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA237_4 = input.LA(2);

                if ( (LA237_4==COLON) ) {
                    alt237=1;
                }
                else if ( (LA237_4==COMMA||LA237_4==RBRACK) ) {
                    alt237=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 237, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt237=1;
                }
                break;
            case STAR:
                {
                alt237=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt237=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }

            switch (alt237) {
                case 1 :
                    // EsperEPL2Grammar.g:1491:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10057);
                    rangeOperand635=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand635.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1492:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10063);
                    frequencyOperand636=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand636.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1493:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10068);
                    numberconstant637=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant637.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1496:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT639=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic638 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic640 = null;


        CommonTree DOT639_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1497:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1497:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10084);
            eventPropertyAtomic638=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic638.getTree());
            // EsperEPL2Grammar.g:1497:24: ( DOT eventPropertyAtomic )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==DOT) ) {
                    alt238=1;
                }


                switch (alt238) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1497:25: DOT eventPropertyAtomic
            	    {
            	    DOT639=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10087); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT639);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10089);
            	    eventPropertyAtomic640=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic640.getTree());

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1498:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1498:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1501:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK642=null;
        Token RPAREN643=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent641 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK642_tree=null;
        CommonTree RPAREN643_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1502:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1502:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10115);
            eventPropertyIdent641=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent641.getTree());
            // EsperEPL2Grammar.g:1502:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt242=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt242=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt242=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt242=3;
                    }
                    break;
            }

            switch (alt242) {
                case 1 :
                    // EsperEPL2Grammar.g:1503:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10128); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK642=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK642);

                    // EsperEPL2Grammar.g:1503:32: (q= QUESTION )?
                    int alt239=2;
                    int LA239_0 = input.LA(1);

                    if ( (LA239_0==QUESTION) ) {
                        alt239=1;
                    }
                    switch (alt239) {
                        case 1 :
                            // EsperEPL2Grammar.g:1503:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10135); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1505:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10149); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1505:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt240=2;
                    int LA240_0 = input.LA(1);

                    if ( (LA240_0==STRING_LITERAL) ) {
                        alt240=1;
                    }
                    else if ( (LA240_0==QUOTED_STRING_LITERAL) ) {
                        alt240=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 240, 0, input);

                        throw nvae;
                    }
                    switch (alt240) {
                        case 1 :
                            // EsperEPL2Grammar.g:1505:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10154); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1505:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10160); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN643=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10163); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN643);

                    // EsperEPL2Grammar.g:1505:66: (q= QUESTION )?
                    int alt241=2;
                    int LA241_0 = input.LA(1);

                    if ( (LA241_0==QUESTION) ) {
                        alt241=1;
                    }
                    switch (alt241) {
                        case 1 :
                            // EsperEPL2Grammar.g:1505:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10168); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1507:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10182); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: ni, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, ni, eventPropertyIdent, s, eventPropertyIdent, s, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1510:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1510:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1511:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1511:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1512:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1512:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1513:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1513:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1514:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1514:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1515:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1515:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1518:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR644=null;
        Token DOT645=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR644_tree=null;
        CommonTree DOT645_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1520:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1520:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10305);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1521:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==ESCAPECHAR) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1522:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR644=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10317); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR644);

            	    DOT645=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10319); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT645);

            	    // EsperEPL2Grammar.g:1522:24: (ipi2= keywordAllowedIdent )?
            	    int alt243=2;
            	    alt243 = dfa243.predict(input);
            	    switch (alt243) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1522:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10323);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1524:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1524:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1527:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT646=null;
        Token COUNT647=null;
        Token ESCAPE648=null;
        Token EVERY_EXPR649=null;
        Token SUM650=null;
        Token AVG651=null;
        Token MAX652=null;
        Token MIN653=null;
        Token COALESCE654=null;
        Token MEDIAN655=null;
        Token STDDEV656=null;
        Token AVEDEV657=null;
        Token EVENTS658=null;
        Token FIRST659=null;
        Token LAST660=null;
        Token UNIDIRECTIONAL661=null;
        Token RETAINUNION662=null;
        Token RETAININTERSECTION663=null;
        Token UNTIL664=null;
        Token PATTERN665=null;
        Token SQL666=null;
        Token METADATASQL667=null;
        Token PREVIOUS668=null;
        Token PRIOR669=null;
        Token WEEKDAY670=null;
        Token LW671=null;
        Token INSTANCEOF672=null;
        Token CAST673=null;
        Token SNAPSHOT674=null;
        Token VARIABLE675=null;
        Token WINDOW676=null;
        Token LEFT677=null;
        Token RIGHT678=null;
        Token OUTER679=null;
        Token FULL680=null;
        Token JOIN681=null;
        Token DEFINE682=null;
        Token PARTITION683=null;
        Token MATCHES684=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT646_tree=null;
        CommonTree COUNT647_tree=null;
        CommonTree ESCAPE648_tree=null;
        CommonTree EVERY_EXPR649_tree=null;
        CommonTree SUM650_tree=null;
        CommonTree AVG651_tree=null;
        CommonTree MAX652_tree=null;
        CommonTree MIN653_tree=null;
        CommonTree COALESCE654_tree=null;
        CommonTree MEDIAN655_tree=null;
        CommonTree STDDEV656_tree=null;
        CommonTree AVEDEV657_tree=null;
        CommonTree EVENTS658_tree=null;
        CommonTree FIRST659_tree=null;
        CommonTree LAST660_tree=null;
        CommonTree UNIDIRECTIONAL661_tree=null;
        CommonTree RETAINUNION662_tree=null;
        CommonTree RETAININTERSECTION663_tree=null;
        CommonTree UNTIL664_tree=null;
        CommonTree PATTERN665_tree=null;
        CommonTree SQL666_tree=null;
        CommonTree METADATASQL667_tree=null;
        CommonTree PREVIOUS668_tree=null;
        CommonTree PRIOR669_tree=null;
        CommonTree WEEKDAY670_tree=null;
        CommonTree LW671_tree=null;
        CommonTree INSTANCEOF672_tree=null;
        CommonTree CAST673_tree=null;
        CommonTree SNAPSHOT674_tree=null;
        CommonTree VARIABLE675_tree=null;
        CommonTree WINDOW676_tree=null;
        CommonTree LEFT677_tree=null;
        CommonTree RIGHT678_tree=null;
        CommonTree OUTER679_tree=null;
        CommonTree FULL680_tree=null;
        CommonTree JOIN681_tree=null;
        CommonTree DEFINE682_tree=null;
        CommonTree PARTITION683_tree=null;
        CommonTree MATCHES684_tree=null;

        try {
            // EsperEPL2Grammar.g:1528:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES )
            int alt245=41;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt245=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt245=2;
                }
                break;
            case AT:
                {
                alt245=3;
                }
                break;
            case COUNT:
                {
                alt245=4;
                }
                break;
            case ESCAPE:
                {
                alt245=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt245=6;
                }
                break;
            case SUM:
                {
                alt245=7;
                }
                break;
            case AVG:
                {
                alt245=8;
                }
                break;
            case MAX:
                {
                alt245=9;
                }
                break;
            case MIN:
                {
                alt245=10;
                }
                break;
            case COALESCE:
                {
                alt245=11;
                }
                break;
            case MEDIAN:
                {
                alt245=12;
                }
                break;
            case STDDEV:
                {
                alt245=13;
                }
                break;
            case AVEDEV:
                {
                alt245=14;
                }
                break;
            case EVENTS:
                {
                alt245=15;
                }
                break;
            case FIRST:
                {
                alt245=16;
                }
                break;
            case LAST:
                {
                alt245=17;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt245=18;
                }
                break;
            case RETAINUNION:
                {
                alt245=19;
                }
                break;
            case RETAININTERSECTION:
                {
                alt245=20;
                }
                break;
            case UNTIL:
                {
                alt245=21;
                }
                break;
            case PATTERN:
                {
                alt245=22;
                }
                break;
            case SQL:
                {
                alt245=23;
                }
                break;
            case METADATASQL:
                {
                alt245=24;
                }
                break;
            case PREVIOUS:
                {
                alt245=25;
                }
                break;
            case PRIOR:
                {
                alt245=26;
                }
                break;
            case WEEKDAY:
                {
                alt245=27;
                }
                break;
            case LW:
                {
                alt245=28;
                }
                break;
            case INSTANCEOF:
                {
                alt245=29;
                }
                break;
            case CAST:
                {
                alt245=30;
                }
                break;
            case SNAPSHOT:
                {
                alt245=31;
                }
                break;
            case VARIABLE:
                {
                alt245=32;
                }
                break;
            case WINDOW:
                {
                alt245=33;
                }
                break;
            case LEFT:
                {
                alt245=34;
                }
                break;
            case RIGHT:
                {
                alt245=35;
                }
                break;
            case OUTER:
                {
                alt245=36;
                }
                break;
            case FULL:
                {
                alt245=37;
                }
                break;
            case JOIN:
                {
                alt245=38;
                }
                break;
            case DEFINE:
                {
                alt245=39;
                }
                break;
            case PARTITION:
                {
                alt245=40;
                }
                break;
            case MATCHES:
                {
                alt245=41;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }

            switch (alt245) {
                case 1 :
                    // EsperEPL2Grammar.g:1528:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10362); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1529:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10371); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1530:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT646=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10378); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT646_tree = (CommonTree)adaptor.create(AT646);
                    adaptor.addChild(root_0, AT646_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1531:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT647=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10385); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT647_tree = (CommonTree)adaptor.create(COUNT647);
                    adaptor.addChild(root_0, COUNT647_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1532:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE648=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10392); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE648_tree = (CommonTree)adaptor.create(ESCAPE648);
                    adaptor.addChild(root_0, ESCAPE648_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1533:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR649=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10403); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR649_tree = (CommonTree)adaptor.create(EVERY_EXPR649);
                    adaptor.addChild(root_0, EVERY_EXPR649_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1534:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM650=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10410); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM650_tree = (CommonTree)adaptor.create(SUM650);
                    adaptor.addChild(root_0, SUM650_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1535:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG651=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG651_tree = (CommonTree)adaptor.create(AVG651);
                    adaptor.addChild(root_0, AVG651_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1536:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX652=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10424); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX652_tree = (CommonTree)adaptor.create(MAX652);
                    adaptor.addChild(root_0, MAX652_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1537:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN653=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10431); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN653_tree = (CommonTree)adaptor.create(MIN653);
                    adaptor.addChild(root_0, MIN653_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1538:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE654=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10438); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE654_tree = (CommonTree)adaptor.create(COALESCE654);
                    adaptor.addChild(root_0, COALESCE654_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1539:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN655=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10445); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN655_tree = (CommonTree)adaptor.create(MEDIAN655);
                    adaptor.addChild(root_0, MEDIAN655_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1540:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV656=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10452); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV656_tree = (CommonTree)adaptor.create(STDDEV656);
                    adaptor.addChild(root_0, STDDEV656_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1541:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV657=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10459); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV657_tree = (CommonTree)adaptor.create(AVEDEV657);
                    adaptor.addChild(root_0, AVEDEV657_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1542:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS658=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10466); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS658_tree = (CommonTree)adaptor.create(EVENTS658);
                    adaptor.addChild(root_0, EVENTS658_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1543:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST659=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10473); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST659_tree = (CommonTree)adaptor.create(FIRST659);
                    adaptor.addChild(root_0, FIRST659_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1544:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST660=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10480); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST660_tree = (CommonTree)adaptor.create(LAST660);
                    adaptor.addChild(root_0, LAST660_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1545:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL661=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10487); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL661_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL661);
                    adaptor.addChild(root_0, UNIDIRECTIONAL661_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1546:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION662=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent10494); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION662_tree = (CommonTree)adaptor.create(RETAINUNION662);
                    adaptor.addChild(root_0, RETAINUNION662_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1547:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION663=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10501); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION663_tree = (CommonTree)adaptor.create(RETAININTERSECTION663);
                    adaptor.addChild(root_0, RETAININTERSECTION663_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1548:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL664=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent10508); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL664_tree = (CommonTree)adaptor.create(UNTIL664);
                    adaptor.addChild(root_0, UNTIL664_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1549:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN665=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent10515); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN665_tree = (CommonTree)adaptor.create(PATTERN665);
                    adaptor.addChild(root_0, PATTERN665_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1550:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL666=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent10522); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL666_tree = (CommonTree)adaptor.create(SQL666);
                    adaptor.addChild(root_0, SQL666_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1551:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL667=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent10529); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL667_tree = (CommonTree)adaptor.create(METADATASQL667);
                    adaptor.addChild(root_0, METADATASQL667_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1552:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS668=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent10536); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS668_tree = (CommonTree)adaptor.create(PREVIOUS668);
                    adaptor.addChild(root_0, PREVIOUS668_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1553:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR669=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent10543); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR669_tree = (CommonTree)adaptor.create(PRIOR669);
                    adaptor.addChild(root_0, PRIOR669_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1554:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY670=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent10550); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY670_tree = (CommonTree)adaptor.create(WEEKDAY670);
                    adaptor.addChild(root_0, WEEKDAY670_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1555:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW671=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent10557); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW671_tree = (CommonTree)adaptor.create(LW671);
                    adaptor.addChild(root_0, LW671_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1556:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF672=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent10564); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF672_tree = (CommonTree)adaptor.create(INSTANCEOF672);
                    adaptor.addChild(root_0, INSTANCEOF672_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1557:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST673=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent10571); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST673_tree = (CommonTree)adaptor.create(CAST673);
                    adaptor.addChild(root_0, CAST673_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1558:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT674=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent10578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT674_tree = (CommonTree)adaptor.create(SNAPSHOT674);
                    adaptor.addChild(root_0, SNAPSHOT674_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1559:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE675=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent10585); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE675_tree = (CommonTree)adaptor.create(VARIABLE675);
                    adaptor.addChild(root_0, VARIABLE675_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1560:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW676=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent10594); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW676_tree = (CommonTree)adaptor.create(WINDOW676);
                    adaptor.addChild(root_0, WINDOW676_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1561:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT677=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent10601); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT677_tree = (CommonTree)adaptor.create(LEFT677);
                    adaptor.addChild(root_0, LEFT677_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1562:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT678=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent10608); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT678_tree = (CommonTree)adaptor.create(RIGHT678);
                    adaptor.addChild(root_0, RIGHT678_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1563:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER679=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent10615); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER679_tree = (CommonTree)adaptor.create(OUTER679);
                    adaptor.addChild(root_0, OUTER679_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1564:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL680=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent10622); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL680_tree = (CommonTree)adaptor.create(FULL680);
                    adaptor.addChild(root_0, FULL680_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1565:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN681=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent10629); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN681_tree = (CommonTree)adaptor.create(JOIN681);
                    adaptor.addChild(root_0, JOIN681_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;
                case 39 :
                    // EsperEPL2Grammar.g:1566:4: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DEFINE682=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent10636); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE682_tree = (CommonTree)adaptor.create(DEFINE682);
                    adaptor.addChild(root_0, DEFINE682_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }

                    }
                    break;
                case 40 :
                    // EsperEPL2Grammar.g:1567:4: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PARTITION683=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent10643); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION683_tree = (CommonTree)adaptor.create(PARTITION683);
                    adaptor.addChild(root_0, PARTITION683_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }

                    }
                    break;
                case 41 :
                    // EsperEPL2Grammar.g:1568:4: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MATCHES684=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent10650); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES684_tree = (CommonTree)adaptor.create(MATCHES684);
                    adaptor.addChild(root_0, MATCHES684_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1571:1: escapableIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1572:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt246=2;
            int LA246_0 = input.LA(1);

            if ( (LA246_0==IDENT) ) {
                alt246=1;
            }
            else if ( (LA246_0==TICKED_STRING_LITERAL) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    // EsperEPL2Grammar.g:1572:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent10671); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1573:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10680); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1576:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart685 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart686 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart687 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart688 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart689 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart690 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart691 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart692 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart693 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart694 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart695 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart696 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart697 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart698 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart699 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1577:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1578:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1578:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt257=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt257=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt257=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt257=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt257=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt257=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt257=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt257=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt257=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt257=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt257=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt257=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt257=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt257=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt257=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt257=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt257=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt257=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt257=1;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt257=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt257=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt257=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt257=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt257=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt257=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt257=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt257=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt257=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt257=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt257=5;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt257=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);

                throw nvae;
            }

            switch (alt257) {
                case 1 :
                    // EsperEPL2Grammar.g:1579:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod10703);
                    dayPart685=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart685.getTree());
                    // EsperEPL2Grammar.g:1579:11: ( hourPart )?
                    int alt247=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA247_1 = input.LA(2);

                            if ( ((LA247_1>=TIMEPERIOD_HOUR && LA247_1<=TIMEPERIOD_HOURS)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA247_2 = input.LA(2);

                            if ( ((LA247_2>=TIMEPERIOD_HOUR && LA247_2<=TIMEPERIOD_HOURS)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA247_3 = input.LA(2);

                            if ( ((LA247_3>=TIMEPERIOD_HOUR && LA247_3<=TIMEPERIOD_HOURS)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA247_4 = input.LA(2);

                            if ( ((LA247_4>=TIMEPERIOD_HOUR && LA247_4<=TIMEPERIOD_HOURS)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA247_5 = input.LA(2);

                            if ( ((LA247_5>=TIMEPERIOD_HOUR && LA247_5<=TIMEPERIOD_HOURS)) ) {
                                alt247=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA247_6 = input.LA(2);

                            if ( ((LA247_6>=TIMEPERIOD_HOUR && LA247_6<=TIMEPERIOD_HOURS)) ) {
                                alt247=1;
                            }
                            }
                            break;
                    }

                    switch (alt247) {
                        case 1 :
                            // EsperEPL2Grammar.g:1579:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod10705);
                            hourPart686=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart686.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1579:21: ( minutePart )?
                    int alt248=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA248_1 = input.LA(2);

                            if ( (LA248_1==MIN||(LA248_1>=TIMEPERIOD_MINUTE && LA248_1<=TIMEPERIOD_MINUTES)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA248_2 = input.LA(2);

                            if ( (LA248_2==MIN||(LA248_2>=TIMEPERIOD_MINUTE && LA248_2<=TIMEPERIOD_MINUTES)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA248_3 = input.LA(2);

                            if ( (LA248_3==MIN||(LA248_3>=TIMEPERIOD_MINUTE && LA248_3<=TIMEPERIOD_MINUTES)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA248_4 = input.LA(2);

                            if ( (LA248_4==MIN||(LA248_4>=TIMEPERIOD_MINUTE && LA248_4<=TIMEPERIOD_MINUTES)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA248_5 = input.LA(2);

                            if ( (LA248_5==MIN||(LA248_5>=TIMEPERIOD_MINUTE && LA248_5<=TIMEPERIOD_MINUTES)) ) {
                                alt248=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA248_6 = input.LA(2);

                            if ( (LA248_6==MIN||(LA248_6>=TIMEPERIOD_MINUTE && LA248_6<=TIMEPERIOD_MINUTES)) ) {
                                alt248=1;
                            }
                            }
                            break;
                    }

                    switch (alt248) {
                        case 1 :
                            // EsperEPL2Grammar.g:1579:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10708);
                            minutePart687=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart687.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1579:33: ( secondPart )?
                    int alt249=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA249_1 = input.LA(2);

                            if ( ((LA249_1>=TIMEPERIOD_SEC && LA249_1<=TIMEPERIOD_SECONDS)) ) {
                                alt249=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA249_2 = input.LA(2);

                            if ( ((LA249_2>=TIMEPERIOD_SEC && LA249_2<=TIMEPERIOD_SECONDS)) ) {
                                alt249=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA249_3 = input.LA(2);

                            if ( ((LA249_3>=TIMEPERIOD_SEC && LA249_3<=TIMEPERIOD_SECONDS)) ) {
                                alt249=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA249_4 = input.LA(2);

                            if ( ((LA249_4>=TIMEPERIOD_SEC && LA249_4<=TIMEPERIOD_SECONDS)) ) {
                                alt249=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA249_5 = input.LA(2);

                            if ( ((LA249_5>=TIMEPERIOD_SEC && LA249_5<=TIMEPERIOD_SECONDS)) ) {
                                alt249=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA249_6 = input.LA(2);

                            if ( ((LA249_6>=TIMEPERIOD_SEC && LA249_6<=TIMEPERIOD_SECONDS)) ) {
                                alt249=1;
                            }
                            }
                            break;
                    }

                    switch (alt249) {
                        case 1 :
                            // EsperEPL2Grammar.g:1579:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10711);
                            secondPart688=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart688.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1579:45: ( millisecondPart )?
                    int alt250=2;
                    int LA250_0 = input.LA(1);

                    if ( (LA250_0==NUM_DOUBLE||LA250_0==IDENT||LA250_0==QUESTION||LA250_0==NUM_INT||(LA250_0>=NUM_LONG && LA250_0<=NUM_FLOAT)) ) {
                        alt250=1;
                    }
                    switch (alt250) {
                        case 1 :
                            // EsperEPL2Grammar.g:1579:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10714);
                            millisecondPart689=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart689.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1580:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod10720);
                    hourPart690=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart690.getTree());
                    // EsperEPL2Grammar.g:1580:13: ( minutePart )?
                    int alt251=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA251_1 = input.LA(2);

                            if ( (LA251_1==MIN||(LA251_1>=TIMEPERIOD_MINUTE && LA251_1<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA251_2 = input.LA(2);

                            if ( (LA251_2==MIN||(LA251_2>=TIMEPERIOD_MINUTE && LA251_2<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA251_3 = input.LA(2);

                            if ( (LA251_3==MIN||(LA251_3>=TIMEPERIOD_MINUTE && LA251_3<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA251_4 = input.LA(2);

                            if ( (LA251_4==MIN||(LA251_4>=TIMEPERIOD_MINUTE && LA251_4<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA251_5 = input.LA(2);

                            if ( (LA251_5==MIN||(LA251_5>=TIMEPERIOD_MINUTE && LA251_5<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA251_6 = input.LA(2);

                            if ( (LA251_6==MIN||(LA251_6>=TIMEPERIOD_MINUTE && LA251_6<=TIMEPERIOD_MINUTES)) ) {
                                alt251=1;
                            }
                            }
                            break;
                    }

                    switch (alt251) {
                        case 1 :
                            // EsperEPL2Grammar.g:1580:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod10722);
                            minutePart691=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart691.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1580:25: ( secondPart )?
                    int alt252=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA252_1 = input.LA(2);

                            if ( ((LA252_1>=TIMEPERIOD_SEC && LA252_1<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA252_2 = input.LA(2);

                            if ( ((LA252_2>=TIMEPERIOD_SEC && LA252_2<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA252_3 = input.LA(2);

                            if ( ((LA252_3>=TIMEPERIOD_SEC && LA252_3<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA252_4 = input.LA(2);

                            if ( ((LA252_4>=TIMEPERIOD_SEC && LA252_4<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA252_5 = input.LA(2);

                            if ( ((LA252_5>=TIMEPERIOD_SEC && LA252_5<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA252_6 = input.LA(2);

                            if ( ((LA252_6>=TIMEPERIOD_SEC && LA252_6<=TIMEPERIOD_SECONDS)) ) {
                                alt252=1;
                            }
                            }
                            break;
                    }

                    switch (alt252) {
                        case 1 :
                            // EsperEPL2Grammar.g:1580:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10725);
                            secondPart692=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart692.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1580:37: ( millisecondPart )?
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==NUM_DOUBLE||LA253_0==IDENT||LA253_0==QUESTION||LA253_0==NUM_INT||(LA253_0>=NUM_LONG && LA253_0<=NUM_FLOAT)) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            // EsperEPL2Grammar.g:1580:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10728);
                            millisecondPart693=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart693.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1581:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod10734);
                    minutePart694=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart694.getTree());
                    // EsperEPL2Grammar.g:1581:15: ( secondPart )?
                    int alt254=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA254_1 = input.LA(2);

                            if ( ((LA254_1>=TIMEPERIOD_SEC && LA254_1<=TIMEPERIOD_SECONDS)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA254_2 = input.LA(2);

                            if ( ((LA254_2>=TIMEPERIOD_SEC && LA254_2<=TIMEPERIOD_SECONDS)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA254_3 = input.LA(2);

                            if ( ((LA254_3>=TIMEPERIOD_SEC && LA254_3<=TIMEPERIOD_SECONDS)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA254_4 = input.LA(2);

                            if ( ((LA254_4>=TIMEPERIOD_SEC && LA254_4<=TIMEPERIOD_SECONDS)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA254_5 = input.LA(2);

                            if ( ((LA254_5>=TIMEPERIOD_SEC && LA254_5<=TIMEPERIOD_SECONDS)) ) {
                                alt254=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA254_6 = input.LA(2);

                            if ( ((LA254_6>=TIMEPERIOD_SEC && LA254_6<=TIMEPERIOD_SECONDS)) ) {
                                alt254=1;
                            }
                            }
                            break;
                    }

                    switch (alt254) {
                        case 1 :
                            // EsperEPL2Grammar.g:1581:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod10736);
                            secondPart695=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart695.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1581:27: ( millisecondPart )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==NUM_DOUBLE||LA255_0==IDENT||LA255_0==QUESTION||LA255_0==NUM_INT||(LA255_0>=NUM_LONG && LA255_0<=NUM_FLOAT)) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // EsperEPL2Grammar.g:1581:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10739);
                            millisecondPart696=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart696.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1582:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod10745);
                    secondPart697=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart697.getTree());
                    // EsperEPL2Grammar.g:1582:15: ( millisecondPart )?
                    int alt256=2;
                    int LA256_0 = input.LA(1);

                    if ( (LA256_0==NUM_DOUBLE||LA256_0==IDENT||LA256_0==QUESTION||LA256_0==NUM_INT||(LA256_0>=NUM_LONG && LA256_0<=NUM_FLOAT)) ) {
                        alt256=1;
                    }
                    switch (alt256) {
                        case 1 :
                            // EsperEPL2Grammar.g:1582:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod10747);
                            millisecondPart698=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart698.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1583:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod10753);
                    millisecondPart699=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart699.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: millisecondPart, dayPart, secondPart, hourPart, minutePart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1585:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1585:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1585:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1585:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1585:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1585:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1585:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1588:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS702=null;
        Token TIMEPERIOD_DAY703=null;
        EsperEPL2GrammarParser.number_return number700 = null;

        EsperEPL2GrammarParser.substitution_return substitution701 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS702_tree=null;
        CommonTree TIMEPERIOD_DAY703_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1589:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1589:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1589:4: ( number | i= IDENT | substitution )
            int alt258=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt258=1;
                }
                break;
            case IDENT:
                {
                alt258=2;
                }
                break;
            case QUESTION:
                {
                alt258=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);

                throw nvae;
            }

            switch (alt258) {
                case 1 :
                    // EsperEPL2Grammar.g:1589:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart10791);
                    number700=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number700.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1589:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart10795); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1589:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart10797);
                    substitution701=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution701.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1589:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==TIMEPERIOD_DAYS) ) {
                alt259=1;
            }
            else if ( (LA259_0==TIMEPERIOD_DAY) ) {
                alt259=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    // EsperEPL2Grammar.g:1589:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS702=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart10801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS702);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1589:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY703=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart10805); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY703);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1590:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1590:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1590:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1590:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1591:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1591:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1591:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1591:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1594:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS706=null;
        Token TIMEPERIOD_HOUR707=null;
        EsperEPL2GrammarParser.number_return number704 = null;

        EsperEPL2GrammarParser.substitution_return substitution705 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS706_tree=null;
        CommonTree TIMEPERIOD_HOUR707_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1595:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1595:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1595:4: ( number | i= IDENT | substitution )
            int alt260=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt260=1;
                }
                break;
            case IDENT:
                {
                alt260=2;
                }
                break;
            case QUESTION:
                {
                alt260=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }

            switch (alt260) {
                case 1 :
                    // EsperEPL2Grammar.g:1595:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart10854);
                    number704=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number704.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1595:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart10858); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1595:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart10860);
                    substitution705=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution705.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1595:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==TIMEPERIOD_HOURS) ) {
                alt261=1;
            }
            else if ( (LA261_0==TIMEPERIOD_HOUR) ) {
                alt261=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    // EsperEPL2Grammar.g:1595:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS706=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart10864); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS706);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1595:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR707=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart10868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR707);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1596:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1596:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1596:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1596:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1597:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1597:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1597:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1597:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1600:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES710=null;
        Token TIMEPERIOD_MINUTE711=null;
        Token MIN712=null;
        EsperEPL2GrammarParser.number_return number708 = null;

        EsperEPL2GrammarParser.substitution_return substitution709 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES710_tree=null;
        CommonTree TIMEPERIOD_MINUTE711_tree=null;
        CommonTree MIN712_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1601:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1601:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1601:4: ( number | i= IDENT | substitution )
            int alt262=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt262=1;
                }
                break;
            case IDENT:
                {
                alt262=2;
                }
                break;
            case QUESTION:
                {
                alt262=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 262, 0, input);

                throw nvae;
            }

            switch (alt262) {
                case 1 :
                    // EsperEPL2Grammar.g:1601:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart10917);
                    number708=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number708.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1601:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart10921); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1601:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart10923);
                    substitution709=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution709.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1601:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt263=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt263=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt263=2;
                }
                break;
            case MIN:
                {
                alt263=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 263, 0, input);

                throw nvae;
            }

            switch (alt263) {
                case 1 :
                    // EsperEPL2Grammar.g:1601:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES710=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart10927); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES710);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1601:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE711=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart10931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE711);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1601:76: MIN
                    {
                    MIN712=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart10935); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN712);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1602:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1602:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1602:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1602:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1603:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1603:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1603:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1603:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1606:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS715=null;
        Token TIMEPERIOD_SECOND716=null;
        Token TIMEPERIOD_SEC717=null;
        EsperEPL2GrammarParser.number_return number713 = null;

        EsperEPL2GrammarParser.substitution_return substitution714 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS715_tree=null;
        CommonTree TIMEPERIOD_SECOND716_tree=null;
        CommonTree TIMEPERIOD_SEC717_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1607:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1607:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1607:4: ( number | i= IDENT | substitution )
            int alt264=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt264=1;
                }
                break;
            case IDENT:
                {
                alt264=2;
                }
                break;
            case QUESTION:
                {
                alt264=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 264, 0, input);

                throw nvae;
            }

            switch (alt264) {
                case 1 :
                    // EsperEPL2Grammar.g:1607:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart10985);
                    number713=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number713.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1607:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart10989); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1607:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart10991);
                    substitution714=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution714.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1607:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt265=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt265=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt265=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt265=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 265, 0, input);

                throw nvae;
            }

            switch (alt265) {
                case 1 :
                    // EsperEPL2Grammar.g:1607:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS715=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart10995); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS715);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1607:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND716=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart10999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND716);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1607:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC717=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC717);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1608:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1608:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1608:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1608:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1609:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1609:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1609:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1609:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1612:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS720=null;
        Token TIMEPERIOD_MILLISECOND721=null;
        Token TIMEPERIOD_MILLISEC722=null;
        EsperEPL2GrammarParser.number_return number718 = null;

        EsperEPL2GrammarParser.substitution_return substitution719 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS720_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND721_tree=null;
        CommonTree TIMEPERIOD_MILLISEC722_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1613:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1613:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1613:4: ( number | i= IDENT | substitution )
            int alt266=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt266=1;
                }
                break;
            case IDENT:
                {
                alt266=2;
                }
                break;
            case QUESTION:
                {
                alt266=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 266, 0, input);

                throw nvae;
            }

            switch (alt266) {
                case 1 :
                    // EsperEPL2Grammar.g:1613:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11053);
                    number718=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number718.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1613:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11057); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1613:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11059);
                    substitution719=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution719.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1613:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt267=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt267=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt267=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt267=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);

                throw nvae;
            }

            switch (alt267) {
                case 1 :
                    // EsperEPL2Grammar.g:1613:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS720=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11063); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS720);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1613:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND721=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11067); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND721);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1613:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC722=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11071); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC722);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1614:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1614:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1614:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1614:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1615:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1615:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1615:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1615:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1618:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1619:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt268=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt268=1;
                }
                break;
            case NUM_LONG:
                {
                alt268=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt268=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt268=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 268, 0, input);

                throw nvae;
            }

            switch (alt268) {
                case 1 :
                    // EsperEPL2Grammar.g:1619:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11126); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1619:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1620:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11143); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1620:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1621:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11160); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1621:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1622:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11177); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1622:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1625:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1626:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1626:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11198); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1626:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1629:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant723 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant724 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1630:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt269=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt269=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt269=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt269=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt269=4;
                }
                break;
            case VALUE_NULL:
                {
                alt269=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);

                throw nvae;
            }

            switch (alt269) {
                case 1 :
                    // EsperEPL2Grammar.g:1630:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant11217);
                    numberconstant723=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant723.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1631:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant11224);
                    stringconstant724=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant724.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1632:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11237); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1632:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1632:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1633:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant11257); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1633:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1633:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1634:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant11277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1634:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1634:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1637:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number725 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1638:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1638:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1638:5: (m= MINUS | p= PLUS )?
            int alt270=3;
            int LA270_0 = input.LA(1);

            if ( (LA270_0==MINUS) ) {
                alt270=1;
            }
            else if ( (LA270_0==PLUS) ) {
                alt270=2;
            }
            switch (alt270) {
                case 1 :
                    // EsperEPL2Grammar.g:1638:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1638:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11305); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11309);
            number725=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number725.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1639:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number725!=null?((CommonTree)number725.tree):null).getType(), "-" + (number725!=null?input.toString(number725.start,number725.stop):null)));

            }
            else // 1640:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1643:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1644:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt271=2;
            int LA271_0 = input.LA(1);

            if ( (LA271_0==STRING_LITERAL) ) {
                alt271=1;
            }
            else if ( (LA271_0==QUOTED_STRING_LITERAL) ) {
                alt271=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    // EsperEPL2Grammar.g:1644:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1644:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1644:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1645:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11354); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1645:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1645:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:789:4: ( streamSelector )
        // EsperEPL2Grammar.g:789:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3717);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:961:9: ( timePeriod )
        // EsperEPL2Grammar.g:961:10: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5049);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1130:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1130:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar6869);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1215:4: ( eventProperty )
        // EsperEPL2Grammar.g:1215:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7650);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1376:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1376:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9061);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1426:7: ( lastOperand )
        // EsperEPL2Grammar.g:1426:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9484);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1427:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1427:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9495);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1428:4: ( timePeriod )
        // EsperEPL2Grammar.g:1428:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9506);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1429:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1429:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9517);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1430:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1430:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9528);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1431:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1431:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9540);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1432:4: ( lastOperator )
        // EsperEPL2Grammar.g:1432:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9551);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1433:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1433:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9562);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1434:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1434:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9575);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA156 dfa156 = new DFA156(this);
    protected DFA183 dfa183 = new DFA183(this);
    protected DFA229 dfa229 = new DFA229(this);
    protected DFA243 dfa243 = new DFA243(this);
    static final String DFA156_eotS =
        "\u08fa\uffff";
    static final String DFA156_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\7\uffff\2"+
        "\16\2\uffff\2\16\u08ce\uffff";
    static final String DFA156_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\7\uffff\2\6\2\uffff\2\6\13\uffff\1\u00fe\153\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff"+
        "\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\5\71\uffff\1\u0107\71"+
        "\uffff\1\5\71\uffff\1\5\71\uffff\1\5\2\6\74\uffff\2\6\73\uffff\2"+
        "\6\73\uffff\2\6\71\uffff\2\6\73\uffff\2\6\73\uffff\2\6\73\uffff"+
        "\2\6\73\uffff\2\6\73\uffff\2\6\74\uffff\2\6\71\uffff\2\6\166\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\5\uffff"+
        "\1\0\114\uffff\1\0\30\uffff\1\0\30\uffff\1\0\53\uffff\1\0\5\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\53\uffff\1\0\5\uffff"+
        "\1\0\30\uffff\1\0\55\uffff\1\0\157\uffff";
    static final String DFA156_maxS =
        "\2\u011c\13\uffff\1\u011c\3\uffff\1\u0119\2\uffff\2\u0119\2\uffff"+
        "\4\u0119\1\uffff\2\u0119\7\uffff\2\u0119\2\uffff\2\u0119\13\uffff"+
        "\1\u00fe\153\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011c\71"+
        "\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011c"+
        "\71\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u0117"+
        "\71\uffff\1\u011c\71\uffff\1\u011c\71\uffff\1\u011a\2\u0114\74\uffff"+
        "\2\u0114\73\uffff\2\u0114\73\uffff\2\u0114\71\uffff\2\u0114\73\uffff"+
        "\2\u0114\73\uffff\2\u0114\73\uffff\2\u0114\73\uffff\2\u0114\73\uffff"+
        "\2\u0114\74\uffff\2\u0114\71\uffff\2\u0114\166\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\5\uffff\1\0\114\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff"+
        "\1\0\55\uffff\1\0\157\uffff";
    static final String DFA156_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\51\uffff\1\6\1\7\4\uffff"+
        "\1\1\50\uffff\1\10\1\4\u032f\uffff\74\6\2\uffff\73\6\2\uffff\73"+
        "\6\2\uffff\71\6\2\uffff\73\6\2\uffff\73\6\2\uffff\73\6\2\uffff\73"+
        "\6\2\uffff\73\6\2\uffff\72\6\4\uffff\71\6\2\uffff\71\6\1\11\74\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\5\6"+
        "\1\uffff\30\6\1\uffff\31\6\1\uffff\31\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\53\6\1\uffff\5\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\53\6\1\uffff\5\6\1\uffff\30\6\1\uffff\55\6\1\uffff\5"+
        "\6\1\uffff\31\6\1\uffff\63\6\1\uffff\32\6\1\uffff";
    static final String DFA156_specialS =
        "\1\0\u00a2\uffff\1\1\71\uffff\1\2\71\uffff\1\3\71\uffff\1\4\71"+
        "\uffff\1\5\71\uffff\1\6\71\uffff\1\7\71\uffff\1\10\71\uffff\1\11"+
        "\71\uffff\1\12\71\uffff\1\13\71\uffff\1\14\71\uffff\1\15\71\uffff"+
        "\1\16\1\17\1\20\74\uffff\1\21\1\22\73\uffff\1\23\1\24\73\uffff\1"+
        "\25\1\26\71\uffff\1\27\1\30\73\uffff\1\31\1\32\73\uffff\1\33\1\34"+
        "\73\uffff\1\35\1\36\73\uffff\1\37\1\40\73\uffff\1\41\1\42\74\uffff"+
        "\1\43\1\44\71\uffff\1\45\1\46\166\uffff\1\47\30\uffff\1\50\30\uffff"+
        "\1\51\30\uffff\1\52\30\uffff\1\53\5\uffff\1\54\114\uffff\1\55\30"+
        "\uffff\1\56\30\uffff\1\57\53\uffff\1\60\5\uffff\1\61\30\uffff\1"+
        "\62\30\uffff\1\63\30\uffff\1\64\53\uffff\1\65\5\uffff\1\66\30\uffff"+
        "\1\67\55\uffff\1\70\157\uffff}>";
    static final String[] DFA156_transitionS = {
            "\1\16\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\10\uffff\6\16\1\46\1\47\1\67\2\16\1\52\1\53\1\70"+
            "\1\uffff\1\16\1\uffff\3\16\14\uffff\3\2\5\uffff\3\16\u0083\uffff"+
            "\1\2\16\uffff\1\16\2\uffff\1\15\3\uffff\1\2\1\14\3\uffff\2\2"+
            "\11\uffff\1\1\2\uffff\1\71\1\uffff\1\2\2\uffff\1\16\2\2",
            "\1\76\4\uffff\1\76\3\uffff\1\76\3\uffff\11\76\10\uffff\1\76"+
            "\1\uffff\4\76\12\uffff\3\76\10\uffff\10\76\1\uffff\4\76\2\uffff"+
            "\1\76\1\uffff\3\76\24\uffff\3\76\u0083\uffff\1\2\16\uffff\1"+
            "\76\33\uffff\1\2\2\uffff\1\76\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\150\4\uffff\1\150\2\uffff\2\150\3\uffff\11\150\1\147\1"+
            "\150\6\uffff\1\150\1\uffff\4\150\12\uffff\3\150\10\uffff\16"+
            "\150\1\uffff\1\150\1\uffff\3\150\14\uffff\3\150\5\uffff\3\150"+
            "\u0083\uffff\1\150\16\uffff\1\150\2\uffff\1\150\3\uffff\2\150"+
            "\3\uffff\2\150\11\uffff\1\150\2\uffff\1\150\1\uffff\1\150\2"+
            "\uffff\3\150",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u00a3\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u00dd\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0117\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0151\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u018b\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u01c5\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u01ff\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0239\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0273\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u02ad\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u02e7\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u0321\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\6\uffff"+
            "\1\16\26\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\1\16\u0090"+
            "\uffff\1\16\1\uffff\2\16\1\u035b\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0395",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03c6\4\uffff\1\u03aa\2\uffff\1\u03d2\1\u03ab\3\uffff\1"+
            "\u03ac\1\u03ad\1\u03ae\1\u03af\1\u03b0\1\u03b1\1\u03b2\1\u03b3"+
            "\1\u03a9\1\uffff\1\u039a\6\uffff\1\u03c9\1\uffff\1\u03cb\1\u03c7"+
            "\1\u03c8\1\u03ca\5\uffff\1\u0399\1\u0398\3\uffff\1\u03b4\1\u03b5"+
            "\1\u03b6\10\uffff\1\u03b7\1\u03b8\1\u03b9\1\u03bb\1\u03bc\1"+
            "\u03bd\1\u03be\1\u03bf\1\u03cf\1\u03c0\1\u03c1\1\u03c2\1\u03c3"+
            "\1\u03d0\1\uffff\1\u03c4\1\uffff\1\u03c5\1\u03ba\1\u03a8\14"+
            "\uffff\1\u03a1\1\u03a2\1\u03a3\5\uffff\1\u03cc\1\u03cd\1\u03ce"+
            "\u0083\uffff\1\u03a0\16\uffff\1\u03a6\2\uffff\1\u03a5\1\uffff"+
            "\1\u03d3\1\uffff\1\u039c\1\u03a4\3\uffff\1\u0396\1\u0397\11"+
            "\uffff\1\u039b\2\uffff\1\u03d1\1\uffff\1\u039d\2\uffff\1\u03a7"+
            "\1\u039e\1\u039f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0404\4\uffff\1\u03e8\2\uffff\1\u0410\1\u03e9\3\uffff\1"+
            "\u03ea\1\u03eb\1\u03ec\1\u03ed\1\u03ee\1\u03ef\1\u03f0\1\u03f1"+
            "\1\u03e7\1\uffff\1\u03d8\6\uffff\1\u0407\1\uffff\1\u0409\1\u0405"+
            "\1\u0406\1\u0408\5\uffff\1\u03d7\1\u03d6\3\uffff\1\u03f2\1\u03f3"+
            "\1\u03f4\10\uffff\1\u03f5\1\u03f6\1\u03f7\1\u03f9\1\u03fa\1"+
            "\u03fb\1\u03fc\1\u03fd\1\u040d\1\u03fe\1\u03ff\1\u0400\1\u0401"+
            "\1\u040e\1\uffff\1\u0402\1\uffff\1\u0403\1\u03f8\1\u03e6\14"+
            "\uffff\1\u03df\1\u03e0\1\u03e1\5\uffff\1\u040a\1\u040b\1\u040c"+
            "\u0083\uffff\1\u03de\16\uffff\1\u03e4\2\uffff\1\u03e3\3\uffff"+
            "\1\u03da\1\u03e2\3\uffff\1\u03d4\1\u03d5\11\uffff\1\u03d9\2"+
            "\uffff\1\u040f\1\uffff\1\u03db\2\uffff\1\u03e5\1\u03dc\1\u03dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0441\4\uffff\1\u0425\2\uffff\1\u044d\1\u0426\3\uffff\1"+
            "\u0427\1\u0428\1\u0429\1\u042a\1\u042b\1\u042c\1\u042d\1\u042e"+
            "\1\u0424\1\uffff\1\u0415\6\uffff\1\u0444\1\uffff\1\u0446\1\u0442"+
            "\1\u0443\1\u0445\5\uffff\1\u0414\1\u0413\3\uffff\1\u042f\1\u0430"+
            "\1\u0431\10\uffff\1\u0432\1\u0433\1\u0434\1\u0436\1\u0437\1"+
            "\u0438\1\u0439\1\u043a\1\u044a\1\u043b\1\u043c\1\u043d\1\u043e"+
            "\1\u044b\1\uffff\1\u043f\1\uffff\1\u0440\1\u0435\1\u0423\14"+
            "\uffff\1\u041c\1\u041d\1\u041e\5\uffff\1\u0447\1\u0448\1\u0449"+
            "\u0083\uffff\1\u041b\16\uffff\1\u0421\2\uffff\1\u0420\3\uffff"+
            "\1\u0417\1\u041f\3\uffff\1\u0411\1\u0412\11\uffff\1\u0416\2"+
            "\uffff\1\u044c\1\uffff\1\u0418\2\uffff\1\u0422\1\u0419\1\u041a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u047c\4\uffff\1\u0460\2\uffff\1\u0488\1\u0461\3\uffff\1"+
            "\u0462\1\u0463\1\u0464\1\u0465\1\u0466\1\u0467\1\u0468\1\u0469"+
            "\1\u045f\1\uffff\1\u0450\6\uffff\1\u047f\1\uffff\1\u0481\1\u047d"+
            "\1\u047e\1\u0480\12\uffff\1\u046a\1\u046b\1\u046c\10\uffff\1"+
            "\u046d\1\u046e\1\u046f\1\u0471\1\u0472\1\u0473\1\u0474\1\u0475"+
            "\1\u0485\1\u0476\1\u0477\1\u0478\1\u0479\1\u0486\1\uffff\1\u047a"+
            "\1\uffff\1\u047b\1\u0470\1\u045e\14\uffff\1\u0457\1\u0458\1"+
            "\u0459\5\uffff\1\u0482\1\u0483\1\u0484\u0083\uffff\1\u0456\16"+
            "\uffff\1\u045c\2\uffff\1\u045b\3\uffff\1\u0452\1\u045a\3\uffff"+
            "\1\u044e\1\u044f\11\uffff\1\u0451\2\uffff\1\u0487\1\uffff\1"+
            "\u0453\2\uffff\1\u045d\1\u0454\1\u0455",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b9\4\uffff\1\u049d\2\uffff\1\u04c5\1\u049e\3\uffff\1"+
            "\u049f\1\u04a0\1\u04a1\1\u04a2\1\u04a3\1\u04a4\1\u04a5\1\u04a6"+
            "\1\u049c\1\uffff\1\u048d\6\uffff\1\u04bc\1\uffff\1\u04be\1\u04ba"+
            "\1\u04bb\1\u04bd\5\uffff\1\u048c\1\u048b\3\uffff\1\u04a7\1\u04a8"+
            "\1\u04a9\10\uffff\1\u04aa\1\u04ab\1\u04ac\1\u04ae\1\u04af\1"+
            "\u04b0\1\u04b1\1\u04b2\1\u04c2\1\u04b3\1\u04b4\1\u04b5\1\u04b6"+
            "\1\u04c3\1\uffff\1\u04b7\1\uffff\1\u04b8\1\u04ad\1\u049b\14"+
            "\uffff\1\u0494\1\u0495\1\u0496\5\uffff\1\u04bf\1\u04c0\1\u04c1"+
            "\u0083\uffff\1\u0493\16\uffff\1\u0499\2\uffff\1\u0498\3\uffff"+
            "\1\u048f\1\u0497\3\uffff\1\u0489\1\u048a\11\uffff\1\u048e\2"+
            "\uffff\1\u04c4\1\uffff\1\u0490\2\uffff\1\u049a\1\u0491\1\u0492",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04f6\4\uffff\1\u04da\2\uffff\1\u0502\1\u04db\3\uffff\1"+
            "\u04dc\1\u04dd\1\u04de\1\u04df\1\u04e0\1\u04e1\1\u04e2\1\u04e3"+
            "\1\u04d9\1\uffff\1\u04ca\6\uffff\1\u04f9\1\uffff\1\u04fb\1\u04f7"+
            "\1\u04f8\1\u04fa\5\uffff\1\u04c9\1\u04c8\3\uffff\1\u04e4\1\u04e5"+
            "\1\u04e6\10\uffff\1\u04e7\1\u04e8\1\u04e9\1\u04eb\1\u04ec\1"+
            "\u04ed\1\u04ee\1\u04ef\1\u04ff\1\u04f0\1\u04f1\1\u04f2\1\u04f3"+
            "\1\u0500\1\uffff\1\u04f4\1\uffff\1\u04f5\1\u04ea\1\u04d8\14"+
            "\uffff\1\u04d1\1\u04d2\1\u04d3\5\uffff\1\u04fc\1\u04fd\1\u04fe"+
            "\u0083\uffff\1\u04d0\16\uffff\1\u04d6\2\uffff\1\u04d5\3\uffff"+
            "\1\u04cc\1\u04d4\3\uffff\1\u04c6\1\u04c7\11\uffff\1\u04cb\2"+
            "\uffff\1\u0501\1\uffff\1\u04cd\2\uffff\1\u04d7\1\u04ce\1\u04cf",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0533\4\uffff\1\u0517\2\uffff\1\u053f\1\u0518\3\uffff\1"+
            "\u0519\1\u051a\1\u051b\1\u051c\1\u051d\1\u051e\1\u051f\1\u0520"+
            "\1\u0516\1\uffff\1\u0507\6\uffff\1\u0536\1\uffff\1\u0538\1\u0534"+
            "\1\u0535\1\u0537\5\uffff\1\u0506\1\u0505\3\uffff\1\u0521\1\u0522"+
            "\1\u0523\10\uffff\1\u0524\1\u0525\1\u0526\1\u0528\1\u0529\1"+
            "\u052a\1\u052b\1\u052c\1\u053c\1\u052d\1\u052e\1\u052f\1\u0530"+
            "\1\u053d\1\uffff\1\u0531\1\uffff\1\u0532\1\u0527\1\u0515\14"+
            "\uffff\1\u050e\1\u050f\1\u0510\5\uffff\1\u0539\1\u053a\1\u053b"+
            "\u0083\uffff\1\u050d\16\uffff\1\u0513\2\uffff\1\u0512\3\uffff"+
            "\1\u0509\1\u0511\3\uffff\1\u0503\1\u0504\11\uffff\1\u0508\2"+
            "\uffff\1\u053e\1\uffff\1\u050a\2\uffff\1\u0514\1\u050b\1\u050c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0570\4\uffff\1\u0554\2\uffff\1\u057c\1\u0555\3\uffff\1"+
            "\u0556\1\u0557\1\u0558\1\u0559\1\u055a\1\u055b\1\u055c\1\u055d"+
            "\1\u0553\1\uffff\1\u0544\6\uffff\1\u0573\1\uffff\1\u0575\1\u0571"+
            "\1\u0572\1\u0574\5\uffff\1\u0543\1\u0542\3\uffff\1\u055e\1\u055f"+
            "\1\u0560\10\uffff\1\u0561\1\u0562\1\u0563\1\u0565\1\u0566\1"+
            "\u0567\1\u0568\1\u0569\1\u0579\1\u056a\1\u056b\1\u056c\1\u056d"+
            "\1\u057a\1\uffff\1\u056e\1\uffff\1\u056f\1\u0564\1\u0552\14"+
            "\uffff\1\u054b\1\u054c\1\u054d\5\uffff\1\u0576\1\u0577\1\u0578"+
            "\u0083\uffff\1\u054a\16\uffff\1\u0550\2\uffff\1\u054f\3\uffff"+
            "\1\u0546\1\u054e\3\uffff\1\u0540\1\u0541\11\uffff\1\u0545\2"+
            "\uffff\1\u057b\1\uffff\1\u0547\2\uffff\1\u0551\1\u0548\1\u0549",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05ad\4\uffff\1\u0591\2\uffff\1\u05b9\1\u0592\3\uffff\1"+
            "\u0593\1\u0594\1\u0595\1\u0596\1\u0597\1\u0598\1\u0599\1\u059a"+
            "\1\u0590\1\uffff\1\u0581\6\uffff\1\u05b0\1\uffff\1\u05b2\1\u05ae"+
            "\1\u05af\1\u05b1\5\uffff\1\u0580\1\u057f\3\uffff\1\u059b\1\u059c"+
            "\1\u059d\10\uffff\1\u059e\1\u059f\1\u05a0\1\u05a2\1\u05a3\1"+
            "\u05a4\1\u05a5\1\u05a6\1\u05b6\1\u05a7\1\u05a8\1\u05a9\1\u05aa"+
            "\1\u05b7\1\uffff\1\u05ab\1\uffff\1\u05ac\1\u05a1\1\u058f\14"+
            "\uffff\1\u0588\1\u0589\1\u058a\5\uffff\1\u05b3\1\u05b4\1\u05b5"+
            "\u0083\uffff\1\u0587\16\uffff\1\u058d\2\uffff\1\u058c\3\uffff"+
            "\1\u0583\1\u058b\3\uffff\1\u057d\1\u057e\11\uffff\1\u0582\2"+
            "\uffff\1\u05b8\1\uffff\1\u0584\2\uffff\1\u058e\1\u0585\1\u0586",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05e8\4\uffff\1\u05cc\2\uffff\1\u05f4\1\u05cd\3\uffff\1"+
            "\u05ce\1\u05cf\1\u05d0\1\u05d1\1\u05d2\1\u05d3\1\u05d4\1\u05d5"+
            "\1\u05cb\1\uffff\1\u05bc\6\uffff\1\u05eb\1\uffff\1\u05ed\1\u05e9"+
            "\1\u05ea\1\u05ec\12\uffff\1\u05d6\1\u05d7\1\u05d8\10\uffff\1"+
            "\u05d9\1\u05da\1\u05db\1\u05dd\1\u05de\1\u05df\1\u05e0\1\u05e1"+
            "\1\u05f1\1\u05e2\1\u05e3\1\u05e4\1\u05e5\1\u05f2\1\uffff\1\u05e6"+
            "\1\uffff\1\u05e7\1\u05dc\1\u05ca\14\uffff\1\u05c3\1\u05c4\1"+
            "\u05c5\5\uffff\1\u05ee\1\u05ef\1\u05f0\u0083\uffff\1\u05c2\16"+
            "\uffff\1\u05c8\2\uffff\1\u05c7\3\uffff\1\u05be\1\u05c6\3\uffff"+
            "\1\u05ba\1\u05bb\11\uffff\1\u05bd\2\uffff\1\u05f3\1\uffff\1"+
            "\u05bf\2\uffff\1\u05c9\1\u05c0\1\u05c1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u05f5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0626\4\uffff\1\u060a\2\uffff\1\u0632\1\u060b\3\uffff\1"+
            "\u060c\1\u060d\1\u060e\1\u060f\1\u0610\1\u0611\1\u0612\1\u0613"+
            "\1\u0609\1\uffff\1\u05fa\6\uffff\1\u0629\1\uffff\1\u062b\1\u0627"+
            "\1\u0628\1\u062a\12\uffff\1\u0614\1\u0615\1\u0616\10\uffff\1"+
            "\u0617\1\u0618\1\u0619\1\u061b\1\u061c\1\u061d\1\u061e\1\u061f"+
            "\1\u062f\1\u0620\1\u0621\1\u0622\1\u0623\1\u0630\1\uffff\1\u0624"+
            "\1\uffff\1\u0625\1\u061a\1\u0608\14\uffff\1\u0601\1\u0602\1"+
            "\u0603\5\uffff\1\u062c\1\u062d\1\u062e\u0083\uffff\1\u0600\16"+
            "\uffff\1\u0606\2\uffff\1\u0605\3\uffff\1\u05fc\1\u0604\3\uffff"+
            "\1\u05f8\1\u05f9\11\uffff\1\u05fb\2\uffff\1\u0631\1\uffff\1"+
            "\u05fd\2\uffff\1\u0607\1\u05fe\1\u05ff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0661\4\uffff\1\u0645\2\uffff\1\u066d\1\u0646\3\uffff\1"+
            "\u0647\1\u0648\1\u0649\1\u064a\1\u064b\1\u064c\1\u064d\1\u064e"+
            "\1\u0644\1\uffff\1\u0635\6\uffff\1\u0664\1\uffff\1\u0666\1\u0662"+
            "\1\u0663\1\u0665\12\uffff\1\u064f\1\u0650\1\u0651\10\uffff\1"+
            "\u0652\1\u0653\1\u0654\1\u0656\1\u0657\1\u0658\1\u0659\1\u065a"+
            "\1\u066a\1\u065b\1\u065c\1\u065d\1\u065e\1\u066b\1\uffff\1\u065f"+
            "\1\uffff\1\u0660\1\u0655\1\u0643\14\uffff\1\u063c\1\u063d\1"+
            "\u063e\5\uffff\1\u0667\1\u0668\1\u0669\u0083\uffff\1\u063b\16"+
            "\uffff\1\u0641\2\uffff\1\u0640\3\uffff\1\u0637\1\u063f\3\uffff"+
            "\1\u0633\1\u0634\11\uffff\1\u0636\2\uffff\1\u066c\1\uffff\1"+
            "\u0638\2\uffff\1\u0642\1\u0639\1\u063a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u068f\4\uffff\1\u0673\3\uffff\1\u0674\3\uffff\1\u0675\1"+
            "\u0676\1\u0677\1\u0678\1\u0679\1\u067a\1\u067b\1\u067c\1\u0672"+
            "\1\u066e\7\uffff\1\u0692\1\uffff\1\u0694\1\u0690\1\u0691\1\u0693"+
            "\12\uffff\1\u067d\1\u067e\1\u067f\10\uffff\1\u0680\1\u0681\1"+
            "\u0682\1\u0684\1\u0685\1\u0686\1\u0687\1\u0688\1\uffff\1\u0689"+
            "\1\u068a\1\u068b\1\u068c\2\uffff\1\u068d\1\uffff\1\u068e\1\u0683"+
            "\1\u0671\24\uffff\1\u0695\1\u0696\1\u0697\u0092\uffff\1\u066f"+
            "\36\uffff\1\u0670",
            "\1\u06ad\1\u06ae\1\u06af\1\u06b0\1\uffff\1\u06aa\1\u06a9\1"+
            "\u06ac\34\uffff\1\u06a3\u00d1\uffff\1\u06a2\2\uffff\1\u06ab"+
            "\1\u0698\1\u06a7\1\u069b\6\uffff\1\u06a6\1\u06a8\1\u06a4\1\u06a5"+
            "\1\u069e\1\u069f\1\u06a0\1\u06a1\1\u069d\1\u069c\1\u0699\1\u069a",
            "\1\u06c6\1\u06c7\1\u06c8\1\u06c9\1\uffff\1\u06c3\1\u06c2\1"+
            "\u06c5\34\uffff\1\u06bc\u00d1\uffff\1\u06bb\2\uffff\1\u06c4"+
            "\1\u06b1\1\u06c0\1\u06b4\6\uffff\1\u06bf\1\u06c1\1\u06bd\1\u06be"+
            "\1\u06b7\1\u06b8\1\u06b9\1\u06ba\1\u06b6\1\u06b5\1\u06b2\1\u06b3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06df\1\u06e0\1\u06e1\1\u06e2\1\uffff\1\u06dc\1\u06db\1"+
            "\u06de\34\uffff\1\u06d5\u00d1\uffff\1\u06d4\2\uffff\1\u06dd"+
            "\1\u06ca\1\u06d9\1\u06cd\6\uffff\1\u06d8\1\u06da\1\u06d6\1\u06d7"+
            "\1\u06d0\1\u06d1\1\u06d2\1\u06d3\1\u06cf\1\u06ce\1\u06cb\1\u06cc",
            "\1\u06f8\1\u06f9\1\u06fa\1\u06fb\1\uffff\1\u06f5\1\u06f4\1"+
            "\u06f7\34\uffff\1\u06ee\u00d1\uffff\1\u06ed\2\uffff\1\u06f6"+
            "\1\u06e3\1\u06f2\1\u06e6\6\uffff\1\u06f1\1\u06f3\1\u06ef\1\u06f0"+
            "\1\u06e9\1\u06ea\1\u06eb\1\u06ec\1\u06e8\1\u06e7\1\u06e4\1\u06e5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0711\1\u0712\1\u0713\1\u0714\1\uffff\1\u070e\1\u070d\1"+
            "\u0710\34\uffff\1\u0707\u00d1\uffff\1\u0706\2\uffff\1\u070f"+
            "\1\u06fc\1\u070b\1\u06ff\6\uffff\1\u070a\1\u070c\1\u0708\1\u0709"+
            "\1\u0702\1\u0703\1\u0704\1\u0705\1\u0701\1\u0700\1\u06fd\1\u06fe",
            "\1\u072a\1\u072b\1\u072c\1\u072d\1\uffff\1\u0728\1\u0727\1"+
            "\u0729\34\uffff\1\u0721\u00d1\uffff\1\u0720\2\uffff\1\u0715"+
            "\1\u0716\1\u0725\1\u0719\6\uffff\1\u0724\1\u0726\1\u0722\1\u0723"+
            "\1\u071c\1\u071d\1\u071e\1\u071f\1\u071b\1\u071a\1\u0717\1\u0718",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0744\1\u0745\1\u0746\1\u0747\1\uffff\1\u0741\1\u0740\1"+
            "\u0743\34\uffff\1\u073a\u00cf\uffff\1\u0742\1\uffff\1\u0739"+
            "\2\uffff\1\16\1\u072f\1\u073e\1\u0732\6\uffff\1\u073d\1\u073f"+
            "\1\u073b\1\u073c\1\u0735\1\u0736\1\u0737\1\u0738\1\u0734\1\u0733"+
            "\1\u0730\1\u0731",
            "\1\u075e\1\u075f\1\u0760\1\u0761\1\uffff\1\u075b\1\u075a\1"+
            "\u075d\34\uffff\1\u0754\u00cf\uffff\1\u075c\1\uffff\1\u0753"+
            "\2\uffff\1\16\1\u0749\1\u0758\1\u074c\6\uffff\1\u0757\1\u0759"+
            "\1\u0755\1\u0756\1\u074f\1\u0750\1\u0751\1\u0752\1\u074e\1\u074d"+
            "\1\u074a\1\u074b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0777\1\u0778\1\u0779\1\u077a\1\uffff\1\u0775\1\u0774\1"+
            "\u0776\34\uffff\1\u076e\u00d1\uffff\1\u076d\2\uffff\1\u0762"+
            "\1\u0763\1\u0772\1\u0766\6\uffff\1\u0771\1\u0773\1\u076f\1\u0770"+
            "\1\u0769\1\u076a\1\u076b\1\u076c\1\u0768\1\u0767\1\u0764\1\u0765",
            "\1\u0790\1\u0791\1\u0792\1\u0793\1\uffff\1\u078e\1\u078d\1"+
            "\u078f\34\uffff\1\u0787\u00d1\uffff\1\u0786\2\uffff\1\u077b"+
            "\1\u077c\1\u078b\1\u077f\6\uffff\1\u078a\1\u078c\1\u0788\1\u0789"+
            "\1\u0782\1\u0783\1\u0784\1\u0785\1\u0781\1\u0780\1\u077d\1\u077e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07a9\1\u07aa\1\u07ab\1\u07ac\1\uffff\1\u07a7\1\u07a6\1"+
            "\u07a8\34\uffff\1\u07a0\u00d1\uffff\1\u079f\2\uffff\1\u0794"+
            "\1\u0795\1\u07a4\1\u0798\6\uffff\1\u07a3\1\u07a5\1\u07a1\1\u07a2"+
            "\1\u079b\1\u079c\1\u079d\1\u079e\1\u079a\1\u0799\1\u0796\1\u0797",
            "\1\u07c2\1\u07c3\1\u07c4\1\u07c5\1\uffff\1\u07bf\1\u07be\1"+
            "\u07c1\34\uffff\1\u07b8\u00d1\uffff\1\u07b7\2\uffff\1\u07c0"+
            "\1\u07ad\1\u07bc\1\u07b0\6\uffff\1\u07bb\1\u07bd\1\u07b9\1\u07ba"+
            "\1\u07b3\1\u07b4\1\u07b5\1\u07b6\1\u07b2\1\u07b1\1\u07ae\1\u07af",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07db\1\u07dc\1\u07dd\1\u07de\1\uffff\1\u07d9\1\u07d8\1"+
            "\u07da\34\uffff\1\u07d2\u00d1\uffff\1\u07d1\2\uffff\1\u07c6"+
            "\1\u07c7\1\u07d6\1\u07ca\6\uffff\1\u07d5\1\u07d7\1\u07d3\1\u07d4"+
            "\1\u07cd\1\u07ce\1\u07cf\1\u07d0\1\u07cc\1\u07cb\1\u07c8\1\u07c9",
            "\1\u07f4\1\u07f5\1\u07f6\1\u07f7\1\uffff\1\u07f2\1\u07f1\1"+
            "\u07f3\34\uffff\1\u07eb\u00d1\uffff\1\u07ea\2\uffff\1\u07df"+
            "\1\u07e0\1\u07ef\1\u07e3\6\uffff\1\u07ee\1\u07f0\1\u07ec\1\u07ed"+
            "\1\u07e6\1\u07e7\1\u07e8\1\u07e9\1\u07e5\1\u07e4\1\u07e1\1\u07e2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u080d\1\u080e\1\u080f\1\u0810\1\uffff\1\u080b\1\u080a\1"+
            "\u080c\34\uffff\1\u0804\u00d1\uffff\1\u0803\2\uffff\1\u07f8"+
            "\1\u07f9\1\u0808\1\u07fc\6\uffff\1\u0807\1\u0809\1\u0805\1\u0806"+
            "\1\u07ff\1\u0800\1\u0801\1\u0802\1\u07fe\1\u07fd\1\u07fa\1\u07fb",
            "\1\u0826\1\u0827\1\u0828\1\u0829\1\uffff\1\u0824\1\u0823\1"+
            "\u0825\34\uffff\1\u081d\u00d1\uffff\1\u081c\2\uffff\1\u0811"+
            "\1\u0812\1\u0821\1\u0815\6\uffff\1\u0820\1\u0822\1\u081e\1\u081f"+
            "\1\u0818\1\u0819\1\u081a\1\u081b\1\u0817\1\u0816\1\u0813\1\u0814",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u083f\1\u0840\1\u0841\1\u0842\1\uffff\1\u083c\1\u083b\1"+
            "\u083e\34\uffff\1\u0835\u00d1\uffff\1\u0834\2\uffff\1\u083d"+
            "\1\u082a\1\u0839\1\u082d\6\uffff\1\u0838\1\u083a\1\u0836\1\u0837"+
            "\1\u0830\1\u0831\1\u0832\1\u0833\1\u082f\1\u082e\1\u082b\1\u082c",
            "\1\u0858\1\u0859\1\u085a\1\u085b\1\uffff\1\u0856\1\u0855\1"+
            "\u0857\34\uffff\1\u084f\u00d1\uffff\1\u084e\2\uffff\1\u0843"+
            "\1\u0844\1\u0853\1\u0847\6\uffff\1\u0852\1\u0854\1\u0850\1\u0851"+
            "\1\u084a\1\u084b\1\u084c\1\u084d\1\u0849\1\u0848\1\u0845\1\u0846",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0872\1\u0873\1\u0874\1\u0875\1\uffff\1\u086f\1\u086e\1"+
            "\u0871\34\uffff\1\u0868\u00cf\uffff\1\u0870\1\uffff\1\u0867"+
            "\2\uffff\1\u085c\1\u085d\1\u086c\1\u0860\6\uffff\1\u086b\1\u086d"+
            "\1\u0869\1\u086a\1\u0863\1\u0864\1\u0865\1\u0866\1\u0862\1\u0861"+
            "\1\u085e\1\u085f",
            "\1\u088c\1\u088d\1\u088e\1\u088f\1\uffff\1\u0888\1\u0887\1"+
            "\u088b\34\uffff\1\u0881\u00cf\uffff\1\u0889\1\uffff\1\u0880"+
            "\2\uffff\1\u088a\1\u0876\1\u0885\1\u0879\6\uffff\1\u0884\1\u0886"+
            "\1\u0882\1\u0883\1\u087c\1\u087d\1\u087e\1\u087f\1\u087b\1\u087a"+
            "\1\u0877\1\u0878",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08a6\1\u08a7\1\u08a8\1\u08a9\1\uffff\1\u08a3\1\u08a2\1"+
            "\u08a5\34\uffff\1\u089c\u00cf\uffff\1\u08a4\1\uffff\1\u089b"+
            "\2\uffff\1\16\1\u0891\1\u08a0\1\u0894\6\uffff\1\u089f\1\u08a1"+
            "\1\u089d\1\u089e\1\u0897\1\u0898\1\u0899\1\u089a\1\u0896\1\u0895"+
            "\1\u0892\1\u0893",
            "\1\u08c0\1\u08c1\1\u08c2\1\u08c3\1\uffff\1\u08bd\1\u08bc\1"+
            "\u08bf\34\uffff\1\u08b6\u00cf\uffff\1\u08be\1\uffff\1\u08b5"+
            "\2\uffff\1\16\1\u08ab\1\u08ba\1\u08ae\6\uffff\1\u08b9\1\u08bb"+
            "\1\u08b7\1\u08b8\1\u08b1\1\u08b2\1\u08b3\1\u08b4\1\u08b0\1\u08af"+
            "\1\u08ac\1\u08ad",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08da\1\u08db\1\u08dc\1\u08dd\1\uffff\1\u08d6\1\u08d5\1"+
            "\u08d9\3\uffff\1\u08d8\30\uffff\1\u08cf\u00cf\uffff\1\u08d7"+
            "\1\uffff\1\u08ce\2\uffff\1\16\1\u08c4\1\u08d3\1\u08c7\6\uffff"+
            "\1\u08d2\1\u08d4\1\u08d0\1\u08d1\1\u08ca\1\u08cb\1\u08cc\1\u08cd"+
            "\1\u08c9\1\u08c8\1\u08c5\1\u08c6",
            "\1\u08f5\1\u08f6\1\u08f7\1\u08f8\1\uffff\1\u08f1\1\u08f0\1"+
            "\u08f4\3\uffff\1\u08f3\30\uffff\1\u08ea\u00cf\uffff\1\u08f2"+
            "\1\uffff\1\u08e9\2\uffff\1\16\1\u08df\1\u08ee\1\u08e2\6\uffff"+
            "\1\u08ed\1\u08ef\1\u08eb\1\u08ec\1\u08e5\1\u08e6\1\u08e7\1\u08e8"+
            "\1\u08e4\1\u08e3\1\u08e0\1\u08e1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA156_eot = DFA.unpackEncodedString(DFA156_eotS);
    static final short[] DFA156_eof = DFA.unpackEncodedString(DFA156_eofS);
    static final char[] DFA156_min = DFA.unpackEncodedStringToUnsignedChars(DFA156_minS);
    static final char[] DFA156_max = DFA.unpackEncodedStringToUnsignedChars(DFA156_maxS);
    static final short[] DFA156_accept = DFA.unpackEncodedString(DFA156_acceptS);
    static final short[] DFA156_special = DFA.unpackEncodedString(DFA156_specialS);
    static final short[][] DFA156_transition;

    static {
        int numStates = DFA156_transitionS.length;
        DFA156_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA156_transition[i] = DFA.unpackEncodedString(DFA156_transitionS[i]);
        }
    }

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = DFA156_eot;
            this.eof = DFA156_eof;
            this.min = DFA156_min;
            this.max = DFA156_max;
            this.accept = DFA156_accept;
            this.special = DFA156_special;
            this.transition = DFA156_transition;
        }
        public String getDescription() {
            return "1124:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_0 = input.LA(1);

                         
                        int index156_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_0==MINUS) ) {s = 1;}

                        else if ( ((LA156_0>=BOOLEAN_TRUE && LA156_0<=VALUE_NULL)||LA156_0==NUM_DOUBLE||LA156_0==PLUS||(LA156_0>=STRING_LITERAL && LA156_0<=QUOTED_STRING_LITERAL)||LA156_0==NUM_INT||(LA156_0>=NUM_LONG && LA156_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA156_0==QUESTION) ) {s = 12;}

                        else if ( (LA156_0==LPAREN) ) {s = 13;}

                        else if ( (LA156_0==WINDOW||LA156_0==ESCAPE||LA156_0==EVERY_EXPR||(LA156_0>=MAX && LA156_0<=MIN)||LA156_0==OUTER||(LA156_0>=JOIN && LA156_0<=FULL)||LA156_0==EVENTS||(LA156_0>=UNIDIRECTIONAL && LA156_0<=METADATASQL)||(LA156_0>=WEEKDAY && LA156_0<=LW)||LA156_0==SNAPSHOT||(LA156_0>=VARIABLE && LA156_0<=AT)||(LA156_0>=DEFINE && LA156_0<=MATCHES)||LA156_0==IDENT||LA156_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA156_0==COUNT) ) {s = 17;}

                        else if ( (LA156_0==SUM) ) {s = 20;}

                        else if ( (LA156_0==AVG) ) {s = 21;}

                        else if ( (LA156_0==COALESCE) ) {s = 24;}

                        else if ( (LA156_0==MEDIAN) ) {s = 25;}

                        else if ( (LA156_0==STDDEV) ) {s = 26;}

                        else if ( (LA156_0==AVEDEV) ) {s = 27;}

                        else if ( (LA156_0==FIRST) ) {s = 29;}

                        else if ( (LA156_0==LAST) ) {s = 30;}

                        else if ( (LA156_0==PREVIOUS) ) {s = 38;}

                        else if ( (LA156_0==PRIOR) ) {s = 39;}

                        else if ( (LA156_0==INSTANCEOF) ) {s = 42;}

                        else if ( (LA156_0==CAST) ) {s = 43;}

                        else if ( (LA156_0==EXISTS) ) {s = 55;}

                        else if ( (LA156_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA156_0==LCURLY) ) {s = 57;}

                         
                        input.seek(index156_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA156_163 = input.LA(1);

                         
                        int index156_163 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_163==STRING_LITERAL) ) {s = 918;}

                        else if ( (LA156_163==QUOTED_STRING_LITERAL) ) {s = 919;}

                        else if ( (LA156_163==ALL) && (synpred3_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA156_163==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA156_163==CASE) && (synpred3_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA156_163==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA156_163==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA156_163==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA156_163==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA156_163==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA156_163==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA156_163==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA156_163==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA156_163==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA156_163==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA156_163==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA156_163==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA156_163==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA156_163==AT) && (synpred3_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA156_163==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA156_163==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA156_163==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA156_163==SUM) && (synpred3_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA156_163==AVG) && (synpred3_EsperEPL2Grammar())) {s = 941;}

                        else if ( (LA156_163==MAX) && (synpred3_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA156_163==MIN) && (synpred3_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA156_163==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 944;}

                        else if ( (LA156_163==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA156_163==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA156_163==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA156_163==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA156_163==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA156_163==LAST) && (synpred3_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA156_163==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA156_163==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA156_163==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA156_163==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA156_163==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA156_163==SQL) && (synpred3_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA156_163==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA156_163==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA156_163==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA156_163==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA156_163==LW) && (synpred3_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA156_163==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA156_163==CAST) && (synpred3_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA156_163==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA156_163==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA156_163==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA156_163==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA156_163==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA156_163==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA156_163==FULL) && (synpred3_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA156_163==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA156_163==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA156_163==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA156_163==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA156_163==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA156_163==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA156_163==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA156_163==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA156_163==STAR) && (synpred3_EsperEPL2Grammar())) {s = 979;}

                         
                        input.seek(index156_163);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA156_221 = input.LA(1);

                         
                        int index156_221 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_221==STRING_LITERAL) ) {s = 980;}

                        else if ( (LA156_221==QUOTED_STRING_LITERAL) ) {s = 981;}

                        else if ( (LA156_221==ALL) && (synpred3_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA156_221==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA156_221==CASE) && (synpred3_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA156_221==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA156_221==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA156_221==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA156_221==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA156_221==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA156_221==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA156_221==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA156_221==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA156_221==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA156_221==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA156_221==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA156_221==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA156_221==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA156_221==AT) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA156_221==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA156_221==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA156_221==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA156_221==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA156_221==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA156_221==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA156_221==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA156_221==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA156_221==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA156_221==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA156_221==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA156_221==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA156_221==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA156_221==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA156_221==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA156_221==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA156_221==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA156_221==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA156_221==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA156_221==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA156_221==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA156_221==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA156_221==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA156_221==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA156_221==LW) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA156_221==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA156_221==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA156_221==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA156_221==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA156_221==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA156_221==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA156_221==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA156_221==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA156_221==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA156_221==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA156_221==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA156_221==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA156_221==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA156_221==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA156_221==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA156_221==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA156_221==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                         
                        input.seek(index156_221);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA156_279 = input.LA(1);

                         
                        int index156_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_279==STRING_LITERAL) ) {s = 1041;}

                        else if ( (LA156_279==QUOTED_STRING_LITERAL) ) {s = 1042;}

                        else if ( (LA156_279==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA156_279==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA156_279==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA156_279==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA156_279==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA156_279==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA156_279==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA156_279==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA156_279==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA156_279==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA156_279==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA156_279==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA156_279==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA156_279==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA156_279==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA156_279==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA156_279==AT) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA156_279==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA156_279==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA156_279==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA156_279==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA156_279==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA156_279==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA156_279==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA156_279==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA156_279==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA156_279==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA156_279==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA156_279==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA156_279==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA156_279==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA156_279==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA156_279==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA156_279==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA156_279==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA156_279==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA156_279==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA156_279==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA156_279==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA156_279==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA156_279==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA156_279==LW) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA156_279==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA156_279==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA156_279==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA156_279==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA156_279==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA156_279==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA156_279==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA156_279==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA156_279==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA156_279==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA156_279==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA156_279==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA156_279==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA156_279==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA156_279==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA156_279==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA156_279==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                         
                        input.seek(index156_279);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA156_337 = input.LA(1);

                         
                        int index156_337 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_337==STRING_LITERAL) ) {s = 1102;}

                        else if ( (LA156_337==QUOTED_STRING_LITERAL) ) {s = 1103;}

                        else if ( (LA156_337==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA156_337==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA156_337==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA156_337==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA156_337==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA156_337==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA156_337==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA156_337==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA156_337==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA156_337==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA156_337==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA156_337==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA156_337==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA156_337==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA156_337==AT) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA156_337==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA156_337==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA156_337==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA156_337==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA156_337==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA156_337==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA156_337==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA156_337==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA156_337==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA156_337==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA156_337==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA156_337==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA156_337==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA156_337==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA156_337==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA156_337==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA156_337==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA156_337==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA156_337==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA156_337==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA156_337==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA156_337==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA156_337==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA156_337==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA156_337==LW) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA156_337==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA156_337==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA156_337==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA156_337==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA156_337==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA156_337==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA156_337==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA156_337==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA156_337==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA156_337==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA156_337==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA156_337==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA156_337==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA156_337==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA156_337==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA156_337==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA156_337==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                         
                        input.seek(index156_337);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA156_395 = input.LA(1);

                         
                        int index156_395 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_395==STRING_LITERAL) ) {s = 1161;}

                        else if ( (LA156_395==QUOTED_STRING_LITERAL) ) {s = 1162;}

                        else if ( (LA156_395==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA156_395==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA156_395==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA156_395==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA156_395==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA156_395==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA156_395==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA156_395==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA156_395==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA156_395==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA156_395==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA156_395==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA156_395==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA156_395==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA156_395==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA156_395==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA156_395==AT) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA156_395==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA156_395==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA156_395==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA156_395==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA156_395==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA156_395==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA156_395==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA156_395==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA156_395==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA156_395==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA156_395==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA156_395==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA156_395==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA156_395==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA156_395==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA156_395==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA156_395==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA156_395==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA156_395==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA156_395==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA156_395==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA156_395==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA156_395==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA156_395==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA156_395==LW) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA156_395==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA156_395==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA156_395==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA156_395==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA156_395==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA156_395==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA156_395==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA156_395==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA156_395==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA156_395==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA156_395==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA156_395==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA156_395==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA156_395==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA156_395==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA156_395==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA156_395==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                         
                        input.seek(index156_395);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA156_453 = input.LA(1);

                         
                        int index156_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_453==STRING_LITERAL) ) {s = 1222;}

                        else if ( (LA156_453==QUOTED_STRING_LITERAL) ) {s = 1223;}

                        else if ( (LA156_453==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA156_453==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA156_453==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA156_453==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA156_453==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA156_453==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA156_453==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA156_453==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA156_453==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA156_453==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA156_453==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA156_453==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA156_453==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA156_453==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA156_453==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA156_453==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA156_453==AT) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA156_453==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA156_453==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA156_453==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA156_453==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA156_453==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA156_453==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA156_453==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA156_453==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA156_453==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA156_453==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA156_453==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA156_453==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA156_453==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA156_453==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA156_453==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA156_453==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA156_453==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA156_453==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA156_453==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA156_453==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA156_453==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA156_453==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA156_453==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA156_453==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA156_453==LW) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA156_453==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA156_453==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA156_453==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA156_453==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA156_453==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA156_453==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA156_453==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA156_453==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA156_453==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA156_453==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA156_453==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA156_453==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA156_453==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA156_453==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA156_453==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA156_453==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA156_453==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                         
                        input.seek(index156_453);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA156_511 = input.LA(1);

                         
                        int index156_511 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_511==STRING_LITERAL) ) {s = 1283;}

                        else if ( (LA156_511==QUOTED_STRING_LITERAL) ) {s = 1284;}

                        else if ( (LA156_511==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA156_511==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA156_511==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA156_511==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA156_511==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA156_511==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA156_511==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA156_511==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA156_511==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA156_511==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA156_511==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA156_511==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA156_511==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA156_511==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA156_511==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA156_511==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA156_511==AT) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA156_511==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA156_511==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA156_511==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA156_511==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA156_511==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA156_511==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA156_511==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA156_511==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA156_511==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA156_511==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA156_511==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA156_511==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA156_511==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA156_511==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA156_511==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA156_511==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA156_511==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA156_511==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA156_511==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA156_511==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA156_511==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA156_511==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA156_511==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA156_511==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA156_511==LW) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA156_511==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA156_511==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA156_511==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA156_511==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA156_511==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA156_511==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA156_511==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA156_511==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA156_511==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA156_511==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA156_511==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA156_511==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA156_511==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA156_511==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA156_511==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA156_511==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA156_511==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                         
                        input.seek(index156_511);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA156_569 = input.LA(1);

                         
                        int index156_569 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_569==STRING_LITERAL) ) {s = 1344;}

                        else if ( (LA156_569==QUOTED_STRING_LITERAL) ) {s = 1345;}

                        else if ( (LA156_569==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA156_569==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA156_569==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA156_569==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA156_569==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA156_569==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA156_569==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA156_569==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA156_569==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA156_569==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA156_569==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA156_569==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA156_569==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA156_569==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA156_569==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA156_569==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA156_569==AT) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA156_569==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA156_569==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA156_569==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA156_569==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA156_569==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA156_569==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA156_569==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA156_569==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA156_569==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA156_569==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA156_569==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA156_569==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA156_569==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA156_569==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA156_569==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA156_569==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA156_569==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA156_569==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA156_569==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA156_569==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA156_569==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA156_569==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA156_569==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA156_569==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA156_569==LW) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA156_569==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA156_569==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA156_569==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA156_569==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA156_569==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA156_569==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA156_569==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA156_569==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA156_569==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA156_569==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA156_569==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA156_569==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA156_569==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA156_569==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA156_569==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA156_569==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA156_569==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                         
                        input.seek(index156_569);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA156_627 = input.LA(1);

                         
                        int index156_627 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_627==STRING_LITERAL) ) {s = 1405;}

                        else if ( (LA156_627==QUOTED_STRING_LITERAL) ) {s = 1406;}

                        else if ( (LA156_627==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA156_627==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA156_627==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA156_627==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA156_627==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA156_627==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA156_627==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA156_627==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA156_627==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA156_627==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA156_627==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA156_627==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA156_627==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA156_627==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA156_627==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA156_627==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA156_627==AT) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA156_627==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA156_627==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA156_627==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA156_627==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA156_627==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA156_627==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA156_627==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA156_627==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA156_627==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA156_627==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA156_627==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA156_627==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA156_627==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA156_627==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA156_627==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA156_627==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA156_627==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA156_627==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA156_627==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA156_627==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA156_627==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA156_627==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA156_627==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA156_627==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA156_627==LW) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA156_627==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA156_627==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA156_627==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA156_627==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA156_627==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA156_627==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA156_627==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA156_627==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA156_627==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA156_627==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA156_627==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA156_627==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA156_627==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA156_627==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA156_627==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA156_627==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA156_627==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                         
                        input.seek(index156_627);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA156_685 = input.LA(1);

                         
                        int index156_685 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_685==STRING_LITERAL) ) {s = 1466;}

                        else if ( (LA156_685==QUOTED_STRING_LITERAL) ) {s = 1467;}

                        else if ( (LA156_685==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA156_685==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA156_685==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA156_685==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA156_685==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA156_685==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA156_685==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA156_685==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA156_685==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA156_685==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA156_685==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA156_685==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA156_685==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA156_685==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA156_685==AT) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA156_685==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA156_685==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA156_685==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA156_685==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA156_685==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA156_685==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA156_685==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA156_685==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA156_685==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA156_685==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA156_685==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA156_685==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA156_685==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA156_685==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA156_685==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA156_685==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA156_685==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA156_685==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA156_685==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA156_685==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA156_685==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA156_685==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA156_685==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA156_685==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA156_685==LW) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA156_685==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA156_685==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA156_685==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA156_685==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA156_685==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA156_685==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA156_685==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA156_685==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA156_685==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA156_685==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA156_685==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA156_685==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA156_685==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA156_685==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA156_685==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA156_685==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA156_685==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                         
                        input.seek(index156_685);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA156_743 = input.LA(1);

                         
                        int index156_743 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_743==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( ((LA156_743>=STRING_LITERAL && LA156_743<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index156_743);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA156_801 = input.LA(1);

                         
                        int index156_801 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_801==STRING_LITERAL) ) {s = 1528;}

                        else if ( (LA156_801==QUOTED_STRING_LITERAL) ) {s = 1529;}

                        else if ( (LA156_801==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA156_801==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA156_801==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA156_801==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA156_801==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA156_801==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA156_801==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA156_801==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA156_801==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA156_801==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA156_801==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA156_801==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA156_801==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA156_801==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA156_801==AT) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA156_801==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA156_801==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA156_801==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA156_801==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA156_801==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA156_801==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA156_801==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA156_801==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA156_801==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA156_801==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA156_801==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA156_801==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA156_801==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA156_801==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA156_801==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA156_801==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA156_801==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA156_801==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA156_801==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA156_801==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA156_801==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA156_801==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA156_801==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA156_801==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA156_801==LW) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA156_801==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA156_801==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA156_801==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA156_801==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA156_801==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA156_801==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA156_801==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA156_801==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA156_801==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA156_801==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA156_801==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA156_801==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA156_801==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA156_801==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA156_801==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA156_801==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA156_801==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                         
                        input.seek(index156_801);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA156_859 = input.LA(1);

                         
                        int index156_859 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_859==STRING_LITERAL) ) {s = 1587;}

                        else if ( (LA156_859==QUOTED_STRING_LITERAL) ) {s = 1588;}

                        else if ( (LA156_859==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA156_859==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA156_859==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA156_859==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA156_859==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA156_859==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA156_859==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA156_859==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA156_859==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA156_859==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA156_859==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA156_859==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA156_859==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA156_859==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA156_859==AT) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA156_859==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA156_859==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA156_859==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA156_859==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA156_859==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA156_859==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA156_859==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA156_859==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA156_859==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA156_859==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA156_859==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA156_859==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA156_859==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA156_859==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA156_859==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA156_859==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA156_859==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA156_859==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA156_859==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA156_859==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA156_859==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA156_859==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA156_859==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA156_859==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA156_859==LW) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA156_859==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA156_859==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA156_859==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA156_859==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA156_859==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA156_859==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA156_859==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA156_859==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA156_859==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA156_859==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA156_859==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA156_859==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA156_859==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA156_859==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA156_859==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA156_859==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA156_859==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                         
                        input.seek(index156_859);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA156_917 = input.LA(1);

                         
                        int index156_917 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_917==SELECT) ) {s = 1646;}

                        else if ( (LA156_917==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA156_917==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA156_917==AT) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA156_917==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA156_917==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA156_917==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA156_917==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA156_917==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA156_917==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA156_917==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA156_917==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA156_917==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA156_917==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA156_917==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA156_917==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA156_917==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA156_917==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA156_917==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA156_917==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA156_917==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA156_917==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA156_917==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA156_917==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA156_917==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA156_917==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA156_917==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA156_917==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA156_917==LW) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA156_917==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA156_917==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA156_917==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA156_917==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA156_917==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA156_917==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA156_917==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA156_917==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA156_917==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA156_917==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA156_917==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA156_917==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA156_917==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                         
                        input.seek(index156_917);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA156_918 = input.LA(1);

                         
                        int index156_918 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_918==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA156_918==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA156_918==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA156_918==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA156_918==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA156_918==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA156_918==LT) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA156_918==GT) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA156_918==LE) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA156_918==GE) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA156_918==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA156_918==IS) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA156_918==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA156_918==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA156_918==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA156_918==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA156_918==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA156_918==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA156_918==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA156_918==RPAREN) ) {s = 1707;}

                        else if ( (LA156_918==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA156_918==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA156_918==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA156_918==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA156_918==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                         
                        input.seek(index156_918);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA156_919 = input.LA(1);

                         
                        int index156_919 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_919==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA156_919==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA156_919==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA156_919==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA156_919==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA156_919==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA156_919==LT) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA156_919==GT) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA156_919==LE) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA156_919==GE) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA156_919==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA156_919==IS) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA156_919==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA156_919==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA156_919==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA156_919==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA156_919==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA156_919==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA156_919==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA156_919==RPAREN) ) {s = 1732;}

                        else if ( (LA156_919==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA156_919==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA156_919==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA156_919==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA156_919==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                         
                        input.seek(index156_919);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA156_980 = input.LA(1);

                         
                        int index156_980 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_980==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA156_980==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA156_980==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA156_980==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA156_980==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA156_980==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA156_980==LT) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA156_980==GT) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA156_980==LE) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA156_980==GE) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA156_980==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA156_980==IS) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA156_980==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA156_980==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA156_980==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA156_980==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA156_980==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA156_980==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA156_980==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA156_980==RPAREN) ) {s = 1757;}

                        else if ( (LA156_980==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA156_980==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA156_980==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA156_980==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA156_980==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                         
                        input.seek(index156_980);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA156_981 = input.LA(1);

                         
                        int index156_981 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_981==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA156_981==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA156_981==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA156_981==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA156_981==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA156_981==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA156_981==LT) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA156_981==GT) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA156_981==LE) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA156_981==GE) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA156_981==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA156_981==IS) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA156_981==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA156_981==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA156_981==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA156_981==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA156_981==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA156_981==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA156_981==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA156_981==RPAREN) ) {s = 1782;}

                        else if ( (LA156_981==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA156_981==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA156_981==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA156_981==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA156_981==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                         
                        input.seek(index156_981);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA156_1041 = input.LA(1);

                         
                        int index156_1041 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1041==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA156_1041==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA156_1041==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA156_1041==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA156_1041==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA156_1041==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA156_1041==LT) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA156_1041==GT) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA156_1041==LE) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA156_1041==GE) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA156_1041==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA156_1041==IS) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA156_1041==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA156_1041==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA156_1041==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA156_1041==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA156_1041==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA156_1041==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA156_1041==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA156_1041==RPAREN) ) {s = 1807;}

                        else if ( (LA156_1041==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA156_1041==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA156_1041==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA156_1041==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA156_1041==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                         
                        input.seek(index156_1041);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA156_1042 = input.LA(1);

                         
                        int index156_1042 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1042==RPAREN) ) {s = 1813;}

                        else if ( (LA156_1042==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA156_1042==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA156_1042==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA156_1042==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA156_1042==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA156_1042==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA156_1042==LT) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA156_1042==GT) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA156_1042==LE) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA156_1042==GE) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA156_1042==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA156_1042==IS) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA156_1042==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA156_1042==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA156_1042==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA156_1042==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA156_1042==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA156_1042==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA156_1042==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA156_1042==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA156_1042==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA156_1042==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA156_1042==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA156_1042==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                         
                        input.seek(index156_1042);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA156_1102 = input.LA(1);

                         
                        int index156_1102 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1102==RPAREN) ) {s = 14;}

                        else if ( (LA156_1102==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA156_1102==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA156_1102==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA156_1102==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA156_1102==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA156_1102==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA156_1102==LT) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA156_1102==GT) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA156_1102==LE) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA156_1102==GE) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA156_1102==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA156_1102==IS) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA156_1102==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA156_1102==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA156_1102==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                        else if ( (LA156_1102==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA156_1102==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA156_1102==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA156_1102==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA156_1102==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA156_1102==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA156_1102==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA156_1102==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA156_1102==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA156_1102==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                         
                        input.seek(index156_1102);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA156_1103 = input.LA(1);

                         
                        int index156_1103 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1103==RPAREN) ) {s = 14;}

                        else if ( (LA156_1103==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA156_1103==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA156_1103==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA156_1103==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA156_1103==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA156_1103==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA156_1103==LT) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA156_1103==GT) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA156_1103==LE) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA156_1103==GE) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA156_1103==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA156_1103==IS) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                        else if ( (LA156_1103==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1877;}

                        else if ( (LA156_1103==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1878;}

                        else if ( (LA156_1103==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1879;}

                        else if ( (LA156_1103==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1880;}

                        else if ( (LA156_1103==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA156_1103==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                        else if ( (LA156_1103==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA156_1103==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA156_1103==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA156_1103==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA156_1103==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA156_1103==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA156_1103==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                         
                        input.seek(index156_1103);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA156_1161 = input.LA(1);

                         
                        int index156_1161 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1161==RPAREN) ) {s = 1890;}

                        else if ( (LA156_1161==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA156_1161==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA156_1161==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA156_1161==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA156_1161==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA156_1161==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA156_1161==LT) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA156_1161==GT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA156_1161==LE) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA156_1161==GE) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA156_1161==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                        else if ( (LA156_1161==IS) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                        else if ( (LA156_1161==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA156_1161==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA156_1161==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1905;}

                        else if ( (LA156_1161==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1906;}

                        else if ( (LA156_1161==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA156_1161==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1908;}

                        else if ( (LA156_1161==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA156_1161==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA156_1161==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                        else if ( (LA156_1161==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1912;}

                        else if ( (LA156_1161==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1913;}

                        else if ( (LA156_1161==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                         
                        input.seek(index156_1161);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA156_1162 = input.LA(1);

                         
                        int index156_1162 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1162==RPAREN) ) {s = 1915;}

                        else if ( (LA156_1162==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA156_1162==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA156_1162==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA156_1162==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA156_1162==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA156_1162==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1921;}

                        else if ( (LA156_1162==LT) && (synpred3_EsperEPL2Grammar())) {s = 1922;}

                        else if ( (LA156_1162==GT) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA156_1162==LE) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA156_1162==GE) && (synpred3_EsperEPL2Grammar())) {s = 1925;}

                        else if ( (LA156_1162==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                        else if ( (LA156_1162==IS) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                        else if ( (LA156_1162==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA156_1162==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA156_1162==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                        else if ( (LA156_1162==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1931;}

                        else if ( (LA156_1162==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA156_1162==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA156_1162==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1934;}

                        else if ( (LA156_1162==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA156_1162==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA156_1162==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA156_1162==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA156_1162==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                         
                        input.seek(index156_1162);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA156_1222 = input.LA(1);

                         
                        int index156_1222 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1222==RPAREN) ) {s = 1940;}

                        else if ( (LA156_1222==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA156_1222==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA156_1222==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA156_1222==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA156_1222==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA156_1222==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1946;}

                        else if ( (LA156_1222==LT) && (synpred3_EsperEPL2Grammar())) {s = 1947;}

                        else if ( (LA156_1222==GT) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA156_1222==LE) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA156_1222==GE) && (synpred3_EsperEPL2Grammar())) {s = 1950;}

                        else if ( (LA156_1222==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                        else if ( (LA156_1222==IS) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                        else if ( (LA156_1222==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA156_1222==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1954;}

                        else if ( (LA156_1222==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                        else if ( (LA156_1222==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1956;}

                        else if ( (LA156_1222==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA156_1222==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA156_1222==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                        else if ( (LA156_1222==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1960;}

                        else if ( (LA156_1222==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA156_1222==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA156_1222==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA156_1222==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                         
                        input.seek(index156_1222);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA156_1223 = input.LA(1);

                         
                        int index156_1223 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1223==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1965;}

                        else if ( (LA156_1223==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA156_1223==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA156_1223==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA156_1223==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA156_1223==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA156_1223==LT) && (synpred3_EsperEPL2Grammar())) {s = 1971;}

                        else if ( (LA156_1223==GT) && (synpred3_EsperEPL2Grammar())) {s = 1972;}

                        else if ( (LA156_1223==LE) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA156_1223==GE) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA156_1223==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1975;}

                        else if ( (LA156_1223==IS) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                        else if ( (LA156_1223==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1977;}

                        else if ( (LA156_1223==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA156_1223==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA156_1223==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                        else if ( (LA156_1223==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1981;}

                        else if ( (LA156_1223==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA156_1223==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA156_1223==RPAREN) ) {s = 1984;}

                        else if ( (LA156_1223==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA156_1223==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA156_1223==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA156_1223==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA156_1223==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                         
                        input.seek(index156_1223);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA156_1283 = input.LA(1);

                         
                        int index156_1283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1283==RPAREN) ) {s = 1990;}

                        else if ( (LA156_1283==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA156_1283==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA156_1283==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA156_1283==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA156_1283==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA156_1283==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1996;}

                        else if ( (LA156_1283==LT) && (synpred3_EsperEPL2Grammar())) {s = 1997;}

                        else if ( (LA156_1283==GT) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA156_1283==LE) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA156_1283==GE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}

                        else if ( (LA156_1283==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                        else if ( (LA156_1283==IS) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                        else if ( (LA156_1283==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA156_1283==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2004;}

                        else if ( (LA156_1283==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                        else if ( (LA156_1283==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2006;}

                        else if ( (LA156_1283==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA156_1283==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA156_1283==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                        else if ( (LA156_1283==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA156_1283==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA156_1283==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA156_1283==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA156_1283==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                         
                        input.seek(index156_1283);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA156_1284 = input.LA(1);

                         
                        int index156_1284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1284==RPAREN) ) {s = 2015;}

                        else if ( (LA156_1284==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA156_1284==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA156_1284==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA156_1284==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA156_1284==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA156_1284==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                        else if ( (LA156_1284==LT) && (synpred3_EsperEPL2Grammar())) {s = 2022;}

                        else if ( (LA156_1284==GT) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA156_1284==LE) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA156_1284==GE) && (synpred3_EsperEPL2Grammar())) {s = 2025;}

                        else if ( (LA156_1284==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA156_1284==IS) && (synpred3_EsperEPL2Grammar())) {s = 2027;}

                        else if ( (LA156_1284==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2028;}

                        else if ( (LA156_1284==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2029;}

                        else if ( (LA156_1284==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                        else if ( (LA156_1284==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2031;}

                        else if ( (LA156_1284==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA156_1284==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA156_1284==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                        else if ( (LA156_1284==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA156_1284==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA156_1284==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA156_1284==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA156_1284==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                         
                        input.seek(index156_1284);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA156_1344 = input.LA(1);

                         
                        int index156_1344 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1344==RPAREN) ) {s = 2040;}

                        else if ( (LA156_1344==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA156_1344==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA156_1344==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA156_1344==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA156_1344==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA156_1344==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                        else if ( (LA156_1344==LT) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA156_1344==GT) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA156_1344==LE) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA156_1344==GE) && (synpred3_EsperEPL2Grammar())) {s = 2050;}

                        else if ( (LA156_1344==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA156_1344==IS) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                        else if ( (LA156_1344==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                        else if ( (LA156_1344==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2054;}

                        else if ( (LA156_1344==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                        else if ( (LA156_1344==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2056;}

                        else if ( (LA156_1344==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA156_1344==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA156_1344==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                        else if ( (LA156_1344==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA156_1344==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA156_1344==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA156_1344==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA156_1344==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                         
                        input.seek(index156_1344);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA156_1345 = input.LA(1);

                         
                        int index156_1345 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1345==RPAREN) ) {s = 2065;}

                        else if ( (LA156_1345==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2066;}

                        else if ( (LA156_1345==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA156_1345==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA156_1345==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA156_1345==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA156_1345==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                        else if ( (LA156_1345==LT) && (synpred3_EsperEPL2Grammar())) {s = 2072;}

                        else if ( (LA156_1345==GT) && (synpred3_EsperEPL2Grammar())) {s = 2073;}

                        else if ( (LA156_1345==LE) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA156_1345==GE) && (synpred3_EsperEPL2Grammar())) {s = 2075;}

                        else if ( (LA156_1345==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA156_1345==IS) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA156_1345==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                        else if ( (LA156_1345==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2079;}

                        else if ( (LA156_1345==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                        else if ( (LA156_1345==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2081;}

                        else if ( (LA156_1345==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA156_1345==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA156_1345==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                        else if ( (LA156_1345==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA156_1345==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA156_1345==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA156_1345==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA156_1345==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                         
                        input.seek(index156_1345);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA156_1405 = input.LA(1);

                         
                        int index156_1405 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1405==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2090;}

                        else if ( (LA156_1405==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA156_1405==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA156_1405==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA156_1405==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA156_1405==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA156_1405==LT) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                        else if ( (LA156_1405==GT) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA156_1405==LE) && (synpred3_EsperEPL2Grammar())) {s = 2098;}

                        else if ( (LA156_1405==GE) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA156_1405==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2100;}

                        else if ( (LA156_1405==IS) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA156_1405==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA156_1405==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                        else if ( (LA156_1405==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2104;}

                        else if ( (LA156_1405==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                        else if ( (LA156_1405==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2106;}

                        else if ( (LA156_1405==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA156_1405==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA156_1405==RPAREN) ) {s = 2109;}

                        else if ( (LA156_1405==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA156_1405==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA156_1405==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA156_1405==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA156_1405==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                         
                        input.seek(index156_1405);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA156_1406 = input.LA(1);

                         
                        int index156_1406 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1406==RPAREN) ) {s = 2115;}

                        else if ( (LA156_1406==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2116;}

                        else if ( (LA156_1406==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA156_1406==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA156_1406==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA156_1406==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA156_1406==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                        else if ( (LA156_1406==LT) && (synpred3_EsperEPL2Grammar())) {s = 2122;}

                        else if ( (LA156_1406==GT) && (synpred3_EsperEPL2Grammar())) {s = 2123;}

                        else if ( (LA156_1406==LE) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA156_1406==GE) && (synpred3_EsperEPL2Grammar())) {s = 2125;}

                        else if ( (LA156_1406==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA156_1406==IS) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA156_1406==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                        else if ( (LA156_1406==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2129;}

                        else if ( (LA156_1406==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2130;}

                        else if ( (LA156_1406==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2131;}

                        else if ( (LA156_1406==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA156_1406==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA156_1406==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                        else if ( (LA156_1406==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA156_1406==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA156_1406==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA156_1406==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA156_1406==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                         
                        input.seek(index156_1406);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA156_1466 = input.LA(1);

                         
                        int index156_1466 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1466==RPAREN) ) {s = 2140;}

                        else if ( (LA156_1466==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA156_1466==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA156_1466==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA156_1466==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA156_1466==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA156_1466==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                        else if ( (LA156_1466==LT) && (synpred3_EsperEPL2Grammar())) {s = 2147;}

                        else if ( (LA156_1466==GT) && (synpred3_EsperEPL2Grammar())) {s = 2148;}

                        else if ( (LA156_1466==LE) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA156_1466==GE) && (synpred3_EsperEPL2Grammar())) {s = 2150;}

                        else if ( (LA156_1466==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA156_1466==IS) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA156_1466==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                        else if ( (LA156_1466==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2154;}

                        else if ( (LA156_1466==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                        else if ( (LA156_1466==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2156;}

                        else if ( (LA156_1466==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA156_1466==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA156_1466==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                        else if ( (LA156_1466==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA156_1466==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA156_1466==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA156_1466==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA156_1466==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA156_1466==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                         
                        input.seek(index156_1466);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA156_1467 = input.LA(1);

                         
                        int index156_1467 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1467==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2166;}

                        else if ( (LA156_1467==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA156_1467==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA156_1467==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA156_1467==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA156_1467==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                        else if ( (LA156_1467==LT) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA156_1467==GT) && (synpred3_EsperEPL2Grammar())) {s = 2173;}

                        else if ( (LA156_1467==LE) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA156_1467==GE) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA156_1467==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2176;}

                        else if ( (LA156_1467==IS) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA156_1467==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                        else if ( (LA156_1467==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2179;}

                        else if ( (LA156_1467==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA156_1467==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                        else if ( (LA156_1467==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA156_1467==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2183;}

                        else if ( (LA156_1467==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                        else if ( (LA156_1467==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA156_1467==RPAREN) ) {s = 2186;}

                        else if ( (LA156_1467==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA156_1467==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA156_1467==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA156_1467==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA156_1467==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                         
                        input.seek(index156_1467);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA156_1528 = input.LA(1);

                         
                        int index156_1528 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1528==RPAREN) ) {s = 14;}

                        else if ( (LA156_1528==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA156_1528==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA156_1528==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA156_1528==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA156_1528==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2197;}

                        else if ( (LA156_1528==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}

                        else if ( (LA156_1528==LT) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA156_1528==GT) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA156_1528==LE) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA156_1528==GE) && (synpred3_EsperEPL2Grammar())) {s = 2202;}

                        else if ( (LA156_1528==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                        else if ( (LA156_1528==IS) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA156_1528==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2205;}

                        else if ( (LA156_1528==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA156_1528==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                        else if ( (LA156_1528==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA156_1528==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA156_1528==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2210;}

                        else if ( (LA156_1528==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2211;}

                        else if ( (LA156_1528==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2212;}

                        else if ( (LA156_1528==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2213;}

                        else if ( (LA156_1528==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2214;}

                        else if ( (LA156_1528==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2215;}

                        else if ( (LA156_1528==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}

                        else if ( (LA156_1528==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2217;}

                         
                        input.seek(index156_1528);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA156_1529 = input.LA(1);

                         
                        int index156_1529 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1529==RPAREN) ) {s = 14;}

                        else if ( (LA156_1529==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}

                        else if ( (LA156_1529==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2220;}

                        else if ( (LA156_1529==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2221;}

                        else if ( (LA156_1529==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2222;}

                        else if ( (LA156_1529==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2223;}

                        else if ( (LA156_1529==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}

                        else if ( (LA156_1529==LT) && (synpred3_EsperEPL2Grammar())) {s = 2225;}

                        else if ( (LA156_1529==GT) && (synpred3_EsperEPL2Grammar())) {s = 2226;}

                        else if ( (LA156_1529==LE) && (synpred3_EsperEPL2Grammar())) {s = 2227;}

                        else if ( (LA156_1529==GE) && (synpred3_EsperEPL2Grammar())) {s = 2228;}

                        else if ( (LA156_1529==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2229;}

                        else if ( (LA156_1529==IS) && (synpred3_EsperEPL2Grammar())) {s = 2230;}

                        else if ( (LA156_1529==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}

                        else if ( (LA156_1529==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2232;}

                        else if ( (LA156_1529==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2233;}

                        else if ( (LA156_1529==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}

                        else if ( (LA156_1529==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2235;}

                        else if ( (LA156_1529==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2236;}

                        else if ( (LA156_1529==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2237;}

                        else if ( (LA156_1529==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2238;}

                        else if ( (LA156_1529==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2239;}

                        else if ( (LA156_1529==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2240;}

                        else if ( (LA156_1529==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2241;}

                        else if ( (LA156_1529==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2242;}

                        else if ( (LA156_1529==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2243;}

                         
                        input.seek(index156_1529);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA156_1587 = input.LA(1);

                         
                        int index156_1587 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1587==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2244;}

                        else if ( (LA156_1587==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2245;}

                        else if ( (LA156_1587==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2246;}

                        else if ( (LA156_1587==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2247;}

                        else if ( (LA156_1587==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2248;}

                        else if ( (LA156_1587==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}

                        else if ( (LA156_1587==LT) && (synpred3_EsperEPL2Grammar())) {s = 2250;}

                        else if ( (LA156_1587==GT) && (synpred3_EsperEPL2Grammar())) {s = 2251;}

                        else if ( (LA156_1587==LE) && (synpred3_EsperEPL2Grammar())) {s = 2252;}

                        else if ( (LA156_1587==GE) && (synpred3_EsperEPL2Grammar())) {s = 2253;}

                        else if ( (LA156_1587==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2254;}

                        else if ( (LA156_1587==IS) && (synpred3_EsperEPL2Grammar())) {s = 2255;}

                        else if ( (LA156_1587==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2256;}

                        else if ( (LA156_1587==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2257;}

                        else if ( (LA156_1587==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2258;}

                        else if ( (LA156_1587==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2259;}

                        else if ( (LA156_1587==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}

                        else if ( (LA156_1587==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}

                        else if ( (LA156_1587==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2262;}

                        else if ( (LA156_1587==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2263;}

                        else if ( (LA156_1587==AS) && (synpred3_EsperEPL2Grammar())) {s = 2264;}

                        else if ( (LA156_1587==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2265;}

                        else if ( (LA156_1587==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2266;}

                        else if ( (LA156_1587==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2267;}

                        else if ( (LA156_1587==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2268;}

                        else if ( (LA156_1587==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2269;}

                        else if ( (LA156_1587==RPAREN) ) {s = 14;}

                         
                        input.seek(index156_1587);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA156_1588 = input.LA(1);

                         
                        int index156_1588 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA156_1588==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2271;}

                        else if ( (LA156_1588==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2272;}

                        else if ( (LA156_1588==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2273;}

                        else if ( (LA156_1588==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2274;}

                        else if ( (LA156_1588==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2275;}

                        else if ( (LA156_1588==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2276;}

                        else if ( (LA156_1588==LT) && (synpred3_EsperEPL2Grammar())) {s = 2277;}

                        else if ( (LA156_1588==GT) && (synpred3_EsperEPL2Grammar())) {s = 2278;}

                        else if ( (LA156_1588==LE) && (synpred3_EsperEPL2Grammar())) {s = 2279;}

                        else if ( (LA156_1588==GE) && (synpred3_EsperEPL2Grammar())) {s = 2280;}

                        else if ( (LA156_1588==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2281;}

                        else if ( (LA156_1588==IS) && (synpred3_EsperEPL2Grammar())) {s = 2282;}

                        else if ( (LA156_1588==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2283;}

                        else if ( (LA156_1588==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2284;}

                        else if ( (LA156_1588==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2285;}

                        else if ( (LA156_1588==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2286;}

                        else if ( (LA156_1588==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2287;}

                        else if ( (LA156_1588==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2288;}

                        else if ( (LA156_1588==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2289;}

                        else if ( (LA156_1588==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2290;}

                        else if ( (LA156_1588==AS) && (synpred3_EsperEPL2Grammar())) {s = 2291;}

                        else if ( (LA156_1588==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2292;}

                        else if ( (LA156_1588==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2293;}

                        else if ( (LA156_1588==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2294;}

                        else if ( (LA156_1588==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2295;}

                        else if ( (LA156_1588==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2296;}

                        else if ( (LA156_1588==RPAREN) ) {s = 14;}

                         
                        input.seek(index156_1588);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA156_1707 = input.LA(1);

                         
                        int index156_1707 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1707);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA156_1732 = input.LA(1);

                         
                        int index156_1732 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1732);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA156_1757 = input.LA(1);

                         
                        int index156_1757 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1757);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA156_1782 = input.LA(1);

                         
                        int index156_1782 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1782);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA156_1807 = input.LA(1);

                         
                        int index156_1807 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1807);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA156_1813 = input.LA(1);

                         
                        int index156_1813 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1813);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA156_1890 = input.LA(1);

                         
                        int index156_1890 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1890);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA156_1915 = input.LA(1);

                         
                        int index156_1915 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1915);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA156_1940 = input.LA(1);

                         
                        int index156_1940 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1940);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA156_1984 = input.LA(1);

                         
                        int index156_1984 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1984);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA156_1990 = input.LA(1);

                         
                        int index156_1990 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_1990);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA156_2015 = input.LA(1);

                         
                        int index156_2015 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_2015);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA156_2040 = input.LA(1);

                         
                        int index156_2040 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_2040);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA156_2065 = input.LA(1);

                         
                        int index156_2065 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_2065);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA156_2109 = input.LA(1);

                         
                        int index156_2109 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_2109);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA156_2115 = input.LA(1);

                         
                        int index156_2115 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_2115);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA156_2140 = input.LA(1);

                         
                        int index156_2140 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_2140);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA156_2186 = input.LA(1);

                         
                        int index156_2186 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2296;}

                         
                        input.seek(index156_2186);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA183_eotS =
        "\u048a\uffff";
    static final String DFA183_eofS =
        "\1\uffff\1\107\1\u0081\6\uffff\1\u00bb\1\u00f5\u0107\uffff\1\u023b"+
        "\1\u0275\6\uffff\1\u02ae\1\u02e8\135\uffff\1\u0357\1\u0391\6\uffff"+
        "\1\u03ca\1\u0404\u0307\uffff";
    static final String DFA183_minS =
        "\1\5\2\6\6\uffff\2\6\37\uffff\2\5\70\uffff\1\5\73\uffff\1\5\67"+
        "\uffff\1\5\71\uffff\2\6\6\uffff\2\6\37\uffff\2\6\74\uffff\2\6\6"+
        "\uffff\2\6\37\uffff\2\6\74\uffff\2\6\74\uffff\2\0\70\uffff\1\0\73"+
        "\uffff\1\0\67\uffff\1\0\115\uffff\1\0\31\uffff\1\0\5\uffff\2\0\70"+
        "\uffff\1\0\73\uffff\1\0\67\uffff\1\0\115\uffff\1\0\31\uffff\1\0"+
        "\31\uffff\1\0\31\uffff\1\0\5\uffff";
    static final String DFA183_maxS =
        "\1\u011a\2\u0119\6\uffff\2\u0119\37\uffff\1\u011a\1\u011c\70\uffff"+
        "\1\u011a\73\uffff\1\u011c\67\uffff\1\u011c\71\uffff\2\u0119\6\uffff"+
        "\2\u0119\37\uffff\2\u0114\74\uffff\2\u0119\6\uffff\2\u0119\37\uffff"+
        "\2\u0114\74\uffff\2\u0114\74\uffff\2\0\70\uffff\1\0\73\uffff\1\0"+
        "\67\uffff\1\0\115\uffff\1\0\31\uffff\1\0\5\uffff\2\0\70\uffff\1"+
        "\0\73\uffff\1\0\67\uffff\1\0\115\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\5\uffff";
    static final String DFA183_acceptS =
        "\3\uffff\6\1\2\uffff\37\1\2\uffff\70\1\1\uffff\73\1\1\uffff\67"+
        "\1\1\uffff\71\1\2\uffff\6\1\2\uffff\37\1\2\uffff\1\2\75\uffff\6"+
        "\1\2\uffff\37\1\176\uffff\70\1\1\uffff\73\1\1\uffff\67\1\1\uffff"+
        "\71\1\66\uffff\70\1\1\uffff\73\1\1\uffff\67\1\1\uffff\71\1\150\uffff";
    static final String DFA183_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\37\uffff\1\5\71\uffff\1\6\u00ad\uffff"+
        "\1\7\1\10\6\uffff\1\11\1\12\135\uffff\1\13\1\14\6\uffff\1\15\1\16"+
        "\u009b\uffff\1\17\1\20\70\uffff\1\21\73\uffff\1\22\67\uffff\1\23"+
        "\115\uffff\1\24\31\uffff\1\25\5\uffff\1\26\1\27\70\uffff\1\30\73"+
        "\uffff\1\31\67\uffff\1\32\115\uffff\1\33\31\uffff\1\34\31\uffff"+
        "\1\35\31\uffff\1\36\5\uffff}>";
    static final String[] DFA183_transitionS = {
            "\1\41\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\44\1\uffff\1\46\1\42\1\43"+
            "\1\45\12\uffff\1\17\1\20\1\21\10\uffff\1\22\1\23\1\24\1\26\1"+
            "\27\1\30\1\31\1\32\1\uffff\1\33\1\34\1\35\1\36\2\uffff\1\37"+
            "\1\uffff\1\40\1\25\1\3\24\uffff\1\47\1\50\1\51\u0092\uffff\1"+
            "\1\36\uffff\1\2",
            "\1\137\1\140\1\141\1\142\1\143\1\101\1\100\1\136\2\uffff\1"+
            "\113\1\114\14\uffff\1\125\1\127\1\124\1\126\1\115\7\uffff\1"+
            "\72\1\uffff\1\102\1\103\1\uffff\1\117\2\uffff\1\104\3\uffff"+
            "\1\110\1\uffff\1\105\1\122\1\123\6\uffff\1\121\26\uffff\1\135"+
            "\1\134\1\133\6\uffff\1\106\3\uffff\1\116\3\uffff\1\120\u0090"+
            "\uffff\1\112\1\uffff\1\71\1\52\1\53\1\111\1\57\1\76\1\62\1\56"+
            "\1\55\1\131\1\130\2\uffff\1\75\1\77\1\73\1\74\1\65\1\66\1\67"+
            "\1\70\1\64\1\63\1\60\1\61\1\uffff\1\132\2\uffff\1\54",
            "\1\u0099\1\u009a\1\u009b\1\u009c\1\u009d\1\173\1\172\1\u0098"+
            "\2\uffff\1\u0085\1\u0086\14\uffff\1\u008f\1\u0091\1\u008e\1"+
            "\u0090\1\u0087\7\uffff\1\164\1\uffff\1\174\1\175\1\uffff\1\u0089"+
            "\2\uffff\1\176\3\uffff\1\u0082\1\uffff\1\177\1\u008c\1\u008d"+
            "\6\uffff\1\u008b\26\uffff\1\u0097\1\u0096\1\u0095\6\uffff\1"+
            "\u0080\3\uffff\1\u0088\3\uffff\1\u008a\u0090\uffff\1\u0084\1"+
            "\uffff\1\163\1\144\1\147\1\u0083\1\151\1\170\1\154\1\150\1\146"+
            "\1\u0093\1\u0092\2\uffff\1\167\1\171\1\165\1\166\1\157\1\160"+
            "\1\161\1\162\1\156\1\155\1\152\1\153\1\uffff\1\u0094\2\uffff"+
            "\1\145",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00d3\1\u00d4\1\u00d5\1\u00d6\1\u00d7\1\u00b5\1\u00b4\1"+
            "\u00d2\2\uffff\1\u00bf\1\u00c0\14\uffff\1\u00c9\1\u00cb\1\u00c8"+
            "\1\u00ca\1\u00c1\7\uffff\1\u00ae\1\uffff\1\u00b6\1\u00b7\1\uffff"+
            "\1\u00c3\2\uffff\1\u00b8\3\uffff\1\u00bc\1\uffff\1\u00b9\1\u00c6"+
            "\1\u00c7\6\uffff\1\u00c5\26\uffff\1\u00d1\1\u00d0\1\u00cf\6"+
            "\uffff\1\u00ba\3\uffff\1\u00c2\3\uffff\1\u00c4\u0090\uffff\1"+
            "\u00be\1\uffff\1\u00ad\1\u00a2\1\u00a0\1\u00bd\1\u00a3\1\u00b2"+
            "\1\u00a6\1\u00a1\1\u009f\1\u00cd\1\u00cc\2\uffff\1\u00b1\1\u00b3"+
            "\1\u00af\1\u00b0\1\u00a9\1\u00aa\1\u00ab\1\u00ac\1\u00a8\1\u00a7"+
            "\1\u00a4\1\u00a5\1\uffff\1\u00ce\2\uffff\1\u009e",
            "\1\u010d\1\u010e\1\u010f\1\u0110\1\u0111\1\u00ef\1\u00ee\1"+
            "\u010c\2\uffff\1\u00f9\1\u00fa\14\uffff\1\u0103\1\u0105\1\u0102"+
            "\1\u0104\1\u00fb\7\uffff\1\u00e8\1\uffff\1\u00f0\1\u00f1\1\uffff"+
            "\1\u00fd\2\uffff\1\u00f2\3\uffff\1\u00f6\1\uffff\1\u00f3\1\u0100"+
            "\1\u0101\6\uffff\1\u00ff\26\uffff\1\u010b\1\u010a\1\u0109\6"+
            "\uffff\1\u00f4\3\uffff\1\u00fc\3\uffff\1\u00fe\u0090\uffff\1"+
            "\u00f8\1\uffff\1\u00e7\1\u00dc\1\u00d8\1\u00f7\1\u00dd\1\u00ec"+
            "\1\u00e0\1\u00db\1\u00da\1\u0107\1\u0106\2\uffff\1\u00eb\1\u00ed"+
            "\1\u00e9\1\u00ea\1\u00e3\1\u00e4\1\u00e5\1\u00e6\1\u00e2\1\u00e1"+
            "\1\u00de\1\u00df\1\uffff\1\u0108\2\uffff\1\u00d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0132\4\uffff\1\u0116\3\uffff\1\u0117\3\uffff\1\u0118\1"+
            "\u0119\1\u011a\1\u011b\1\u011c\1\u011d\1\u011e\1\u011f\1\u0115"+
            "\10\uffff\1\u0135\1\uffff\1\u0137\1\u0133\1\u0134\1\u0136\12"+
            "\uffff\1\u0120\1\u0121\1\u0122\10\uffff\1\u0123\1\u0124\1\u0125"+
            "\1\u0127\1\u0128\1\u0129\1\u012a\1\u012b\1\uffff\1\u012c\1\u012d"+
            "\1\u012e\1\u012f\2\uffff\1\u0130\1\uffff\1\u0131\1\u0126\1\u0114"+
            "\24\uffff\1\u0138\1\u0139\1\u013a\u0092\uffff\1\u0112\36\uffff"+
            "\1\u0113",
            "\1\u013d\4\uffff\1\u013d\2\uffff\2\u013d\3\uffff\11\u013d"+
            "\1\uffff\1\u013d\6\uffff\1\u013d\1\uffff\4\u013d\5\uffff\2\u013d"+
            "\3\uffff\3\u013d\10\uffff\16\u013d\1\uffff\1\u013d\1\uffff\3"+
            "\u013d\14\uffff\3\u013d\5\uffff\3\u013d\u0083\uffff\1\u013d"+
            "\16\uffff\1\u013d\2\uffff\2\u013d\2\uffff\2\u013d\3\uffff\1"+
            "\u013b\1\u013c\11\uffff\1\u013d\2\uffff\1\u013d\1\uffff\1\u013d"+
            "\2\uffff\3\u013d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0199\4\uffff\1\u017d\3\uffff\1\u017e\3\uffff\1\u017f\1"+
            "\u0180\1\u0181\1\u0182\1\u0183\1\u0184\1\u0185\1\u0186\1\u017c"+
            "\10\uffff\1\u019c\1\uffff\1\u019e\1\u019a\1\u019b\1\u019d\12"+
            "\uffff\1\u0187\1\u0188\1\u0189\10\uffff\1\u018a\1\u018b\1\u018c"+
            "\1\u018e\1\u018f\1\u0190\1\u0191\1\u0192\1\uffff\1\u0193\1\u0194"+
            "\1\u0195\1\u0196\2\uffff\1\u0197\1\uffff\1\u0198\1\u018d\1\u017b"+
            "\24\uffff\1\u019f\1\u01a0\1\u01a1\u0092\uffff\1\u0179\36\uffff"+
            "\1\u017a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u013d\4\uffff\1\u013d\2\uffff\2\u013d\3\uffff\11\u013d"+
            "\1\uffff\1\u013d\6\uffff\1\u013d\1\uffff\4\u013d\5\uffff\2\u013d"+
            "\3\uffff\3\u013d\10\uffff\16\u013d\1\uffff\1\u013d\1\uffff\3"+
            "\u013d\14\uffff\3\u013d\5\uffff\3\u013d\u0083\uffff\1\u013d"+
            "\16\uffff\1\u013d\2\uffff\2\u013d\2\uffff\2\u013d\3\uffff\1"+
            "\u01a2\1\u01a3\11\uffff\1\u013d\2\uffff\1\u013d\1\uffff\1\u013d"+
            "\2\uffff\3\u013d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u013d\4\uffff\1\u013d\2\uffff\2\u013d\3\uffff\11\u013d"+
            "\1\uffff\1\u013d\6\uffff\1\u013d\1\uffff\4\u013d\5\uffff\2\u013d"+
            "\3\uffff\3\u013d\10\uffff\16\u013d\1\uffff\1\u013d\1\uffff\3"+
            "\u013d\14\uffff\3\u013d\5\uffff\3\u013d\u0083\uffff\1\u013d"+
            "\16\uffff\1\u013d\2\uffff\2\u013d\2\uffff\2\u013d\3\uffff\1"+
            "\u01e0\1\u01e1\11\uffff\1\u013d\2\uffff\1\u013d\1\uffff\1\u013d"+
            "\2\uffff\3\u013d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0253\1\u0254\1\u0255\1\u0256\1\u0257\1\u0235\1\u0234\1"+
            "\u0252\2\uffff\1\u023f\1\u0240\14\uffff\1\u0249\1\u024b\1\u0248"+
            "\1\u024a\1\u0241\7\uffff\1\u022e\1\uffff\1\u0236\1\u0237\1\uffff"+
            "\1\u0243\2\uffff\1\u0238\3\uffff\1\u023c\1\uffff\1\u0239\1\u0246"+
            "\1\u0247\6\uffff\1\u0245\26\uffff\1\u0251\1\u0250\1\u024f\6"+
            "\uffff\1\u023a\3\uffff\1\u0242\3\uffff\1\u0244\u0090\uffff\1"+
            "\u023e\1\uffff\1\u022d\1\u021f\1\u021e\1\u023d\1\u0223\1\u0232"+
            "\1\u0226\1\u0222\1\u0221\1\u024d\1\u024c\2\uffff\1\u0231\1\u0233"+
            "\1\u022f\1\u0230\1\u0229\1\u022a\1\u022b\1\u022c\1\u0228\1\u0227"+
            "\1\u0224\1\u0225\1\uffff\1\u024e\2\uffff\1\u0220",
            "\1\u028d\1\u028e\1\u028f\1\u0290\1\u0291\1\u026f\1\u026e\1"+
            "\u028c\2\uffff\1\u0279\1\u027a\14\uffff\1\u0283\1\u0285\1\u0282"+
            "\1\u0284\1\u027b\7\uffff\1\u0268\1\uffff\1\u0270\1\u0271\1\uffff"+
            "\1\u027d\2\uffff\1\u0272\3\uffff\1\u0276\1\uffff\1\u0273\1\u0280"+
            "\1\u0281\6\uffff\1\u027f\26\uffff\1\u028b\1\u028a\1\u0289\6"+
            "\uffff\1\u0274\3\uffff\1\u027c\3\uffff\1\u027e\u0090\uffff\1"+
            "\u0278\1\uffff\1\u0267\1\u0258\1\u025b\1\u0277\1\u025d\1\u026c"+
            "\1\u0260\1\u025c\1\u025a\1\u0287\1\u0286\2\uffff\1\u026b\1\u026d"+
            "\1\u0269\1\u026a\1\u0263\1\u0264\1\u0265\1\u0266\1\u0262\1\u0261"+
            "\1\u025e\1\u025f\1\uffff\1\u0288\2\uffff\1\u0259",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02c6\1\u02c7\1\u02c8\1\u02c9\1\u02ca\1\u02a8\1\u02a7\1"+
            "\u02c5\2\uffff\1\u02b2\1\u02b3\14\uffff\1\u02bc\1\u02be\1\u02bb"+
            "\1\u02bd\1\u02b4\7\uffff\1\u02a1\1\uffff\1\u02a9\1\u02aa\1\uffff"+
            "\1\u02b6\2\uffff\1\u02ab\3\uffff\1\u02af\1\uffff\1\u02ac\1\u02b9"+
            "\1\u02ba\6\uffff\1\u02b8\26\uffff\1\u02c4\1\u02c3\1\u02c2\6"+
            "\uffff\1\u02ad\3\uffff\1\u02b5\3\uffff\1\u02b7\u0090\uffff\1"+
            "\u02b1\1\uffff\1\u02a0\1\u02cb\1\u0294\1\u02b0\1\u0296\1\u02a5"+
            "\1\u0299\1\u0295\1\u0293\1\u02c0\1\u02bf\2\uffff\1\u02a4\1\u02a6"+
            "\1\u02a2\1\u02a3\1\u029c\1\u029d\1\u029e\1\u029f\1\u029b\1\u029a"+
            "\1\u0297\1\u0298\1\uffff\1\u02c1\2\uffff\1\u0292",
            "\1\u0300\1\u0301\1\u0302\1\u0303\1\u0304\1\u02e2\1\u02e1\1"+
            "\u02ff\2\uffff\1\u02ec\1\u02ed\14\uffff\1\u02f6\1\u02f8\1\u02f5"+
            "\1\u02f7\1\u02ee\7\uffff\1\u02db\1\uffff\1\u02e3\1\u02e4\1\uffff"+
            "\1\u02f0\2\uffff\1\u02e5\3\uffff\1\u02e9\1\uffff\1\u02e6\1\u02f3"+
            "\1\u02f4\6\uffff\1\u02f2\26\uffff\1\u02fe\1\u02fd\1\u02fc\6"+
            "\uffff\1\u02e7\3\uffff\1\u02ef\3\uffff\1\u02f1\u0090\uffff\1"+
            "\u02eb\1\uffff\1\u02da\1\u0305\1\u02cc\1\u02ea\1\u02d0\1\u02df"+
            "\1\u02d3\1\u02cf\1\u02ce\1\u02fa\1\u02f9\2\uffff\1\u02de\1\u02e0"+
            "\1\u02dc\1\u02dd\1\u02d6\1\u02d7\1\u02d8\1\u02d9\1\u02d5\1\u02d4"+
            "\1\u02d1\1\u02d2\1\uffff\1\u02fb\2\uffff\1\u02cd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u013d\1\uffff\3\u013d\34\uffff\1\u013d\u00cf\uffff\1\u013d"+
            "\1\uffff\1\u013d\2\uffff\1\u031a\3\u013d\6\uffff\14\u013d",
            "\4\u013d\1\uffff\3\u013d\34\uffff\1\u013d\u00cf\uffff\1\u013d"+
            "\1\uffff\1\u013d\2\uffff\1\u0334\3\u013d\6\uffff\14\u013d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u036f\1\u0370\1\u0371\1\u0372\1\u0373\1\u0351\1\u0350\1"+
            "\u036e\2\uffff\1\u035b\1\u035c\14\uffff\1\u0365\1\u0367\1\u0364"+
            "\1\u0366\1\u035d\7\uffff\1\u034a\1\uffff\1\u0352\1\u0353\1\uffff"+
            "\1\u035f\2\uffff\1\u0354\3\uffff\1\u0358\1\uffff\1\u0355\1\u0362"+
            "\1\u0363\6\uffff\1\u0361\26\uffff\1\u036d\1\u036c\1\u036b\6"+
            "\uffff\1\u0356\3\uffff\1\u035e\3\uffff\1\u0360\u0090\uffff\1"+
            "\u035a\1\uffff\1\u0349\1\u033b\1\u033a\1\u0359\1\u033f\1\u034e"+
            "\1\u0342\1\u033e\1\u033d\1\u0369\1\u0368\2\uffff\1\u034d\1\u034f"+
            "\1\u034b\1\u034c\1\u0345\1\u0346\1\u0347\1\u0348\1\u0344\1\u0343"+
            "\1\u0340\1\u0341\1\uffff\1\u036a\2\uffff\1\u033c",
            "\1\u03a9\1\u03aa\1\u03ab\1\u03ac\1\u03ad\1\u038b\1\u038a\1"+
            "\u03a8\2\uffff\1\u0395\1\u0396\14\uffff\1\u039f\1\u03a1\1\u039e"+
            "\1\u03a0\1\u0397\7\uffff\1\u0384\1\uffff\1\u038c\1\u038d\1\uffff"+
            "\1\u0399\2\uffff\1\u038e\3\uffff\1\u0392\1\uffff\1\u038f\1\u039c"+
            "\1\u039d\6\uffff\1\u039b\26\uffff\1\u03a7\1\u03a6\1\u03a5\6"+
            "\uffff\1\u0390\3\uffff\1\u0398\3\uffff\1\u039a\u0090\uffff\1"+
            "\u0394\1\uffff\1\u0383\1\u0374\1\u0377\1\u0393\1\u0379\1\u0388"+
            "\1\u037c\1\u0378\1\u0376\1\u03a3\1\u03a2\2\uffff\1\u0387\1\u0389"+
            "\1\u0385\1\u0386\1\u037f\1\u0380\1\u0381\1\u0382\1\u037e\1\u037d"+
            "\1\u037a\1\u037b\1\uffff\1\u03a4\2\uffff\1\u0375",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03e2\1\u03e3\1\u03e4\1\u03e5\1\u03e6\1\u03c4\1\u03c3\1"+
            "\u03e1\2\uffff\1\u03ce\1\u03cf\14\uffff\1\u03d8\1\u03da\1\u03d7"+
            "\1\u03d9\1\u03d0\7\uffff\1\u03bd\1\uffff\1\u03c5\1\u03c6\1\uffff"+
            "\1\u03d2\2\uffff\1\u03c7\3\uffff\1\u03cb\1\uffff\1\u03c8\1\u03d5"+
            "\1\u03d6\6\uffff\1\u03d4\26\uffff\1\u03e0\1\u03df\1\u03de\6"+
            "\uffff\1\u03c9\3\uffff\1\u03d1\3\uffff\1\u03d3\u0090\uffff\1"+
            "\u03cd\1\uffff\1\u03bc\1\u03e7\1\u03b0\1\u03cc\1\u03b2\1\u03c1"+
            "\1\u03b5\1\u03b1\1\u03af\1\u03dc\1\u03db\2\uffff\1\u03c0\1\u03c2"+
            "\1\u03be\1\u03bf\1\u03b8\1\u03b9\1\u03ba\1\u03bb\1\u03b7\1\u03b6"+
            "\1\u03b3\1\u03b4\1\uffff\1\u03dd\2\uffff\1\u03ae",
            "\1\u041c\1\u041d\1\u041e\1\u041f\1\u0420\1\u03fe\1\u03fd\1"+
            "\u041b\2\uffff\1\u0408\1\u0409\14\uffff\1\u0412\1\u0414\1\u0411"+
            "\1\u0413\1\u040a\7\uffff\1\u03f7\1\uffff\1\u03ff\1\u0400\1\uffff"+
            "\1\u040c\2\uffff\1\u0401\3\uffff\1\u0405\1\uffff\1\u0402\1\u040f"+
            "\1\u0410\6\uffff\1\u040e\26\uffff\1\u041a\1\u0419\1\u0418\6"+
            "\uffff\1\u0403\3\uffff\1\u040b\3\uffff\1\u040d\u0090\uffff\1"+
            "\u0407\1\uffff\1\u03f6\1\u0421\1\u03e8\1\u0406\1\u03ec\1\u03fb"+
            "\1\u03ef\1\u03eb\1\u03ea\1\u0416\1\u0415\2\uffff\1\u03fa\1\u03fc"+
            "\1\u03f8\1\u03f9\1\u03f2\1\u03f3\1\u03f4\1\u03f5\1\u03f1\1\u03f0"+
            "\1\u03ed\1\u03ee\1\uffff\1\u0417\2\uffff\1\u03e9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u013d\1\uffff\3\u013d\34\uffff\1\u013d\u00cf\uffff\1\u013d"+
            "\1\uffff\1\u013d\2\uffff\1\u0436\3\u013d\6\uffff\14\u013d",
            "\4\u013d\1\uffff\3\u013d\34\uffff\1\u013d\u00cf\uffff\1\u013d"+
            "\1\uffff\1\u013d\2\uffff\1\u0450\3\u013d\6\uffff\14\u013d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u013d\1\uffff\3\u013d\34\uffff\1\u013d\u00cf\uffff\1\u013d"+
            "\1\uffff\1\u013d\2\uffff\1\u046a\3\u013d\6\uffff\14\u013d",
            "\4\u013d\1\uffff\3\u013d\34\uffff\1\u013d\u00cf\uffff\1\u013d"+
            "\1\uffff\1\u013d\2\uffff\1\u0484\3\u013d\6\uffff\14\u013d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA183_eot = DFA.unpackEncodedString(DFA183_eotS);
    static final short[] DFA183_eof = DFA.unpackEncodedString(DFA183_eofS);
    static final char[] DFA183_min = DFA.unpackEncodedStringToUnsignedChars(DFA183_minS);
    static final char[] DFA183_max = DFA.unpackEncodedStringToUnsignedChars(DFA183_maxS);
    static final short[] DFA183_accept = DFA.unpackEncodedString(DFA183_acceptS);
    static final short[] DFA183_special = DFA.unpackEncodedString(DFA183_specialS);
    static final short[][] DFA183_transition;

    static {
        int numStates = DFA183_transitionS.length;
        DFA183_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA183_transition[i] = DFA.unpackEncodedString(DFA183_transitionS[i]);
        }
    }

    class DFA183 extends DFA {

        public DFA183(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 183;
            this.eot = DFA183_eot;
            this.eof = DFA183_eof;
            this.min = DFA183_min;
            this.max = DFA183_max;
            this.accept = DFA183_accept;
            this.special = DFA183_special;
            this.transition = DFA183_transition;
        }
        public String getDescription() {
            return "1214:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA183_0 = input.LA(1);

                         
                        int index183_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_0==IDENT) ) {s = 1;}

                        else if ( (LA183_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA183_0==AT) && (synpred4_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA183_0==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA183_0==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA183_0==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA183_0==SUM) && (synpred4_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA183_0==AVG) && (synpred4_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA183_0==MAX) ) {s = 9;}

                        else if ( (LA183_0==MIN) ) {s = 10;}

                        else if ( (LA183_0==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA183_0==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA183_0==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA183_0==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA183_0==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA183_0==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA183_0==LAST) && (synpred4_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA183_0==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA183_0==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA183_0==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA183_0==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA183_0==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA183_0==SQL) && (synpred4_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA183_0==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA183_0==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA183_0==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA183_0==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA183_0==LW) && (synpred4_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA183_0==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA183_0==CAST) && (synpred4_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA183_0==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA183_0==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA183_0==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA183_0==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA183_0==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA183_0==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA183_0==FULL) && (synpred4_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA183_0==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA183_0==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA183_0==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA183_0==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 41;}

                         
                        input.seek(index183_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA183_1 = input.LA(1);

                         
                        int index183_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_1==DOT) ) {s = 42;}

                        else if ( (LA183_1==LPAREN) ) {s = 43;}

                        else if ( (LA183_1==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA183_1==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA183_1==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA183_1==STAR) && (synpred4_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA183_1==DIV) && (synpred4_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA183_1==MOD) && (synpred4_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA183_1==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA183_1==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA183_1==LOR) && (synpred4_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA183_1==LT) && (synpred4_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA183_1==GT) && (synpred4_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA183_1==LE) && (synpred4_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA183_1==GE) && (synpred4_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA183_1==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA183_1==IS) && (synpred4_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA183_1==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA183_1==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA183_1==BAND) && (synpred4_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA183_1==BOR) && (synpred4_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA183_1==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA183_1==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA183_1==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA183_1==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA183_1==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA183_1==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA183_1==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA183_1==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA183_1==EOF) && (synpred4_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA183_1==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA183_1==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA183_1==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA183_1==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA183_1==AS) && (synpred4_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA183_1==FROM) && (synpred4_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA183_1==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA183_1==ALL) && (synpred4_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA183_1==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA183_1==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA183_1==ASC) && (synpred4_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA183_1==DESC) && (synpred4_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA183_1==THEN) && (synpred4_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA183_1==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA183_1==END) && (synpred4_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA183_1==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA183_1==COLON) && (synpred4_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA183_1==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA183_1==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA183_1==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA183_1==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA183_1==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA183_1==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA183_1==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA183_1==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA183_1==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA183_1==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA183_1==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 99;}

                         
                        input.seek(index183_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA183_2 = input.LA(1);

                         
                        int index183_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_2==DOT) ) {s = 100;}

                        else if ( (LA183_2==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA183_2==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 102;}

                        else if ( (LA183_2==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA183_2==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA183_2==STAR) && (synpred4_EsperEPL2Grammar())) {s = 105;}

                        else if ( (LA183_2==DIV) && (synpred4_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA183_2==MOD) && (synpred4_EsperEPL2Grammar())) {s = 107;}

                        else if ( (LA183_2==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA183_2==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA183_2==LOR) && (synpred4_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA183_2==LT) && (synpred4_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA183_2==GT) && (synpred4_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA183_2==LE) && (synpred4_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA183_2==GE) && (synpred4_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA183_2==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA183_2==IS) && (synpred4_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA183_2==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA183_2==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA183_2==BAND) && (synpred4_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA183_2==BOR) && (synpred4_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA183_2==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA183_2==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA183_2==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA183_2==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA183_2==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA183_2==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA183_2==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA183_2==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA183_2==EOF) && (synpred4_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA183_2==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA183_2==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA183_2==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA183_2==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA183_2==AS) && (synpred4_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA183_2==FROM) && (synpred4_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA183_2==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA183_2==ALL) && (synpred4_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA183_2==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA183_2==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA183_2==ASC) && (synpred4_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA183_2==DESC) && (synpred4_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA183_2==THEN) && (synpred4_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA183_2==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA183_2==END) && (synpred4_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA183_2==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA183_2==COLON) && (synpred4_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA183_2==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA183_2==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA183_2==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA183_2==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA183_2==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA183_2==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA183_2==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA183_2==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA183_2==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA183_2==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA183_2==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 157;}

                         
                        input.seek(index183_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA183_9 = input.LA(1);

                         
                        int index183_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_9==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA183_9==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA183_9==LPAREN) ) {s = 160;}

                        else if ( (LA183_9==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA183_9==DOT) && (synpred4_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA183_9==STAR) && (synpred4_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA183_9==DIV) && (synpred4_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA183_9==MOD) && (synpred4_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA183_9==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA183_9==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA183_9==LOR) && (synpred4_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA183_9==LT) && (synpred4_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA183_9==GT) && (synpred4_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA183_9==LE) && (synpred4_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA183_9==GE) && (synpred4_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA183_9==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA183_9==IS) && (synpred4_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA183_9==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA183_9==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA183_9==BAND) && (synpred4_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA183_9==BOR) && (synpred4_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA183_9==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA183_9==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA183_9==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA183_9==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA183_9==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA183_9==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA183_9==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA183_9==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA183_9==EOF) && (synpred4_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA183_9==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA183_9==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA183_9==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA183_9==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA183_9==AS) && (synpred4_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA183_9==FROM) && (synpred4_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA183_9==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA183_9==ALL) && (synpred4_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA183_9==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA183_9==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA183_9==ASC) && (synpred4_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA183_9==DESC) && (synpred4_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA183_9==THEN) && (synpred4_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA183_9==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA183_9==END) && (synpred4_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA183_9==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA183_9==COLON) && (synpred4_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA183_9==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA183_9==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA183_9==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA183_9==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA183_9==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA183_9==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA183_9==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA183_9==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA183_9==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA183_9==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA183_9==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 215;}

                         
                        input.seek(index183_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA183_10 = input.LA(1);

                         
                        int index183_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_10==LPAREN) ) {s = 216;}

                        else if ( (LA183_10==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA183_10==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA183_10==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA183_10==DOT) && (synpred4_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA183_10==STAR) && (synpred4_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA183_10==DIV) && (synpred4_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA183_10==MOD) && (synpred4_EsperEPL2Grammar())) {s = 223;}

                        else if ( (LA183_10==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA183_10==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA183_10==LOR) && (synpred4_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA183_10==LT) && (synpred4_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA183_10==GT) && (synpred4_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA183_10==LE) && (synpred4_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA183_10==GE) && (synpred4_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA183_10==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA183_10==IS) && (synpred4_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA183_10==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA183_10==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA183_10==BAND) && (synpred4_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA183_10==BOR) && (synpred4_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA183_10==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA183_10==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA183_10==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA183_10==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA183_10==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA183_10==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA183_10==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA183_10==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA183_10==EOF) && (synpred4_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA183_10==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA183_10==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA183_10==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA183_10==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA183_10==AS) && (synpred4_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA183_10==FROM) && (synpred4_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA183_10==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA183_10==ALL) && (synpred4_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA183_10==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA183_10==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA183_10==ASC) && (synpred4_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA183_10==DESC) && (synpred4_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA183_10==THEN) && (synpred4_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA183_10==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA183_10==END) && (synpred4_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA183_10==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA183_10==COLON) && (synpred4_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA183_10==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA183_10==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA183_10==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA183_10==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA183_10==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA183_10==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA183_10==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA183_10==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA183_10==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA183_10==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA183_10==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 273;}

                         
                        input.seek(index183_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA183_42 = input.LA(1);

                         
                        int index183_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_42==IDENT) ) {s = 274;}

                        else if ( (LA183_42==TICKED_STRING_LITERAL) ) {s = 275;}

                        else if ( (LA183_42==AT) && (synpred4_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA183_42==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA183_42==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA183_42==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA183_42==SUM) && (synpred4_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA183_42==AVG) && (synpred4_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA183_42==MAX) ) {s = 282;}

                        else if ( (LA183_42==MIN) ) {s = 283;}

                        else if ( (LA183_42==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA183_42==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA183_42==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA183_42==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA183_42==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA183_42==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA183_42==LAST) && (synpred4_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA183_42==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA183_42==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA183_42==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA183_42==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA183_42==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA183_42==SQL) && (synpred4_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA183_42==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA183_42==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA183_42==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA183_42==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA183_42==LW) && (synpred4_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA183_42==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA183_42==CAST) && (synpred4_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA183_42==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA183_42==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA183_42==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA183_42==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA183_42==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA183_42==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA183_42==FULL) && (synpred4_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA183_42==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA183_42==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA183_42==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA183_42==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 314;}

                         
                        input.seek(index183_42);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA183_100 = input.LA(1);

                         
                        int index183_100 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_100==IDENT) ) {s = 377;}

                        else if ( (LA183_100==TICKED_STRING_LITERAL) ) {s = 378;}

                        else if ( (LA183_100==AT) && (synpred4_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA183_100==COUNT) && (synpred4_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA183_100==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA183_100==EVERY_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 382;}

                        else if ( (LA183_100==SUM) && (synpred4_EsperEPL2Grammar())) {s = 383;}

                        else if ( (LA183_100==AVG) && (synpred4_EsperEPL2Grammar())) {s = 384;}

                        else if ( (LA183_100==MAX) ) {s = 385;}

                        else if ( (LA183_100==MIN) ) {s = 386;}

                        else if ( (LA183_100==COALESCE) && (synpred4_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA183_100==MEDIAN) && (synpred4_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA183_100==STDDEV) && (synpred4_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA183_100==AVEDEV) && (synpred4_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA183_100==EVENTS) && (synpred4_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA183_100==FIRST) && (synpred4_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA183_100==LAST) && (synpred4_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA183_100==UNIDIRECTIONAL) && (synpred4_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA183_100==RETAINUNION) && (synpred4_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA183_100==RETAININTERSECTION) && (synpred4_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA183_100==UNTIL) && (synpred4_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA183_100==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA183_100==SQL) && (synpred4_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA183_100==METADATASQL) && (synpred4_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA183_100==PREVIOUS) && (synpred4_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA183_100==PRIOR) && (synpred4_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA183_100==WEEKDAY) && (synpred4_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA183_100==LW) && (synpred4_EsperEPL2Grammar())) {s = 404;}

                        else if ( (LA183_100==INSTANCEOF) && (synpred4_EsperEPL2Grammar())) {s = 405;}

                        else if ( (LA183_100==CAST) && (synpred4_EsperEPL2Grammar())) {s = 406;}

                        else if ( (LA183_100==SNAPSHOT) && (synpred4_EsperEPL2Grammar())) {s = 407;}

                        else if ( (LA183_100==VARIABLE) && (synpred4_EsperEPL2Grammar())) {s = 408;}

                        else if ( (LA183_100==WINDOW) && (synpred4_EsperEPL2Grammar())) {s = 409;}

                        else if ( (LA183_100==LEFT) && (synpred4_EsperEPL2Grammar())) {s = 410;}

                        else if ( (LA183_100==RIGHT) && (synpred4_EsperEPL2Grammar())) {s = 411;}

                        else if ( (LA183_100==OUTER) && (synpred4_EsperEPL2Grammar())) {s = 412;}

                        else if ( (LA183_100==FULL) && (synpred4_EsperEPL2Grammar())) {s = 413;}

                        else if ( (LA183_100==JOIN) && (synpred4_EsperEPL2Grammar())) {s = 414;}

                        else if ( (LA183_100==DEFINE) && (synpred4_EsperEPL2Grammar())) {s = 415;}

                        else if ( (LA183_100==PARTITION) && (synpred4_EsperEPL2Grammar())) {s = 416;}

                        else if ( (LA183_100==MATCHES) && (synpred4_EsperEPL2Grammar())) {s = 417;}

                         
                        input.seek(index183_100);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA183_274 = input.LA(1);

                         
                        int index183_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_274==LPAREN) ) {s = 542;}

                        else if ( (LA183_274==DOT) ) {s = 543;}

                        else if ( (LA183_274==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 544;}

                        else if ( (LA183_274==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 545;}

                        else if ( (LA183_274==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 546;}

                        else if ( (LA183_274==STAR) && (synpred4_EsperEPL2Grammar())) {s = 547;}

                        else if ( (LA183_274==DIV) && (synpred4_EsperEPL2Grammar())) {s = 548;}

                        else if ( (LA183_274==MOD) && (synpred4_EsperEPL2Grammar())) {s = 549;}

                        else if ( (LA183_274==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 550;}

                        else if ( (LA183_274==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 551;}

                        else if ( (LA183_274==LOR) && (synpred4_EsperEPL2Grammar())) {s = 552;}

                        else if ( (LA183_274==LT) && (synpred4_EsperEPL2Grammar())) {s = 553;}

                        else if ( (LA183_274==GT) && (synpred4_EsperEPL2Grammar())) {s = 554;}

                        else if ( (LA183_274==LE) && (synpred4_EsperEPL2Grammar())) {s = 555;}

                        else if ( (LA183_274==GE) && (synpred4_EsperEPL2Grammar())) {s = 556;}

                        else if ( (LA183_274==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 557;}

                        else if ( (LA183_274==IS) && (synpred4_EsperEPL2Grammar())) {s = 558;}

                        else if ( (LA183_274==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 559;}

                        else if ( (LA183_274==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 560;}

                        else if ( (LA183_274==BAND) && (synpred4_EsperEPL2Grammar())) {s = 561;}

                        else if ( (LA183_274==BOR) && (synpred4_EsperEPL2Grammar())) {s = 562;}

                        else if ( (LA183_274==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 563;}

                        else if ( (LA183_274==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 564;}

                        else if ( (LA183_274==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 565;}

                        else if ( (LA183_274==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 566;}

                        else if ( (LA183_274==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 567;}

                        else if ( (LA183_274==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 568;}

                        else if ( (LA183_274==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 569;}

                        else if ( (LA183_274==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 570;}

                        else if ( (LA183_274==EOF) && (synpred4_EsperEPL2Grammar())) {s = 571;}

                        else if ( (LA183_274==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 572;}

                        else if ( (LA183_274==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 573;}

                        else if ( (LA183_274==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 574;}

                        else if ( (LA183_274==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 575;}

                        else if ( (LA183_274==AS) && (synpred4_EsperEPL2Grammar())) {s = 576;}

                        else if ( (LA183_274==FROM) && (synpred4_EsperEPL2Grammar())) {s = 577;}

                        else if ( (LA183_274==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 578;}

                        else if ( (LA183_274==ALL) && (synpred4_EsperEPL2Grammar())) {s = 579;}

                        else if ( (LA183_274==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 580;}

                        else if ( (LA183_274==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 581;}

                        else if ( (LA183_274==ASC) && (synpred4_EsperEPL2Grammar())) {s = 582;}

                        else if ( (LA183_274==DESC) && (synpred4_EsperEPL2Grammar())) {s = 583;}

                        else if ( (LA183_274==THEN) && (synpred4_EsperEPL2Grammar())) {s = 584;}

                        else if ( (LA183_274==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 585;}

                        else if ( (LA183_274==END) && (synpred4_EsperEPL2Grammar())) {s = 586;}

                        else if ( (LA183_274==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 587;}

                        else if ( (LA183_274==COLON) && (synpred4_EsperEPL2Grammar())) {s = 588;}

                        else if ( (LA183_274==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 589;}

                        else if ( (LA183_274==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 590;}

                        else if ( (LA183_274==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 591;}

                        else if ( (LA183_274==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 592;}

                        else if ( (LA183_274==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 593;}

                        else if ( (LA183_274==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 594;}

                        else if ( (LA183_274==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 595;}

                        else if ( (LA183_274==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 596;}

                        else if ( (LA183_274==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 597;}

                        else if ( (LA183_274==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 598;}

                        else if ( (LA183_274==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 599;}

                         
                        input.seek(index183_274);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA183_275 = input.LA(1);

                         
                        int index183_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_275==DOT) ) {s = 600;}

                        else if ( (LA183_275==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 601;}

                        else if ( (LA183_275==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 602;}

                        else if ( (LA183_275==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 603;}

                        else if ( (LA183_275==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 604;}

                        else if ( (LA183_275==STAR) && (synpred4_EsperEPL2Grammar())) {s = 605;}

                        else if ( (LA183_275==DIV) && (synpred4_EsperEPL2Grammar())) {s = 606;}

                        else if ( (LA183_275==MOD) && (synpred4_EsperEPL2Grammar())) {s = 607;}

                        else if ( (LA183_275==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 608;}

                        else if ( (LA183_275==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 609;}

                        else if ( (LA183_275==LOR) && (synpred4_EsperEPL2Grammar())) {s = 610;}

                        else if ( (LA183_275==LT) && (synpred4_EsperEPL2Grammar())) {s = 611;}

                        else if ( (LA183_275==GT) && (synpred4_EsperEPL2Grammar())) {s = 612;}

                        else if ( (LA183_275==LE) && (synpred4_EsperEPL2Grammar())) {s = 613;}

                        else if ( (LA183_275==GE) && (synpred4_EsperEPL2Grammar())) {s = 614;}

                        else if ( (LA183_275==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 615;}

                        else if ( (LA183_275==IS) && (synpred4_EsperEPL2Grammar())) {s = 616;}

                        else if ( (LA183_275==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 617;}

                        else if ( (LA183_275==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 618;}

                        else if ( (LA183_275==BAND) && (synpred4_EsperEPL2Grammar())) {s = 619;}

                        else if ( (LA183_275==BOR) && (synpred4_EsperEPL2Grammar())) {s = 620;}

                        else if ( (LA183_275==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 621;}

                        else if ( (LA183_275==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 622;}

                        else if ( (LA183_275==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA183_275==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA183_275==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 625;}

                        else if ( (LA183_275==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA183_275==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA183_275==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA183_275==EOF) && (synpred4_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA183_275==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA183_275==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA183_275==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA183_275==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA183_275==AS) && (synpred4_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA183_275==FROM) && (synpred4_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA183_275==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA183_275==ALL) && (synpred4_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA183_275==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA183_275==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA183_275==ASC) && (synpred4_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA183_275==DESC) && (synpred4_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA183_275==THEN) && (synpred4_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA183_275==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA183_275==END) && (synpred4_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA183_275==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA183_275==COLON) && (synpred4_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA183_275==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA183_275==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA183_275==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA183_275==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA183_275==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA183_275==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA183_275==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA183_275==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA183_275==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA183_275==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA183_275==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 657;}

                         
                        input.seek(index183_275);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA183_282 = input.LA(1);

                         
                        int index183_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_282==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA183_282==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA183_282==LPAREN) ) {s = 660;}

                        else if ( (LA183_282==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA183_282==STAR) && (synpred4_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA183_282==DIV) && (synpred4_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA183_282==MOD) && (synpred4_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA183_282==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA183_282==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA183_282==LOR) && (synpred4_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA183_282==LT) && (synpred4_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA183_282==GT) && (synpred4_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA183_282==LE) && (synpred4_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA183_282==GE) && (synpred4_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA183_282==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA183_282==IS) && (synpred4_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA183_282==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA183_282==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA183_282==BAND) && (synpred4_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA183_282==BOR) && (synpred4_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA183_282==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA183_282==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA183_282==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 680;}

                        else if ( (LA183_282==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA183_282==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA183_282==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 683;}

                        else if ( (LA183_282==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA183_282==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA183_282==EOF) && (synpred4_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA183_282==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA183_282==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA183_282==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA183_282==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA183_282==AS) && (synpred4_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA183_282==FROM) && (synpred4_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA183_282==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA183_282==ALL) && (synpred4_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA183_282==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA183_282==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA183_282==ASC) && (synpred4_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA183_282==DESC) && (synpred4_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA183_282==THEN) && (synpred4_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA183_282==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA183_282==END) && (synpred4_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA183_282==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA183_282==COLON) && (synpred4_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA183_282==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA183_282==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA183_282==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA183_282==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA183_282==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA183_282==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA183_282==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA183_282==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA183_282==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA183_282==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA183_282==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA183_282==DOT) && (synpred4_EsperEPL2Grammar())) {s = 715;}

                         
                        input.seek(index183_282);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA183_283 = input.LA(1);

                         
                        int index183_283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_283==LPAREN) ) {s = 716;}

                        else if ( (LA183_283==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA183_283==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA183_283==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA183_283==STAR) && (synpred4_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA183_283==DIV) && (synpred4_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA183_283==MOD) && (synpred4_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA183_283==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA183_283==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA183_283==LOR) && (synpred4_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA183_283==LT) && (synpred4_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA183_283==GT) && (synpred4_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA183_283==LE) && (synpred4_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA183_283==GE) && (synpred4_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA183_283==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA183_283==IS) && (synpred4_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA183_283==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA183_283==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA183_283==BAND) && (synpred4_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA183_283==BOR) && (synpred4_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA183_283==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA183_283==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA183_283==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA183_283==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 739;}

                        else if ( (LA183_283==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 740;}

                        else if ( (LA183_283==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA183_283==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA183_283==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA183_283==EOF) && (synpred4_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA183_283==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA183_283==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA183_283==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA183_283==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA183_283==AS) && (synpred4_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA183_283==FROM) && (synpred4_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA183_283==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA183_283==ALL) && (synpred4_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA183_283==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA183_283==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA183_283==ASC) && (synpred4_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA183_283==DESC) && (synpred4_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA183_283==THEN) && (synpred4_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA183_283==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA183_283==END) && (synpred4_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA183_283==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA183_283==COLON) && (synpred4_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA183_283==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA183_283==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA183_283==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA183_283==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA183_283==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA183_283==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA183_283==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA183_283==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA183_283==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA183_283==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA183_283==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA183_283==DOT) && (synpred4_EsperEPL2Grammar())) {s = 773;}

                         
                        input.seek(index183_283);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA183_377 = input.LA(1);

                         
                        int index183_377 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_377==LPAREN) ) {s = 826;}

                        else if ( (LA183_377==DOT) ) {s = 827;}

                        else if ( (LA183_377==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA183_377==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA183_377==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA183_377==STAR) && (synpred4_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA183_377==DIV) && (synpred4_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA183_377==MOD) && (synpred4_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA183_377==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA183_377==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA183_377==LOR) && (synpred4_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA183_377==LT) && (synpred4_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA183_377==GT) && (synpred4_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA183_377==LE) && (synpred4_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA183_377==GE) && (synpred4_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA183_377==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA183_377==IS) && (synpred4_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA183_377==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA183_377==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA183_377==BAND) && (synpred4_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA183_377==BOR) && (synpred4_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA183_377==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA183_377==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA183_377==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA183_377==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA183_377==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA183_377==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA183_377==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA183_377==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA183_377==EOF) && (synpred4_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA183_377==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA183_377==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 857;}

                        else if ( (LA183_377==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 858;}

                        else if ( (LA183_377==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 859;}

                        else if ( (LA183_377==AS) && (synpred4_EsperEPL2Grammar())) {s = 860;}

                        else if ( (LA183_377==FROM) && (synpred4_EsperEPL2Grammar())) {s = 861;}

                        else if ( (LA183_377==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 862;}

                        else if ( (LA183_377==ALL) && (synpred4_EsperEPL2Grammar())) {s = 863;}

                        else if ( (LA183_377==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 864;}

                        else if ( (LA183_377==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 865;}

                        else if ( (LA183_377==ASC) && (synpred4_EsperEPL2Grammar())) {s = 866;}

                        else if ( (LA183_377==DESC) && (synpred4_EsperEPL2Grammar())) {s = 867;}

                        else if ( (LA183_377==THEN) && (synpred4_EsperEPL2Grammar())) {s = 868;}

                        else if ( (LA183_377==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 869;}

                        else if ( (LA183_377==END) && (synpred4_EsperEPL2Grammar())) {s = 870;}

                        else if ( (LA183_377==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 871;}

                        else if ( (LA183_377==COLON) && (synpred4_EsperEPL2Grammar())) {s = 872;}

                        else if ( (LA183_377==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 873;}

                        else if ( (LA183_377==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 874;}

                        else if ( (LA183_377==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 875;}

                        else if ( (LA183_377==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 876;}

                        else if ( (LA183_377==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 877;}

                        else if ( (LA183_377==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 878;}

                        else if ( (LA183_377==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 879;}

                        else if ( (LA183_377==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 880;}

                        else if ( (LA183_377==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 881;}

                        else if ( (LA183_377==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 882;}

                        else if ( (LA183_377==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 883;}

                         
                        input.seek(index183_377);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA183_378 = input.LA(1);

                         
                        int index183_378 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_378==DOT) ) {s = 884;}

                        else if ( (LA183_378==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 885;}

                        else if ( (LA183_378==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 886;}

                        else if ( (LA183_378==LPAREN) && (synpred4_EsperEPL2Grammar())) {s = 887;}

                        else if ( (LA183_378==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 888;}

                        else if ( (LA183_378==STAR) && (synpred4_EsperEPL2Grammar())) {s = 889;}

                        else if ( (LA183_378==DIV) && (synpred4_EsperEPL2Grammar())) {s = 890;}

                        else if ( (LA183_378==MOD) && (synpred4_EsperEPL2Grammar())) {s = 891;}

                        else if ( (LA183_378==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 892;}

                        else if ( (LA183_378==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 893;}

                        else if ( (LA183_378==LOR) && (synpred4_EsperEPL2Grammar())) {s = 894;}

                        else if ( (LA183_378==LT) && (synpred4_EsperEPL2Grammar())) {s = 895;}

                        else if ( (LA183_378==GT) && (synpred4_EsperEPL2Grammar())) {s = 896;}

                        else if ( (LA183_378==LE) && (synpred4_EsperEPL2Grammar())) {s = 897;}

                        else if ( (LA183_378==GE) && (synpred4_EsperEPL2Grammar())) {s = 898;}

                        else if ( (LA183_378==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 899;}

                        else if ( (LA183_378==IS) && (synpred4_EsperEPL2Grammar())) {s = 900;}

                        else if ( (LA183_378==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 901;}

                        else if ( (LA183_378==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 902;}

                        else if ( (LA183_378==BAND) && (synpred4_EsperEPL2Grammar())) {s = 903;}

                        else if ( (LA183_378==BOR) && (synpred4_EsperEPL2Grammar())) {s = 904;}

                        else if ( (LA183_378==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 905;}

                        else if ( (LA183_378==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 906;}

                        else if ( (LA183_378==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 907;}

                        else if ( (LA183_378==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 908;}

                        else if ( (LA183_378==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 909;}

                        else if ( (LA183_378==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 910;}

                        else if ( (LA183_378==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 911;}

                        else if ( (LA183_378==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 912;}

                        else if ( (LA183_378==EOF) && (synpred4_EsperEPL2Grammar())) {s = 913;}

                        else if ( (LA183_378==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 914;}

                        else if ( (LA183_378==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 915;}

                        else if ( (LA183_378==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 916;}

                        else if ( (LA183_378==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 917;}

                        else if ( (LA183_378==AS) && (synpred4_EsperEPL2Grammar())) {s = 918;}

                        else if ( (LA183_378==FROM) && (synpred4_EsperEPL2Grammar())) {s = 919;}

                        else if ( (LA183_378==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 920;}

                        else if ( (LA183_378==ALL) && (synpred4_EsperEPL2Grammar())) {s = 921;}

                        else if ( (LA183_378==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 922;}

                        else if ( (LA183_378==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 923;}

                        else if ( (LA183_378==ASC) && (synpred4_EsperEPL2Grammar())) {s = 924;}

                        else if ( (LA183_378==DESC) && (synpred4_EsperEPL2Grammar())) {s = 925;}

                        else if ( (LA183_378==THEN) && (synpred4_EsperEPL2Grammar())) {s = 926;}

                        else if ( (LA183_378==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 927;}

                        else if ( (LA183_378==END) && (synpred4_EsperEPL2Grammar())) {s = 928;}

                        else if ( (LA183_378==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 929;}

                        else if ( (LA183_378==COLON) && (synpred4_EsperEPL2Grammar())) {s = 930;}

                        else if ( (LA183_378==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 931;}

                        else if ( (LA183_378==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 932;}

                        else if ( (LA183_378==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 933;}

                        else if ( (LA183_378==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 934;}

                        else if ( (LA183_378==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 935;}

                        else if ( (LA183_378==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 936;}

                        else if ( (LA183_378==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 937;}

                        else if ( (LA183_378==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 938;}

                        else if ( (LA183_378==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 939;}

                        else if ( (LA183_378==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 940;}

                        else if ( (LA183_378==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 941;}

                         
                        input.seek(index183_378);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA183_385 = input.LA(1);

                         
                        int index183_385 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_385==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 942;}

                        else if ( (LA183_385==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 943;}

                        else if ( (LA183_385==LPAREN) ) {s = 944;}

                        else if ( (LA183_385==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 945;}

                        else if ( (LA183_385==STAR) && (synpred4_EsperEPL2Grammar())) {s = 946;}

                        else if ( (LA183_385==DIV) && (synpred4_EsperEPL2Grammar())) {s = 947;}

                        else if ( (LA183_385==MOD) && (synpred4_EsperEPL2Grammar())) {s = 948;}

                        else if ( (LA183_385==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 949;}

                        else if ( (LA183_385==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 950;}

                        else if ( (LA183_385==LOR) && (synpred4_EsperEPL2Grammar())) {s = 951;}

                        else if ( (LA183_385==LT) && (synpred4_EsperEPL2Grammar())) {s = 952;}

                        else if ( (LA183_385==GT) && (synpred4_EsperEPL2Grammar())) {s = 953;}

                        else if ( (LA183_385==LE) && (synpred4_EsperEPL2Grammar())) {s = 954;}

                        else if ( (LA183_385==GE) && (synpred4_EsperEPL2Grammar())) {s = 955;}

                        else if ( (LA183_385==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 956;}

                        else if ( (LA183_385==IS) && (synpred4_EsperEPL2Grammar())) {s = 957;}

                        else if ( (LA183_385==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 958;}

                        else if ( (LA183_385==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 959;}

                        else if ( (LA183_385==BAND) && (synpred4_EsperEPL2Grammar())) {s = 960;}

                        else if ( (LA183_385==BOR) && (synpred4_EsperEPL2Grammar())) {s = 961;}

                        else if ( (LA183_385==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 962;}

                        else if ( (LA183_385==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA183_385==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA183_385==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 965;}

                        else if ( (LA183_385==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA183_385==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA183_385==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA183_385==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA183_385==EOF) && (synpred4_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA183_385==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA183_385==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA183_385==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA183_385==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA183_385==AS) && (synpred4_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA183_385==FROM) && (synpred4_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA183_385==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA183_385==ALL) && (synpred4_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA183_385==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA183_385==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA183_385==ASC) && (synpred4_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA183_385==DESC) && (synpred4_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA183_385==THEN) && (synpred4_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA183_385==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA183_385==END) && (synpred4_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA183_385==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA183_385==COLON) && (synpred4_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA183_385==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA183_385==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA183_385==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA183_385==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA183_385==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA183_385==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA183_385==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA183_385==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA183_385==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA183_385==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA183_385==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA183_385==DOT) && (synpred4_EsperEPL2Grammar())) {s = 999;}

                         
                        input.seek(index183_385);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA183_386 = input.LA(1);

                         
                        int index183_386 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA183_386==LPAREN) ) {s = 1000;}

                        else if ( (LA183_386==ESCAPECHAR) && (synpred4_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA183_386==LBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA183_386==QUESTION) && (synpred4_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA183_386==STAR) && (synpred4_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA183_386==DIV) && (synpred4_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA183_386==MOD) && (synpred4_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA183_386==PLUS) && (synpred4_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA183_386==MINUS) && (synpred4_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA183_386==LOR) && (synpred4_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA183_386==LT) && (synpred4_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA183_386==GT) && (synpred4_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA183_386==LE) && (synpred4_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA183_386==GE) && (synpred4_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA183_386==EQUALS) && (synpred4_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA183_386==IS) && (synpred4_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA183_386==SQL_NE) && (synpred4_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA183_386==NOT_EQUAL) && (synpred4_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA183_386==BAND) && (synpred4_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA183_386==BOR) && (synpred4_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA183_386==BXOR) && (synpred4_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA183_386==AND_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA183_386==OR_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA183_386==GROUP) && (synpred4_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA183_386==HAVING) && (synpred4_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA183_386==OUTPUT) && (synpred4_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA183_386==ORDER) && (synpred4_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA183_386==ROW_LIMIT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA183_386==EOF) && (synpred4_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA183_386==INSERT) && (synpred4_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA183_386==RPAREN) && (synpred4_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA183_386==COMMA) && (synpred4_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA183_386==WHERE) && (synpred4_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA183_386==AS) && (synpred4_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA183_386==FROM) && (synpred4_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA183_386==MEASURES) && (synpred4_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA183_386==ALL) && (synpred4_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA183_386==AFTER) && (synpred4_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA183_386==PATTERN) && (synpred4_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA183_386==ASC) && (synpred4_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA183_386==DESC) && (synpred4_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA183_386==THEN) && (synpred4_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA183_386==ELSE) && (synpred4_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA183_386==END) && (synpred4_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA183_386==WHEN) && (synpred4_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA183_386==COLON) && (synpred4_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA183_386==RBRACK) && (synpred4_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA183_386==RCURLY) && (synpred4_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA183_386==TIMEPERIOD_SECONDS) && (synpred4_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA183_386==TIMEPERIOD_SECOND) && (synpred4_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA183_386==TIMEPERIOD_SEC) && (synpred4_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA183_386==NOT_EXPR) && (synpred4_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA183_386==IN_SET) && (synpred4_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA183_386==BETWEEN) && (synpred4_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA183_386==LIKE) && (synpred4_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA183_386==REGEXP) && (synpred4_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA183_386==ESCAPE) && (synpred4_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA183_386==DOT) && (synpred4_EsperEPL2Grammar())) {s = 1057;}

                         
                        input.seek(index183_386);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA183_542 = input.LA(1);

                         
                        int index183_542 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_542);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA183_543 = input.LA(1);

                         
                        int index183_543 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_543);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA183_600 = input.LA(1);

                         
                        int index183_600 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_600);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA183_660 = input.LA(1);

                         
                        int index183_660 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_660);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA183_716 = input.LA(1);

                         
                        int index183_716 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_716);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA183_794 = input.LA(1);

                         
                        int index183_794 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_794);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA183_820 = input.LA(1);

                         
                        int index183_820 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_820);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA183_826 = input.LA(1);

                         
                        int index183_826 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_826);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA183_827 = input.LA(1);

                         
                        int index183_827 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_827);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA183_884 = input.LA(1);

                         
                        int index183_884 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_884);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA183_944 = input.LA(1);

                         
                        int index183_944 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_944);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA183_1000 = input.LA(1);

                         
                        int index183_1000 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_1000);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA183_1078 = input.LA(1);

                         
                        int index183_1078 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_1078);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA183_1104 = input.LA(1);

                         
                        int index183_1104 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_1104);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA183_1130 = input.LA(1);

                         
                        int index183_1130 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_1130);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA183_1156 = input.LA(1);

                         
                        int index183_1156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred4_EsperEPL2Grammar()) ) {s = 1057;}

                        else if ( (true) ) {s = 317;}

                         
                        input.seek(index183_1156);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 183, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA229_eotS =
        "\u0228\uffff";
    static final String DFA229_eofS =
        "\u0228\uffff";
    static final String DFA229_minS =
        "\1\5\2\0\6\6\63\uffff\1\u00fa\114\uffff\3\0\112\uffff\3\0\51\uffff"+
        "\3\0\46\uffff\3\0\16\uffff\3\0\77\uffff\3\0\u00a7\uffff";
    static final String DFA229_maxS =
        "\1\u011c\2\0\4\u0114\1\u0119\1\u0114\63\uffff\1\u0113\114\uffff"+
        "\3\0\112\uffff\3\0\51\uffff\3\0\46\uffff\3\0\16\uffff\3\0\77\uffff"+
        "\3\0\u00a7\uffff";
    static final String DFA229_acceptS =
        "\11\uffff\63\4\1\uffff\1\11\44\uffff\1\1\44\uffff\1\2\1\7\3\uffff"+
        "\7\3\1\10\1\5\3\3\34\4\5\3\1\7\3\3\1\10\1\5\2\3\25\4\3\uffff\7\4"+
        "\5\3\1\5\3\3\1\7\2\3\1\10\25\4\3\uffff\7\4\10\3\1\5\1\7\25\4\3\uffff"+
        "\7\4\1\10\2\3\1\4\1\7\1\10\1\4\3\uffff\7\3\1\5\3\3\64\4\3\uffff"+
        "\7\4\1\7\6\3\1\10\2\3\1\5\2\3\1\6\1\12\u0091\uffff";
    static final String DFA229_specialS =
        "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\63\uffff\1\11\114\uffff\1"+
        "\12\1\13\1\14\112\uffff\1\15\1\16\1\17\51\uffff\1\20\1\21\1\22\46"+
        "\uffff\1\23\1\24\1\25\16\uffff\1\26\1\27\1\30\77\uffff\1\31\1\32"+
        "\1\33\u00a7\uffff}>";
    static final String[] DFA229_transitionS = {
            "\1\57\4\uffff\1\25\2\uffff\1\73\1\26\3\uffff\1\27\1\30\1\31"+
            "\1\32\1\33\1\34\1\35\1\36\1\24\1\uffff\1\11\6\uffff\1\62\1\uffff"+
            "\1\64\1\60\1\61\1\63\12\uffff\1\37\1\40\1\1\10\uffff\1\41\1"+
            "\42\1\43\1\45\1\46\1\47\1\50\1\51\1\70\1\52\1\2\1\53\1\54\1"+
            "\71\1\uffff\1\55\1\uffff\1\56\1\44\1\23\14\uffff\1\16\1\17\1"+
            "\20\5\uffff\1\65\1\66\1\67\u0083\uffff\1\6\16\uffff\1\7\2\uffff"+
            "\1\21\1\uffff\1\74\1\uffff\1\13\1\10\1\75\2\uffff\1\14\1\15"+
            "\11\uffff\1\12\2\uffff\1\72\1\uffff\1\3\2\uffff\1\22\1\4\1\5",
            "\1\uffff",
            "\1\uffff",
            "\1\u00b0\1\u00b1\1\u00b2\1\u00b3\1\uffff\1\u00aa\1\u00a9\1"+
            "\u00af\7\uffff\1\u0090\24\uffff\1\u00a3\12\uffff\1\u0088\3\uffff"+
            "\1\u00ab\1\u00ac\14\uffff\1\u0093\12\uffff\1\u008d\1\u008c\1"+
            "\u0092\1\u0091\1\u008f\1\u008e\1\u008b\1\u008a\1\u0089\1\u0097"+
            "\1\u0096\1\u0095\u009c\uffff\1\u00ad\1\uffff\1\u00a2\2\uffff"+
            "\1\u00ae\1\u0098\1\u00a7\1\u009b\3\uffff\1\u0094\2\uffff\1\u00a6"+
            "\1\u00a8\1\u00a4\1\u00a5\1\u009e\1\u009f\1\u00a0\1\u00a1\1\u009d"+
            "\1\u009c\1\u0099\1\u009a",
            "\1\u00dc\1\u00dd\1\u00de\1\u00df\1\uffff\1\u00d3\1\u00d2\1"+
            "\u00db\7\uffff\1\u00bc\24\uffff\1\u00cc\12\uffff\1\u00b9\3\uffff"+
            "\1\u00d4\1\u00d5\14\uffff\1\u00bd\12\uffff\1\u00b5\1\u00b4\1"+
            "\u00c0\1\u00bf\1\u00bb\1\u00ba\1\u00d8\1\u00d7\1\u00d6\1\u00b8"+
            "\1\u00b7\1\u00b6\u009c\uffff\1\u00d9\1\uffff\1\u00cb\2\uffff"+
            "\1\u00da\1\u00c1\1\u00d0\1\u00c4\3\uffff\1\u00be\2\uffff\1\u00cf"+
            "\1\u00d1\1\u00cd\1\u00ce\1\u00c7\1\u00c8\1\u00c9\1\u00ca\1\u00c6"+
            "\1\u00c5\1\u00c2\1\u00c3",
            "\1\u0108\1\u0109\1\u010a\1\u010b\1\uffff\1\u00ff\1\u00fe\1"+
            "\u0107\7\uffff\1\u00e2\24\uffff\1\u00f8\12\uffff\1\u00e9\3\uffff"+
            "\1\u0100\1\u0101\14\uffff\1\u00ec\12\uffff\1\u00e4\1\u00e3\1"+
            "\u00eb\1\u00ea\1\u00e1\1\u00e0\1\u0104\1\u0103\1\u0102\1\u00e8"+
            "\1\u00e7\1\u00e6\u009c\uffff\1\u0105\1\uffff\1\u00f7\2\uffff"+
            "\1\u0106\1\u00ed\1\u00fc\1\u00f0\3\uffff\1\u00e5\2\uffff\1\u00fb"+
            "\1\u00fd\1\u00f9\1\u00fa\1\u00f3\1\u00f4\1\u00f5\1\u00f6\1\u00f2"+
            "\1\u00f1\1\u00ee\1\u00ef",
            "\1\u0131\1\u0132\1\u0133\1\u0134\1\uffff\1\u0128\1\u0127\1"+
            "\u0130\7\uffff\1\u0111\24\uffff\1\u0121\12\uffff\1\u0115\3\uffff"+
            "\1\u0129\1\u012a\14\uffff\1\u0135\12\uffff\1\u0113\1\u0112\1"+
            "\u0137\1\u0136\1\u0110\1\u010f\1\u012d\1\u012c\1\u012b\1\u010e"+
            "\1\u010d\1\u010c\u009c\uffff\1\u012e\1\uffff\1\u0120\2\uffff"+
            "\1\u012f\1\u0116\1\u0125\1\u0119\3\uffff\1\u0114\2\uffff\1\u0124"+
            "\1\u0126\1\u0122\1\u0123\1\u011c\1\u011d\1\u011e\1\u011f\1\u011b"+
            "\1\u011a\1\u0117\1\u0118",
            "\1\u0165\1\u0166\1\u0167\1\u0168\1\uffff\1\u015f\1\u015e\1"+
            "\u0164\7\uffff\1\u0145\24\uffff\1\u0158\12\uffff\1\u0139\3\uffff"+
            "\1\u0160\1\u0161\14\uffff\1\u013a\12\uffff\1\u0140\1\u013f\1"+
            "\u0142\1\u0141\1\u0144\1\u0143\1\u013e\1\u013d\1\u013c\1\u0149"+
            "\1\u0148\1\u0147\u009c\uffff\1\u0162\1\uffff\1\u0157\1\u013b"+
            "\1\u0138\1\u0163\1\u014d\1\u015c\1\u0150\1\u014c\1\u014b\1\uffff"+
            "\1\u0146\2\uffff\1\u015b\1\u015d\1\u0159\1\u015a\1\u0153\1\u0154"+
            "\1\u0155\1\u0156\1\u0152\1\u0151\1\u014e\1\u014f\4\uffff\1\u014a",
            "\1\u0184\1\u0185\1\u0186\1\u0187\1\uffff\1\u017b\1\u017a\1"+
            "\u0183\7\uffff\1\u018b\24\uffff\1\u0174\12\uffff\1\u0188\3\uffff"+
            "\1\u017c\1\u017d\14\uffff\1\u018f\12\uffff\1\u0194\1\u0193\1"+
            "\u0191\1\u0190\1\u018a\1\u0189\1\u0180\1\u017f\1\u017e\1\u018e"+
            "\1\u018d\1\u018c\u009c\uffff\1\u0181\1\uffff\1\u0173\2\uffff"+
            "\1\u0182\1\u0169\1\u0178\1\u016c\3\uffff\1\u0192\2\uffff\1\u0177"+
            "\1\u0179\1\u0175\1\u0176\1\u016f\1\u0170\1\u0171\1\u0172\1\u016e"+
            "\1\u016d\1\u016a\1\u016b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0196\4\uffff\1\u0196\23\uffff\1\u0195",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA229_eot = DFA.unpackEncodedString(DFA229_eotS);
    static final short[] DFA229_eof = DFA.unpackEncodedString(DFA229_eofS);
    static final char[] DFA229_min = DFA.unpackEncodedStringToUnsignedChars(DFA229_minS);
    static final char[] DFA229_max = DFA.unpackEncodedStringToUnsignedChars(DFA229_maxS);
    static final short[] DFA229_accept = DFA.unpackEncodedString(DFA229_acceptS);
    static final short[] DFA229_special = DFA.unpackEncodedString(DFA229_specialS);
    static final short[][] DFA229_transition;

    static {
        int numStates = DFA229_transitionS.length;
        DFA229_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA229_transition[i] = DFA.unpackEncodedString(DFA229_transitionS[i]);
        }
    }

    class DFA229 extends DFA {

        public DFA229(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 229;
            this.eot = DFA229_eot;
            this.eof = DFA229_eof;
            this.min = DFA229_min;
            this.max = DFA229_max;
            this.accept = DFA229_accept;
            this.special = DFA229_special;
            this.transition = DFA229_transition;
        }
        public String getDescription() {
            return "1425:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA229_0 = input.LA(1);

                         
                        int index229_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_0==LAST) ) {s = 1;}

                        else if ( (LA229_0==LW) ) {s = 2;}

                        else if ( (LA229_0==NUM_INT) ) {s = 3;}

                        else if ( (LA229_0==NUM_LONG) ) {s = 4;}

                        else if ( (LA229_0==NUM_FLOAT) ) {s = 5;}

                        else if ( (LA229_0==NUM_DOUBLE) ) {s = 6;}

                        else if ( (LA229_0==IDENT) ) {s = 7;}

                        else if ( (LA229_0==QUESTION) ) {s = 8;}

                        else if ( (LA229_0==CASE) && (synpred9_EsperEPL2Grammar())) {s = 9;}

                        else if ( (LA229_0==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 10;}

                        else if ( (LA229_0==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA229_0==STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA229_0==QUOTED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA229_0==BOOLEAN_TRUE) && (synpred9_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA229_0==BOOLEAN_FALSE) && (synpred9_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA229_0==VALUE_NULL) && (synpred9_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA229_0==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA229_0==TICKED_STRING_LITERAL) && (synpred9_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA229_0==AT) && (synpred9_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA229_0==COUNT) && (synpred9_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA229_0==ESCAPE) && (synpred9_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA229_0==EVERY_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA229_0==SUM) && (synpred9_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA229_0==AVG) && (synpred9_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA229_0==MAX) && (synpred9_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA229_0==MIN) && (synpred9_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA229_0==COALESCE) && (synpred9_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA229_0==MEDIAN) && (synpred9_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA229_0==STDDEV) && (synpred9_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA229_0==AVEDEV) && (synpred9_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA229_0==EVENTS) && (synpred9_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA229_0==FIRST) && (synpred9_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA229_0==UNIDIRECTIONAL) && (synpred9_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA229_0==RETAINUNION) && (synpred9_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA229_0==RETAININTERSECTION) && (synpred9_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA229_0==UNTIL) && (synpred9_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA229_0==PATTERN) && (synpred9_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA229_0==SQL) && (synpred9_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA229_0==METADATASQL) && (synpred9_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA229_0==PREVIOUS) && (synpred9_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA229_0==PRIOR) && (synpred9_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA229_0==WEEKDAY) && (synpred9_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA229_0==INSTANCEOF) && (synpred9_EsperEPL2Grammar())) {s = 43;}

                        else if ( (LA229_0==CAST) && (synpred9_EsperEPL2Grammar())) {s = 44;}

                        else if ( (LA229_0==SNAPSHOT) && (synpred9_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA229_0==VARIABLE) && (synpred9_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA229_0==WINDOW) && (synpred9_EsperEPL2Grammar())) {s = 47;}

                        else if ( (LA229_0==LEFT) && (synpred9_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA229_0==RIGHT) && (synpred9_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA229_0==OUTER) && (synpred9_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA229_0==FULL) && (synpred9_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA229_0==JOIN) && (synpred9_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA229_0==DEFINE) && (synpred9_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA229_0==PARTITION) && (synpred9_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA229_0==MATCHES) && (synpred9_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA229_0==EXISTS) && (synpred9_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA229_0==CURRENT_TIMESTAMP) && (synpred9_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA229_0==LCURLY) && (synpred9_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA229_0==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA229_0==STAR) ) {s = 60;}

                        else if ( (LA229_0==LBRACK) && (synpred14_EsperEPL2Grammar())) {s = 61;}

                         
                        input.seek(index229_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA229_1 = input.LA(1);

                         
                        int index229_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred6_EsperEPL2Grammar()) ) {s = 98;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 59;}

                         
                        input.seek(index229_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA229_2 = input.LA(1);

                         
                        int index229_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred7_EsperEPL2Grammar()) ) {s = 135;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 59;}

                         
                        input.seek(index229_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA229_3 = input.LA(1);

                         
                        int index229_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_3==LAST) && (synpred12_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA229_3==TIMEPERIOD_SECONDS) ) {s = 137;}

                        else if ( (LA229_3==TIMEPERIOD_SECOND) ) {s = 138;}

                        else if ( (LA229_3==TIMEPERIOD_SEC) ) {s = 139;}

                        else if ( (LA229_3==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA229_3==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA229_3==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA229_3==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA229_3==MIN) && (synpred8_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA229_3==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA229_3==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA229_3==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA229_3==COLON) && (synpred10_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA229_3==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA229_3==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA229_3==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA229_3==STAR) && (synpred9_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA229_3==DIV) && (synpred9_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA229_3==MOD) && (synpred9_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA229_3==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA229_3==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA229_3==LOR) && (synpred9_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA229_3==LT) && (synpred9_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA229_3==GT) && (synpred9_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA229_3==LE) && (synpred9_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA229_3==GE) && (synpred9_EsperEPL2Grammar())) {s = 161;}

                        else if ( (LA229_3==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 162;}

                        else if ( (LA229_3==IS) && (synpred9_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA229_3==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA229_3==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA229_3==BAND) && (synpred9_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA229_3==BOR) && (synpred9_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA229_3==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA229_3==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA229_3==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA229_3==ASC) && (synpred9_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA229_3==DESC) && (synpred9_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA229_3==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA229_3==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA229_3==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA229_3==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA229_3==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA229_3==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA229_3==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 179;}

                         
                        input.seek(index229_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA229_4 = input.LA(1);

                         
                        int index229_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_4==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA229_4==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA229_4==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA229_4==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA229_4==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA229_4==LAST) && (synpred12_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA229_4==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA229_4==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA229_4==MIN) && (synpred8_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA229_4==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA229_4==COLON) && (synpred10_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA229_4==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA229_4==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA229_4==STAR) && (synpred9_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA229_4==DIV) && (synpred9_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA229_4==MOD) && (synpred9_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA229_4==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA229_4==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA229_4==LOR) && (synpred9_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA229_4==LT) && (synpred9_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA229_4==GT) && (synpred9_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA229_4==LE) && (synpred9_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA229_4==GE) && (synpred9_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA229_4==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA229_4==IS) && (synpred9_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA229_4==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA229_4==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA229_4==BAND) && (synpred9_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA229_4==BOR) && (synpred9_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA229_4==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA229_4==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA229_4==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA229_4==ASC) && (synpred9_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA229_4==DESC) && (synpred9_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA229_4==TIMEPERIOD_SECONDS) ) {s = 214;}

                        else if ( (LA229_4==TIMEPERIOD_SECOND) ) {s = 215;}

                        else if ( (LA229_4==TIMEPERIOD_SEC) ) {s = 216;}

                        else if ( (LA229_4==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA229_4==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA229_4==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA229_4==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 220;}

                        else if ( (LA229_4==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA229_4==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA229_4==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 223;}

                         
                        input.seek(index229_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA229_5 = input.LA(1);

                         
                        int index229_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_5==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA229_5==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA229_5==MIN) && (synpred8_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA229_5==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA229_5==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA229_5==COLON) && (synpred10_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA229_5==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA229_5==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA229_5==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA229_5==LAST) && (synpred12_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA229_5==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA229_5==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA229_5==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA229_5==STAR) && (synpred9_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA229_5==DIV) && (synpred9_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA229_5==MOD) && (synpred9_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA229_5==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA229_5==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA229_5==LOR) && (synpred9_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA229_5==LT) && (synpred9_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA229_5==GT) && (synpred9_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA229_5==LE) && (synpred9_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA229_5==GE) && (synpred9_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA229_5==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA229_5==IS) && (synpred9_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA229_5==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA229_5==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA229_5==BAND) && (synpred9_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA229_5==BOR) && (synpred9_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA229_5==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA229_5==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA229_5==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA229_5==ASC) && (synpred9_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA229_5==DESC) && (synpred9_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA229_5==TIMEPERIOD_SECONDS) ) {s = 258;}

                        else if ( (LA229_5==TIMEPERIOD_SECOND) ) {s = 259;}

                        else if ( (LA229_5==TIMEPERIOD_SEC) ) {s = 260;}

                        else if ( (LA229_5==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA229_5==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA229_5==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA229_5==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA229_5==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA229_5==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA229_5==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 267;}

                         
                        input.seek(index229_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA229_6 = input.LA(1);

                         
                        int index229_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_6==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA229_6==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA229_6==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA229_6==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA229_6==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA229_6==MIN) && (synpred8_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA229_6==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA229_6==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA229_6==COLON) && (synpred10_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA229_6==LAST) && (synpred12_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA229_6==STAR) && (synpred9_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA229_6==DIV) && (synpred9_EsperEPL2Grammar())) {s = 279;}

                        else if ( (LA229_6==MOD) && (synpred9_EsperEPL2Grammar())) {s = 280;}

                        else if ( (LA229_6==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 281;}

                        else if ( (LA229_6==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA229_6==LOR) && (synpred9_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA229_6==LT) && (synpred9_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA229_6==GT) && (synpred9_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA229_6==LE) && (synpred9_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA229_6==GE) && (synpred9_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA229_6==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 288;}

                        else if ( (LA229_6==IS) && (synpred9_EsperEPL2Grammar())) {s = 289;}

                        else if ( (LA229_6==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA229_6==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA229_6==BAND) && (synpred9_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA229_6==BOR) && (synpred9_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA229_6==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA229_6==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA229_6==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA229_6==ASC) && (synpred9_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA229_6==DESC) && (synpred9_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA229_6==TIMEPERIOD_SECONDS) ) {s = 299;}

                        else if ( (LA229_6==TIMEPERIOD_SECOND) ) {s = 300;}

                        else if ( (LA229_6==TIMEPERIOD_SEC) ) {s = 301;}

                        else if ( (LA229_6==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA229_6==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA229_6==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA229_6==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA229_6==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA229_6==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA229_6==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA229_6==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA229_6==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA229_6==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 311;}

                         
                        input.seek(index229_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA229_7 = input.LA(1);

                         
                        int index229_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_7==LPAREN) && (synpred9_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA229_7==LAST) && (synpred12_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA229_7==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA229_7==DOT) && (synpred9_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA229_7==TIMEPERIOD_SECONDS) ) {s = 316;}

                        else if ( (LA229_7==TIMEPERIOD_SECOND) ) {s = 317;}

                        else if ( (LA229_7==TIMEPERIOD_SEC) ) {s = 318;}

                        else if ( (LA229_7==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA229_7==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA229_7==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA229_7==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 322;}

                        else if ( (LA229_7==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 323;}

                        else if ( (LA229_7==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 324;}

                        else if ( (LA229_7==MIN) && (synpred8_EsperEPL2Grammar())) {s = 325;}

                        else if ( (LA229_7==COLON) && (synpred10_EsperEPL2Grammar())) {s = 326;}

                        else if ( (LA229_7==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 327;}

                        else if ( (LA229_7==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 328;}

                        else if ( (LA229_7==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 329;}

                        else if ( (LA229_7==ESCAPECHAR) && (synpred9_EsperEPL2Grammar())) {s = 330;}

                        else if ( (LA229_7==LBRACK) && (synpred9_EsperEPL2Grammar())) {s = 331;}

                        else if ( (LA229_7==QUESTION) && (synpred9_EsperEPL2Grammar())) {s = 332;}

                        else if ( (LA229_7==STAR) && (synpred9_EsperEPL2Grammar())) {s = 333;}

                        else if ( (LA229_7==DIV) && (synpred9_EsperEPL2Grammar())) {s = 334;}

                        else if ( (LA229_7==MOD) && (synpred9_EsperEPL2Grammar())) {s = 335;}

                        else if ( (LA229_7==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 336;}

                        else if ( (LA229_7==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 337;}

                        else if ( (LA229_7==LOR) && (synpred9_EsperEPL2Grammar())) {s = 338;}

                        else if ( (LA229_7==LT) && (synpred9_EsperEPL2Grammar())) {s = 339;}

                        else if ( (LA229_7==GT) && (synpred9_EsperEPL2Grammar())) {s = 340;}

                        else if ( (LA229_7==LE) && (synpred9_EsperEPL2Grammar())) {s = 341;}

                        else if ( (LA229_7==GE) && (synpred9_EsperEPL2Grammar())) {s = 342;}

                        else if ( (LA229_7==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 343;}

                        else if ( (LA229_7==IS) && (synpred9_EsperEPL2Grammar())) {s = 344;}

                        else if ( (LA229_7==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 345;}

                        else if ( (LA229_7==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 346;}

                        else if ( (LA229_7==BAND) && (synpred9_EsperEPL2Grammar())) {s = 347;}

                        else if ( (LA229_7==BOR) && (synpred9_EsperEPL2Grammar())) {s = 348;}

                        else if ( (LA229_7==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 349;}

                        else if ( (LA229_7==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 350;}

                        else if ( (LA229_7==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 351;}

                        else if ( (LA229_7==ASC) && (synpred9_EsperEPL2Grammar())) {s = 352;}

                        else if ( (LA229_7==DESC) && (synpred9_EsperEPL2Grammar())) {s = 353;}

                        else if ( (LA229_7==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 354;}

                        else if ( (LA229_7==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 355;}

                        else if ( (LA229_7==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 356;}

                        else if ( (LA229_7==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 357;}

                        else if ( (LA229_7==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 358;}

                        else if ( (LA229_7==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 359;}

                        else if ( (LA229_7==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 360;}

                         
                        input.seek(index229_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA229_8 = input.LA(1);

                         
                        int index229_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_8==STAR) && (synpred9_EsperEPL2Grammar())) {s = 361;}

                        else if ( (LA229_8==DIV) && (synpred9_EsperEPL2Grammar())) {s = 362;}

                        else if ( (LA229_8==MOD) && (synpred9_EsperEPL2Grammar())) {s = 363;}

                        else if ( (LA229_8==PLUS) && (synpred9_EsperEPL2Grammar())) {s = 364;}

                        else if ( (LA229_8==MINUS) && (synpred9_EsperEPL2Grammar())) {s = 365;}

                        else if ( (LA229_8==LOR) && (synpred9_EsperEPL2Grammar())) {s = 366;}

                        else if ( (LA229_8==LT) && (synpred9_EsperEPL2Grammar())) {s = 367;}

                        else if ( (LA229_8==GT) && (synpred9_EsperEPL2Grammar())) {s = 368;}

                        else if ( (LA229_8==LE) && (synpred9_EsperEPL2Grammar())) {s = 369;}

                        else if ( (LA229_8==GE) && (synpred9_EsperEPL2Grammar())) {s = 370;}

                        else if ( (LA229_8==EQUALS) && (synpred9_EsperEPL2Grammar())) {s = 371;}

                        else if ( (LA229_8==IS) && (synpred9_EsperEPL2Grammar())) {s = 372;}

                        else if ( (LA229_8==SQL_NE) && (synpred9_EsperEPL2Grammar())) {s = 373;}

                        else if ( (LA229_8==NOT_EQUAL) && (synpred9_EsperEPL2Grammar())) {s = 374;}

                        else if ( (LA229_8==BAND) && (synpred9_EsperEPL2Grammar())) {s = 375;}

                        else if ( (LA229_8==BOR) && (synpred9_EsperEPL2Grammar())) {s = 376;}

                        else if ( (LA229_8==BXOR) && (synpred9_EsperEPL2Grammar())) {s = 377;}

                        else if ( (LA229_8==AND_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 378;}

                        else if ( (LA229_8==OR_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 379;}

                        else if ( (LA229_8==ASC) && (synpred9_EsperEPL2Grammar())) {s = 380;}

                        else if ( (LA229_8==DESC) && (synpred9_EsperEPL2Grammar())) {s = 381;}

                        else if ( (LA229_8==TIMEPERIOD_SECONDS) ) {s = 382;}

                        else if ( (LA229_8==TIMEPERIOD_SECOND) ) {s = 383;}

                        else if ( (LA229_8==TIMEPERIOD_SEC) ) {s = 384;}

                        else if ( (LA229_8==COMMA) && (synpred9_EsperEPL2Grammar())) {s = 385;}

                        else if ( (LA229_8==RPAREN) && (synpred9_EsperEPL2Grammar())) {s = 386;}

                        else if ( (LA229_8==NOT_EXPR) && (synpred9_EsperEPL2Grammar())) {s = 387;}

                        else if ( (LA229_8==IN_SET) && (synpred9_EsperEPL2Grammar())) {s = 388;}

                        else if ( (LA229_8==BETWEEN) && (synpred9_EsperEPL2Grammar())) {s = 389;}

                        else if ( (LA229_8==LIKE) && (synpred9_EsperEPL2Grammar())) {s = 390;}

                        else if ( (LA229_8==REGEXP) && (synpred9_EsperEPL2Grammar())) {s = 391;}

                        else if ( (LA229_8==LAST) && (synpred12_EsperEPL2Grammar())) {s = 392;}

                        else if ( (LA229_8==TIMEPERIOD_MINUTES) && (synpred8_EsperEPL2Grammar())) {s = 393;}

                        else if ( (LA229_8==TIMEPERIOD_MINUTE) && (synpred8_EsperEPL2Grammar())) {s = 394;}

                        else if ( (LA229_8==MIN) && (synpred8_EsperEPL2Grammar())) {s = 395;}

                        else if ( (LA229_8==TIMEPERIOD_MILLISECONDS) && (synpred8_EsperEPL2Grammar())) {s = 396;}

                        else if ( (LA229_8==TIMEPERIOD_MILLISECOND) && (synpred8_EsperEPL2Grammar())) {s = 397;}

                        else if ( (LA229_8==TIMEPERIOD_MILLISEC) && (synpred8_EsperEPL2Grammar())) {s = 398;}

                        else if ( (LA229_8==WEEKDAY) && (synpred13_EsperEPL2Grammar())) {s = 399;}

                        else if ( (LA229_8==TIMEPERIOD_HOURS) && (synpred8_EsperEPL2Grammar())) {s = 400;}

                        else if ( (LA229_8==TIMEPERIOD_HOUR) && (synpred8_EsperEPL2Grammar())) {s = 401;}

                        else if ( (LA229_8==COLON) && (synpred10_EsperEPL2Grammar())) {s = 402;}

                        else if ( (LA229_8==TIMEPERIOD_DAYS) && (synpred8_EsperEPL2Grammar())) {s = 403;}

                        else if ( (LA229_8==TIMEPERIOD_DAY) && (synpred8_EsperEPL2Grammar())) {s = 404;}

                         
                        input.seek(index229_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA229_60 = input.LA(1);

                         
                        int index229_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA229_60==DIV) && (synpred11_EsperEPL2Grammar())) {s = 405;}

                        else if ( (LA229_60==COMMA||LA229_60==RPAREN) ) {s = 406;}

                         
                        input.seek(index229_60);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA229_137 = input.LA(1);

                         
                        int index229_137 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_137);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA229_138 = input.LA(1);

                         
                        int index229_138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_138);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA229_139 = input.LA(1);

                         
                        int index229_139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_139);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA229_214 = input.LA(1);

                         
                        int index229_214 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_214);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA229_215 = input.LA(1);

                         
                        int index229_215 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_215);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA229_216 = input.LA(1);

                         
                        int index229_216 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_216);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA229_258 = input.LA(1);

                         
                        int index229_258 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_258);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA229_259 = input.LA(1);

                         
                        int index229_259 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_259);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA229_260 = input.LA(1);

                         
                        int index229_260 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_260);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA229_299 = input.LA(1);

                         
                        int index229_299 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_299);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA229_300 = input.LA(1);

                         
                        int index229_300 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_300);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA229_301 = input.LA(1);

                         
                        int index229_301 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_301);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA229_316 = input.LA(1);

                         
                        int index229_316 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_316);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA229_317 = input.LA(1);

                         
                        int index229_317 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_317);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA229_318 = input.LA(1);

                         
                        int index229_318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_318);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA229_382 = input.LA(1);

                         
                        int index229_382 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_382);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA229_383 = input.LA(1);

                         
                        int index229_383 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_383);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA229_384 = input.LA(1);

                         
                        int index229_384 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred8_EsperEPL2Grammar()) ) {s = 404;}

                        else if ( (synpred9_EsperEPL2Grammar()) ) {s = 391;}

                         
                        input.seek(index229_384);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 229, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA243_eotS =
        "\u01f2\uffff";
    static final String DFA243_eofS =
        "\1\52\4\uffff\1\1\20\uffff\1\1\13\uffff\2\1\1\uffff\2\1\u01cb\uffff";
    static final String DFA243_minS =
        "\1\5\4\uffff\1\6\20\uffff\1\6\13\uffff\2\6\1\uffff\2\6\177\uffff"+
        "\1\u00fb\u012e\uffff\1\u00fe\34\uffff";
    static final String DFA243_maxS =
        "\1\u011a\4\uffff\1\u0119\20\uffff\1\u0119\13\uffff\2\u0119\1\uffff"+
        "\1\u0119\1\u011a\177\uffff\1\u0108\u012e\uffff\1\u0104\34\uffff";
    static final String DFA243_acceptS =
        "\1\uffff\1\1\50\uffff\1\2\u01c7\uffff";
    static final String DFA243_specialS =
        "\u01f2\uffff}>";
    static final String[] DFA243_transitionS = {
            "\1\1\4\52\1\5\3\52\1\1\1\uffff\2\52\11\1\3\uffff\5\52\1\1\1"+
            "\52\1\46\1\42\1\43\1\45\1\uffff\1\52\1\uffff\2\52\1\uffff\1"+
            "\52\2\uffff\1\52\3\1\1\52\1\uffff\3\52\3\uffff\3\1\1\26\4\1"+
            "\1\uffff\4\1\2\uffff\1\1\1\uffff\3\1\6\uffff\3\52\6\uffff\1"+
            "\52\2\uffff\2\52\3\1\1\52\u0090\uffff\1\52\1\1\13\52\2\uffff"+
            "\14\52\1\uffff\1\52\2\uffff\1\52\1\1",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\13\1\2\52\14\1\1\uffff\1\1\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\2\1\1\u00a6\10\1\2\uffff\14\1\1\uffff\1\1"+
            "\2\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\52\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\52\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\52\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\1\26\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1\1\u0090"+
            "\uffff\1\1\1\uffff\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff\1\1",
            "\10\1\2\uffff\2\1\14\uffff\5\1\1\uffff\5\1\1\uffff\1\1\1\uffff"+
            "\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\3\1\6\uffff"+
            "\1\u01d5\1\52\25\uffff\3\1\6\uffff\1\1\2\uffff\2\1\3\uffff\1"+
            "\1\u0090\uffff\1\1\1\52\13\1\2\uffff\14\1\1\uffff\1\1\2\uffff"+
            "\1\1\1\52",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\52\2\uffff\1\52\10\uffff\2\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\5\uffff\1\52",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA243_eot = DFA.unpackEncodedString(DFA243_eotS);
    static final short[] DFA243_eof = DFA.unpackEncodedString(DFA243_eofS);
    static final char[] DFA243_min = DFA.unpackEncodedStringToUnsignedChars(DFA243_minS);
    static final char[] DFA243_max = DFA.unpackEncodedStringToUnsignedChars(DFA243_maxS);
    static final short[] DFA243_accept = DFA.unpackEncodedString(DFA243_acceptS);
    static final short[] DFA243_special = DFA.unpackEncodedString(DFA243_specialS);
    static final short[][] DFA243_transition;

    static {
        int numStates = DFA243_transitionS.length;
        DFA243_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA243_transition[i] = DFA.unpackEncodedString(DFA243_transitionS[i]);
        }
    }

    class DFA243 extends DFA {

        public DFA243(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 243;
            this.eot = DFA243_eot;
            this.eof = DFA243_eof;
            this.min = DFA243_min;
            this.max = DFA243_max;
            this.accept = DFA243_accept;
            this.special = DFA243_special;
            this.transition = DFA243_transition;
        }
        public String getDescription() {
            return "1522:24: (ipi2= keywordAllowedIdent )?";
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1552 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0004000004000010L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1557 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1561 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1575 = new BitSet(new long[]{0x0040020008000010L,0x0000000800000000L,0x0000000000000000L,0x0000000000000000L,0x0004000000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1581 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1611 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1637 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1641 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x8800100000000000L,0x0004000018A40184L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1654 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1695 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1701 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x8800100000000000L,0x000400001CA40184L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1761 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1782 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1811 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1813 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0000100000000000L,0x0004000018A40184L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1854 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0800100000000000L,0x000400001CA40184L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1887 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1934 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum1945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum1958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum1966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum1986 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0400100000000000L,0x0004000018E40184L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1989 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum1992 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0000100000000000L,0x0004000018A40184L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum1994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2001 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2034 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0C00100000000000L,0x000400001CE40184L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2037 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2040 = new BitSet(new long[]{0x0040020008000010L,0x00000009C0000000L,0x0000000000000000L,0x0800100000000000L,0x000400001CA40184L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2042 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2049 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2100 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2105 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2118 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2121 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2127 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2130 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2134 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2137 = new BitSet(new long[]{0x0104300000010002L,0x0000001200000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2141 = new BitSet(new long[]{0x0104300000010002L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2147 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2150 = new BitSet(new long[]{0x0104300000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2157 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2160 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2163 = new BitSet(new long[]{0x0104200000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2170 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2173 = new BitSet(new long[]{0x0104000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2180 = new BitSet(new long[]{0x0130800080004000L,0x0000020200022000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2183 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2190 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2193 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2196 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2206 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000002L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onExpr2224 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onExpr2228 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AS_in_onExpr2232 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2236 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExpr2242 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2250 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2254 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2257 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2260 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2267 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2313 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2315 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2317 = new BitSet(new long[]{0x0000000000020000L,0x0000000000004000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2324 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2336 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2338 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2343 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2351 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2401 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2403 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2409 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2411 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2414 = new BitSet(new long[]{0x0100300400010002L,0x0000000200000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2418 = new BitSet(new long[]{0x0100300000010002L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2424 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2426 = new BitSet(new long[]{0x0100300000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2435 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2437 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2439 = new BitSet(new long[]{0x0100200000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2446 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2448 = new BitSet(new long[]{0x0100000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2455 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2457 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2459 = new BitSet(new long[]{0x0000000000000002L,0x0000000200000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2468 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2527 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2529 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2533 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2535 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2540 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2573 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2626 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2630 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2635 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2677 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2684 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onSetAssignment2711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2713 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2715 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2741 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2745 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2786 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2792 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x6800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2795 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2797 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x6800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2800 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2802 = new BitSet(new long[]{0x8000000008020000L,0x0000000000000001L,0x0000000000000000L,0x6800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr2811 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr2815 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr2819 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr2834 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr2849 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_createWindowColumnList_in_createWindowExpr2851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr2853 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr2870 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr2873 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_createWindowExpr2875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter2962 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003A7BFL,0x0000000000000000L,0x0800100000000000L,0x000400001CA40185L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter2965 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter2967 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter2972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr2985 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr2987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2991 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr2995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr2998 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList3043 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createWindowColumnList3046 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_createWindowColumnListElement_in_createWindowColumnList3048 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement3078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowColumnListElement3082 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3123 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003A7BFL,0x0000000000000000L,0x0800100000000000L,0x000400001CA40185L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3154 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3166 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3169 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3173 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3194 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3196 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3239 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3245 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3253 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_insertIntoColumnList_in_insertIntoExpr3256 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoColumnList3290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3292 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_insertIntoColumnList3295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoColumnList3297 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoColumnList3301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3336 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3357 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3360 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3374 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3377 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3420 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3424 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3428 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3431 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3452 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000006L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3468 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3535 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3538 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3541 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3544 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3561 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause3586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause3622 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause3628 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause3634 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause3640 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionList_in_selectClause3643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3674 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList3677 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList3680 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement3706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement3722 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement3727 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement3730 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement3734 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector3792 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_streamSelector3794 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector3797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector3801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression3832 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression3836 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression3840 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression3844 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3853 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression3856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression3858 = new BitSet(new long[]{0xC000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression3865 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3869 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression3875 = new BitSet(new long[]{0xC000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression3882 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression3889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression3893 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog3956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog3970 = new BitSet(new long[]{0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog3976 = new BitSet(new long[]{0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog3983 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog3988 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog3994 = new BitSet(new long[]{0x0000800000000000L,0x0000020000000002L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4000 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4006 = new BitSet(new long[]{0x0000000000000000L,0x0000004000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4012 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4056 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4058 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4060 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4063 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4065 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4094 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4096 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4099 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4101 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4126 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4165 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4211 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4215 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4219 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4223 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4227 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4231 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4267 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4300 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4302 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4360 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4378 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4382 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000DL});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4438 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000000DL});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4444 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4450 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4456 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4462 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4506 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4508 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine4511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem4540 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem4542 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem4544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression4569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression4571 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression4573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression4575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression4608 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression4610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression4614 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression4616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4621 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000008L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression4631 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression4636 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression4642 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression4647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression4698 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression4700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression4702 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression4705 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression4707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression4710 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_viewExpression4765 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression4769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression4771 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression4773 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression4776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4815 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr4818 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_groupByListExpr4820 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4855 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr4858 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr4860 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement4885 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement4890 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement4894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause4932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit4970 = new BitSet(new long[]{0x0030800080004002L,0x0000000000022000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit4985 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit4989 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit4993 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit4997 = new BitSet(new long[]{0x0000000080004002L,0x0000000000020000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5028 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5054 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5065 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5071 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5110 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5127 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_outputLimit5129 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5132 = new BitSet(new long[]{0x0040000008020000L,0x0000000000005000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5134 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter5284 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter5287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter5291 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter5293 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5339 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5345 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5358 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5364 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5370 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5422 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5424 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5426 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5430 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5432 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5434 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5438 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5440 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5443 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5479 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_whenClause5482 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5484 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_whenClause5487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5500 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_elseClause5503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression5516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5530 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5533 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5536 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression5550 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_caseExpression5552 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression5554 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression5557 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression5560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression5584 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5595 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression5600 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression5602 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5634 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression5639 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression5641 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5673 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000602L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression5678 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression5681 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression5684 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression5688 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000602L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression5709 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression5712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5725 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression5738 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5756 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression5770 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression5772 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression5786 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression5800 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression5830 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression5847 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression5853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression5859 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression5865 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression5867 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression5870 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression5875 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L,0x0000000000001800L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6003 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001E000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6035 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6039 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6043 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6047 = new BitSet(new long[]{0xC07B83E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001E000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6088 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6106 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6108 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6111 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001E000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6116 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000001E000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6212 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6251 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6257 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6260 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6282 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6311 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6313 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6339 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6468 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6470 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression6516 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression6518 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression6568 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6570 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression6573 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression6575 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression6627 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery6691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6722 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6724 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr6728 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr6730 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6771 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression6776 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression6779 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression6783 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040004L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180001L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression6802 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression6805 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression6808 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression6812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180001L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression6827 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression6829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression6842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression6847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression6852 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_unaryExpression6855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression6857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression6863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression6875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression6881 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression6886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression6891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression6908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression6930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression6952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression6954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr6987 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr6993 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr6996 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr6999 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7006 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7009 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7017 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7029 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7053 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7058 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7060 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7065 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000001L,0x0000000000000000L,0x2800000000000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7072 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7076 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7082 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000001L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7133 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CE4018DL});
    public static final BitSet FOLLOW_expression_in_arrayExpression7136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7139 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_arrayExpression7141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7148 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7171 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7174 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7178 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7183 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7187 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7189 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7198 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7202 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7207 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7219 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7222 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7234 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7239 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7243 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc7254 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7265 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7274 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7278 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7283 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7287 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7295 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7298 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7302 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7307 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7313 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7319 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7322 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7326 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7331 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7337 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7343 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7353 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7356 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7359 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7361 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7364 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7367 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7370 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7380 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7383 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7386 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7389 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7396 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7402 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7408 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7410 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7413 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7415 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7428 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7436 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc7452 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7455 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_builtinFunc7458 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7461 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_AS_in_builtinFunc7466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7470 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc7478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7481 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7486 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7492 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation7514 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation7516 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_firstAggregation7521 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_firstAggregation7527 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_firstAggregation7531 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation7533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation7559 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation7561 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_ALL_in_lastAggregation7566 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_lastAggregation7572 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_lastAggregation7576 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation7578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc7605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc7610 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc7614 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_maxFunc7617 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7620 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_maxFunc7623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc7626 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_maxFunc7629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc7636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction7655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction7660 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction7673 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction7675 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction7679 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction7681 = new BitSet(new long[]{0xF878C3E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction7684 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction7688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_funcIdent7718 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent7725 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent7737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs7755 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs7760 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7764 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs7767 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs7770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7784 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList7786 = new BitSet(new long[]{0xC07803E80FFC4430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018CL});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList7789 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression7817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression7829 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression7834 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression7836 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression7875 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression7880 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_andExpression_in_orExpression7882 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression7914 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression7919 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression7921 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression7956 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression7960 = new BitSet(new long[]{0x0000000000000002L,0x0000000000010000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression7965 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression7967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression8032 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression8038 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression8046 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression8052 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression8061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList8176 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8178 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList8181 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8183 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8400000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList8187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix8225 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix8231 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x4800000000000000L,0x0000000004000010L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix8233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix8235 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix8241 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_guardExpression_in_guardPostFix8243 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8306 = new BitSet(new long[]{0x0000000000000000L,0x0000000000020000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8311 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression8317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8320 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8374 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_guardExpression8376 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_guardExpression8379 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardExpression8381 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardExpression8385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardExpression8389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange8403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000100000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L,0x0000000000000060L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8420 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8422 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8426 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange8450 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8454 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8476 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000100000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800020L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8572 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8609 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_matchUntilRange8615 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_DOT_in_matchUntilRange8624 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_matchUntilRange8628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange8639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression8824 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression8826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression8835 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression8846 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression8848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression8851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression8863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression8908 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression8911 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic8941 = new BitSet(new long[]{0xC03801E80FFC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic8944 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic8946 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic8948 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic8952 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic8955 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic8957 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic8962 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic8964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic8968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9018 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9021 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9024 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9071 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9074 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9122 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9126 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9133 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9202 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0xC800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9207 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000010L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9219 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9274 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifier9297 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9342 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9377 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_escapableIdent_in_classIdentifierNonGreedy9381 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList9423 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9426 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4018DL});
    public static final BitSet FOLLOW_expression_in_expressionList9429 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9457 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9460 = new BitSet(new long[]{0xF87843E81FFC6430L,0x000001C9C003AFFFL,0x0000000000000000L,0x4800100000000000L,0x000400001CA4019DL});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime9489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime9500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime9511 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime9522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime9533 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime9545 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime9556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime9568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime9580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime9585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable9596 = new BitSet(new long[]{0x0600000000000002L,0x0000000007000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable9601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable9605 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar9674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand9694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand9707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand9719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand9721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_number_in_frequencyOperand9724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand9728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand9730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand9779 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand9788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_number_in_rangeOperand9791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand9795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand9797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator9911 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator9915 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator9917 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator9920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator9968 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator9972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator9974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator9977 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10024 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000DL});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10029 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000DL});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10031 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0400000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10057 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10084 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10087 = new BitSet(new long[]{0xC03801E807FC4420L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10089 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10115 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L,0x0000000000000018L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10128 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000020L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10149 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000180L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10160 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x8000000000000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000008L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10305 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10319 = new BitSet(new long[]{0xC03801E807FC4422L,0x000001C00003A7BFL,0x0000000000000000L,0x0800000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10323 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000002000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10371 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10378 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10392 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10403 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10410 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10438 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10445 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10466 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10473 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10480 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10487 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent10494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10501 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent10508 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent10515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent10522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent10529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent10536 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent10543 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent10550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent10557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent10564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent10571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent10578 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent10585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent10594 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent10601 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent10608 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent10615 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent10622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent10629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent10636 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent10643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent10650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent10671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent10680 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod10703 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10705 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10708 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10711 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod10720 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10722 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10725 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod10734 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10736 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod10745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800100000000000L,0x000000001884000CL});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10747 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod10753 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart10791 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart10795 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_substitution_in_dayPart10797 = new BitSet(new long[]{0x0000000000000000L,0x00000000000C0000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart10801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart10805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart10854 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart10858 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_hourPart10860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart10864 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart10868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart10917 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart10921 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_minutePart10923 = new BitSet(new long[]{0x0000000000200000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart10927 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart10931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart10935 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart10985 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart10989 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart10991 = new BitSet(new long[]{0x0000000000000000L,0x0000000007000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart10995 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart10999 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11053 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11057 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11059 = new BitSet(new long[]{0x0000000000000000L,0x0000000038000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11071 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11126 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11143 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11217 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant11257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant11277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11305 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L,0x0000000018840004L});
    public static final BitSet FOLLOW_number_in_numberconstant11309 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11354 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar3717 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5049 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar6869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred4_EsperEPL2Grammar7650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred5_EsperEPL2Grammar9061 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred6_EsperEPL2Grammar9484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred7_EsperEPL2Grammar9495 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred8_EsperEPL2Grammar9506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred9_EsperEPL2Grammar9517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred10_EsperEPL2Grammar9528 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred11_EsperEPL2Grammar9540 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred12_EsperEPL2Grammar9551 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred13_EsperEPL2Grammar9562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred14_EsperEPL2Grammar9575 = new BitSet(new long[]{0x0000000000000002L});

}