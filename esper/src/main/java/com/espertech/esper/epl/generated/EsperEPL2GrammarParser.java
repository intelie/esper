// $ANTLR 3.1.1 EsperEPL2Grammar.g 2010-08-27 14:25:38

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=171;
    public static final int FLOAT_SUFFIX=327;
    public static final int STAR=270;
    public static final int NUMERIC_PARAM_LIST=111;
    public static final int MOD=288;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=153;
    public static final int CREATE_COL_TYPE_LIST=226;
    public static final int BSR=309;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=177;
    public static final int TIMEPERIOD_MILLISECONDS=95;
    public static final int FULL_OUTERJOIN_EXPR=157;
    public static final int MATCHREC_PATTERN_CONCAT=252;
    public static final int INC=302;
    public static final int LNOT=298;
    public static final int RPAREN=267;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=275;
    public static final int BSR_ASSIGN=310;
    public static final int CAST_EXPR=206;
    public static final int MATCHES=106;
    public static final int STREAM_EXPR=152;
    public static final int TIMEPERIOD_SECONDS=92;
    public static final int NOT_EQUAL=280;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=120;
    public static final int LAST_AGGREG=233;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=114;
    public static final int FOLLOWED_BY=292;
    public static final int HOUR_PART=182;
    public static final int RBRACK=269;
    public static final int MATCHREC_PATTERN_NESTED=254;
    public static final int MATCH_UNTIL_RANGE_CLOSED=224;
    public static final int GE=284;
    public static final int METHOD_JOIN_EXPR=220;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=119;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=118;
    public static final int MINUS_ASSIGN=303;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=130;
    public static final int NUM_DOUBLE=248;
    public static final int INSERTINTO_STREAM_NAME=194;
    public static final int LCURLY=289;
    public static final int TIMEPERIOD_MILLISEC=93;
    public static final int UNARY_MINUS=178;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=192;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=128;
    public static final int WS=319;
    public static final int EMAILAT=318;
    public static final int SUBSELECT_GROUP_EXPR=198;
    public static final int ON_SELECT_INSERT_EXPR=215;
    public static final int ESCAPECHAR=293;
    public static final int EXPRCOL=175;
    public static final int SL_COMMENT=320;
    public static final int NULL_TYPE=247;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=222;
    public static final int GT=282;
    public static final int BNOT=299;
    public static final int WHERE_EXPR=139;
    public static final int END=33;
    public static final int LAND=316;
    public static final int INNERJOIN_EXPR=154;
    public static final int NOT_REGEXP=189;
    public static final int MATCH_UNTIL_EXPR=221;
    public static final int EVENT_PROP_EXPR=161;
    public static final int LBRACK=268;
    public static final int VIEW_EXPR=136;
    public static final int ANNOTATION=229;
    public static final int LONG_TYPE=242;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=121;
    public static final int MATCHREC_PATTERN=250;
    public static final int TIMEPERIOD_SEC=90;
    public static final int TICKED_STRING_LITERAL=294;
    public static final int ON_SELECT_EXPR=213;
    public static final int MINUTE_PART=183;
    public static final int PATTERN_NOT_EXPR=117;
    public static final int SQL_NE=279;
    public static final int SUM=18;
    public static final int HexDigit=325;
    public static final int UPDATE_EXPR=235;
    public static final int LPAREN=266;
    public static final int IN_SUBSELECT_EXPR=200;
    public static final int AT=82;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=96;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=256;
    public static final int NOT_IN_RANGE=196;
    public static final int OFFSET=100;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=69;
    public static final int SECOND_PART=184;
    public static final int MATCH_RECOGNIZE=102;
    public static final int IDENT=263;
    public static final int DATABASE_JOIN_EXPR=138;
    public static final int BXOR=278;
    public static final int PLUS=272;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=84;
    public static final int CREATE_SCHEMA_EXPR=237;
    public static final int EXISTS=71;
    public static final int EVENT_PROP_INDEXED=164;
    public static final int CREATE_INDEX_EXPR=207;
    public static final int TIMEPERIOD_MILLISECOND=94;
    public static final int EVAL_NOTEQUALS_EXPR=145;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=223;
    public static final int CREATE_VARIABLE_EXPR=219;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=257;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=115;
    public static final int RIGHT_OUTERJOIN_EXPR=156;
    public static final int NUMBERSETSTAR=228;
    public static final int LAST_OPERATOR=203;
    public static final int PATTERN_FILTER_EXPR=116;
    public static final int EVAL_AND_EXPR=142;
    public static final int LEFT_OUTERJOIN_EXPR=155;
    public static final int EPL_EXPR=249;
    public static final int GROUP_BY_EXPR=158;
    public static final int SET=79;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=74;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=162;
    public static final int MINUS=286;
    public static final int SEMI=317;
    public static final int STAR_ASSIGN=305;
    public static final int VARIANT_LIST=240;
    public static final int FIRST_AGGREG=232;
    public static final int COLON=274;
    public static final int EVAL_EQUALS_GROUP_EXPR=146;
    public static final int BAND_ASSIGN=315;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=172;
    public static final int VALUE_NULL=98;
    public static final int NOT_IN_SET=186;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=165;
    public static final int SL=311;
    public static final int NOT_IN_SUBSELECT_EXPR=201;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=134;
    public static final int SR=307;
    public static final int RCURLY=290;
    public static final int PLUS_ASSIGN=301;
    public static final int EXISTS_SUBSELECT_EXPR=199;
    public static final int DAY_PART=181;
    public static final int EVENT_FILTER_IN=129;
    public static final int DIV=287;
    public static final int OBJECT_PARAM_ORDERED_EXPR=113;
    public static final int OctalEscape=324;
    public static final int BETWEEN=7;
    public static final int MILLISECOND_PART=185;
    public static final int PRIOR=70;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=99;
    public static final int SELECTION_EXPR=149;
    public static final int LOR=285;
    public static final int CAST=75;
    public static final int LW=73;
    public static final int WILDCARD_SELECT=193;
    public static final int EXPONENT=326;
    public static final int LT=281;
    public static final int PATTERN_INCL_EXPR=137;
    public static final int WHILE=109;
    public static final int ORDER_BY_EXPR=159;
    public static final int BOOL_TYPE=246;
    public static final int MOD_ASSIGN=306;
    public static final int ANNOTATION_ARRAY=230;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=202;
    public static final int EQUALS=264;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=300;
    public static final int WINDOW_AGGREG=234;
    public static final int SL_ASSIGN=312;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=255;
    public static final int WEEKDAY=72;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=214;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=180;
    public static final int CREATE_COL_TYPE=227;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=97;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=147;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=243;
    public static final int TIMEPERIOD_SECOND=91;
    public static final int COALESCE=22;
    public static final int EVENT_FILTER_BETWEEN=131;
    public static final int ANNOTATION_VALUE=231;
    public static final int SUBSELECT_EXPR=197;
    public static final int NUMERIC_PARAM_RANGE=110;
    public static final int CONCAT=176;
    public static final int CLASS_IDENT=133;
    public static final int MATCHREC_PATTERN_ALTER=253;
    public static final int ON_EXPR=210;
    public static final int CREATE_WINDOW_EXPR=208;
    public static final int PROPERTY_SELECTION_STREAM=123;
    public static final int ON_DELETE_EXPR=212;
    public static final int NUM_LONG=295;
    public static final int ON=41;
    public static final int TIME_PERIOD=179;
    public static final int DOUBLE_TYPE=244;
    public static final int DELETE=77;
    public static final int INT_TYPE=241;
    public static final int MATCHREC_PARTITION=261;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=141;
    public static final int ORDER_ELEMENT_EXPR=160;
    public static final int TIMEPERIOD_HOURS=87;
    public static final int VARIABLE=80;
    public static final int SUBSTITUTION=205;
    public static final int UNTIL=81;
    public static final int STRING_TYPE=245;
    public static final int NUM_INT=291;
    public static final int MATCHREC_DEFINE_ITEM=258;
    public static final int ON_SET_EXPR=218;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=239;
    public static final int NUM_FLOAT=296;
    public static final int ON_EXPR_FROM=217;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=322;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=122;
    public static final int WEEKDAY_OPERATOR=204;
    public static final int DEC=304;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=313;
    public static final int NUMERIC_PARAM_FREQUENCY=112;
    public static final int SNAPSHOT=78;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=170;
    public static final int EVENT_FILTER_PARAM=126;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=167;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=101;
    public static final int FOR=108;
    public static final int ON_STREAM=211;
    public static final int DEFINE=104;
    public static final int TIMEPERIOD_DAYS=85;
    public static final int EVENT_FILTER_RANGE=127;
    public static final int ML_COMMENT=321;
    public static final int INDEX=83;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=166;
    public static final int BOR_ASSIGN=314;
    public static final int COMMA=262;
    public static final int IS=42;
    public static final int PARTITION=105;
    public static final int WHEN_LIMIT_EXPR=173;
    public static final int TIMEPERIOD_LIMIT_EXPR=169;
    public static final int SOME=49;
    public static final int EQUAL=297;
    public static final int BOR=271;
    public static final int MATCHREC_MEASURE_ITEM=260;
    public static final int TIMEPERIOD_HOUR=86;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=132;
    public static final int IN_RANGE=195;
    public static final int DOT=265;
    public static final int MATCHREC_MEASURES=259;
    public static final int CURRENT_TIMESTAMP=76;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=124;
    public static final int INSERTINTO_EXPR=174;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=140;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=225;
    public static final int EVAL_EQUALS_EXPR=144;
    public static final int TIMEPERIOD_MINUTES=89;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=188;
    public static final int EVENT_LIMIT_EXPR=168;
    public static final int TIMEPERIOD_MINUTE=88;
    public static final int NOT_BETWEEN=187;
    public static final int EVAL_OR_EXPR=143;
    public static final int ON_SELECT_INSERT_OUTPUT=216;
    public static final int MEASURES=103;
    public static final int AFTER=107;
    public static final int BAND=277;
    public static final int MATCHREC_PATTERN_ATOM=251;
    public static final int QUOTED_STRING_LITERAL=276;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=273;
    public static final int OBSERVER_EXPR=135;
    public static final int CREATE_SCHEMA_EXPR_QUAL=238;
    public static final int EVENT_FILTER_IDENT=125;
    public static final int EVENT_PROP_MAPPED=163;
    public static final int UnicodeEscape=323;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=190;
    public static final int SELECTION_ELEMENT_EXPR=150;
    public static final int CREATE_WINDOW_SELECT_EXPR=209;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=236;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=151;
    public static final int SR_ASSIGN=308;
    public static final int LE=283;
    public static final int DBFROM_CLAUSE=191;
    public static final int EVAL_IDENT=148;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:526:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:527:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:527:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:527:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:527:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1610);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1615);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1619); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:532:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:533:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:533:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:533:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:533:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1633);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1639);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: eplExpression, annotationEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 536:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:536:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:536:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:539:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:540:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:540:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1669);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1673); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:547:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:548:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:548:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1693); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1695);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:548:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);

                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);

                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:548:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1699); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:548:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:548:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1703);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:548:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1707);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1712); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValuePairsNoEnum, elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 549:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:549:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:549:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:549:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:552:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:553:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:553:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1755);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:553:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:553:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:553:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:553:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1763);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:553:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1767);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1772); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValuePairsEnum, classIdentifier, elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 554:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:554:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:554:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:554:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:557:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:558:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:558:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1813);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:558:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:558:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1816); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1819);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:561:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:562:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:562:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1840);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:562:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:562:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1843); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1846);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:565:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:566:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:566:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1869); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1873);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: elementValueNoEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 567:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:567:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:570:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:571:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:571:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1912); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1914);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: i, elementValueEnum
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 572:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:572:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:575:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:576:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:576:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1945);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:577:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:577:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:577:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1956);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 577:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:578:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1969);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:581:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:582:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:582:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum1992);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:583:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:583:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:583:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2003);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 583:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:584:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum2016);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:585:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2024);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:588:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:589:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:589:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:589:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:589:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2047);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:589:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:589:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2050); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2052);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:589:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:589:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 590:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:590:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:590:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:593:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:594:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:594:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2092); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:594:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:594:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2095);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:594:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:594:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2098); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2100);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:594:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:594:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 595:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:595:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:595:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:601:1: eplExpression : ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )? ;
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;

        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;

        EsperEPL2GrammarParser.forExpr_return forExpr57 = null;



        try {
            // EsperEPL2Grammar.g:602:2: ( ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )? )
            // EsperEPL2Grammar.g:602:4: ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:602:4: ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr )
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }

                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:602:5: selectExpr
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2144);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:603:4: createWindowExpr
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2149);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:604:4: createIndexExpr
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2154);
                    createIndexExpr52=createIndexExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:605:4: createVariableExpr
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2159);
                    createVariableExpr53=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:606:4: createSchemaExpr
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2164);
                    createSchemaExpr54=createSchemaExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:607:4: onExpr
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2169);
                    onExpr55=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:608:4: updateExpr
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2174);
                    updateExpr56=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:608:16: ( forExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:608:16: forExpr
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2177);
                    forExpr57=forExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr57.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:611:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT58=null;
        Token SELECT60=null;
        Token FROM62=null;
        Token WHERE65=null;
        Token GROUP67=null;
        Token BY68=null;
        Token HAVING70=null;
        Token OUTPUT72=null;
        Token ORDER74=null;
        Token BY75=null;
        Token ROW_LIMIT_EXPR77=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr59 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause61 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause63 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog64 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause66 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr69 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause71 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit73 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr76 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit78 = null;


        CommonTree INSERT58_tree=null;
        CommonTree SELECT60_tree=null;
        CommonTree FROM62_tree=null;
        CommonTree WHERE65_tree=null;
        CommonTree GROUP67_tree=null;
        CommonTree BY68_tree=null;
        CommonTree HAVING70_tree=null;
        CommonTree OUTPUT72_tree=null;
        CommonTree ORDER74_tree=null;
        CommonTree BY75_tree=null;
        CommonTree ROW_LIMIT_EXPR77_tree=null;

        try {
            // EsperEPL2Grammar.g:612:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:612:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:612:4: ( INSERT insertIntoExpr )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:612:5: INSERT insertIntoExpr
                    {
                    INSERT58=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2191); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2194);
                    insertIntoExpr59=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr59.getTree());

                    }
                    break;

            }

            SELECT60=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2200); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2203);
            selectClause61=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause61.getTree());
            FROM62=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2207); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2210);
            fromClause63=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause63.getTree());
            // EsperEPL2Grammar.g:615:3: ( matchRecog )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:615:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2214);
                    matchRecog64=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog64.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:616:3: ( WHERE whereClause )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:616:4: WHERE whereClause
                    {
                    WHERE65=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2220); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2223);
                    whereClause66=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause66.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:617:3: ( GROUP BY groupByListExpr )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:617:4: GROUP BY groupByListExpr
                    {
                    GROUP67=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2230); if (state.failed) return retval;
                    BY68=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2233); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2236);
                    groupByListExpr69=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr69.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:618:3: ( HAVING havingClause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:618:4: HAVING havingClause
                    {
                    HAVING70=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2243); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2246);
                    havingClause71=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause71.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:619:3: ( OUTPUT outputLimit )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:619:4: OUTPUT outputLimit
                    {
                    OUTPUT72=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2253); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2256);
                    outputLimit73=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit73.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:620:3: ( ORDER BY orderByListExpr )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:620:4: ORDER BY orderByListExpr
                    {
                    ORDER74=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2263); if (state.failed) return retval;
                    BY75=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2266); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2269);
                    orderByListExpr76=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr76.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:621:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:621:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR77=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2276); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2279);
                    rowLimit78=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit78.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:624:1: onExpr : ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON79=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr80 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr81 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr82 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr83 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert84 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr85 = null;

        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr86 = null;


        CommonTree ON79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            // EsperEPL2Grammar.g:625:2: ( ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) )
            // EsperEPL2Grammar.g:625:4: ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            {
            ON79=(Token)match(input,ON,FOLLOW_ON_in_onExpr2294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON79);

            pushFollow(FOLLOW_onStreamExpr_in_onExpr2296);
            onStreamExpr80=onStreamExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr80.getTree());
            // EsperEPL2Grammar.g:626:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            int alt30=4;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    // EsperEPL2Grammar.g:626:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2301);
                    onDeleteExpr81=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr81.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:626:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2305);
                    onSelectExpr82=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr82.getTree());
                    // EsperEPL2Grammar.g:626:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // EsperEPL2Grammar.g:626:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:626:33: ( onSelectInsertExpr )+
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);

                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }


                                switch (alt27) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:626:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2308);
                            	    onSelectInsertExpr83=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr83.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);

                            // EsperEPL2Grammar.g:626:53: ( outputClauseInsert )?
                            int alt28=2;
                            int LA28_0 = input.LA(1);

                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    // EsperEPL2Grammar.g:626:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2311);
                                    outputClauseInsert84=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert84.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:626:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2318);
                    onSetExpr85=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr85.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:626:89: onUpdateExpr
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2322);
                    onUpdateExpr86=onUpdateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr86.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onStreamExpr, onSetExpr, onSelectExpr, onUpdateExpr, onSelectInsertExpr, onDeleteExpr, outputClauseInsert
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 627:3: -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
            {
                // EsperEPL2Grammar.g:627:6: ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                // EsperEPL2Grammar.g:627:29: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:627:43: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:627:57: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:627:77: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:627:97: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:627:108: ( onUpdateExpr )?
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());

                }
                stream_onUpdateExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onStreamExpr"
    // EsperEPL2Grammar.g:630:1: onStreamExpr : ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) ;
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS89=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression87 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression88 = null;


        CommonTree i_tree=null;
        CommonTree AS89_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:631:2: ( ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) )
            // EsperEPL2Grammar.g:631:4: ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )?
            {
            // EsperEPL2Grammar.g:631:4: ( eventFilterExpression | patternInclusionExpression )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:631:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2365);
                    eventFilterExpression87=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression87.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:631:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2369);
                    patternInclusionExpression88=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression88.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:631:57: ( AS i= IDENT | i= IDENT )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:631:58: AS i= IDENT
                    {
                    AS89=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2373); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS89);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2377); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:631:71: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, i, patternInclusionExpression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 632:3: -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
            {
                // EsperEPL2Grammar.g:632:6: ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);

                // EsperEPL2Grammar.g:632:18: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:632:41: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:632:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onStreamExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:635:1: updateExpr : UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token UPDATE90=null;
        Token ISTREAM91=null;
        Token AS93=null;
        Token SET94=null;
        Token COMMA96=null;
        Token WHERE98=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier92 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment95 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment97 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause99 = null;


        CommonTree i_tree=null;
        CommonTree UPDATE90_tree=null;
        CommonTree ISTREAM91_tree=null;
        CommonTree AS93_tree=null;
        CommonTree SET94_tree=null;
        CommonTree COMMA96_tree=null;
        CommonTree WHERE98_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:636:2: ( UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:636:4: UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE90=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2414); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE90);

            ISTREAM91=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2416); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM91);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2418);
            classIdentifier92=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier92.getTree());
            // EsperEPL2Grammar.g:636:35: ( AS i= IDENT | i= IDENT )?
            int alt33=3;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    // EsperEPL2Grammar.g:636:36: AS i= IDENT
                    {
                    AS93=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2421); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS93);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2425); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:636:49: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2431); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET94=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2437); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET94);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2439);
            onSetAssignment95=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment95.getTree());
            // EsperEPL2Grammar.g:637:23: ( COMMA onSetAssignment )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // EsperEPL2Grammar.g:637:24: COMMA onSetAssignment
            	    {
            	    COMMA96=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2442); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA96);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2444);
            	    onSetAssignment97=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment97.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);

            // EsperEPL2Grammar.g:638:3: ( WHERE whereClause )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:638:4: WHERE whereClause
                    {
                    WHERE98=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2452); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE98);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2454);
                    whereClause99=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause99.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, onSetAssignment, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 639:3: -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:639:6: ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:639:36: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:639:57: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:642:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT100=null;
        Token SELECT102=null;
        Token DISTINCT103=null;
        Token WHERE106=null;
        Token GROUP108=null;
        Token BY109=null;
        Token HAVING111=null;
        Token ORDER113=null;
        Token BY114=null;
        Token ROW_LIMIT_EXPR116=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr101 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList104 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom105 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause107 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr110 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause112 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr115 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit117 = null;


        CommonTree INSERT100_tree=null;
        CommonTree SELECT102_tree=null;
        CommonTree DISTINCT103_tree=null;
        CommonTree WHERE106_tree=null;
        CommonTree GROUP108_tree=null;
        CommonTree BY109_tree=null;
        CommonTree HAVING111_tree=null;
        CommonTree ORDER113_tree=null;
        CommonTree BY114_tree=null;
        CommonTree ROW_LIMIT_EXPR116_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:645:2: ( ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) )
            // EsperEPL2Grammar.g:645:4: ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            // EsperEPL2Grammar.g:645:4: ( INSERT insertIntoExpr )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==INSERT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:645:5: INSERT insertIntoExpr
                    {
                    INSERT100=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT100);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2504);
                    insertIntoExpr101=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr101.getTree());

                    }
                    break;

            }

            SELECT102=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2510); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT102);

            // EsperEPL2Grammar.g:646:10: ( DISTINCT )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==DISTINCT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:646:10: DISTINCT
                    {
                    DISTINCT103=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT103);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2515);
            selectionList104=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList104.getTree());
            // EsperEPL2Grammar.g:647:3: ( onExprFrom )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==FROM) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:647:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2519);
                    onExprFrom105=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom105.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:648:3: ( WHERE whereClause )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==WHERE) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:648:4: WHERE whereClause
                    {
                    WHERE106=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE106);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2527);
                    whereClause107=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause107.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:649:3: ( GROUP BY groupByListExpr )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==GROUP) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:649:4: GROUP BY groupByListExpr
                    {
                    GROUP108=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2536); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP108);

                    BY109=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY109);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2540);
                    groupByListExpr110=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr110.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:650:3: ( HAVING havingClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==HAVING) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:650:4: HAVING havingClause
                    {
                    HAVING111=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING111);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2549);
                    havingClause112=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause112.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:651:3: ( ORDER BY orderByListExpr )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ORDER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:651:4: ORDER BY orderByListExpr
                    {
                    ORDER113=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER113);

                    BY114=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2558); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY114);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2560);
                    orderByListExpr115=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr115.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:652:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ROW_LIMIT_EXPR) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:652:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR116=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2567); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR116);

                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2569);
                    rowLimit117=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit117.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: selectionList, DISTINCT, insertIntoExpr, rowLimit, orderByListExpr, havingClause, groupByListExpr, onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 653:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
            {
                // EsperEPL2Grammar.g:653:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:653:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                // EsperEPL2Grammar.g:653:39: ( DISTINCT )?
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:653:63: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:653:75: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:653:88: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:653:105: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:653:119: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();
                // EsperEPL2Grammar.g:653:136: ( rowLimit )?
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());

                }
                stream_rowLimit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onUpdateExpr"
    // EsperEPL2Grammar.g:656:1: onUpdateExpr : UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token UPDATE118=null;
        Token AS119=null;
        Token SET120=null;
        Token COMMA122=null;
        Token WHERE124=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment121 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment123 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause125 = null;


        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE118_tree=null;
        CommonTree AS119_tree=null;
        CommonTree SET120_tree=null;
        CommonTree COMMA122_tree=null;
        CommonTree WHERE124_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            // EsperEPL2Grammar.g:659:2: ( UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:659:4: UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE118=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2629); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE118);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2636); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:660:11: ( AS i= IDENT | i= IDENT )?
            int alt44=3;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AS) ) {
                alt44=1;
            }
            else if ( (LA44_0==IDENT) ) {
                alt44=2;
            }
            switch (alt44) {
                case 1 :
                    // EsperEPL2Grammar.g:660:12: AS i= IDENT
                    {
                    AS119=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2639); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS119);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2643); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:660:25: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2649); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET120=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2655); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET120);

            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2657);
            onSetAssignment121=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment121.getTree());
            // EsperEPL2Grammar.g:661:23: ( COMMA onSetAssignment )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // EsperEPL2Grammar.g:661:24: COMMA onSetAssignment
            	    {
            	    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2660); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);

            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2662);
            	    onSetAssignment123=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment123.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);

            // EsperEPL2Grammar.g:662:3: ( WHERE whereClause )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==WHERE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:662:4: WHERE whereClause
                    {
                    WHERE124=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2669); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE124);

                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2671);
                    whereClause125=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause125.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n, whereClause, onSetAssignment
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 663:3: -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:663:6: ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);

                // EsperEPL2Grammar.g:663:23: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);

                adaptor.addChild(root_2, stream_n.nextNode());
                // EsperEPL2Grammar.g:663:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:663:63: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onUpdateExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:666:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT126=null;
        Token SELECT128=null;
        Token WHERE130=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr127 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList129 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause131 = null;


        CommonTree INSERT126_tree=null;
        CommonTree SELECT128_tree=null;
        CommonTree WHERE130_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:669:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:669:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT126=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2722); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT126);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2724);
            insertIntoExpr127=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr127.getTree());
            SELECT128=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2728); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT128);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2730);
            selectionList129=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList129.getTree());
            // EsperEPL2Grammar.g:671:3: ( WHERE whereClause )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:671:4: WHERE whereClause
                    {
                    WHERE130=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE130);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2737);
                    whereClause131=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause131.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, insertIntoExpr, selectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 672:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:672:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:672:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:675:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT132=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT132_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:676:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:676:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT132=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2768); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT132);

            // EsperEPL2Grammar.g:676:11: (f= FIRST | a= ALL )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==FIRST) ) {
                alt48=1;
            }
            else if ( (LA48_0==ALL) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:676:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2773); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:676:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2779); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, f
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 677:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:677:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:677:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:677:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:680:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE133=null;
        Token WHERE135=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom134 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause136 = null;


        CommonTree DELETE133_tree=null;
        CommonTree WHERE135_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:683:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:683:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE133=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2821); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE133);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2825);
            onExprFrom134=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom134.getTree());
            // EsperEPL2Grammar.g:685:3: ( WHERE whereClause )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==WHERE) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:685:4: WHERE whereClause
                    {
                    WHERE135=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2830); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE135);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2832);
                    whereClause136=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause136.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 686:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:686:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:686:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:689:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET137=null;
        Token COMMA139=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment138 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment140 = null;


        CommonTree SET137_tree=null;
        CommonTree COMMA139_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:692:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:692:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET137=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET137);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2874);
            onSetAssignment138=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment138.getTree());
            // EsperEPL2Grammar.g:692:24: ( COMMA onSetAssignment )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // EsperEPL2Grammar.g:692:25: COMMA onSetAssignment
            	    {
            	    COMMA139=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2877); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA139);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2879);
            	    onSetAssignment140=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment140.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 693:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:693:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:696:1: onSetAssignment : eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS142=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty141 = null;

        EsperEPL2GrammarParser.expression_return expression143 = null;


        CommonTree EQUALS142_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:697:2: ( eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) )
            // EsperEPL2Grammar.g:697:4: eventProperty EQUALS expression
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment2904);
            eventProperty141=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty141.getTree());
            EQUALS142=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2906); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS142);

            pushFollow(FOLLOW_expression_in_onSetAssignment2908);
            expression143=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression143.getTree());


            // AST REWRITE
            // elements: expression, eventProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 698:3: -> ^( ON_SET_EXPR_ITEM eventProperty expression )
            {
                // EsperEPL2Grammar.g:698:6: ^( ON_SET_EXPR_ITEM eventProperty expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:701:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM144=null;
        Token AS145=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM144_tree=null;
        CommonTree AS145_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:702:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:702:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM144=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2933); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM144);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2937); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:702:17: ( AS i= IDENT | i= IDENT )?
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==AS) ) {
                alt51=1;
            }
            else if ( (LA51_0==IDENT) ) {
                alt51=2;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:702:18: AS i= IDENT
                    {
                    AS145=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2940); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS145);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:702:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2950); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: n, i
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 703:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:703:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:703:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:706:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE146=null;
        Token WINDOW147=null;
        Token DOT148=null;
        Token DOT150=null;
        Token AS152=null;
        Token LPAREN154=null;
        Token RPAREN156=null;
        Token WHERE157=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression149 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression151 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter153 = null;

        EsperEPL2GrammarParser.createColumnList_return createColumnList155 = null;

        EsperEPL2GrammarParser.expression_return expression158 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE146_tree=null;
        CommonTree WINDOW147_tree=null;
        CommonTree DOT148_tree=null;
        CommonTree DOT150_tree=null;
        CommonTree AS152_tree=null;
        CommonTree LPAREN154_tree=null;
        CommonTree RPAREN156_tree=null;
        CommonTree WHERE157_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            // EsperEPL2Grammar.g:707:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ) )
            // EsperEPL2Grammar.g:707:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE146=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2978); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE146);

            WINDOW147=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW147);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr2984); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:707:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==DOT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:707:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT148=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT148);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2989);
                    viewExpression149=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression149.getTree());
                    // EsperEPL2Grammar.g:707:46: ( DOT viewExpression )*
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( (LA52_0==DOT) ) {
                            alt52=1;
                        }


                        switch (alt52) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:707:47: DOT viewExpression
                    	    {
                    	    DOT150=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr2992); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT150);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr2994);
                    	    viewExpression151=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression151.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop52;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:707:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt54=3;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==RETAINUNION) ) {
                alt54=1;
            }
            else if ( (LA54_0==RETAININTERSECTION) ) {
                alt54=2;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:707:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3003); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:707:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3007); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:707:110: ( AS )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==AS) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:707:110: AS
                    {
                    AS152=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3011); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS152);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:708:5: ( createWindowExprModelAfter | LPAREN createColumnList RPAREN )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==SELECT||LA56_0==IDENT||LA56_0==TICKED_STRING_LITERAL) ) {
                alt56=1;
            }
            else if ( (LA56_0==LPAREN) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:709:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3026);
                    createWindowExprModelAfter153=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter153.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:710:10: LPAREN createColumnList RPAREN
                    {
                    LPAREN154=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3041); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN154);

                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3043);
                    createColumnList155=createColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList155.getTree());
                    RPAREN156=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3045); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN156);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:712:5: (i1= INSERT ( WHERE expression )? )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==INSERT) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:712:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:712:16: ( WHERE expression )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==WHERE) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // EsperEPL2Grammar.g:712:17: WHERE expression
                            {
                            WHERE157=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3065); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE157);

                            pushFollow(FOLLOW_expression_in_createWindowExpr3067);
                            expression158=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression158.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, i, ri, ru, ru, ri, createWindowExprModelAfter, i, createWindowExprModelAfter, viewExpression, createColumnList, viewExpression, createColumnList, INSERT
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 713:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:713:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:713:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:713:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:713:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:713:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:713:98: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();
                // EsperEPL2Grammar.g:714:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:714:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 715:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? )
            {
                // EsperEPL2Grammar.g:715:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:715:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:715:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:715:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:715:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:715:84: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:718:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT159=null;
        Token FROM161=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList160 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier162 = null;


        CommonTree SELECT159_tree=null;
        CommonTree FROM161_tree=null;

        try {
            // EsperEPL2Grammar.g:719:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:719:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:719:4: ( SELECT createSelectionList FROM )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==SELECT) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:719:5: SELECT createSelectionList FROM
                    {
                    SELECT159=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3154); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3157);
                    createSelectionList160=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList160.getTree());
                    FROM161=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3159); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3164);
            classIdentifier162=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier162.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createIndexExpr"
    // EsperEPL2Grammar.g:722:1: createIndexExpr : CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN -> ^( CREATE_INDEX_EXPR $n $w columnList ) ;
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token w=null;
        Token CREATE163=null;
        Token INDEX164=null;
        Token ON165=null;
        Token LPAREN166=null;
        Token RPAREN168=null;
        EsperEPL2GrammarParser.columnList_return columnList167 = null;


        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE163_tree=null;
        CommonTree INDEX164_tree=null;
        CommonTree ON165_tree=null;
        CommonTree LPAREN166_tree=null;
        CommonTree RPAREN168_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:723:2: ( CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN -> ^( CREATE_INDEX_EXPR $n $w columnList ) )
            // EsperEPL2Grammar.g:723:4: CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN
            {
            CREATE163=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE163);

            INDEX164=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3179); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX164);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3183); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            ON165=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3185); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON165);

            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3189); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);

            LPAREN166=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN166);

            pushFollow(FOLLOW_columnList_in_createIndexExpr3193);
            columnList167=columnList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList167.getTree());
            RPAREN168=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN168);



            // AST REWRITE
            // elements: columnList, w, n
            // token labels: w, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 724:3: -> ^( CREATE_INDEX_EXPR $n $w columnList )
            {
                // EsperEPL2Grammar.g:724:6: ^( CREATE_INDEX_EXPR $n $w columnList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createIndexExpr"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:727:1: createVariableExpr : CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token CREATE169=null;
        Token VARIABLE170=null;
        Token EQUALS172=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier171 = null;

        EsperEPL2GrammarParser.expression_return expression173 = null;


        CommonTree n_tree=null;
        CommonTree CREATE169_tree=null;
        CommonTree VARIABLE170_tree=null;
        CommonTree EQUALS172_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:728:2: ( CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) )
            // EsperEPL2Grammar.g:728:4: CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )?
            {
            CREATE169=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3222); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE169);

            VARIABLE170=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE170);

            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3226);
            classIdentifier171=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier171.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3230); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:728:44: ( EQUALS expression )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==EQUALS) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // EsperEPL2Grammar.g:728:45: EQUALS expression
                    {
                    EQUALS172=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS172);

                    pushFollow(FOLLOW_expression_in_createVariableExpr3235);
                    expression173=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression173.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, n, classIdentifier
            // token labels: n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 729:3: -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
            {
                // EsperEPL2Grammar.g:729:6: ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:729:48: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createColumnList"
    // EsperEPL2Grammar.g:732:1: createColumnList : createColumnListElement ( COMMA createColumnListElement )* -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA175=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement174 = null;

        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement176 = null;


        CommonTree COMMA175_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            // EsperEPL2Grammar.g:735:2: ( createColumnListElement ( COMMA createColumnListElement )* -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ ) )
            // EsperEPL2Grammar.g:735:4: createColumnListElement ( COMMA createColumnListElement )*
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3277);
            createColumnListElement174=createColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement174.getTree());
            // EsperEPL2Grammar.g:735:28: ( COMMA createColumnListElement )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // EsperEPL2Grammar.g:735:29: COMMA createColumnListElement
            	    {
            	    COMMA175=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3280); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA175);

            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3282);
            	    createColumnListElement176=createColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement176.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);



            // AST REWRITE
            // elements: createColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 736:3: -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:736:6: ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);

                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());

                }
                stream_createColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createColumnList"

    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createColumnListElement"
    // EsperEPL2Grammar.g:739:1: createColumnListElement : name= IDENT ( classIdentifier (b= LBRACK RBRACK )? ) -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? ) ;
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token b=null;
        Token RBRACK178=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier177 = null;


        CommonTree name_tree=null;
        CommonTree b_tree=null;
        CommonTree RBRACK178_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:740:2: (name= IDENT ( classIdentifier (b= LBRACK RBRACK )? ) -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? ) )
            // EsperEPL2Grammar.g:740:7: name= IDENT ( classIdentifier (b= LBRACK RBRACK )? )
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createColumnListElement3312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            // EsperEPL2Grammar.g:740:18: ( classIdentifier (b= LBRACK RBRACK )? )
            // EsperEPL2Grammar.g:740:19: classIdentifier (b= LBRACK RBRACK )?
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3315);
            classIdentifier177=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier177.getTree());
            // EsperEPL2Grammar.g:740:35: (b= LBRACK RBRACK )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LBRACK) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:740:36: b= LBRACK RBRACK
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);

                    RBRACK178=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3322); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK178);


                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: b, name, classIdentifier
            // token labels: b, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 741:3: -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? )
            {
                // EsperEPL2Grammar.g:741:6: ^( CREATE_COL_TYPE $name classIdentifier ( $b)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:741:46: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:744:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA180=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement179 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement181 = null;


        CommonTree COMMA180_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:747:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:747:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3366);
            createSelectionListElement179=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement179.getTree());
            // EsperEPL2Grammar.g:747:31: ( COMMA createSelectionListElement )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // EsperEPL2Grammar.g:747:32: COMMA createSelectionListElement
            	    {
            	    COMMA180=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3369); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA180);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3371);
            	    createSelectionListElement181=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement181.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 748:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:748:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:751:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS183=null;
        Token AS185=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty182 = null;

        EsperEPL2GrammarParser.constant_return constant184 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS183_tree=null;
        CommonTree AS185_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:752:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt65=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt65=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt65=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt65=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }

            switch (alt65) {
                case 1 :
                    // EsperEPL2Grammar.g:752:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3400); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 753:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:754:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3412);
                    eventProperty182=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty182.getTree());
                    // EsperEPL2Grammar.g:754:18: ( AS i= IDENT )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==AS) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // EsperEPL2Grammar.g:754:19: AS i= IDENT
                            {
                            AS183=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3415); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS183);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3419); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: i, eventProperty
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 755:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:755:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:755:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:756:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3440);
                    constant184=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant184.getTree());
                    AS185=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3442); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS185);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3446); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 757:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:757:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:757:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSchemaExpr"
    // EsperEPL2Grammar.g:760:1: createSchemaExpr : CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? ) -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) ) -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) ) -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? ) ;
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE186=null;
        Token SCHEMA187=null;
        Token AS188=null;
        Token LPAREN190=null;
        Token RPAREN192=null;
        EsperEPL2GrammarParser.variantList_return variantList189 = null;

        EsperEPL2GrammarParser.createColumnList_return createColumnList191 = null;

        EsperEPL2GrammarParser.columnList_return columnList193 = null;


        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE186_tree=null;
        CommonTree SCHEMA187_tree=null;
        CommonTree AS188_tree=null;
        CommonTree LPAREN190_tree=null;
        CommonTree RPAREN192_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:761:2: ( CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? ) -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) ) -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) ) -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? ) )
            // EsperEPL2Grammar.g:761:4: CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? )
            {
            CREATE186=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3471); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE186);

            // EsperEPL2Grammar.g:761:18: (keyword= IDENT )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==IDENT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // EsperEPL2Grammar.g:761:18: keyword= IDENT
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3475); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);


                    }
                    break;

            }

            SCHEMA187=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3478); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA187);

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3482); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            // EsperEPL2Grammar.g:761:44: ( AS )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==AS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:761:44: AS
                    {
                    AS188=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS188);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:762:5: ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==IDENT||LA70_0==STAR||LA70_0==TICKED_STRING_LITERAL) ) {
                alt70=1;
            }
            else if ( (LA70_0==LPAREN) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // EsperEPL2Grammar.g:763:4: variantList
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3497);
                    variantList189=variantList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList189.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:764:10: LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )?
                    {
                    LPAREN190=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN190);

                    // EsperEPL2Grammar.g:764:17: ( createColumnList )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==IDENT) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // EsperEPL2Grammar.g:764:17: createColumnList
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3510);
                            createColumnList191=createColumnList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList191.getTree());

                            }
                            break;

                    }

                    RPAREN192=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN192);

                    // EsperEPL2Grammar.g:764:42: (inherits= IDENT columnList )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==IDENT) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // EsperEPL2Grammar.g:764:43: inherits= IDENT columnList
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3518); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);

                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3520);
                            columnList193=columnList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList193.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: variantList, createColumnList, name, createColumnList, columnList, inherits, keyword, name, variantList, name
            // token labels: inherits, keyword, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 766:3: -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) )
            if (inherits != null) {
                // EsperEPL2Grammar.g:766:27: ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                // EsperEPL2Grammar.g:766:54: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();
                // EsperEPL2Grammar.g:766:72: ^( CREATE_SCHEMA_EXPR_INH $inherits columnList )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);

                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 767:3: -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) )
            if (keyword != null) {
                // EsperEPL2Grammar.g:767:26: ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                // EsperEPL2Grammar.g:767:65: ^( CREATE_SCHEMA_EXPR_QUAL $keyword)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);

                adaptor.addChild(root_2, stream_keyword.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 768:3: -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? )
            {
                // EsperEPL2Grammar.g:768:6: ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                // EsperEPL2Grammar.g:768:33: ( variantList )?
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());

                }
                stream_variantList.reset();
                // EsperEPL2Grammar.g:768:46: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSchemaExpr"

    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variantList"
    // EsperEPL2Grammar.g:771:1: variantList : variantListElement ( COMMA variantListElement )* -> ^( VARIANT_LIST ( variantListElement )+ ) ;
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA195=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement194 = null;

        EsperEPL2GrammarParser.variantListElement_return variantListElement196 = null;


        CommonTree COMMA195_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            // EsperEPL2Grammar.g:772:2: ( variantListElement ( COMMA variantListElement )* -> ^( VARIANT_LIST ( variantListElement )+ ) )
            // EsperEPL2Grammar.g:772:4: variantListElement ( COMMA variantListElement )*
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3609);
            variantListElement194=variantListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement194.getTree());
            // EsperEPL2Grammar.g:772:23: ( COMMA variantListElement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // EsperEPL2Grammar.g:772:24: COMMA variantListElement
            	    {
            	    COMMA195=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3612); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA195);

            	    pushFollow(FOLLOW_variantListElement_in_variantList3614);
            	    variantListElement196=variantListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement196.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);



            // AST REWRITE
            // elements: variantListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 773:3: -> ^( VARIANT_LIST ( variantListElement )+ )
            {
                // EsperEPL2Grammar.g:773:6: ^( VARIANT_LIST ( variantListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);

                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());

                }
                stream_variantListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantList"

    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variantListElement"
    // EsperEPL2Grammar.g:776:1: variantListElement : ( STAR | classIdentifier );
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR197=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier198 = null;


        CommonTree STAR197_tree=null;

        try {
            // EsperEPL2Grammar.g:777:2: ( STAR | classIdentifier )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==STAR) ) {
                alt72=1;
            }
            else if ( (LA72_0==IDENT||LA72_0==TICKED_STRING_LITERAL) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:777:7: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STAR197=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3641); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR197_tree = (CommonTree)adaptor.create(STAR197);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR197_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:778:4: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3647);
                    classIdentifier198=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier198.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:781:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO199=null;
        Token LPAREN200=null;
        Token RPAREN202=null;
        EsperEPL2GrammarParser.columnList_return columnList201 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO199_tree=null;
        CommonTree LPAREN200_tree=null;
        CommonTree RPAREN202_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:784:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) )
            // EsperEPL2Grammar.g:784:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )?
            {
            // EsperEPL2Grammar.g:784:4: (s= ISTREAM | s= RSTREAM )?
            int alt73=3;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==ISTREAM) ) {
                alt73=1;
            }
            else if ( (LA73_0==RSTREAM) ) {
                alt73=2;
            }
            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:784:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3672); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:784:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3678); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO199=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO199);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:784:42: ( LPAREN columnList RPAREN )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LPAREN) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:784:43: LPAREN columnList RPAREN
                    {
                    LPAREN200=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr3689); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN200);

                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3691);
                    columnList201=columnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList201.getTree());
                    RPAREN202=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr3693); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN202);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, columnList, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 785:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
            {
                // EsperEPL2Grammar.g:785:6: ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:785:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:785:31: ( columnList )?
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());

                }
                stream_columnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "columnList"
    // EsperEPL2Grammar.g:788:1: columnList : IDENT ( COMMA IDENT )* -> ^( EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT203=null;
        Token COMMA204=null;
        Token IDENT205=null;

        CommonTree IDENT203_tree=null;
        CommonTree COMMA204_tree=null;
        CommonTree IDENT205_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // EsperEPL2Grammar.g:789:2: ( IDENT ( COMMA IDENT )* -> ^( EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:789:5: IDENT ( COMMA IDENT )*
            {
            IDENT203=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT203);

            // EsperEPL2Grammar.g:789:11: ( COMMA IDENT )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // EsperEPL2Grammar.g:789:12: COMMA IDENT
            	    {
            	    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList3730); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA204);

            	    IDENT205=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3732); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT205);


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 790:3: -> ^( EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:790:6: ^( EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:790:16: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "columnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:793:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression206 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin207 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList208 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:796:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:796:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3770);
            streamExpression206=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression206.getTree());
            // EsperEPL2Grammar.g:796:21: ( regularJoin | outerJoinList )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==EOF||LA76_0==WHERE||(LA76_0>=GROUP && LA76_0<=HAVING)||LA76_0==OUTPUT||LA76_0==ORDER||LA76_0==ROW_LIMIT_EXPR||LA76_0==MATCH_RECOGNIZE||LA76_0==FOR||LA76_0==COMMA) ) {
                alt76=1;
            }
            else if ( ((LA76_0>=INNER && LA76_0<=FULL)) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // EsperEPL2Grammar.g:796:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3773);
                    regularJoin207=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin207.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:796:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3777);
                    outerJoinList208=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList208.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:799:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA209=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression210 = null;


        CommonTree COMMA209_tree=null;

        try {
            // EsperEPL2Grammar.g:800:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:800:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:800:4: ( COMMA streamExpression )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // EsperEPL2Grammar.g:800:5: COMMA streamExpression
            	    {
            	    COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3791); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3794);
            	    streamExpression210=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression210.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:803:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin211 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin212 = null;



        try {
            // EsperEPL2Grammar.g:804:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:804:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3808);
            outerJoin211=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin211.getTree());
            // EsperEPL2Grammar.g:804:14: ( outerJoin )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0>=INNER && LA78_0<=FULL)) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // EsperEPL2Grammar.g:804:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3811);
            	    outerJoin212=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin212.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:807:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER213=null;
        Token JOIN214=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression215 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent216 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER213_tree=null;
        CommonTree JOIN214_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:810:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:810:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:810:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=JOIN && LA81_0<=FULL)) ) {
                alt81=1;
            }
            else if ( (LA81_0==INNER) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // EsperEPL2Grammar.g:811:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:811:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( ((LA80_0>=LEFT && LA80_0<=FULL)) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // EsperEPL2Grammar.g:811:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:811:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt79=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt79=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt79=2;
                                }
                                break;
                            case FULL:
                                {
                                alt79=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 79, 0, input);

                                throw nvae;
                            }

                            switch (alt79) {
                                case 1 :
                                    // EsperEPL2Grammar.g:811:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3854); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:811:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3858); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:811:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3862); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER213=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3865); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER213);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:812:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:812:14: (i= INNER )
                    // EsperEPL2Grammar.g:812:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN214=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3900); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN214);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3902);
            streamExpression215=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression215.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3904);
            outerJoinIdent216=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent216.getTree());


            // AST REWRITE
            // elements: outerJoinIdent, outerJoinIdent, outerJoinIdent, streamExpression, outerJoinIdent, streamExpression, streamExpression, streamExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 814:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:814:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 815:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:815:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 816:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:816:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 817:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:817:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:820:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON217=null;
        Token AND_EXPR219=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair218 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair220 = null;


        CommonTree ON217_tree=null;
        CommonTree AND_EXPR219_tree=null;

        try {
            // EsperEPL2Grammar.g:821:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:821:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON217=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3969); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3972);
            outerJoinIdentPair218=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair218.getTree());
            // EsperEPL2Grammar.g:821:27: ( AND_EXPR outerJoinIdentPair )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==AND_EXPR) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // EsperEPL2Grammar.g:821:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR219=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3975); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3978);
            	    outerJoinIdentPair220=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair220.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:824:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS222=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty221 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty223 = null;


        CommonTree EQUALS222_tree=null;

        try {
            // EsperEPL2Grammar.g:825:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:825:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3993);
            eventProperty221=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty221.getTree());
            EQUALS222=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair3995); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair3998);
            eventProperty223=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty223.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:828:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression224 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:831:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:831:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4020);
            evalOrExpression224=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression224.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 832:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:832:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:835:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList225 = null;


        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:838:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) )
            // EsperEPL2Grammar.g:838:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList
            {
            // EsperEPL2Grammar.g:838:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt83=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt83=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt83=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt83=3;
                    }
                    break;
            }

            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:838:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4056); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:838:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4062); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:838:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:838:43: (d= DISTINCT )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DISTINCT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // EsperEPL2Grammar.g:838:43: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause4077);
            selectionList225=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList225.getTree());


            // AST REWRITE
            // elements: selectionList, s, d
            // token labels: d, s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 839:3: -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
            {
                // EsperEPL2Grammar.g:839:6: ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:839:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:839:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:842:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA227=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement226 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement228 = null;


        CommonTree COMMA227_tree=null;

        try {
            // EsperEPL2Grammar.g:843:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:843:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList4108);
            selectionListElement226=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement226.getTree());
            // EsperEPL2Grammar.g:843:25: ( COMMA selectionListElement )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // EsperEPL2Grammar.g:843:26: COMMA selectionListElement
            	    {
            	    COMMA227=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4111); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4114);
            	    selectionListElement228=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement228.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:846:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS231=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector229 = null;

        EsperEPL2GrammarParser.expression_return expression230 = null;


        CommonTree s_tree=null;
        CommonTree AS231_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:848:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt87=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt87=1;
                }
                break;
            case IDENT:
                {
                int LA87_2 = input.LA(2);

                if ( (LA87_2==DOT) ) {
                    int LA87_63 = input.LA(3);

                    if ( (LA87_63==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt87=2;
                    }
                    else if ( (LA87_63==WINDOW||LA87_63==ESCAPE||LA87_63==EVERY_EXPR||(LA87_63>=SUM && LA87_63<=COUNT)||LA87_63==OUTER||(LA87_63>=JOIN && LA87_63<=FULL)||(LA87_63>=EVENTS && LA87_63<=LAST)||(LA87_63>=UNIDIRECTIONAL && LA87_63<=PRIOR)||(LA87_63>=WEEKDAY && LA87_63<=CAST)||LA87_63==SNAPSHOT||(LA87_63>=VARIABLE && LA87_63<=INDEX)||(LA87_63>=DEFINE && LA87_63<=MATCHES)||LA87_63==WHILE||LA87_63==IDENT||LA87_63==TICKED_STRING_LITERAL) ) {
                        alt87=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 63, input);

                        throw nvae;
                    }
                }
                else if ( (LA87_2==EOF||(LA87_2>=IN_SET && LA87_2<=REGEXP)||(LA87_2>=OR_EXPR && LA87_2<=NOT_EXPR)||(LA87_2>=WHERE && LA87_2<=AS)||LA87_2==FROM||LA87_2==IS||(LA87_2>=GROUP && LA87_2<=HAVING)||LA87_2==OUTPUT||LA87_2==INSERT||LA87_2==ORDER||LA87_2==ROW_LIMIT_EXPR||LA87_2==FOR||LA87_2==COMMA||LA87_2==EQUALS||LA87_2==LPAREN||LA87_2==LBRACK||(LA87_2>=STAR && LA87_2<=QUESTION)||(LA87_2>=BAND && LA87_2<=MOD)||LA87_2==ESCAPECHAR) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:848:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 848:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:849:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4156);
                    streamSelector229=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector229.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:850:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4161);
                    expression230=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression230.getTree());
                    // EsperEPL2Grammar.g:850:15: ( AS i= keywordAllowedIdent )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==AS) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // EsperEPL2Grammar.g:850:16: AS i= keywordAllowedIdent
                            {
                            AS231=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4164); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS231);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4168);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 851:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:851:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 852:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:852:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 853:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:853:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:856:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT232=null;
        Token STAR233=null;
        Token AS234=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT232_tree=null;
        CommonTree STAR233_tree=null;
        CommonTree AS234_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:857:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:857:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT232=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT232);

            STAR233=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4228); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR233);

            // EsperEPL2Grammar.g:857:21: ( AS i= IDENT )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==AS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // EsperEPL2Grammar.g:857:22: AS i= IDENT
                    {
                    AS234=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4231); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS234);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4235); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 858:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:858:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:858:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:862:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT239=null;
        Token DOT241=null;
        Token AS243=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression235 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression236 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression237 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression238 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression240 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression242 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT239_tree=null;
        CommonTree DOT241_tree=null;
        CommonTree AS243_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:863:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:863:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:863:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt89=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA89_1 = input.LA(2);

                if ( (LA89_1==EOF||(LA89_1>=WHERE && LA89_1<=AS)||(LA89_1>=INNER && LA89_1<=ON)||(LA89_1>=GROUP && LA89_1<=HAVING)||LA89_1==OUTPUT||LA89_1==ORDER||(LA89_1>=UNIDIRECTIONAL && LA89_1<=RETAININTERSECTION)||LA89_1==ROW_LIMIT_EXPR||LA89_1==MATCH_RECOGNIZE||LA89_1==FOR||(LA89_1>=COMMA && LA89_1<=LPAREN)||LA89_1==LBRACK) ) {
                    alt89=1;
                }
                else if ( (LA89_1==COLON) ) {
                    alt89=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt89=1;
                }
                break;
            case PATTERN:
                {
                alt89=2;
                }
                break;
            case SQL:
                {
                alt89=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }

            switch (alt89) {
                case 1 :
                    // EsperEPL2Grammar.g:863:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4266);
                    eventFilterExpression235=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression235.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:863:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4270);
                    patternInclusionExpression236=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression236.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:863:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4274);
                    databaseJoinExpression237=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression237.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:863:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4278);
                    methodJoinExpression238=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression238.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:864:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==DOT) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // EsperEPL2Grammar.g:864:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT239=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT239);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression4287);
                    viewExpression240=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression240.getTree());
                    // EsperEPL2Grammar.g:864:23: ( DOT viewExpression )*
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==DOT) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:864:24: DOT viewExpression
                    	    {
                    	    DOT241=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4290); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT241);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4292);
                    	    viewExpression242=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression242.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop90;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:864:47: ( AS i= IDENT | i= IDENT )?
            int alt92=3;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==AS) ) {
                alt92=1;
            }
            else if ( (LA92_0==IDENT) ) {
                alt92=2;
            }
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:864:48: AS i= IDENT
                    {
                    AS243=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4299); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS243);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:864:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4309); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:864:71: (u= UNIDIRECTIONAL )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==UNIDIRECTIONAL) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:864:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4316); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:864:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt94=3;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==RETAINUNION) ) {
                alt94=1;
            }
            else if ( (LA94_0==RETAININTERSECTION) ) {
                alt94=2;
            }
            switch (alt94) {
                case 1 :
                    // EsperEPL2Grammar.g:864:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4323); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:864:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: methodJoinExpression, viewExpression, ri, patternInclusionExpression, eventFilterExpression, ru, u, i, databaseJoinExpression
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 865:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:865:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:865:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:865:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:865:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:865:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:866:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:866:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:866:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:866:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:866:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forExpr"
    // EsperEPL2Grammar.g:869:1: forExpr : FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )? -> ^( FOR $i ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token FOR244=null;
        Token LPAREN245=null;
        Token RPAREN247=null;
        EsperEPL2GrammarParser.expressionList_return expressionList246 = null;


        CommonTree i_tree=null;
        CommonTree FOR244_tree=null;
        CommonTree LPAREN245_tree=null;
        CommonTree RPAREN247_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            // EsperEPL2Grammar.g:870:2: ( FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )? -> ^( FOR $i ( expressionList )? ) )
            // EsperEPL2Grammar.g:870:4: FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )?
            {
            FOR244=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4383); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR244);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4387); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:870:16: ( LPAREN ( expressionList )? RPAREN )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==LPAREN) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:870:17: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN245=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4390); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN245);

                    // EsperEPL2Grammar.g:870:24: ( expressionList )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==WINDOW||LA95_0==ESCAPE||(LA95_0>=NOT_EXPR && LA95_0<=EVERY_EXPR)||(LA95_0>=SUM && LA95_0<=COUNT)||LA95_0==CASE||LA95_0==OUTER||(LA95_0>=JOIN && LA95_0<=FULL)||(LA95_0>=EVENTS && LA95_0<=LAST)||(LA95_0>=UNIDIRECTIONAL && LA95_0<=CURRENT_TIMESTAMP)||LA95_0==SNAPSHOT||(LA95_0>=VARIABLE && LA95_0<=INDEX)||(LA95_0>=BOOLEAN_TRUE && LA95_0<=VALUE_NULL)||(LA95_0>=DEFINE && LA95_0<=MATCHES)||LA95_0==WHILE||LA95_0==NUM_DOUBLE||LA95_0==IDENT||LA95_0==LPAREN||(LA95_0>=PLUS && LA95_0<=QUESTION)||(LA95_0>=STRING_LITERAL && LA95_0<=QUOTED_STRING_LITERAL)||LA95_0==MINUS||LA95_0==LCURLY||LA95_0==NUM_INT||(LA95_0>=TICKED_STRING_LITERAL && LA95_0<=NUM_FLOAT)) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // EsperEPL2Grammar.g:870:24: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4392);
                            expressionList246=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList246.getTree());

                            }
                            break;

                    }

                    RPAREN247=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN247);


                    }
                    break;

            }



            // AST REWRITE
            // elements: FOR, i, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 871:3: -> ^( FOR $i ( expressionList )? )
            {
                // EsperEPL2Grammar.g:871:6: ^( FOR $i ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:871:15: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forExpr"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:883:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE248=null;
        Token LPAREN249=null;
        Token RPAREN257=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy250 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures251 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection252 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip253 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern254 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval255 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine256 = null;


        CommonTree MATCH_RECOGNIZE248_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN257_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:884:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:884:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE248=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4431); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE248);

            LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);

            // EsperEPL2Grammar.g:886:4: ( matchRecogPartitionBy )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==PARTITION) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // EsperEPL2Grammar.g:886:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4451);
                    matchRecogPartitionBy250=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy250.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4458);
            matchRecogMeasures251=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures251.getTree());
            // EsperEPL2Grammar.g:888:4: ( matchRecogMatchesSelection )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==ALL) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // EsperEPL2Grammar.g:888:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4463);
                    matchRecogMatchesSelection252=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection252.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:889:4: ( matchRecogMatchesAfterSkip )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==AFTER) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // EsperEPL2Grammar.g:889:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4469);
                    matchRecogMatchesAfterSkip253=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip253.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4475);
            matchRecogPattern254=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern254.getTree());
            // EsperEPL2Grammar.g:891:4: ( matchRecogMatchesInterval )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IDENT) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // EsperEPL2Grammar.g:891:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4481);
                    matchRecogMatchesInterval255=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval255.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4487);
            matchRecogDefine256=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine256.getTree());
            RPAREN257=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4494); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN257);



            // AST REWRITE
            // elements: matchRecogPartitionBy, matchRecogMatchesInterval, MATCH_RECOGNIZE, matchRecogPattern, matchRecogDefine, matchRecogMatchesSelection, matchRecogMatchesAfterSkip, matchRecogMeasures
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 894:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:894:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:894:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:894:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:894:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:894:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:897:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION258=null;
        Token BY259=null;
        Token COMMA261=null;
        EsperEPL2GrammarParser.expression_return expression260 = null;

        EsperEPL2GrammarParser.expression_return expression262 = null;


        CommonTree PARTITION258_tree=null;
        CommonTree BY259_tree=null;
        CommonTree COMMA261_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:898:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:898:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION258=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4531); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION258);

            BY259=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY259);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4535);
            expression260=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression260.getTree());
            // EsperEPL2Grammar.g:898:28: ( COMMA expression )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==COMMA) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // EsperEPL2Grammar.g:898:29: COMMA expression
            	    {
            	    COMMA261=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4538); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA261);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4540);
            	    expression262=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression262.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 899:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:899:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:902:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES263=null;
        Token COMMA265=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem264 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem266 = null;


        CommonTree MEASURES263_tree=null;
        CommonTree COMMA265_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:903:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:903:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES263=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES263);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4571);
            matchRecogMeasureItem264=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem264.getTree());
            // EsperEPL2Grammar.g:903:35: ( COMMA matchRecogMeasureItem )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==COMMA) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // EsperEPL2Grammar.g:903:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA265=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4574); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA265);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4576);
            	    matchRecogMeasureItem266=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem266.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 904:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:904:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:904:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:907:1: matchRecogMeasureItem : expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS268=null;
        EsperEPL2GrammarParser.expression_return expression267 = null;


        CommonTree i_tree=null;
        CommonTree AS268_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:908:2: ( expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) )
            // EsperEPL2Grammar.g:908:4: expression ( AS (i= IDENT )? )?
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4601);
            expression267=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression267.getTree());
            // EsperEPL2Grammar.g:908:15: ( AS (i= IDENT )? )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==AS) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:908:16: AS (i= IDENT )?
                    {
                    AS268=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS268);

                    // EsperEPL2Grammar.g:908:19: (i= IDENT )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==IDENT) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // EsperEPL2Grammar.g:908:20: i= IDENT
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4609); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 909:3: -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
            {
                // EsperEPL2Grammar.g:909:6: ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:909:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:912:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL269=null;
        Token MATCHES270=null;

        CommonTree ALL269_tree=null;
        CommonTree MATCHES270_tree=null;

        try {
            // EsperEPL2Grammar.g:913:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:913:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL269=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4640); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL269_tree = (CommonTree)adaptor.create(ALL269);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL269_tree, root_0);
            }
            MATCHES270=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4643); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:916:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN271=null;
        Token LPAREN272=null;
        Token RPAREN274=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration273 = null;


        CommonTree PATTERN271_tree=null;
        CommonTree LPAREN272_tree=null;
        CommonTree RPAREN274_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:917:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:917:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN271=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4658); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN271);

            LPAREN272=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4660); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN272);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4662);
            matchRecogPatternAlteration273=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration273.getTree());
            RPAREN274=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4664); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN274);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 918:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:918:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:921:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER275=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER275_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:922:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:922:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER275=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER275);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4690);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4694);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4698);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4702);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4706);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i5, i3, i1, i4, i2
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"token i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"token i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"token i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"token i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"token i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 923:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:923:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:926:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod276 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:927:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:927:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4742); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4744);
            timePeriod276=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod276.getTree());


            // AST REWRITE
            // elements: i, timePeriod
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 928:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:928:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:931:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat277 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat278 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:932:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:932:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4770);
            matchRecogPatternConcat277=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat277.getTree());
            // EsperEPL2Grammar.g:932:28: (o= BOR matchRecogPatternConcat )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==BOR) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // EsperEPL2Grammar.g:932:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4775); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4777);
            	    matchRecogPatternConcat278=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat278.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 933:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:933:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 934:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:937:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary279 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:938:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:938:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:938:4: ( matchRecogPatternUnary )+
            int cnt106=0;
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==IDENT||LA106_0==LPAREN) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // EsperEPL2Grammar.g:938:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4810);
            	    matchRecogPatternUnary279=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary279.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 939:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:939:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:942:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested280 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom281 = null;



        try {
            // EsperEPL2Grammar.g:943:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==LPAREN) ) {
                alt107=1;
            }
            else if ( (LA107_0==IDENT) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // EsperEPL2Grammar.g:943:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4835);
                    matchRecogPatternNested280=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested280.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:944:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4841);
                    matchRecogPatternAtom281=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom281.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:947:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN282=null;
        Token RPAREN284=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration283 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN282_tree=null;
        CommonTree RPAREN284_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:948:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:948:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN282=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4853); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN282);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4855);
            matchRecogPatternAlteration283=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration283.getTree());
            RPAREN284=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4857); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN284);

            // EsperEPL2Grammar.g:948:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt108=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt108=1;
                    }
                    break;
                case PLUS:
                    {
                    alt108=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt108=3;
                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // EsperEPL2Grammar.g:948:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4862); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:948:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:948:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4874); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: q, s, matchRecogPatternAlteration, p
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 949:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:949:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:949:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:949:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:949:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:952:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:953:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:953:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:953:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STAR||(LA111_0>=PLUS && LA111_0<=QUESTION)) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // EsperEPL2Grammar.g:953:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:953:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt109=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt109=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt109=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt109=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);

                        throw nvae;
                    }

                    switch (alt109) {
                        case 1 :
                            // EsperEPL2Grammar.g:953:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4919); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:953:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4925); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:953:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4931); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:953:44: (reluctant= QUESTION )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==QUESTION) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // EsperEPL2Grammar.g:953:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4937); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, reluctant, p, q, i
            // token labels: reluctant, s, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 954:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:954:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:954:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:954:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:954:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:954:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:957:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE285=null;
        Token COMMA287=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem286 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem288 = null;


        CommonTree DEFINE285_tree=null;
        CommonTree COMMA287_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:958:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:958:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE285=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4981); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE285);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4983);
            matchRecogDefineItem286=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem286.getTree());
            // EsperEPL2Grammar.g:958:32: ( COMMA matchRecogDefineItem )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // EsperEPL2Grammar.g:958:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA287=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine4986); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA287);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine4988);
            	    matchRecogDefineItem288=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem288.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 959:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:959:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:962:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS289=null;
        EsperEPL2GrammarParser.expression_return expression290 = null;


        CommonTree i_tree=null;
        CommonTree AS289_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:963:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:963:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5015); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS289=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5017); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS289);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5019);
            expression290=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());


            // AST REWRITE
            // elements: i, expression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 964:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:964:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:967:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN291=null;
        Token LBRACK292=null;
        Token RBRACK294=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression293 = null;


        CommonTree PATTERN291_tree=null;
        CommonTree LBRACK292_tree=null;
        CommonTree RBRACK294_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:968:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:968:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN291=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5044); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN291);

            LBRACK292=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK292);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5048);
            patternExpression293=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression293.getTree());
            RBRACK294=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK294);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 969:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:969:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:972:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL295=null;
        Token COLON296=null;
        Token LBRACK297=null;
        Token METADATASQL298=null;
        Token RBRACK299=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL295_tree=null;
        CommonTree COLON296_tree=null;
        CommonTree LBRACK297_tree=null;
        CommonTree METADATASQL298_tree=null;
        CommonTree RBRACK299_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:975:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:975:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL295=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL295);

            COLON296=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON296);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5089); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK297=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5091); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK297);

            // EsperEPL2Grammar.g:975:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==STRING_LITERAL) ) {
                alt113=1;
            }
            else if ( (LA113_0==QUOTED_STRING_LITERAL) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // EsperEPL2Grammar.g:975:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5096); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:975:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:975:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==METADATASQL) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // EsperEPL2Grammar.g:975:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL298=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5106); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL298);

                    // EsperEPL2Grammar.g:975:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==STRING_LITERAL) ) {
                        alt114=1;
                    }
                    else if ( (LA114_0==QUOTED_STRING_LITERAL) ) {
                        alt114=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 0, input);

                        throw nvae;
                    }
                    switch (alt114) {
                        case 1 :
                            // EsperEPL2Grammar.g:975:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5111); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:975:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5117); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK299=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5122); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK299);



            // AST REWRITE
            // elements: s, i, s2
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 976:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:976:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:976:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:979:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON300=null;
        Token LPAREN302=null;
        Token RPAREN304=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier301 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList303 = null;


        CommonTree i_tree=null;
        CommonTree COLON300_tree=null;
        CommonTree LPAREN302_tree=null;
        CommonTree RPAREN304_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:982:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:982:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5173); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON300=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5175); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON300);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5177);
            classIdentifier301=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier301.getTree());
            // EsperEPL2Grammar.g:982:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==LPAREN) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // EsperEPL2Grammar.g:982:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN302=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN302);

                    // EsperEPL2Grammar.g:982:49: ( expressionList )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==WINDOW||LA116_0==ESCAPE||(LA116_0>=NOT_EXPR && LA116_0<=EVERY_EXPR)||(LA116_0>=SUM && LA116_0<=COUNT)||LA116_0==CASE||LA116_0==OUTER||(LA116_0>=JOIN && LA116_0<=FULL)||(LA116_0>=EVENTS && LA116_0<=LAST)||(LA116_0>=UNIDIRECTIONAL && LA116_0<=CURRENT_TIMESTAMP)||LA116_0==SNAPSHOT||(LA116_0>=VARIABLE && LA116_0<=INDEX)||(LA116_0>=BOOLEAN_TRUE && LA116_0<=VALUE_NULL)||(LA116_0>=DEFINE && LA116_0<=MATCHES)||LA116_0==WHILE||LA116_0==NUM_DOUBLE||LA116_0==IDENT||LA116_0==LPAREN||(LA116_0>=PLUS && LA116_0<=QUESTION)||(LA116_0>=STRING_LITERAL && LA116_0<=QUOTED_STRING_LITERAL)||LA116_0==MINUS||LA116_0==LCURLY||LA116_0==NUM_INT||(LA116_0>=TICKED_STRING_LITERAL && LA116_0<=NUM_FLOAT)) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // EsperEPL2Grammar.g:982:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5182);
                            expressionList303=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList303.getTree());

                            }
                            break;

                    }

                    RPAREN304=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5185); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN304);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, i, classIdentifier
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 983:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:983:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:983:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:986:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON305=null;
        Token LPAREN306=null;
        Token RPAREN308=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList307 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON305_tree=null;
        CommonTree LPAREN306_tree=null;
        CommonTree RPAREN308_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:989:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:989:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON305=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON305);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN306=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN306);

            // EsperEPL2Grammar.g:989:35: ( expressionWithTimeList )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==WINDOW||LA118_0==ESCAPE||(LA118_0>=NOT_EXPR && LA118_0<=EVERY_EXPR)||(LA118_0>=SUM && LA118_0<=COUNT)||LA118_0==CASE||LA118_0==OUTER||(LA118_0>=JOIN && LA118_0<=FULL)||(LA118_0>=EVENTS && LA118_0<=LAST)||(LA118_0>=UNIDIRECTIONAL && LA118_0<=CURRENT_TIMESTAMP)||LA118_0==SNAPSHOT||(LA118_0>=VARIABLE && LA118_0<=INDEX)||(LA118_0>=BOOLEAN_TRUE && LA118_0<=VALUE_NULL)||(LA118_0>=DEFINE && LA118_0<=MATCHES)||LA118_0==WHILE||LA118_0==NUM_DOUBLE||LA118_0==IDENT||LA118_0==LPAREN||LA118_0==LBRACK||LA118_0==STAR||(LA118_0>=PLUS && LA118_0<=QUESTION)||(LA118_0>=STRING_LITERAL && LA118_0<=QUOTED_STRING_LITERAL)||LA118_0==MINUS||LA118_0==LCURLY||LA118_0==NUM_INT||(LA118_0>=TICKED_STRING_LITERAL && LA118_0<=NUM_FLOAT)) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // EsperEPL2Grammar.g:989:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5248);
                    expressionWithTimeList307=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList307.getTree());

                    }
                    break;

            }

            RPAREN308=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5251); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN308);



            // AST REWRITE
            // elements: nm, ns, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 990:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:990:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:990:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:993:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA310=null;
        EsperEPL2GrammarParser.expression_return expression309 = null;

        EsperEPL2GrammarParser.expression_return expression311 = null;


        CommonTree COMMA310_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:996:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:996:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5290);
            expression309=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression309.getTree());
            // EsperEPL2Grammar.g:996:15: ( COMMA expression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // EsperEPL2Grammar.g:996:16: COMMA expression
            	    {
            	    COMMA310=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5293); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA310);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr5295);
            	    expression311=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression311.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 997:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:997:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:1000:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA313=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement312 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement314 = null;


        CommonTree COMMA313_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:1003:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:1003:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5330);
            orderByListElement312=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement312.getTree());
            // EsperEPL2Grammar.g:1003:23: ( COMMA orderByListElement )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1003:24: COMMA orderByListElement
            	    {
            	    COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5333); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA313);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5335);
            	    orderByListElement314=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement314.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1004:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:1004:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:1007:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression315 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1008:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:1008:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5360);
            expression315=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression315.getTree());
            // EsperEPL2Grammar.g:1008:15: (d= ASC | d= DESC )?
            int alt121=3;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==ASC) ) {
                alt121=1;
            }
            else if ( (LA121_0==DESC) ) {
                alt121=2;
            }
            switch (alt121) {
                case 1 :
                    // EsperEPL2Grammar.g:1008:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5365); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1008:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5369); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: d, expression
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1009:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:1009:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1009:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:1012:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression316 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:1015:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:1015:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5407);
            evalOrExpression316=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression316.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1016:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:1016:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:1019:1: outputLimit : ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN322=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter317 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod318 = null;

        EsperEPL2GrammarParser.number_return number319 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet320 = null;

        EsperEPL2GrammarParser.expression_return expression321 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr323 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN322_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:1022:2: ( ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) )
            // EsperEPL2Grammar.g:1022:9: ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            {
            // EsperEPL2Grammar.g:1022:9: ( outputLimitAfter )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==AFTER) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // EsperEPL2Grammar.g:1022:9: outputLimitAfter
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5445);
                    outputLimitAfter317=outputLimitAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter317.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1023:10: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt123=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt123=1;
                    }
                    break;
                case FIRST:
                    {
                    alt123=2;
                    }
                    break;
                case LAST:
                    {
                    alt123=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt123=4;
                    }
                    break;
            }

            switch (alt123) {
                case 1 :
                    // EsperEPL2Grammar.g:1023:11: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1023:17: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1023:25: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5468); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1023:32: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1024:10: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            int alt127=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt127=1;
                }
                break;
            case AT:
                {
                alt127=2;
                }
                break;
            case WHEN:
                {
                alt127=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt127=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // EsperEPL2Grammar.g:1025:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:1025:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:1025:14: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:1026:7: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==NUM_INT) ) {
                        int LA125_1 = input.LA(2);

                        if ( (LA125_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==EVENTS) ) {
                            alt125=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_LONG) ) {
                        int LA125_2 = input.LA(2);

                        if ( (LA125_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_FLOAT) ) {
                        int LA125_3 = input.LA(2);

                        if ( (LA125_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_DOUBLE) ) {
                        int LA125_4 = input.LA(2);

                        if ( (LA125_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==IDENT) ) {
                        int LA125_5 = input.LA(2);

                        if ( (LA125_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt125=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }
                    switch (alt125) {
                        case 1 :
                            // EsperEPL2Grammar.g:1027:9: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5529);
                            timePeriod318=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod318.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1028:9: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:1028:9: ( number | i= IDENT )
                            int alt124=2;
                            int LA124_0 = input.LA(1);

                            if ( (LA124_0==NUM_DOUBLE||LA124_0==NUM_INT||(LA124_0>=NUM_LONG && LA124_0<=NUM_FLOAT)) ) {
                                alt124=1;
                            }
                            else if ( (LA124_0==IDENT) ) {
                                alt124=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 124, 0, input);

                                throw nvae;
                            }
                            switch (alt124) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1028:10: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5540);
                                    number319=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number319.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1028:19: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5546); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1028:28: (e= EVENTS )
                            // EsperEPL2Grammar.g:1028:29: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5552); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1032:5: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:1032:5: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:1032:7: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5585);
                    crontabLimitParameterSet320=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet320.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1034:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:1034:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:1034:7: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5602); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit5604);
                    expression321=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression321.getTree());
                    // EsperEPL2Grammar.g:1034:26: ( THEN onSetExpr )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==THEN) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // EsperEPL2Grammar.g:1034:27: THEN onSetExpr
                            {
                            THEN322=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5607); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN322);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5609);
                            onSetExpr323=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr323.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1036:10: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: outputLimitAfter, k, i, onSetExpr, outputLimitAfter, outputLimitAfter, expression, outputLimitAfter, k, outputLimitAfter, crontabLimitParameterSet, k, timePeriod, number, k
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1037:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:1037:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1037:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:1037:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1037:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1037:73: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1038:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
            if (ev != null) {
                // EsperEPL2Grammar.g:1038:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1038:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                // EsperEPL2Grammar.g:1038:63: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1039:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
            if (at != null) {
                // EsperEPL2Grammar.g:1039:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1039:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                // EsperEPL2Grammar.g:1039:74: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1040:6: -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
            if (wh != null) {
                // EsperEPL2Grammar.g:1040:24: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1040:42: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1040:57: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:1040:68: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1041:6: -> ^( AFTER_LIMIT_EXPR outputLimitAfter )
            {
                // EsperEPL2Grammar.g:1041:9: ^( AFTER_LIMIT_EXPR outputLimitAfter )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimitAfter"
    // EsperEPL2Grammar.g:1044:1: outputLimitAfter : a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) ;
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token EVENTS326=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod324 = null;

        EsperEPL2GrammarParser.number_return number325 = null;


        CommonTree a_tree=null;
        CommonTree EVENTS326_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1045:2: (a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) )
            // EsperEPL2Grammar.g:1045:6: a= AFTER ( timePeriod | number EVENTS )
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter5759); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);

            // EsperEPL2Grammar.g:1045:14: ( timePeriod | number EVENTS )
            int alt128=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA128_1 = input.LA(2);

                if ( (LA128_1==MIN||(LA128_1>=TIMEPERIOD_DAY && LA128_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else if ( (LA128_1==EVENTS) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA128_2 = input.LA(2);

                if ( (LA128_2==MIN||(LA128_2>=TIMEPERIOD_DAY && LA128_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else if ( (LA128_2==EVENTS) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA128_3 = input.LA(2);

                if ( (LA128_3==EVENTS) ) {
                    alt128=2;
                }
                else if ( (LA128_3==MIN||(LA128_3>=TIMEPERIOD_DAY && LA128_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA128_4 = input.LA(2);

                if ( (LA128_4==EVENTS) ) {
                    alt128=2;
                }
                else if ( (LA128_4==MIN||(LA128_4>=TIMEPERIOD_DAY && LA128_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt128=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // EsperEPL2Grammar.g:1045:15: timePeriod
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter5762);
                    timePeriod324=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod324.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1045:28: number EVENTS
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter5766);
                    number325=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number325.getTree());
                    EVENTS326=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter5768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS326);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, timePeriod, AFTER
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1046:6: -> ^( AFTER ( timePeriod )? ( number )? )
            {
                // EsperEPL2Grammar.g:1046:9: ^( AFTER ( timePeriod )? ( number )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);

                // EsperEPL2Grammar.g:1046:17: ( timePeriod )?
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());

                }
                stream_timePeriod.reset();
                // EsperEPL2Grammar.g:1046:29: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimitAfter"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:1049:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:1052:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:1052:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:1052:6: (n1= numberconstant | i1= IDENT )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==NUM_DOUBLE||LA129_0==PLUS||LA129_0==MINUS||LA129_0==NUM_INT||(LA129_0>=NUM_LONG && LA129_0<=NUM_FLOAT)) ) {
                alt129=1;
            }
            else if ( (LA129_0==IDENT) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // EsperEPL2Grammar.g:1052:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5814);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1052:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5820); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1052:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==OFFSET||LA132_0==COMMA) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // EsperEPL2Grammar.g:1052:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:1052:38: (c= COMMA | o= OFFSET )
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==COMMA) ) {
                        alt130=1;
                    }
                    else if ( (LA130_0==OFFSET) ) {
                        alt130=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 0, input);

                        throw nvae;
                    }
                    switch (alt130) {
                        case 1 :
                            // EsperEPL2Grammar.g:1052:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5827); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1052:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5833); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1052:59: (n2= numberconstant | i2= IDENT )
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==NUM_DOUBLE||LA131_0==PLUS||LA131_0==MINUS||LA131_0==NUM_INT||(LA131_0>=NUM_LONG && LA131_0<=NUM_FLOAT)) ) {
                        alt131=1;
                    }
                    else if ( (LA131_0==IDENT) ) {
                        alt131=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 0, input);

                        throw nvae;
                    }
                    switch (alt131) {
                        case 1 :
                            // EsperEPL2Grammar.g:1052:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5839);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1052:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5845); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: o, n1, c, i2, i1, n2
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"token n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"token n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1053:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:1053:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1053:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:1053:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:1053:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:1053:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:1053:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:1053:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:1056:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN327=null;
        Token COMMA329=null;
        Token COMMA331=null;
        Token COMMA333=null;
        Token COMMA335=null;
        Token COMMA337=null;
        Token RPAREN339=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime328 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime330 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime332 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime334 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime336 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime338 = null;


        CommonTree LPAREN327_tree=null;
        CommonTree COMMA329_tree=null;
        CommonTree COMMA331_tree=null;
        CommonTree COMMA333_tree=null;
        CommonTree COMMA335_tree=null;
        CommonTree COMMA337_tree=null;
        CommonTree RPAREN339_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:1057:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:1057:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN327=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5897); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN327);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5899);
            expressionWithTime328=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime328.getTree());
            COMMA329=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5901); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA329);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5903);
            expressionWithTime330=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime330.getTree());
            COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5905); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA331);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5907);
            expressionWithTime332=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime332.getTree());
            COMMA333=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5909); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA333);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5911);
            expressionWithTime334=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime334.getTree());
            COMMA335=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5913); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA335);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5915);
            expressionWithTime336=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime336.getTree());
            // EsperEPL2Grammar.g:1057:130: ( COMMA expressionWithTime )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==COMMA) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // EsperEPL2Grammar.g:1057:131: COMMA expressionWithTime
                    {
                    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5918); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA337);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5920);
                    expressionWithTime338=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime338.getTree());

                    }
                    break;

            }

            RPAREN339=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN339);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1058:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:1058:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:1058:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:1061:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN340=null;
        Token THEN342=null;
        EsperEPL2GrammarParser.expression_return expression341 = null;

        EsperEPL2GrammarParser.expression_return expression343 = null;


        CommonTree WHEN340_tree=null;
        CommonTree THEN342_tree=null;

        try {
            // EsperEPL2Grammar.g:1062:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:1062:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1062:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:1062:5: WHEN expression THEN expression
            {
            WHEN340=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5954); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5957);
            expression341=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression341.getTree());
            THEN342=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5959); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5962);
            expression343=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression343.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:1065:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE344=null;
        EsperEPL2GrammarParser.expression_return expression345 = null;


        CommonTree ELSE344_tree=null;

        try {
            // EsperEPL2Grammar.g:1066:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:1066:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1066:4: ( ELSE expression )
            // EsperEPL2Grammar.g:1066:5: ELSE expression
            {
            ELSE344=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5975); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5978);
            expression345=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression345.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:1070:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression346 = null;



        try {
            // EsperEPL2Grammar.g:1071:2: ( caseExpression )
            // EsperEPL2Grammar.g:1071:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression5991);
            caseExpression346=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression346.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:1074:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE347=null;
        Token END350=null;
        Token CASE351=null;
        Token END355=null;
        EsperEPL2GrammarParser.whenClause_return whenClause348 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause349 = null;

        EsperEPL2GrammarParser.expression_return expression352 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause353 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause354 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression356 = null;


        CommonTree CASE347_tree=null;
        CommonTree END350_tree=null;
        CommonTree CASE351_tree=null;
        CommonTree END355_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:1075:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt138=3;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==CASE) ) {
                int LA138_1 = input.LA(2);

                if ( (LA138_1==WHEN) ) {
                    alt138=1;
                }
                else if ( (LA138_1==WINDOW||LA138_1==ESCAPE||(LA138_1>=NOT_EXPR && LA138_1<=EVERY_EXPR)||(LA138_1>=SUM && LA138_1<=COUNT)||LA138_1==CASE||LA138_1==OUTER||(LA138_1>=JOIN && LA138_1<=FULL)||(LA138_1>=EVENTS && LA138_1<=LAST)||(LA138_1>=UNIDIRECTIONAL && LA138_1<=CURRENT_TIMESTAMP)||LA138_1==SNAPSHOT||(LA138_1>=VARIABLE && LA138_1<=INDEX)||(LA138_1>=BOOLEAN_TRUE && LA138_1<=VALUE_NULL)||(LA138_1>=DEFINE && LA138_1<=MATCHES)||LA138_1==WHILE||LA138_1==NUM_DOUBLE||LA138_1==IDENT||LA138_1==LPAREN||(LA138_1>=PLUS && LA138_1<=QUESTION)||(LA138_1>=STRING_LITERAL && LA138_1<=QUOTED_STRING_LITERAL)||LA138_1==MINUS||LA138_1==LCURLY||LA138_1==NUM_INT||(LA138_1>=TICKED_STRING_LITERAL && LA138_1<=NUM_FLOAT)) ) {
                    alt138=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA138_0==WINDOW||LA138_0==ESCAPE||(LA138_0>=NOT_EXPR && LA138_0<=EVERY_EXPR)||(LA138_0>=SUM && LA138_0<=COUNT)||LA138_0==OUTER||(LA138_0>=JOIN && LA138_0<=FULL)||(LA138_0>=EVENTS && LA138_0<=LAST)||(LA138_0>=UNIDIRECTIONAL && LA138_0<=CURRENT_TIMESTAMP)||LA138_0==SNAPSHOT||(LA138_0>=VARIABLE && LA138_0<=INDEX)||(LA138_0>=BOOLEAN_TRUE && LA138_0<=VALUE_NULL)||(LA138_0>=DEFINE && LA138_0<=MATCHES)||LA138_0==WHILE||LA138_0==NUM_DOUBLE||LA138_0==IDENT||LA138_0==LPAREN||(LA138_0>=PLUS && LA138_0<=QUESTION)||(LA138_0>=STRING_LITERAL && LA138_0<=QUOTED_STRING_LITERAL)||LA138_0==MINUS||LA138_0==LCURLY||LA138_0==NUM_INT||(LA138_0>=TICKED_STRING_LITERAL && LA138_0<=NUM_FLOAT)) ) {
                alt138=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    // EsperEPL2Grammar.g:1075:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE347=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE347_tree = (CommonTree)adaptor.create(CASE347);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE347_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1075:52: ( whenClause )+
                    int cnt134=0;
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==WHEN) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1075:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6008);
                    	    whenClause348=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause348.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt134 >= 1 ) break loop134;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(134, input);
                                throw eee;
                        }
                        cnt134++;
                    } while (true);

                    // EsperEPL2Grammar.g:1075:64: ( elseClause )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==ELSE) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // EsperEPL2Grammar.g:1075:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6011);
                            elseClause349=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause349.getTree());

                            }
                            break;

                    }

                    END350=(Token)match(input,END,FOLLOW_END_in_caseExpression6014); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1076:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE351=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE351);

                    pushFollow(FOLLOW_expression_in_caseExpression6027);
                    expression352=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression352.getTree());
                    // EsperEPL2Grammar.g:1076:62: ( whenClause )+
                    int cnt136=0;
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==WHEN) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1076:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6029);
                    	    whenClause353=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause353.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt136 >= 1 ) break loop136;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(136, input);
                                throw eee;
                        }
                        cnt136++;
                    } while (true);

                    // EsperEPL2Grammar.g:1076:74: ( elseClause )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==ELSE) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // EsperEPL2Grammar.g:1076:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6032);
                            elseClause354=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause354.getTree());

                            }
                            break;

                    }

                    END355=(Token)match(input,END,FOLLOW_END_in_caseExpression6035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END355);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: expression, whenClause, elseClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1077:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:1077:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:1077:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1078:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6059);
                    evalOrExpression356=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression356.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:1081:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression357 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression358 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:1082:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:1082:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6070);
            evalAndExpression357=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression357.getTree());
            // EsperEPL2Grammar.g:1082:22: (op= OR_EXPR evalAndExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==OR_EXPR) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1082:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6075); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6077);
            	    evalAndExpression358=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression358.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1083:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:1083:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:1083:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1084:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:1087:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression359 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression360 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:1088:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:1088:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6109);
            bitWiseExpression359=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression359.getTree());
            // EsperEPL2Grammar.g:1088:22: (op= AND_EXPR bitWiseExpression )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==AND_EXPR) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1088:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6114); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6116);
            	    bitWiseExpression360=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression360.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1089:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:1089:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1090:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:1093:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND362=null;
        Token BOR363=null;
        Token BXOR364=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression361 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression365 = null;


        CommonTree BAND362_tree=null;
        CommonTree BOR363_tree=null;
        CommonTree BXOR364_tree=null;

        try {
            // EsperEPL2Grammar.g:1094:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1094:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6148);
            negatedExpression361=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression361.getTree());
            // EsperEPL2Grammar.g:1094:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==BOR||(LA142_0>=BAND && LA142_0<=BXOR)) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1094:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1094:24: ( BAND | BOR | BXOR )
            	    int alt141=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt141=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt141=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt141=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 141, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt141) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1094:25: BAND
            	            {
            	            BAND362=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6153); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND362_tree = (CommonTree)adaptor.create(BAND362);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND362_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1094:31: BOR
            	            {
            	            BOR363=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6156); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR363_tree = (CommonTree)adaptor.create(BOR363);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR363_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1094:36: BXOR
            	            {
            	            BXOR364=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6159); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR364_tree = (CommonTree)adaptor.create(BXOR364);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR364_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6163);
            	    negatedExpression365=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression365.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1097:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR367=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression366 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression368 = null;


        CommonTree NOT_EXPR367_tree=null;

        try {
            // EsperEPL2Grammar.g:1098:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==WINDOW||LA143_0==ESCAPE||LA143_0==EVERY_EXPR||(LA143_0>=SUM && LA143_0<=COUNT)||LA143_0==OUTER||(LA143_0>=JOIN && LA143_0<=FULL)||(LA143_0>=EVENTS && LA143_0<=LAST)||(LA143_0>=UNIDIRECTIONAL && LA143_0<=CURRENT_TIMESTAMP)||LA143_0==SNAPSHOT||(LA143_0>=VARIABLE && LA143_0<=INDEX)||(LA143_0>=BOOLEAN_TRUE && LA143_0<=VALUE_NULL)||(LA143_0>=DEFINE && LA143_0<=MATCHES)||LA143_0==WHILE||LA143_0==NUM_DOUBLE||LA143_0==IDENT||LA143_0==LPAREN||(LA143_0>=PLUS && LA143_0<=QUESTION)||(LA143_0>=STRING_LITERAL && LA143_0<=QUOTED_STRING_LITERAL)||LA143_0==MINUS||LA143_0==LCURLY||LA143_0==NUM_INT||(LA143_0>=TICKED_STRING_LITERAL && LA143_0<=NUM_FLOAT)) ) {
                alt143=1;
            }
            else if ( (LA143_0==NOT_EXPR) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // EsperEPL2Grammar.g:1098:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6178);
                    evalEqualsExpression366=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression366.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1099:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR367=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6184); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR367_tree = (CommonTree)adaptor.create(NOT_EXPR367);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR367_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6187);
                    evalEqualsExpression368=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression368.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1102:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR370=null;
        Token LPAREN372=null;
        Token RPAREN374=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression369 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression371 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList373 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression375 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR370_tree=null;
        CommonTree LPAREN372_tree=null;
        CommonTree RPAREN374_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1103:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1103:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6200);
            evalRelationalExpression369=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression369.getTree());
            // EsperEPL2Grammar.g:1103:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==IS||LA149_0==EQUALS||(LA149_0>=SQL_NE && LA149_0<=NOT_EQUAL)) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1104:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1104:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt144=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt144=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA144_2 = input.LA(2);

            	        if ( (LA144_2==NOT_EXPR) ) {
            	            alt144=3;
            	        }
            	        else if ( (LA144_2==WINDOW||LA144_2==ESCAPE||LA144_2==EVERY_EXPR||(LA144_2>=SUM && LA144_2<=COUNT)||LA144_2==OUTER||(LA144_2>=JOIN && LA144_2<=FULL)||(LA144_2>=ALL && LA144_2<=SOME)||(LA144_2>=EVENTS && LA144_2<=LAST)||(LA144_2>=UNIDIRECTIONAL && LA144_2<=CURRENT_TIMESTAMP)||LA144_2==SNAPSHOT||(LA144_2>=VARIABLE && LA144_2<=INDEX)||(LA144_2>=BOOLEAN_TRUE && LA144_2<=VALUE_NULL)||(LA144_2>=DEFINE && LA144_2<=MATCHES)||LA144_2==WHILE||LA144_2==NUM_DOUBLE||LA144_2==IDENT||LA144_2==LPAREN||(LA144_2>=PLUS && LA144_2<=QUESTION)||(LA144_2>=STRING_LITERAL && LA144_2<=QUOTED_STRING_LITERAL)||LA144_2==MINUS||LA144_2==LCURLY||LA144_2==NUM_INT||(LA144_2>=TICKED_STRING_LITERAL && LA144_2<=NUM_FLOAT)) ) {
            	            alt144=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 144, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt144=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt144=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 144, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt144) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1104:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6213); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1105:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6231); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1106:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6245); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR370=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6247); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR370);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1107:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6261); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1108:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6275); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1110:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt148=2;
            	    int LA148_0 = input.LA(1);

            	    if ( (LA148_0==WINDOW||LA148_0==ESCAPE||LA148_0==EVERY_EXPR||(LA148_0>=SUM && LA148_0<=COUNT)||LA148_0==OUTER||(LA148_0>=JOIN && LA148_0<=FULL)||(LA148_0>=EVENTS && LA148_0<=LAST)||(LA148_0>=UNIDIRECTIONAL && LA148_0<=CURRENT_TIMESTAMP)||LA148_0==SNAPSHOT||(LA148_0>=VARIABLE && LA148_0<=INDEX)||(LA148_0>=BOOLEAN_TRUE && LA148_0<=VALUE_NULL)||(LA148_0>=DEFINE && LA148_0<=MATCHES)||LA148_0==WHILE||LA148_0==NUM_DOUBLE||LA148_0==IDENT||LA148_0==LPAREN||(LA148_0>=PLUS && LA148_0<=QUESTION)||(LA148_0>=STRING_LITERAL && LA148_0<=QUOTED_STRING_LITERAL)||LA148_0==MINUS||LA148_0==LCURLY||LA148_0==NUM_INT||(LA148_0>=TICKED_STRING_LITERAL && LA148_0<=NUM_FLOAT)) ) {
            	        alt148=1;
            	    }
            	    else if ( ((LA148_0>=ALL && LA148_0<=SOME)) ) {
            	        alt148=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 148, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt148) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1111:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6305);
            	            evalRelationalExpression371=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression371.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1112:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1112:13: (a= ANY | a= SOME | a= ALL )
            	            int alt145=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt145=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt145=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt145=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 145, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt145) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1112:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6322); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1112:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6328); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1112:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6334); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1112:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt147=2;
            	            int LA147_0 = input.LA(1);

            	            if ( (LA147_0==LPAREN) ) {
            	                int LA147_1 = input.LA(2);

            	                if ( (LA147_1==SELECT) ) {
            	                    alt147=2;
            	                }
            	                else if ( (LA147_1==WINDOW||LA147_1==ESCAPE||(LA147_1>=NOT_EXPR && LA147_1<=EVERY_EXPR)||(LA147_1>=SUM && LA147_1<=COUNT)||LA147_1==CASE||LA147_1==OUTER||(LA147_1>=JOIN && LA147_1<=FULL)||(LA147_1>=EVENTS && LA147_1<=LAST)||(LA147_1>=UNIDIRECTIONAL && LA147_1<=CURRENT_TIMESTAMP)||LA147_1==SNAPSHOT||(LA147_1>=VARIABLE && LA147_1<=INDEX)||(LA147_1>=BOOLEAN_TRUE && LA147_1<=VALUE_NULL)||(LA147_1>=DEFINE && LA147_1<=MATCHES)||LA147_1==WHILE||LA147_1==NUM_DOUBLE||LA147_1==IDENT||(LA147_1>=LPAREN && LA147_1<=RPAREN)||(LA147_1>=PLUS && LA147_1<=QUESTION)||(LA147_1>=STRING_LITERAL && LA147_1<=QUOTED_STRING_LITERAL)||LA147_1==MINUS||LA147_1==LCURLY||LA147_1==NUM_INT||(LA147_1>=TICKED_STRING_LITERAL && LA147_1<=NUM_FLOAT)) ) {
            	                    alt147=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 147, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 147, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt147) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1112:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1112:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1112:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN372=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6340); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN372);

            	                    // EsperEPL2Grammar.g:1112:48: ( expressionList )?
            	                    int alt146=2;
            	                    int LA146_0 = input.LA(1);

            	                    if ( (LA146_0==WINDOW||LA146_0==ESCAPE||(LA146_0>=NOT_EXPR && LA146_0<=EVERY_EXPR)||(LA146_0>=SUM && LA146_0<=COUNT)||LA146_0==CASE||LA146_0==OUTER||(LA146_0>=JOIN && LA146_0<=FULL)||(LA146_0>=EVENTS && LA146_0<=LAST)||(LA146_0>=UNIDIRECTIONAL && LA146_0<=CURRENT_TIMESTAMP)||LA146_0==SNAPSHOT||(LA146_0>=VARIABLE && LA146_0<=INDEX)||(LA146_0>=BOOLEAN_TRUE && LA146_0<=VALUE_NULL)||(LA146_0>=DEFINE && LA146_0<=MATCHES)||LA146_0==WHILE||LA146_0==NUM_DOUBLE||LA146_0==IDENT||LA146_0==LPAREN||(LA146_0>=PLUS && LA146_0<=QUESTION)||(LA146_0>=STRING_LITERAL && LA146_0<=QUOTED_STRING_LITERAL)||LA146_0==MINUS||LA146_0==LCURLY||LA146_0==NUM_INT||(LA146_0>=TICKED_STRING_LITERAL && LA146_0<=NUM_FLOAT)) ) {
            	                        alt146=1;
            	                    }
            	                    switch (alt146) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1112:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6342);
            	                            expressionList373=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList373.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN374=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6345); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN374);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1112:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6350);
            	                    subSelectGroupExpression375=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression375.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);



            // AST REWRITE
            // elements: a, subSelectGroupExpression, subSelectGroupExpression, expressionList, evalRelationalExpression, evalRelationalExpression, evalRelationalExpression, expressionList, evalRelationalExpression, evalRelationalExpression, a
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1115:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1115:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1116:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1116:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1116:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1116:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1117:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1117:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1118:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1118:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1118:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1118:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1119:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1122:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN378=null;
        Token RPAREN380=null;
        Token COMMA384=null;
        Token IN_SET386=null;
        Token BETWEEN388=null;
        Token LIKE390=null;
        Token ESCAPE392=null;
        Token REGEXP394=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr376 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr377 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList379 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression381 = null;

        EsperEPL2GrammarParser.expression_return expression382 = null;

        EsperEPL2GrammarParser.expression_return expression383 = null;

        EsperEPL2GrammarParser.expression_return expression385 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery387 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList389 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr391 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant393 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr395 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN378_tree=null;
        CommonTree RPAREN380_tree=null;
        CommonTree COMMA384_tree=null;
        CommonTree IN_SET386_tree=null;
        CommonTree BETWEEN388_tree=null;
        CommonTree LIKE390_tree=null;
        CommonTree ESCAPE392_tree=null;
        CommonTree REGEXP394_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1123:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1123:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6478);
            concatenationExpr376=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr376.getTree());
            // EsperEPL2Grammar.g:1124:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==EOF||(LA163_0>=OR_EXPR && LA163_0<=AND_EXPR)||(LA163_0>=WHERE && LA163_0<=AS)||(LA163_0>=ELSE && LA163_0<=FROM)||LA163_0==IS||(LA163_0>=GROUP && LA163_0<=HAVING)||LA163_0==ALL||LA163_0==OUTPUT||LA163_0==INSERT||(LA163_0>=ORDER && LA163_0<=DESC)||LA163_0==PATTERN||(LA163_0>=TIMEPERIOD_SEC && LA163_0<=TIMEPERIOD_SECONDS)||LA163_0==ROW_LIMIT_EXPR||LA163_0==MEASURES||(LA163_0>=AFTER && LA163_0<=FOR)||LA163_0==COMMA||LA163_0==EQUALS||LA163_0==RPAREN||LA163_0==RBRACK||LA163_0==BOR||LA163_0==COLON||(LA163_0>=BAND && LA163_0<=GE)||LA163_0==RCURLY) ) {
                alt163=1;
            }
            else if ( ((LA163_0>=IN_SET && LA163_0<=REGEXP)||LA163_0==NOT_EXPR) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // EsperEPL2Grammar.g:1125:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1125:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1126:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1126:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( ((LA155_0>=LT && LA155_0<=GE)) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1127:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1127:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt150=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt150=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt150=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt150=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt150=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 150, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt150) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1127:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6510); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1127:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6514); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1127:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6518); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1127:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6522); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1128:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt154=2;
                    	    int LA154_0 = input.LA(1);

                    	    if ( (LA154_0==WINDOW||LA154_0==ESCAPE||LA154_0==EVERY_EXPR||(LA154_0>=SUM && LA154_0<=COUNT)||LA154_0==OUTER||(LA154_0>=JOIN && LA154_0<=FULL)||(LA154_0>=EVENTS && LA154_0<=LAST)||(LA154_0>=UNIDIRECTIONAL && LA154_0<=CURRENT_TIMESTAMP)||LA154_0==SNAPSHOT||(LA154_0>=VARIABLE && LA154_0<=INDEX)||(LA154_0>=BOOLEAN_TRUE && LA154_0<=VALUE_NULL)||(LA154_0>=DEFINE && LA154_0<=MATCHES)||LA154_0==WHILE||LA154_0==NUM_DOUBLE||LA154_0==IDENT||LA154_0==LPAREN||(LA154_0>=PLUS && LA154_0<=QUESTION)||(LA154_0>=STRING_LITERAL && LA154_0<=QUOTED_STRING_LITERAL)||LA154_0==MINUS||LA154_0==LCURLY||LA154_0==NUM_INT||(LA154_0>=TICKED_STRING_LITERAL && LA154_0<=NUM_FLOAT)) ) {
                    	        alt154=1;
                    	    }
                    	    else if ( ((LA154_0>=ALL && LA154_0<=SOME)) ) {
                    	        alt154=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 154, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt154) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1129:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6546);
                    	            concatenationExpr377=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr377.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1130:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1130:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt151=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt151=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt151=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt151=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 151, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt151) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1130:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6563); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1130:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6569); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1130:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6575); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1130:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt153=2;
                    	            int LA153_0 = input.LA(1);

                    	            if ( (LA153_0==LPAREN) ) {
                    	                int LA153_1 = input.LA(2);

                    	                if ( (LA153_1==SELECT) ) {
                    	                    alt153=2;
                    	                }
                    	                else if ( (LA153_1==WINDOW||LA153_1==ESCAPE||(LA153_1>=NOT_EXPR && LA153_1<=EVERY_EXPR)||(LA153_1>=SUM && LA153_1<=COUNT)||LA153_1==CASE||LA153_1==OUTER||(LA153_1>=JOIN && LA153_1<=FULL)||(LA153_1>=EVENTS && LA153_1<=LAST)||(LA153_1>=UNIDIRECTIONAL && LA153_1<=CURRENT_TIMESTAMP)||LA153_1==SNAPSHOT||(LA153_1>=VARIABLE && LA153_1<=INDEX)||(LA153_1>=BOOLEAN_TRUE && LA153_1<=VALUE_NULL)||(LA153_1>=DEFINE && LA153_1<=MATCHES)||LA153_1==WHILE||LA153_1==NUM_DOUBLE||LA153_1==IDENT||(LA153_1>=LPAREN && LA153_1<=RPAREN)||(LA153_1>=PLUS && LA153_1<=QUESTION)||(LA153_1>=STRING_LITERAL && LA153_1<=QUOTED_STRING_LITERAL)||LA153_1==MINUS||LA153_1==LCURLY||LA153_1==NUM_INT||(LA153_1>=TICKED_STRING_LITERAL && LA153_1<=NUM_FLOAT)) ) {
                    	                    alt153=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 153, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 153, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt153) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1130:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1130:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1130:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN378=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6581); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN378);

                    	                    // EsperEPL2Grammar.g:1130:48: ( expressionList )?
                    	                    int alt152=2;
                    	                    int LA152_0 = input.LA(1);

                    	                    if ( (LA152_0==WINDOW||LA152_0==ESCAPE||(LA152_0>=NOT_EXPR && LA152_0<=EVERY_EXPR)||(LA152_0>=SUM && LA152_0<=COUNT)||LA152_0==CASE||LA152_0==OUTER||(LA152_0>=JOIN && LA152_0<=FULL)||(LA152_0>=EVENTS && LA152_0<=LAST)||(LA152_0>=UNIDIRECTIONAL && LA152_0<=CURRENT_TIMESTAMP)||LA152_0==SNAPSHOT||(LA152_0>=VARIABLE && LA152_0<=INDEX)||(LA152_0>=BOOLEAN_TRUE && LA152_0<=VALUE_NULL)||(LA152_0>=DEFINE && LA152_0<=MATCHES)||LA152_0==WHILE||LA152_0==NUM_DOUBLE||LA152_0==IDENT||LA152_0==LPAREN||(LA152_0>=PLUS && LA152_0<=QUESTION)||(LA152_0>=STRING_LITERAL && LA152_0<=QUOTED_STRING_LITERAL)||LA152_0==MINUS||LA152_0==LCURLY||LA152_0==NUM_INT||(LA152_0>=TICKED_STRING_LITERAL && LA152_0<=NUM_FLOAT)) ) {
                    	                        alt152=1;
                    	                    }
                    	                    switch (alt152) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1130:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6583);
                    	                            expressionList379=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList379.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN380=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6586); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN380);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1130:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6591);
                    	                    subSelectGroupExpression381=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression381.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: expressionList, concatenationExpr, subSelectGroupExpression, concatenationExpr, g, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1134:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1134:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1135:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1135:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1135:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1135:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1136:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1138:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1138:6: (n= NOT_EXPR )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==NOT_EXPR) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // EsperEPL2Grammar.g:1138:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6687); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1139:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt162=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA162_1 = input.LA(2);

                        if ( (LA162_1==LPAREN) ) {
                            int LA162_5 = input.LA(3);

                            if ( (LA162_5==SELECT) ) {
                                alt162=2;
                            }
                            else if ( (LA162_5==WINDOW||LA162_5==ESCAPE||(LA162_5>=NOT_EXPR && LA162_5<=EVERY_EXPR)||(LA162_5>=SUM && LA162_5<=COUNT)||LA162_5==CASE||LA162_5==OUTER||(LA162_5>=JOIN && LA162_5<=FULL)||(LA162_5>=EVENTS && LA162_5<=LAST)||(LA162_5>=UNIDIRECTIONAL && LA162_5<=CURRENT_TIMESTAMP)||LA162_5==SNAPSHOT||(LA162_5>=VARIABLE && LA162_5<=INDEX)||(LA162_5>=BOOLEAN_TRUE && LA162_5<=VALUE_NULL)||(LA162_5>=DEFINE && LA162_5<=MATCHES)||LA162_5==WHILE||LA162_5==NUM_DOUBLE||LA162_5==IDENT||LA162_5==LPAREN||(LA162_5>=PLUS && LA162_5<=QUESTION)||(LA162_5>=STRING_LITERAL && LA162_5<=QUOTED_STRING_LITERAL)||LA162_5==MINUS||LA162_5==LCURLY||LA162_5==NUM_INT||(LA162_5>=TICKED_STRING_LITERAL && LA162_5<=NUM_FLOAT)) ) {
                                alt162=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 162, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA162_1==LBRACK) ) {
                            alt162=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 162, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt162=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt162=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt162=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 162, 0, input);

                        throw nvae;
                    }

                    switch (alt162) {
                        case 1 :
                            // EsperEPL2Grammar.g:1142:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1142:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1142:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6714); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1143:8: (l= LPAREN | l= LBRACK )
                            int alt157=2;
                            int LA157_0 = input.LA(1);

                            if ( (LA157_0==LPAREN) ) {
                                alt157=1;
                            }
                            else if ( (LA157_0==LBRACK) ) {
                                alt157=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 157, 0, input);

                                throw nvae;
                            }
                            switch (alt157) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1143:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6726); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1143:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6732); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6735);
                            expression382=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression382.getTree());
                            // EsperEPL2Grammar.g:1144:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt159=2;
                            int LA159_0 = input.LA(1);

                            if ( (LA159_0==COLON) ) {
                                alt159=1;
                            }
                            else if ( (LA159_0==COMMA||LA159_0==RPAREN||LA159_0==RBRACK) ) {
                                alt159=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 159, 0, input);

                                throw nvae;
                            }
                            switch (alt159) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1145:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1145:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1145:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6757); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1145:20: ( expression )
                                    // EsperEPL2Grammar.g:1145:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6760);
                                    expression383=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression383.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1147:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1147:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1147:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1147:10: ( COMMA expression )*
                                    loop158:
                                    do {
                                        int alt158=2;
                                        int LA158_0 = input.LA(1);

                                        if ( (LA158_0==COMMA) ) {
                                            alt158=1;
                                        }


                                        switch (alt158) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1147:11: COMMA expression
                                    	    {
                                    	    COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6786); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA384);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6788);
                                    	    expression385=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression385.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop158;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1149:8: (r= RPAREN | r= RBRACK )
                            int alt160=2;
                            int LA160_0 = input.LA(1);

                            if ( (LA160_0==RPAREN) ) {
                                alt160=1;
                            }
                            else if ( (LA160_0==RBRACK) ) {
                                alt160=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 160, 0, input);

                                throw nvae;
                            }
                            switch (alt160) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1149:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6814); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1149:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6820); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: r, r, concatenationExpr, expression, l, concatenationExpr, expression, expression, r, r, concatenationExpr, IN_SET, concatenationExpr, l, l, l, expression
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1151:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1151:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1152:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1152:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1153:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1153:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1154:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1154:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1155:7: IN_SET inSubSelectQuery
                            {
                            IN_SET386=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6943); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET386);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6945);
                            inSubSelectQuery387=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery387.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, inSubSelectQuery, inSubSelectQuery
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1156:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1156:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1157:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1157:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1158:7: BETWEEN betweenList
                            {
                            BETWEEN388=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression6991); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN388);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression6993);
                            betweenList389=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList389.getTree());


                            // AST REWRITE
                            // elements: betweenList, concatenationExpr, concatenationExpr, BETWEEN, betweenList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1159:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1159:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1160:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1160:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1161:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE390=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7043); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE390);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7045);
                            concatenationExpr391=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr391.getTree());
                            // EsperEPL2Grammar.g:1161:30: ( ESCAPE stringconstant )?
                            int alt161=2;
                            int LA161_0 = input.LA(1);

                            if ( (LA161_0==ESCAPE) ) {
                                alt161=1;
                            }
                            switch (alt161) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1161:31: ESCAPE stringconstant
                                    {
                                    ESCAPE392=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7048); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE392);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7050);
                                    stringconstant393=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant393.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: stringconstant, concatenationExpr, stringconstant, LIKE, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1162:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1162:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1162:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1162:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1163:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1163:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1163:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1163:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1164:7: REGEXP concatenationExpr
                            {
                            REGEXP394=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7102); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP394);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7104);
                            concatenationExpr395=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr395.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, concatenationExpr, REGEXP
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1165:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1165:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1166:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1166:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1171:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr396 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1172:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1172:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7166);
            subQueryExpr396=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr396.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1173:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1173:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1176:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR399=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression397 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression398 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression400 = null;


        CommonTree c_tree=null;
        CommonTree LOR399_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1177:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1177:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7191);
            additiveExpression397=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression397.getTree());
            // EsperEPL2Grammar.g:1177:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==LOR) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // EsperEPL2Grammar.g:1177:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7199);
                    additiveExpression398=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression398.getTree());
                    // EsperEPL2Grammar.g:1177:50: ( LOR additiveExpression )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==LOR) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1177:52: LOR additiveExpression
                    	    {
                    	    LOR399=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7203); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR399);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7205);
                    	    additiveExpression400=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression400.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1178:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1178:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1179:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1182:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS402=null;
        Token MINUS403=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression401 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression404 = null;


        CommonTree PLUS402_tree=null;
        CommonTree MINUS403_tree=null;

        try {
            // EsperEPL2Grammar.g:1183:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1183:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7246);
            multiplyExpression401=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression401.getTree());
            // EsperEPL2Grammar.g:1183:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==PLUS||LA167_0==MINUS) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1183:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1183:25: ( PLUS | MINUS )
            	    int alt166=2;
            	    int LA166_0 = input.LA(1);

            	    if ( (LA166_0==PLUS) ) {
            	        alt166=1;
            	    }
            	    else if ( (LA166_0==MINUS) ) {
            	        alt166=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 166, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt166) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1183:26: PLUS
            	            {
            	            PLUS402=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7251); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS402_tree = (CommonTree)adaptor.create(PLUS402);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS402_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1183:32: MINUS
            	            {
            	            MINUS403=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7254); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS403_tree = (CommonTree)adaptor.create(MINUS403);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS403_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7258);
            	    multiplyExpression404=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression404.getTree());

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1186:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR406=null;
        Token DIV407=null;
        Token MOD408=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression405 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression409 = null;


        CommonTree STAR406_tree=null;
        CommonTree DIV407_tree=null;
        CommonTree MOD408_tree=null;

        try {
            // EsperEPL2Grammar.g:1187:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1187:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7272);
            unaryExpression405=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression405.getTree());
            // EsperEPL2Grammar.g:1187:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==STAR||(LA169_0>=DIV && LA169_0<=MOD)) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1187:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1187:22: ( STAR | DIV | MOD )
            	    int alt168=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt168=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt168=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt168=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 168, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt168) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1187:23: STAR
            	            {
            	            STAR406=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7277); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR406_tree = (CommonTree)adaptor.create(STAR406);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR406_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1187:29: DIV
            	            {
            	            DIV407=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7280); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV407_tree = (CommonTree)adaptor.create(DIV407);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV407_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1187:34: MOD
            	            {
            	            MOD408=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7283); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD408_tree = (CommonTree)adaptor.create(MOD408);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD408_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7287);
            	    unaryExpression409=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression409.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1190:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS410=null;
        Token LPAREN414=null;
        Token RPAREN416=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty411 = null;

        EsperEPL2GrammarParser.constant_return constant412 = null;

        EsperEPL2GrammarParser.substitution_return substitution413 = null;

        EsperEPL2GrammarParser.expression_return expression415 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction417 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc418 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression419 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression420 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression421 = null;


        CommonTree MINUS410_tree=null;
        CommonTree LPAREN414_tree=null;
        CommonTree RPAREN416_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1191:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt170=9;
            alt170 = dfa170.predict(input);
            switch (alt170) {
                case 1 :
                    // EsperEPL2Grammar.g:1191:4: MINUS eventProperty
                    {
                    MINUS410=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS410);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7304);
                    eventProperty411=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty411.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1191:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1191:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1192:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression7317);
                    constant412=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant412.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1193:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression7322);
                    substitution413=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution413.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1194:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN414=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7327); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression7330);
                    expression415=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression415.getTree());
                    RPAREN416=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7332); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1195:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7338);
                    eventPropertyOrLibFunction417=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction417.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1196:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1196:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1196:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7350);
                    builtinFunc418=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc418.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1197:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7356);
                    arrayExpression419=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression419.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1198:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7361);
                    subSelectExpression420=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression420.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1199:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7366);
                    existsSubSelectExpression421=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression421.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1202:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr422 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1203:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1203:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7383);
            subQueryExpr422=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr422.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1204:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1204:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1207:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr423 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1208:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1208:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7405);
            subQueryExpr423=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr423.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1209:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1209:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1212:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS424=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr425 = null;


        CommonTree EXISTS424_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1213:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1213:4: EXISTS subQueryExpr
            {
            EXISTS424=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS424);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7429);
            subQueryExpr425=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr425.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1214:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1214:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1217:1: subQueryExpr : LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN426=null;
        Token SELECT427=null;
        Token DISTINCT428=null;
        Token FROM430=null;
        Token WHERE432=null;
        Token RPAREN434=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement429 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr431 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause433 = null;


        CommonTree LPAREN426_tree=null;
        CommonTree SELECT427_tree=null;
        CommonTree DISTINCT428_tree=null;
        CommonTree FROM430_tree=null;
        CommonTree WHERE432_tree=null;
        CommonTree RPAREN434_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1220:2: ( LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1220:4: LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN426=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7462); if (state.failed) return retval;
            SELECT427=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7468); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1221:11: ( DISTINCT )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==DISTINCT) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1221:11: DISTINCT
                    {
                    DISTINCT428=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7471); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT428_tree = (CommonTree)adaptor.create(DISTINCT428);
                    adaptor.addChild(root_0, DISTINCT428_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr7474);
            selectionListElement429=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement429.getTree());
            FROM430=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7481); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7484);
            subSelectFilterExpr431=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr431.getTree());
            // EsperEPL2Grammar.g:1223:6: ( WHERE whereClause )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==WHERE) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1223:7: WHERE whereClause
                    {
                    WHERE432=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7492); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7495);
                    whereClause433=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause433.getTree());

                    }
                    break;

            }

            RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7504); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1227:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT436=null;
        Token DOT438=null;
        Token AS440=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression435 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression437 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression439 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT436_tree=null;
        CommonTree DOT438_tree=null;
        CommonTree AS440_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1230:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1230:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7528);
            eventFilterExpression435=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression435.getTree());
            // EsperEPL2Grammar.g:1231:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==DOT) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // EsperEPL2Grammar.g:1231:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT436=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7533); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT436);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7535);
                    viewExpression437=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression437.getTree());
                    // EsperEPL2Grammar.g:1231:23: ( DOT viewExpression )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==DOT) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1231:24: DOT viewExpression
                    	    {
                    	    DOT438=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7538); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT438);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7540);
                    	    viewExpression439=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression439.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1231:47: ( AS i= IDENT | i= IDENT )?
            int alt175=3;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==AS) ) {
                alt175=1;
            }
            else if ( (LA175_0==IDENT) ) {
                alt175=2;
            }
            switch (alt175) {
                case 1 :
                    // EsperEPL2Grammar.g:1231:48: AS i= IDENT
                    {
                    AS440=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS440);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1231:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7557); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1231:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt176=3;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==RETAINUNION) ) {
                alt176=1;
            }
            else if ( (LA176_0==RETAININTERSECTION) ) {
                alt176=2;
            }
            switch (alt176) {
                case 1 :
                    // EsperEPL2Grammar.g:1231:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1231:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7568); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: viewExpression, ru, ri, i, eventFilterExpression
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1232:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1232:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1232:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1232:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1232:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1232:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1235:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY441=null;
        Token COMMA443=null;
        Token RCURLY445=null;
        EsperEPL2GrammarParser.expression_return expression442 = null;

        EsperEPL2GrammarParser.expression_return expression444 = null;


        CommonTree LCURLY441_tree=null;
        CommonTree COMMA443_tree=null;
        CommonTree RCURLY445_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1236:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1236:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY441=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7608); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY441);

            // EsperEPL2Grammar.g:1236:11: ( expression ( COMMA expression )* )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==WINDOW||LA178_0==ESCAPE||(LA178_0>=NOT_EXPR && LA178_0<=EVERY_EXPR)||(LA178_0>=SUM && LA178_0<=COUNT)||LA178_0==CASE||LA178_0==OUTER||(LA178_0>=JOIN && LA178_0<=FULL)||(LA178_0>=EVENTS && LA178_0<=LAST)||(LA178_0>=UNIDIRECTIONAL && LA178_0<=CURRENT_TIMESTAMP)||LA178_0==SNAPSHOT||(LA178_0>=VARIABLE && LA178_0<=INDEX)||(LA178_0>=BOOLEAN_TRUE && LA178_0<=VALUE_NULL)||(LA178_0>=DEFINE && LA178_0<=MATCHES)||LA178_0==WHILE||LA178_0==NUM_DOUBLE||LA178_0==IDENT||LA178_0==LPAREN||(LA178_0>=PLUS && LA178_0<=QUESTION)||(LA178_0>=STRING_LITERAL && LA178_0<=QUOTED_STRING_LITERAL)||LA178_0==MINUS||LA178_0==LCURLY||LA178_0==NUM_INT||(LA178_0>=TICKED_STRING_LITERAL && LA178_0<=NUM_FLOAT)) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1236:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7611);
                    expression442=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression442.getTree());
                    // EsperEPL2Grammar.g:1236:23: ( COMMA expression )*
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==COMMA) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1236:24: COMMA expression
                    	    {
                    	    COMMA443=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7614); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA443);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression7616);
                    	    expression444=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression444.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop177;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY445=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7623); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY445);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1237:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1237:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1237:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1240:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | windowAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM446=null;
        Token LPAREN447=null;
        Token ALL448=null;
        Token DISTINCT449=null;
        Token RPAREN451=null;
        Token AVG452=null;
        Token LPAREN453=null;
        Token ALL454=null;
        Token DISTINCT455=null;
        Token RPAREN457=null;
        Token COUNT458=null;
        Token LPAREN459=null;
        Token ALL460=null;
        Token DISTINCT461=null;
        Token STAR463=null;
        Token RPAREN464=null;
        Token MEDIAN465=null;
        Token LPAREN466=null;
        Token ALL467=null;
        Token DISTINCT468=null;
        Token RPAREN470=null;
        Token STDDEV471=null;
        Token LPAREN472=null;
        Token ALL473=null;
        Token DISTINCT474=null;
        Token RPAREN476=null;
        Token AVEDEV477=null;
        Token LPAREN478=null;
        Token ALL479=null;
        Token DISTINCT480=null;
        Token RPAREN482=null;
        Token COALESCE486=null;
        Token LPAREN487=null;
        Token COMMA489=null;
        Token COMMA491=null;
        Token RPAREN493=null;
        Token PREVIOUS494=null;
        Token LPAREN495=null;
        Token COMMA497=null;
        Token RPAREN499=null;
        Token PRIOR500=null;
        Token LPAREN501=null;
        Token NUM_INT502=null;
        Token COMMA503=null;
        Token RPAREN505=null;
        Token INSTANCEOF506=null;
        Token LPAREN507=null;
        Token COMMA509=null;
        Token COMMA511=null;
        Token RPAREN513=null;
        Token CAST514=null;
        Token LPAREN515=null;
        Token COMMA517=null;
        Token AS518=null;
        Token RPAREN520=null;
        Token EXISTS521=null;
        Token LPAREN522=null;
        Token RPAREN524=null;
        Token CURRENT_TIMESTAMP525=null;
        Token LPAREN526=null;
        Token RPAREN527=null;
        EsperEPL2GrammarParser.expression_return expression450 = null;

        EsperEPL2GrammarParser.expression_return expression456 = null;

        EsperEPL2GrammarParser.expression_return expression462 = null;

        EsperEPL2GrammarParser.expression_return expression469 = null;

        EsperEPL2GrammarParser.expression_return expression475 = null;

        EsperEPL2GrammarParser.expression_return expression481 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation483 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation484 = null;

        EsperEPL2GrammarParser.windowAggregation_return windowAggregation485 = null;

        EsperEPL2GrammarParser.expression_return expression488 = null;

        EsperEPL2GrammarParser.expression_return expression490 = null;

        EsperEPL2GrammarParser.expression_return expression492 = null;

        EsperEPL2GrammarParser.expression_return expression496 = null;

        EsperEPL2GrammarParser.expression_return expression498 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty504 = null;

        EsperEPL2GrammarParser.expression_return expression508 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier510 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier512 = null;

        EsperEPL2GrammarParser.expression_return expression516 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier519 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty523 = null;


        CommonTree SUM446_tree=null;
        CommonTree LPAREN447_tree=null;
        CommonTree ALL448_tree=null;
        CommonTree DISTINCT449_tree=null;
        CommonTree RPAREN451_tree=null;
        CommonTree AVG452_tree=null;
        CommonTree LPAREN453_tree=null;
        CommonTree ALL454_tree=null;
        CommonTree DISTINCT455_tree=null;
        CommonTree RPAREN457_tree=null;
        CommonTree COUNT458_tree=null;
        CommonTree LPAREN459_tree=null;
        CommonTree ALL460_tree=null;
        CommonTree DISTINCT461_tree=null;
        CommonTree STAR463_tree=null;
        CommonTree RPAREN464_tree=null;
        CommonTree MEDIAN465_tree=null;
        CommonTree LPAREN466_tree=null;
        CommonTree ALL467_tree=null;
        CommonTree DISTINCT468_tree=null;
        CommonTree RPAREN470_tree=null;
        CommonTree STDDEV471_tree=null;
        CommonTree LPAREN472_tree=null;
        CommonTree ALL473_tree=null;
        CommonTree DISTINCT474_tree=null;
        CommonTree RPAREN476_tree=null;
        CommonTree AVEDEV477_tree=null;
        CommonTree LPAREN478_tree=null;
        CommonTree ALL479_tree=null;
        CommonTree DISTINCT480_tree=null;
        CommonTree RPAREN482_tree=null;
        CommonTree COALESCE486_tree=null;
        CommonTree LPAREN487_tree=null;
        CommonTree COMMA489_tree=null;
        CommonTree COMMA491_tree=null;
        CommonTree RPAREN493_tree=null;
        CommonTree PREVIOUS494_tree=null;
        CommonTree LPAREN495_tree=null;
        CommonTree COMMA497_tree=null;
        CommonTree RPAREN499_tree=null;
        CommonTree PRIOR500_tree=null;
        CommonTree LPAREN501_tree=null;
        CommonTree NUM_INT502_tree=null;
        CommonTree COMMA503_tree=null;
        CommonTree RPAREN505_tree=null;
        CommonTree INSTANCEOF506_tree=null;
        CommonTree LPAREN507_tree=null;
        CommonTree COMMA509_tree=null;
        CommonTree COMMA511_tree=null;
        CommonTree RPAREN513_tree=null;
        CommonTree CAST514_tree=null;
        CommonTree LPAREN515_tree=null;
        CommonTree COMMA517_tree=null;
        CommonTree AS518_tree=null;
        CommonTree RPAREN520_tree=null;
        CommonTree EXISTS521_tree=null;
        CommonTree LPAREN522_tree=null;
        CommonTree RPAREN524_tree=null;
        CommonTree CURRENT_TIMESTAMP525_tree=null;
        CommonTree LPAREN526_tree=null;
        CommonTree RPAREN527_tree=null;

        try {
            // EsperEPL2Grammar.g:1241:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | windowAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt191=16;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt191=1;
                }
                break;
            case AVG:
                {
                alt191=2;
                }
                break;
            case COUNT:
                {
                alt191=3;
                }
                break;
            case MEDIAN:
                {
                alt191=4;
                }
                break;
            case STDDEV:
                {
                alt191=5;
                }
                break;
            case AVEDEV:
                {
                alt191=6;
                }
                break;
            case FIRST:
                {
                alt191=7;
                }
                break;
            case LAST:
                {
                alt191=8;
                }
                break;
            case WINDOW:
                {
                alt191=9;
                }
                break;
            case COALESCE:
                {
                alt191=10;
                }
                break;
            case PREVIOUS:
                {
                alt191=11;
                }
                break;
            case PRIOR:
                {
                alt191=12;
                }
                break;
            case INSTANCEOF:
                {
                alt191=13;
                }
                break;
            case CAST:
                {
                alt191=14;
                }
                break;
            case EXISTS:
                {
                alt191=15;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt191=16;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 191, 0, input);

                throw nvae;
            }

            switch (alt191) {
                case 1 :
                    // EsperEPL2Grammar.g:1241:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM446=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7646); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM446_tree = (CommonTree)adaptor.create(SUM446);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM446_tree, root_0);
                    }
                    LPAREN447=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7649); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1241:17: ( ALL | DISTINCT )?
                    int alt179=3;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==ALL) ) {
                        alt179=1;
                    }
                    else if ( (LA179_0==DISTINCT) ) {
                        alt179=2;
                    }
                    switch (alt179) {
                        case 1 :
                            // EsperEPL2Grammar.g:1241:18: ALL
                            {
                            ALL448=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7653); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1241:25: DISTINCT
                            {
                            DISTINCT449=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7658); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT449_tree = (CommonTree)adaptor.create(DISTINCT449);
                            adaptor.addChild(root_0, DISTINCT449_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7662);
                    expression450=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression450.getTree());
                    RPAREN451=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7664); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1242:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG452=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7670); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG452_tree = (CommonTree)adaptor.create(AVG452);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG452_tree, root_0);
                    }
                    LPAREN453=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7673); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1242:17: ( ALL | DISTINCT )?
                    int alt180=3;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==ALL) ) {
                        alt180=1;
                    }
                    else if ( (LA180_0==DISTINCT) ) {
                        alt180=2;
                    }
                    switch (alt180) {
                        case 1 :
                            // EsperEPL2Grammar.g:1242:18: ALL
                            {
                            ALL454=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7677); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1242:25: DISTINCT
                            {
                            DISTINCT455=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7682); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT455_tree = (CommonTree)adaptor.create(DISTINCT455);
                            adaptor.addChild(root_0, DISTINCT455_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7686);
                    expression456=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression456.getTree());
                    RPAREN457=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7688); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1243:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT458=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7694); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT458_tree = (CommonTree)adaptor.create(COUNT458);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT458_tree, root_0);
                    }
                    LPAREN459=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7697); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1244:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==WINDOW||LA182_0==ESCAPE||(LA182_0>=NOT_EXPR && LA182_0<=EVERY_EXPR)||(LA182_0>=SUM && LA182_0<=COUNT)||LA182_0==CASE||LA182_0==OUTER||(LA182_0>=JOIN && LA182_0<=FULL)||(LA182_0>=DISTINCT && LA182_0<=ALL)||(LA182_0>=EVENTS && LA182_0<=LAST)||(LA182_0>=UNIDIRECTIONAL && LA182_0<=CURRENT_TIMESTAMP)||LA182_0==SNAPSHOT||(LA182_0>=VARIABLE && LA182_0<=INDEX)||(LA182_0>=BOOLEAN_TRUE && LA182_0<=VALUE_NULL)||(LA182_0>=DEFINE && LA182_0<=MATCHES)||LA182_0==WHILE||LA182_0==NUM_DOUBLE||LA182_0==IDENT||LA182_0==LPAREN||(LA182_0>=PLUS && LA182_0<=QUESTION)||(LA182_0>=STRING_LITERAL && LA182_0<=QUOTED_STRING_LITERAL)||LA182_0==MINUS||LA182_0==LCURLY||LA182_0==NUM_INT||(LA182_0>=TICKED_STRING_LITERAL && LA182_0<=NUM_FLOAT)) ) {
                        alt182=1;
                    }
                    else if ( (LA182_0==STAR) ) {
                        alt182=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 182, 0, input);

                        throw nvae;
                    }
                    switch (alt182) {
                        case 1 :
                            // EsperEPL2Grammar.g:1245:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1245:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1245:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1245:5: ( ALL | DISTINCT )?
                            int alt181=3;
                            int LA181_0 = input.LA(1);

                            if ( (LA181_0==ALL) ) {
                                alt181=1;
                            }
                            else if ( (LA181_0==DISTINCT) ) {
                                alt181=2;
                            }
                            switch (alt181) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1245:6: ALL
                                    {
                                    ALL460=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7709); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1245:13: DISTINCT
                                    {
                                    DISTINCT461=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7714); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT461_tree = (CommonTree)adaptor.create(DISTINCT461);
                                    adaptor.addChild(root_0, DISTINCT461_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc7718);
                            expression462=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression462.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1247:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1247:4: ( STAR )
                            // EsperEPL2Grammar.g:1247:5: STAR
                            {
                            STAR463=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc7729); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN464=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7740); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1250:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN465=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7746); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN465_tree = (CommonTree)adaptor.create(MEDIAN465);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN465_tree, root_0);
                    }
                    LPAREN466=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7749); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1250:20: ( ALL | DISTINCT )?
                    int alt183=3;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==ALL) ) {
                        alt183=1;
                    }
                    else if ( (LA183_0==DISTINCT) ) {
                        alt183=2;
                    }
                    switch (alt183) {
                        case 1 :
                            // EsperEPL2Grammar.g:1250:21: ALL
                            {
                            ALL467=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7753); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1250:28: DISTINCT
                            {
                            DISTINCT468=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7758); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT468_tree = (CommonTree)adaptor.create(DISTINCT468);
                            adaptor.addChild(root_0, DISTINCT468_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7762);
                    expression469=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression469.getTree());
                    RPAREN470=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7764); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1251:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV471=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7770); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV471_tree = (CommonTree)adaptor.create(STDDEV471);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV471_tree, root_0);
                    }
                    LPAREN472=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7773); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1251:20: ( ALL | DISTINCT )?
                    int alt184=3;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==ALL) ) {
                        alt184=1;
                    }
                    else if ( (LA184_0==DISTINCT) ) {
                        alt184=2;
                    }
                    switch (alt184) {
                        case 1 :
                            // EsperEPL2Grammar.g:1251:21: ALL
                            {
                            ALL473=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7777); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1251:28: DISTINCT
                            {
                            DISTINCT474=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7782); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT474_tree = (CommonTree)adaptor.create(DISTINCT474);
                            adaptor.addChild(root_0, DISTINCT474_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7786);
                    expression475=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression475.getTree());
                    RPAREN476=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7788); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1252:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV477=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7794); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV477_tree = (CommonTree)adaptor.create(AVEDEV477);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV477_tree, root_0);
                    }
                    LPAREN478=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7797); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1252:20: ( ALL | DISTINCT )?
                    int alt185=3;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==ALL) ) {
                        alt185=1;
                    }
                    else if ( (LA185_0==DISTINCT) ) {
                        alt185=2;
                    }
                    switch (alt185) {
                        case 1 :
                            // EsperEPL2Grammar.g:1252:21: ALL
                            {
                            ALL479=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7801); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1252:28: DISTINCT
                            {
                            DISTINCT480=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7806); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT480_tree = (CommonTree)adaptor.create(DISTINCT480);
                            adaptor.addChild(root_0, DISTINCT480_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7810);
                    expression481=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression481.getTree());
                    RPAREN482=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7812); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1253:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7818);
                    firstAggregation483=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation483.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1254:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7823);
                    lastAggregation484=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation484.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1255:4: windowAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc7828);
                    windowAggregation485=windowAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation485.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1256:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE486=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE486_tree = (CommonTree)adaptor.create(COALESCE486);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE486_tree, root_0);
                    }
                    LPAREN487=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7836); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7839);
                    expression488=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression488.getTree());
                    COMMA489=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7841); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7844);
                    expression490=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression490.getTree());
                    // EsperEPL2Grammar.g:1256:51: ( COMMA expression )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==COMMA) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1256:52: COMMA expression
                    	    {
                    	    COMMA491=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7847); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7850);
                    	    expression492=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression492.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);

                    RPAREN493=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7854); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1257:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS494=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7860); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS494_tree = (CommonTree)adaptor.create(PREVIOUS494);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS494_tree, root_0);
                    }
                    LPAREN495=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7863); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7866);
                    expression496=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression496.getTree());
                    // EsperEPL2Grammar.g:1257:33: ( COMMA expression )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==COMMA) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // EsperEPL2Grammar.g:1257:34: COMMA expression
                            {
                            COMMA497=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7869); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7872);
                            expression498=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression498.getTree());

                            }
                            break;

                    }

                    RPAREN499=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7876); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1258:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR500=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR500_tree = (CommonTree)adaptor.create(PRIOR500);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR500_tree, root_0);
                    }
                    LPAREN501=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7885); if (state.failed) return retval;
                    NUM_INT502=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7888); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT502_tree = (CommonTree)adaptor.create(NUM_INT502);
                    adaptor.addChild(root_0, NUM_INT502_tree);
                    }
                    COMMA503=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7890); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7893);
                    eventProperty504=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty504.getTree());
                    RPAREN505=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7895); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1261:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF506=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7905); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF506_tree = (CommonTree)adaptor.create(INSTANCEOF506);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF506_tree, root_0);
                    }
                    LPAREN507=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7908); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7911);
                    expression508=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression508.getTree());
                    COMMA509=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7913); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7916);
                    classIdentifier510=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier510.getTree());
                    // EsperEPL2Grammar.g:1261:58: ( COMMA classIdentifier )*
                    loop188:
                    do {
                        int alt188=2;
                        int LA188_0 = input.LA(1);

                        if ( (LA188_0==COMMA) ) {
                            alt188=1;
                        }


                        switch (alt188) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1261:59: COMMA classIdentifier
                    	    {
                    	    COMMA511=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7919); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7922);
                    	    classIdentifier512=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier512.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop188;
                        }
                    } while (true);

                    RPAREN513=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7926); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1262:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST514=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc7932); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST514_tree = (CommonTree)adaptor.create(CAST514);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST514_tree, root_0);
                    }
                    LPAREN515=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7935); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7938);
                    expression516=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression516.getTree());
                    // EsperEPL2Grammar.g:1262:29: ( COMMA | AS )
                    int alt189=2;
                    int LA189_0 = input.LA(1);

                    if ( (LA189_0==COMMA) ) {
                        alt189=1;
                    }
                    else if ( (LA189_0==AS) ) {
                        alt189=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 189, 0, input);

                        throw nvae;
                    }
                    switch (alt189) {
                        case 1 :
                            // EsperEPL2Grammar.g:1262:30: COMMA
                            {
                            COMMA517=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7941); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1262:39: AS
                            {
                            AS518=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc7946); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7950);
                    classIdentifier519=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier519.getTree());
                    RPAREN520=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7952); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1263:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS521=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc7958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS521_tree = (CommonTree)adaptor.create(EXISTS521);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS521_tree, root_0);
                    }
                    LPAREN522=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7961); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7964);
                    eventProperty523=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty523.getTree());
                    RPAREN524=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7966); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1264:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP525=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP525_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP525);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP525_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1264:23: ( LPAREN RPAREN )?
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==LPAREN) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            // EsperEPL2Grammar.g:1264:24: LPAREN RPAREN
                            {
                            LPAREN526=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7976); if (state.failed) return retval;
                            RPAREN527=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7979); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1267:1: firstAggregation : FIRST LPAREN accessAggExpr ( COMMA expression )? RPAREN -> ^( FIRST_AGGREG accessAggExpr ( expression )? ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FIRST528=null;
        Token LPAREN529=null;
        Token COMMA531=null;
        Token RPAREN533=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr530 = null;

        EsperEPL2GrammarParser.expression_return expression532 = null;


        CommonTree FIRST528_tree=null;
        CommonTree LPAREN529_tree=null;
        CommonTree COMMA531_tree=null;
        CommonTree RPAREN533_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            // EsperEPL2Grammar.g:1268:2: ( FIRST LPAREN accessAggExpr ( COMMA expression )? RPAREN -> ^( FIRST_AGGREG accessAggExpr ( expression )? ) )
            // EsperEPL2Grammar.g:1268:4: FIRST LPAREN accessAggExpr ( COMMA expression )? RPAREN
            {
            FIRST528=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation7994); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST528);

            LPAREN529=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation7996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN529);

            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation7998);
            accessAggExpr530=accessAggExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr530.getTree());
            // EsperEPL2Grammar.g:1268:31: ( COMMA expression )?
            int alt192=2;
            int LA192_0 = input.LA(1);

            if ( (LA192_0==COMMA) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1268:32: COMMA expression
                    {
                    COMMA531=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA531);

                    pushFollow(FOLLOW_expression_in_firstAggregation8003);
                    expression532=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression532.getTree());

                    }
                    break;

            }

            RPAREN533=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN533);



            // AST REWRITE
            // elements: accessAggExpr, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1269:4: -> ^( FIRST_AGGREG accessAggExpr ( expression )? )
            {
                // EsperEPL2Grammar.g:1269:7: ^( FIRST_AGGREG accessAggExpr ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                // EsperEPL2Grammar.g:1269:36: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1272:1: lastAggregation : LAST LPAREN accessAggExpr ( COMMA expression )? RPAREN -> ^( LAST_AGGREG accessAggExpr ( expression )? ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST534=null;
        Token LPAREN535=null;
        Token COMMA537=null;
        Token RPAREN539=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr536 = null;

        EsperEPL2GrammarParser.expression_return expression538 = null;


        CommonTree LAST534_tree=null;
        CommonTree LPAREN535_tree=null;
        CommonTree COMMA537_tree=null;
        CommonTree RPAREN539_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            // EsperEPL2Grammar.g:1273:2: ( LAST LPAREN accessAggExpr ( COMMA expression )? RPAREN -> ^( LAST_AGGREG accessAggExpr ( expression )? ) )
            // EsperEPL2Grammar.g:1273:4: LAST LPAREN accessAggExpr ( COMMA expression )? RPAREN
            {
            LAST534=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8032); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST534);

            LPAREN535=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8034); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN535);

            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8036);
            accessAggExpr536=accessAggExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr536.getTree());
            // EsperEPL2Grammar.g:1273:30: ( COMMA expression )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==COMMA) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1273:31: COMMA expression
                    {
                    COMMA537=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA537);

                    pushFollow(FOLLOW_expression_in_lastAggregation8041);
                    expression538=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression538.getTree());

                    }
                    break;

            }

            RPAREN539=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN539);



            // AST REWRITE
            // elements: expression, accessAggExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1274:4: -> ^( LAST_AGGREG accessAggExpr ( expression )? )
            {
                // EsperEPL2Grammar.g:1274:7: ^( LAST_AGGREG accessAggExpr ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                // EsperEPL2Grammar.g:1274:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowAggregation"
    // EsperEPL2Grammar.g:1277:1: windowAggregation : WINDOW LPAREN accessAggExpr RPAREN -> ^( WINDOW_AGGREG accessAggExpr ) ;
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WINDOW540=null;
        Token LPAREN541=null;
        Token RPAREN543=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr542 = null;


        CommonTree WINDOW540_tree=null;
        CommonTree LPAREN541_tree=null;
        CommonTree RPAREN543_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            // EsperEPL2Grammar.g:1278:2: ( WINDOW LPAREN accessAggExpr RPAREN -> ^( WINDOW_AGGREG accessAggExpr ) )
            // EsperEPL2Grammar.g:1278:4: WINDOW LPAREN accessAggExpr RPAREN
            {
            WINDOW540=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8071); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW540);

            LPAREN541=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8073); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN541);

            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8075);
            accessAggExpr542=accessAggExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr542.getTree());
            RPAREN543=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8077); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN543);



            // AST REWRITE
            // elements: accessAggExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1279:4: -> ^( WINDOW_AGGREG accessAggExpr )
            {
                // EsperEPL2Grammar.g:1279:7: ^( WINDOW_AGGREG accessAggExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);

                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "windowAggregation"

    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessAggExpr"
    // EsperEPL2Grammar.g:1282:1: accessAggExpr : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression );
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector544 = null;

        EsperEPL2GrammarParser.expression_return expression545 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1283:5: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression )
            int alt194=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt194=1;
                }
                break;
            case IDENT:
                {
                int LA194_2 = input.LA(2);

                if ( (LA194_2==DOT) ) {
                    int LA194_63 = input.LA(3);

                    if ( (LA194_63==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt194=2;
                    }
                    else if ( (LA194_63==WINDOW||LA194_63==ESCAPE||LA194_63==EVERY_EXPR||(LA194_63>=SUM && LA194_63<=COUNT)||LA194_63==OUTER||(LA194_63>=JOIN && LA194_63<=FULL)||(LA194_63>=EVENTS && LA194_63<=LAST)||(LA194_63>=UNIDIRECTIONAL && LA194_63<=PRIOR)||(LA194_63>=WEEKDAY && LA194_63<=CAST)||LA194_63==SNAPSHOT||(LA194_63>=VARIABLE && LA194_63<=INDEX)||(LA194_63>=DEFINE && LA194_63<=MATCHES)||LA194_63==WHILE||LA194_63==IDENT||LA194_63==TICKED_STRING_LITERAL) ) {
                        alt194=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 194, 63, input);

                        throw nvae;
                    }
                }
                else if ( ((LA194_2>=IN_SET && LA194_2<=REGEXP)||(LA194_2>=OR_EXPR && LA194_2<=NOT_EXPR)||LA194_2==IS||LA194_2==COMMA||LA194_2==EQUALS||(LA194_2>=LPAREN && LA194_2<=LBRACK)||(LA194_2>=STAR && LA194_2<=QUESTION)||(LA194_2>=BAND && LA194_2<=MOD)||LA194_2==ESCAPECHAR) ) {
                    alt194=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 194, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt194=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 194, 0, input);

                throw nvae;
            }

            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1283:10: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1283:17: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1284:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8123);
                    propertyStreamSelector544=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector544.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1285:4: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_accessAggExpr8128);
                    expression545=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression545.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessAggExpr"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1289:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX546=null;
        Token MIN547=null;
        Token LPAREN548=null;
        Token COMMA550=null;
        Token COMMA552=null;
        Token RPAREN554=null;
        EsperEPL2GrammarParser.expression_return expression549 = null;

        EsperEPL2GrammarParser.expression_return expression551 = null;

        EsperEPL2GrammarParser.expression_return expression553 = null;


        CommonTree MAX546_tree=null;
        CommonTree MIN547_tree=null;
        CommonTree LPAREN548_tree=null;
        CommonTree COMMA550_tree=null;
        CommonTree COMMA552_tree=null;
        CommonTree RPAREN554_tree=null;

        try {
            // EsperEPL2Grammar.g:1290:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1290:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1290:4: ( MAX | MIN )
            int alt195=2;
            int LA195_0 = input.LA(1);

            if ( (LA195_0==MAX) ) {
                alt195=1;
            }
            else if ( (LA195_0==MIN) ) {
                alt195=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }
            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1290:5: MAX
                    {
                    MAX546=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8141); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX546_tree = (CommonTree)adaptor.create(MAX546);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX546_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1290:12: MIN
                    {
                    MIN547=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN547_tree = (CommonTree)adaptor.create(MIN547);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN547_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN548=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8150); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8153);
            expression549=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression549.getTree());
            // EsperEPL2Grammar.g:1290:37: ( COMMA expression ( COMMA expression )* )?
            int alt197=2;
            int LA197_0 = input.LA(1);

            if ( (LA197_0==COMMA) ) {
                alt197=1;
            }
            switch (alt197) {
                case 1 :
                    // EsperEPL2Grammar.g:1290:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA550=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8156); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8159);
                    expression551=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression551.getTree());
                    // EsperEPL2Grammar.g:1290:56: ( COMMA expression )*
                    loop196:
                    do {
                        int alt196=2;
                        int LA196_0 = input.LA(1);

                        if ( (LA196_0==COMMA) ) {
                            alt196=1;
                        }


                        switch (alt196) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1290:57: COMMA expression
                    	    {
                    	    COMMA552=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8162); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8165);
                    	    expression553=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression553.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop196;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN554=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8172); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1293:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty555 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction556 = null;



        try {
            // EsperEPL2Grammar.g:1294:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt198=2;
            alt198 = dfa198.predict(input);
            switch (alt198) {
                case 1 :
                    // EsperEPL2Grammar.g:1294:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8191);
                    eventProperty555=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty555.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1295:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8196);
                    libFunction556=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction556.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1298:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT558=null;
        Token LPAREN560=null;
        Token RPAREN562=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy557 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent559 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs561 = null;


        CommonTree DOT558_tree=null;
        CommonTree LPAREN560_tree=null;
        CommonTree RPAREN562_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1299:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1299:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1299:4: ( classIdentifierNonGreedy DOT )?
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==IDENT) ) {
                int LA199_1 = input.LA(2);

                if ( (LA199_1==DOT) ) {
                    alt199=1;
                }
            }
            else if ( (LA199_0==TICKED_STRING_LITERAL) ) {
                int LA199_2 = input.LA(2);

                if ( (LA199_2==DOT) ) {
                    alt199=1;
                }
            }
            switch (alt199) {
                case 1 :
                    // EsperEPL2Grammar.g:1299:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction8209);
                    classIdentifierNonGreedy557=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy557.getTree());
                    DOT558=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8211); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT558);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction8215);
            funcIdent559=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent559.getTree());
            LPAREN560=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction8217); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN560);

            // EsperEPL2Grammar.g:1299:53: ( libFunctionArgs )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==WINDOW||LA200_0==ESCAPE||(LA200_0>=NOT_EXPR && LA200_0<=EVERY_EXPR)||(LA200_0>=SUM && LA200_0<=COUNT)||LA200_0==CASE||LA200_0==OUTER||(LA200_0>=JOIN && LA200_0<=FULL)||(LA200_0>=DISTINCT && LA200_0<=ALL)||(LA200_0>=EVENTS && LA200_0<=LAST)||(LA200_0>=UNIDIRECTIONAL && LA200_0<=CURRENT_TIMESTAMP)||LA200_0==SNAPSHOT||(LA200_0>=VARIABLE && LA200_0<=INDEX)||(LA200_0>=BOOLEAN_TRUE && LA200_0<=VALUE_NULL)||(LA200_0>=DEFINE && LA200_0<=MATCHES)||LA200_0==WHILE||LA200_0==NUM_DOUBLE||LA200_0==IDENT||LA200_0==LPAREN||(LA200_0>=PLUS && LA200_0<=QUESTION)||(LA200_0>=STRING_LITERAL && LA200_0<=QUOTED_STRING_LITERAL)||LA200_0==MINUS||LA200_0==LCURLY||LA200_0==NUM_INT||(LA200_0>=TICKED_STRING_LITERAL && LA200_0<=NUM_FLOAT)) ) {
                alt200=1;
            }
            switch (alt200) {
                case 1 :
                    // EsperEPL2Grammar.g:1299:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction8220);
                    libFunctionArgs561=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs561.getTree());

                    }
                    break;

            }

            RPAREN562=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction8224); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN562);



            // AST REWRITE
            // elements: funcIdent, classIdentifierNonGreedy, libFunctionArgs
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1300:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1300:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1300:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1300:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1303:1: funcIdent : ( escapableIdent | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent563 = null;


        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1304:2: ( escapableIdent | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt201=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt201=1;
                }
                break;
            case MAX:
                {
                alt201=2;
                }
                break;
            case MIN:
                {
                alt201=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 201, 0, input);

                throw nvae;
            }

            switch (alt201) {
                case 1 :
                    // EsperEPL2Grammar.g:1304:4: escapableIdent
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8254);
                    escapableIdent563=escapableIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent563.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1305:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8261); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1305:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1306:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1306:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1309:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL564=null;
        Token DISTINCT565=null;
        Token COMMA567=null;
        EsperEPL2GrammarParser.expression_return expression566 = null;

        EsperEPL2GrammarParser.expression_return expression568 = null;


        CommonTree ALL564_tree=null;
        CommonTree DISTINCT565_tree=null;
        CommonTree COMMA567_tree=null;

        try {
            // EsperEPL2Grammar.g:1310:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1310:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1310:4: ( ALL | DISTINCT )?
            int alt202=3;
            int LA202_0 = input.LA(1);

            if ( (LA202_0==ALL) ) {
                alt202=1;
            }
            else if ( (LA202_0==DISTINCT) ) {
                alt202=2;
            }
            switch (alt202) {
                case 1 :
                    // EsperEPL2Grammar.g:1310:5: ALL
                    {
                    ALL564=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8291); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1310:12: DISTINCT
                    {
                    DISTINCT565=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8296); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT565_tree = (CommonTree)adaptor.create(DISTINCT565);
                    adaptor.addChild(root_0, DISTINCT565_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs8300);
            expression566=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression566.getTree());
            // EsperEPL2Grammar.g:1310:34: ( COMMA expression )*
            loop203:
            do {
                int alt203=2;
                int LA203_0 = input.LA(1);

                if ( (LA203_0==COMMA) ) {
                    alt203=1;
                }


                switch (alt203) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1310:35: COMMA expression
            	    {
            	    COMMA567=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8303); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8306);
            	    expression568=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression568.getTree());

            	    }
            	    break;

            	default :
            	    break loop203;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1313:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR570=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr569 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr571 = null;


        CommonTree AND_EXPR570_tree=null;

        try {
            // EsperEPL2Grammar.g:1314:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1314:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList8320);
            concatenationExpr569=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr569.getTree());
            AND_EXPR570=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8322); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8325);
            concatenationExpr571=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr571.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1323:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression572 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1326:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1326:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression8353);
            followedByExpression572=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression572.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1329:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression573 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression574 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1330:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1330:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8365);
            orExpression573=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression573.getTree());
            // EsperEPL2Grammar.g:1330:17: (f= FOLLOWED_BY orExpression )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==FOLLOWED_BY) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1330:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8370); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8372);
            	    orExpression574=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression574.getTree());

            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1331:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1331:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1332:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1335:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression575 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression576 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1336:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1336:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8411);
            andExpression575=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression575.getTree());
            // EsperEPL2Grammar.g:1336:18: (o= OR_EXPR andExpression )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==OR_EXPR) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1336:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8416); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression8418);
            	    andExpression576=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression576.getTree());

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, OR_EXPR, andExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1337:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1337:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1338:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1341:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression577 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression578 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1342:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1342:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8450);
            matchUntilExpression577=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression577.getTree());
            // EsperEPL2Grammar.g:1342:25: (a= AND_EXPR matchUntilExpression )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==AND_EXPR) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1342:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8455); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8457);
            	    matchUntilExpression578=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression578.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);



            // AST REWRITE
            // elements: matchUntilExpression, matchUntilExpression, AND_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1343:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1343:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1344:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1347:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression579 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression580 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1348:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1348:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1348:4: (r= matchUntilRange )?
            int alt207=2;
            int LA207_0 = input.LA(1);

            if ( (LA207_0==LBRACK) ) {
                alt207=1;
            }
            switch (alt207) {
                case 1 :
                    // EsperEPL2Grammar.g:1348:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8492);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8496);
            qualifyExpression579=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression579.getTree());
            // EsperEPL2Grammar.g:1348:43: (a= UNTIL qualifyExpression )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==UNTIL) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // EsperEPL2Grammar.g:1348:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression8501); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8503);
                    qualifyExpression580=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression580.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: qualifyExpression, qualifyExpression, qualifyExpression, qualifyExpression, matchUntilRange, matchUntilRange
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1349:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1349:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1350:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1350:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1351:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1351:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1352:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1355:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList581 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix582 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1356:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1356:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1356:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt211=2;
            int LA211_0 = input.LA(1);

            if ( ((LA211_0>=NOT_EXPR && LA211_0<=EVERY_DISTINCT_EXPR)) ) {
                alt211=1;
            }
            switch (alt211) {
                case 1 :
                    // EsperEPL2Grammar.g:1356:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1356:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt209=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt209=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt209=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt209=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 209, 0, input);

                        throw nvae;
                    }

                    switch (alt209) {
                        case 1 :
                            // EsperEPL2Grammar.g:1356:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression8568); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1356:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression8574); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1356:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8580); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression8582);
                            distinctExpressionList581=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList581.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1356:80: (r= matchUntilRange )?
                    int alt210=2;
                    int LA210_0 = input.LA(1);

                    if ( (LA210_0==LBRACK) ) {
                        alt210=1;
                    }
                    switch (alt210) {
                        case 1 :
                            // EsperEPL2Grammar.g:1356:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression8588);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression8597);
            guardPostFix582=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix582.getTree());


            // AST REWRITE
            // elements: guardPostFix, distinctExpressionList, guardPostFix, guardPostFix, EVERY_DISTINCT_EXPR, EVERY_DISTINCT_EXPR, distinctExpressionList, EVERY_EXPR, guardPostFix, matchUntilRange, matchUntilRange, matchUntilRange, guardPostFix, EVERY_EXPR, guardPostFix, guardPostFix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1358:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1358:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1359:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1359:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1360:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1360:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1361:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1361:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1361:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1362:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1362:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1362:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1363:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1363:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1363:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1364:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1367:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN583=null;
        Token COMMA585=null;
        Token RPAREN587=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom584 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom586 = null;


        CommonTree LPAREN583_tree=null;
        CommonTree COMMA585_tree=null;
        CommonTree RPAREN587_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1368:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1368:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN583=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList8712); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN583);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8714);
            distinctExpressionAtom584=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom584.getTree());
            // EsperEPL2Grammar.g:1368:34: ( COMMA distinctExpressionAtom )*
            loop212:
            do {
                int alt212=2;
                int LA212_0 = input.LA(1);

                if ( (LA212_0==COMMA) ) {
                    alt212=1;
                }


                switch (alt212) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1368:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA585=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList8717); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA585);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8719);
            	    distinctExpressionAtom586=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom586.getTree());

            	    }
            	    break;

            	default :
            	    break loop212;
                }
            } while (true);

            RPAREN587=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList8723); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN587);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1369:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1369:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1372:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression588 = null;



        try {
            // EsperEPL2Grammar.g:1373:2: ( expression )
            // EsperEPL2Grammar.g:1373:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8746);
            expression588=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression588.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1376:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )? -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression ) -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN591=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression589 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression590 = null;

        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression592 = null;

        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression593 = null;


        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN591_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1377:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )? -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression ) -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1377:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )?
            {
            // EsperEPL2Grammar.g:1377:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt213=2;
            int LA213_0 = input.LA(1);

            if ( (LA213_0==IDENT||LA213_0==TICKED_STRING_LITERAL) ) {
                alt213=1;
            }
            else if ( (LA213_0==LPAREN) ) {
                alt213=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);

                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    // EsperEPL2Grammar.g:1377:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix8761);
                    atomicExpression589=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression589.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1377:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix8767); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix8769);
                    patternExpression590=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression590.getTree());
                    RPAREN591=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix8771); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN591);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1377:59: ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )?
            int alt214=3;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==WHERE) ) {
                alt214=1;
            }
            else if ( (LA214_0==WHILE) ) {
                alt214=2;
            }
            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1377:60: (wh= WHERE guardWhereExpression )
                    {
                    // EsperEPL2Grammar.g:1377:60: (wh= WHERE guardWhereExpression )
                    // EsperEPL2Grammar.g:1377:61: wh= WHERE guardWhereExpression
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix8778); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);

                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix8780);
                    guardWhereExpression592=guardWhereExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression592.getTree());

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1377:94: (wi= WHILE guardWhileExpression )
                    {
                    // EsperEPL2Grammar.g:1377:94: (wi= WHILE guardWhileExpression )
                    // EsperEPL2Grammar.g:1377:95: wi= WHILE guardWhileExpression
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix8788); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);

                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix8790);
                    guardWhileExpression593=guardWhileExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression593.getTree());

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: patternExpression, atomicExpression, atomicExpression, patternExpression, patternExpression, atomicExpression, guardWhereExpression, guardWhileExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1378:3: -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression )
            if (wh != null) {
                // EsperEPL2Grammar.g:1378:21: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1378:34: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1378:52: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1379:3: -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression )
            if (wi != null) {
                // EsperEPL2Grammar.g:1379:21: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1379:34: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1379:52: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1380:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1380:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1380:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1383:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression594 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression595 = null;



        try {
            // EsperEPL2Grammar.g:1384:2: ( observerExpression | patternFilterExpression )
            int alt215=2;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==IDENT) ) {
                int LA215_1 = input.LA(2);

                if ( (LA215_1==COLON) ) {
                    alt215=1;
                }
                else if ( (LA215_1==EOF||(LA215_1>=OR_EXPR && LA215_1<=AND_EXPR)||LA215_1==WHERE||LA215_1==UNTIL||LA215_1==WHILE||(LA215_1>=EQUALS && LA215_1<=RBRACK)||LA215_1==FOLLOWED_BY) ) {
                    alt215=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 215, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA215_0==TICKED_STRING_LITERAL) ) {
                alt215=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 215, 0, input);

                throw nvae;
            }
            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1384:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8852);
                    observerExpression594=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression594.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1384:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8856);
                    patternFilterExpression595=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression595.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1387:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON596=null;
        Token LPAREN597=null;
        Token RPAREN599=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList598 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON596_tree=null;
        CommonTree LPAREN597_tree=null;
        CommonTree RPAREN599_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1388:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1388:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON596=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8873); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON596);

            // EsperEPL2Grammar.g:1388:19: (nm= IDENT | a= AT )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==IDENT) ) {
                alt216=1;
            }
            else if ( (LA216_0==AT) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    // EsperEPL2Grammar.g:1388:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1388:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8884); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN597=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN597);

            // EsperEPL2Grammar.g:1388:44: ( expressionWithTimeList )?
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==WINDOW||LA217_0==ESCAPE||(LA217_0>=NOT_EXPR && LA217_0<=EVERY_EXPR)||(LA217_0>=SUM && LA217_0<=COUNT)||LA217_0==CASE||LA217_0==OUTER||(LA217_0>=JOIN && LA217_0<=FULL)||(LA217_0>=EVENTS && LA217_0<=LAST)||(LA217_0>=UNIDIRECTIONAL && LA217_0<=CURRENT_TIMESTAMP)||LA217_0==SNAPSHOT||(LA217_0>=VARIABLE && LA217_0<=INDEX)||(LA217_0>=BOOLEAN_TRUE && LA217_0<=VALUE_NULL)||(LA217_0>=DEFINE && LA217_0<=MATCHES)||LA217_0==WHILE||LA217_0==NUM_DOUBLE||LA217_0==IDENT||LA217_0==LPAREN||LA217_0==LBRACK||LA217_0==STAR||(LA217_0>=PLUS && LA217_0<=QUESTION)||(LA217_0>=STRING_LITERAL && LA217_0<=QUOTED_STRING_LITERAL)||LA217_0==MINUS||LA217_0==LCURLY||LA217_0==NUM_INT||(LA217_0>=TICKED_STRING_LITERAL && LA217_0<=NUM_FLOAT)) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    // EsperEPL2Grammar.g:1388:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8889);
                    expressionWithTimeList598=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList598.getTree());

                    }
                    break;

            }

            RPAREN599=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8892); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN599);



            // AST REWRITE
            // elements: ns, ns, nm, expressionWithTimeList, expressionWithTimeList, IDENT
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1389:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1389:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1389:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1389:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1390:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1390:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1390:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardWhereExpression"
    // EsperEPL2Grammar.g:1393:1: guardWhereExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT600=null;
        Token COLON601=null;
        Token IDENT602=null;
        Token LPAREN603=null;
        Token RPAREN605=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList604 = null;


        CommonTree IDENT600_tree=null;
        CommonTree COLON601_tree=null;
        CommonTree IDENT602_tree=null;
        CommonTree LPAREN603_tree=null;
        CommonTree RPAREN605_tree=null;

        try {
            // EsperEPL2Grammar.g:1394:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1394:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT600=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression8941); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT600_tree = (CommonTree)adaptor.create(IDENT600);
            adaptor.addChild(root_0, IDENT600_tree);
            }
            COLON601=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression8943); if (state.failed) return retval;
            IDENT602=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression8946); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT602_tree = (CommonTree)adaptor.create(IDENT602);
            adaptor.addChild(root_0, IDENT602_tree);
            }
            LPAREN603=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression8948); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1394:31: ( expressionWithTimeList )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==WINDOW||LA218_0==ESCAPE||(LA218_0>=NOT_EXPR && LA218_0<=EVERY_EXPR)||(LA218_0>=SUM && LA218_0<=COUNT)||LA218_0==CASE||LA218_0==OUTER||(LA218_0>=JOIN && LA218_0<=FULL)||(LA218_0>=EVENTS && LA218_0<=LAST)||(LA218_0>=UNIDIRECTIONAL && LA218_0<=CURRENT_TIMESTAMP)||LA218_0==SNAPSHOT||(LA218_0>=VARIABLE && LA218_0<=INDEX)||(LA218_0>=BOOLEAN_TRUE && LA218_0<=VALUE_NULL)||(LA218_0>=DEFINE && LA218_0<=MATCHES)||LA218_0==WHILE||LA218_0==NUM_DOUBLE||LA218_0==IDENT||LA218_0==LPAREN||LA218_0==LBRACK||LA218_0==STAR||(LA218_0>=PLUS && LA218_0<=QUESTION)||(LA218_0>=STRING_LITERAL && LA218_0<=QUOTED_STRING_LITERAL)||LA218_0==MINUS||LA218_0==LCURLY||LA218_0==NUM_INT||(LA218_0>=TICKED_STRING_LITERAL && LA218_0<=NUM_FLOAT)) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1394:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression8952);
                    expressionWithTimeList604=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList604.getTree());

                    }
                    break;

            }

            RPAREN605=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression8956); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardWhereExpression"

    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardWhileExpression"
    // EsperEPL2Grammar.g:1397:1: guardWhileExpression : LPAREN expression RPAREN ;
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN606=null;
        Token RPAREN608=null;
        EsperEPL2GrammarParser.expression_return expression607 = null;


        CommonTree LPAREN606_tree=null;
        CommonTree RPAREN608_tree=null;

        try {
            // EsperEPL2Grammar.g:1398:2: ( LPAREN expression RPAREN )
            // EsperEPL2Grammar.g:1398:4: LPAREN expression RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN606=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression8969); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression8972);
            expression607=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression607.getTree());
            RPAREN608=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression8974); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardWhileExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1402:1: matchUntilRange : LBRACK ( expression (c1= COLON ( expression )? )? | c2= COLON expression ) RBRACK -> {$c1 != null && !isopen}? ^( MATCH_UNTIL_RANGE_CLOSED expression expression ) -> {$c1 != null && isopen}? ^( MATCH_UNTIL_RANGE_HALFOPEN expression ) -> {$c2 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED expression ) -> ^( MATCH_UNTIL_RANGE_BOUNDED expression ) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c1=null;
        Token c2=null;
        Token LBRACK609=null;
        Token RBRACK613=null;
        EsperEPL2GrammarParser.expression_return expression610 = null;

        EsperEPL2GrammarParser.expression_return expression611 = null;

        EsperEPL2GrammarParser.expression_return expression612 = null;


        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK609_tree=null;
        CommonTree RBRACK613_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            // EsperEPL2Grammar.g:1404:2: ( LBRACK ( expression (c1= COLON ( expression )? )? | c2= COLON expression ) RBRACK -> {$c1 != null && !isopen}? ^( MATCH_UNTIL_RANGE_CLOSED expression expression ) -> {$c1 != null && isopen}? ^( MATCH_UNTIL_RANGE_HALFOPEN expression ) -> {$c2 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED expression ) -> ^( MATCH_UNTIL_RANGE_BOUNDED expression ) )
            // EsperEPL2Grammar.g:1404:4: LBRACK ( expression (c1= COLON ( expression )? )? | c2= COLON expression ) RBRACK
            {
            LBRACK609=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange8995); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK609);

            // EsperEPL2Grammar.g:1404:11: ( expression (c1= COLON ( expression )? )? | c2= COLON expression )
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( (LA221_0==WINDOW||LA221_0==ESCAPE||(LA221_0>=NOT_EXPR && LA221_0<=EVERY_EXPR)||(LA221_0>=SUM && LA221_0<=COUNT)||LA221_0==CASE||LA221_0==OUTER||(LA221_0>=JOIN && LA221_0<=FULL)||(LA221_0>=EVENTS && LA221_0<=LAST)||(LA221_0>=UNIDIRECTIONAL && LA221_0<=CURRENT_TIMESTAMP)||LA221_0==SNAPSHOT||(LA221_0>=VARIABLE && LA221_0<=INDEX)||(LA221_0>=BOOLEAN_TRUE && LA221_0<=VALUE_NULL)||(LA221_0>=DEFINE && LA221_0<=MATCHES)||LA221_0==WHILE||LA221_0==NUM_DOUBLE||LA221_0==IDENT||LA221_0==LPAREN||(LA221_0>=PLUS && LA221_0<=QUESTION)||(LA221_0>=STRING_LITERAL && LA221_0<=QUOTED_STRING_LITERAL)||LA221_0==MINUS||LA221_0==LCURLY||LA221_0==NUM_INT||(LA221_0>=TICKED_STRING_LITERAL && LA221_0<=NUM_FLOAT)) ) {
                alt221=1;
            }
            else if ( (LA221_0==COLON) ) {
                alt221=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 221, 0, input);

                throw nvae;
            }
            switch (alt221) {
                case 1 :
                    // EsperEPL2Grammar.g:1405:4: expression (c1= COLON ( expression )? )?
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9002);
                    expression610=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression610.getTree());
                    // EsperEPL2Grammar.g:1405:15: (c1= COLON ( expression )? )?
                    int alt220=2;
                    int LA220_0 = input.LA(1);

                    if ( (LA220_0==COLON) ) {
                        alt220=1;
                    }
                    switch (alt220) {
                        case 1 :
                            // EsperEPL2Grammar.g:1405:16: c1= COLON ( expression )?
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9007); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            // EsperEPL2Grammar.g:1405:25: ( expression )?
                            int alt219=2;
                            int LA219_0 = input.LA(1);

                            if ( (LA219_0==WINDOW||LA219_0==ESCAPE||(LA219_0>=NOT_EXPR && LA219_0<=EVERY_EXPR)||(LA219_0>=SUM && LA219_0<=COUNT)||LA219_0==CASE||LA219_0==OUTER||(LA219_0>=JOIN && LA219_0<=FULL)||(LA219_0>=EVENTS && LA219_0<=LAST)||(LA219_0>=UNIDIRECTIONAL && LA219_0<=CURRENT_TIMESTAMP)||LA219_0==SNAPSHOT||(LA219_0>=VARIABLE && LA219_0<=INDEX)||(LA219_0>=BOOLEAN_TRUE && LA219_0<=VALUE_NULL)||(LA219_0>=DEFINE && LA219_0<=MATCHES)||LA219_0==WHILE||LA219_0==NUM_DOUBLE||LA219_0==IDENT||LA219_0==LPAREN||(LA219_0>=PLUS && LA219_0<=QUESTION)||(LA219_0>=STRING_LITERAL && LA219_0<=QUOTED_STRING_LITERAL)||LA219_0==MINUS||LA219_0==LCURLY||LA219_0==NUM_INT||(LA219_0>=TICKED_STRING_LITERAL && LA219_0<=NUM_FLOAT)) ) {
                                alt219=1;
                            }
                            switch (alt219) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1405:26: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9010);
                                    expression611=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression611.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1406:8: c2= COLON expression
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);

                    pushFollow(FOLLOW_expression_in_matchUntilRange9032);
                    expression612=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression612.getTree());

                    }
                    break;

            }

            RBRACK613=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK613);



            // AST REWRITE
            // elements: expression, expression, expression, expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1409:3: -> {$c1 != null && !isopen}? ^( MATCH_UNTIL_RANGE_CLOSED expression expression )
            if (c1 != null && !isopen) {
                // EsperEPL2Grammar.g:1409:32: ^( MATCH_UNTIL_RANGE_CLOSED expression expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1410:3: -> {$c1 != null && isopen}? ^( MATCH_UNTIL_RANGE_HALFOPEN expression )
            if (c1 != null && isopen) {
                // EsperEPL2Grammar.g:1410:31: ^( MATCH_UNTIL_RANGE_HALFOPEN expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1411:3: -> {$c2 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED expression )
            if (c2 != null) {
                // EsperEPL2Grammar.g:1411:21: ^( MATCH_UNTIL_RANGE_HALFCLOSED expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1412:3: -> ^( MATCH_UNTIL_RANGE_BOUNDED expression )
            {
                // EsperEPL2Grammar.g:1412:6: ^( MATCH_UNTIL_RANGE_BOUNDED expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1420:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS614=null;
        Token LPAREN616=null;
        Token RPAREN618=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier615 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList617 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression619 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS614_tree=null;
        CommonTree LPAREN616_tree=null;
        CommonTree RPAREN618_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1423:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1423:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1423:9: (i= IDENT EQUALS )?
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==IDENT) ) {
                int LA222_1 = input.LA(2);

                if ( (LA222_1==EQUALS) ) {
                    alt222=1;
                }
            }
            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1423:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9130); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS614=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9132); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS614);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9141);
            classIdentifier615=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier615.getTree());
            // EsperEPL2Grammar.g:1425:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( (LA224_0==LPAREN) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    // EsperEPL2Grammar.g:1425:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN616=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9152); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN616);

                    // EsperEPL2Grammar.g:1425:17: ( expressionList )?
                    int alt223=2;
                    int LA223_0 = input.LA(1);

                    if ( (LA223_0==WINDOW||LA223_0==ESCAPE||(LA223_0>=NOT_EXPR && LA223_0<=EVERY_EXPR)||(LA223_0>=SUM && LA223_0<=COUNT)||LA223_0==CASE||LA223_0==OUTER||(LA223_0>=JOIN && LA223_0<=FULL)||(LA223_0>=EVENTS && LA223_0<=LAST)||(LA223_0>=UNIDIRECTIONAL && LA223_0<=CURRENT_TIMESTAMP)||LA223_0==SNAPSHOT||(LA223_0>=VARIABLE && LA223_0<=INDEX)||(LA223_0>=BOOLEAN_TRUE && LA223_0<=VALUE_NULL)||(LA223_0>=DEFINE && LA223_0<=MATCHES)||LA223_0==WHILE||LA223_0==NUM_DOUBLE||LA223_0==IDENT||LA223_0==LPAREN||(LA223_0>=PLUS && LA223_0<=QUESTION)||(LA223_0>=STRING_LITERAL && LA223_0<=QUOTED_STRING_LITERAL)||LA223_0==MINUS||LA223_0==LCURLY||LA223_0==NUM_INT||(LA223_0>=TICKED_STRING_LITERAL && LA223_0<=NUM_FLOAT)) ) {
                        alt223=1;
                    }
                    switch (alt223) {
                        case 1 :
                            // EsperEPL2Grammar.g:1425:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9154);
                            expressionList617=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList617.getTree());

                            }
                            break;

                    }

                    RPAREN618=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN618);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1426:9: ( propertyExpression )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==LBRACK) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // EsperEPL2Grammar.g:1426:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9169);
                    propertyExpression619=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression619.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expressionList, classIdentifier, i, propertyExpression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1427:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1427:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1427:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1427:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1427:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1430:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic620 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic621 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1431:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1431:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9214);
            propertyExpressionAtomic620=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic620.getTree());
            // EsperEPL2Grammar.g:1431:29: ( propertyExpressionAtomic )*
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==LBRACK) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1431:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9217);
            	    propertyExpressionAtomic621=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic621.getTree());

            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1432:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1432:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1435:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK622=null;
        Token SELECT623=null;
        Token FROM625=null;
        Token AS627=null;
        Token IDENT628=null;
        Token WHERE629=null;
        Token RBRACK631=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList624 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty626 = null;

        EsperEPL2GrammarParser.expression_return expression630 = null;


        CommonTree LBRACK622_tree=null;
        CommonTree SELECT623_tree=null;
        CommonTree FROM625_tree=null;
        CommonTree AS627_tree=null;
        CommonTree IDENT628_tree=null;
        CommonTree WHERE629_tree=null;
        CommonTree RBRACK631_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1436:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1436:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK622=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9247); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK622);

            // EsperEPL2Grammar.g:1436:11: ( SELECT propertySelectionList FROM )?
            int alt227=2;
            int LA227_0 = input.LA(1);

            if ( (LA227_0==SELECT) ) {
                alt227=1;
            }
            switch (alt227) {
                case 1 :
                    // EsperEPL2Grammar.g:1436:12: SELECT propertySelectionList FROM
                    {
                    SELECT623=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT623);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9252);
                    propertySelectionList624=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList624.getTree());
                    FROM625=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9254); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM625);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9258);
            eventProperty626=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty626.getTree());
            // EsperEPL2Grammar.g:1436:62: ( AS IDENT )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==AS) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // EsperEPL2Grammar.g:1436:63: AS IDENT
                    {
                    AS627=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9261); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS627);

                    IDENT628=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9263); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT628);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1436:74: ( WHERE expression )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==WHERE) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1436:75: WHERE expression
                    {
                    WHERE629=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9268); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE629);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9270);
                    expression630=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression630.getTree());

                    }
                    break;

            }

            RBRACK631=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9274); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK631);



            // AST REWRITE
            // elements: IDENT, expression, eventProperty, propertySelectionList
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1437:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1437:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1437:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1437:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1437:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1437:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1440:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA633=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement632 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement634 = null;


        CommonTree COMMA633_tree=null;

        try {
            // EsperEPL2Grammar.g:1441:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1441:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9324);
            propertySelectionListElement632=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement632.getTree());
            // EsperEPL2Grammar.g:1441:33: ( COMMA propertySelectionListElement )*
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( (LA230_0==COMMA) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1441:34: COMMA propertySelectionListElement
            	    {
            	    COMMA633=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9327); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9330);
            	    propertySelectionListElement634=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement634.getTree());

            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1444:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS637=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector635 = null;

        EsperEPL2GrammarParser.expression_return expression636 = null;


        CommonTree s_tree=null;
        CommonTree AS637_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1446:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt232=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt232=1;
                }
                break;
            case IDENT:
                {
                int LA232_2 = input.LA(2);

                if ( (LA232_2==DOT) ) {
                    int LA232_63 = input.LA(3);

                    if ( (LA232_63==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt232=2;
                    }
                    else if ( (LA232_63==WINDOW||LA232_63==ESCAPE||LA232_63==EVERY_EXPR||(LA232_63>=SUM && LA232_63<=COUNT)||LA232_63==OUTER||(LA232_63>=JOIN && LA232_63<=FULL)||(LA232_63>=EVENTS && LA232_63<=LAST)||(LA232_63>=UNIDIRECTIONAL && LA232_63<=PRIOR)||(LA232_63>=WEEKDAY && LA232_63<=CAST)||LA232_63==SNAPSHOT||(LA232_63>=VARIABLE && LA232_63<=INDEX)||(LA232_63>=DEFINE && LA232_63<=MATCHES)||LA232_63==WHILE||LA232_63==IDENT||LA232_63==TICKED_STRING_LITERAL) ) {
                        alt232=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 232, 63, input);

                        throw nvae;
                    }
                }
                else if ( ((LA232_2>=IN_SET && LA232_2<=REGEXP)||(LA232_2>=OR_EXPR && LA232_2<=NOT_EXPR)||LA232_2==AS||LA232_2==FROM||LA232_2==IS||LA232_2==COMMA||LA232_2==EQUALS||LA232_2==LPAREN||LA232_2==LBRACK||(LA232_2>=STAR && LA232_2<=QUESTION)||(LA232_2>=BAND && LA232_2<=MOD)||LA232_2==ESCAPECHAR) ) {
                    alt232=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 232, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt232=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 232, 0, input);

                throw nvae;
            }

            switch (alt232) {
                case 1 :
                    // EsperEPL2Grammar.g:1446:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1446:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1447:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9372);
                    propertyStreamSelector635=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector635.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1448:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9377);
                    expression636=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression636.getTree());
                    // EsperEPL2Grammar.g:1448:15: ( AS i= keywordAllowedIdent )?
                    int alt231=2;
                    int LA231_0 = input.LA(1);

                    if ( (LA231_0==AS) ) {
                        alt231=1;
                    }
                    switch (alt231) {
                        case 1 :
                            // EsperEPL2Grammar.g:1448:16: AS i= keywordAllowedIdent
                            {
                            AS637=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9380); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS637);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9384);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1449:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1449:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1450:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1450:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1453:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT638=null;
        Token STAR639=null;
        Token AS640=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT638_tree=null;
        CommonTree STAR639_tree=null;
        CommonTree AS640_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1454:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1454:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9428); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT638=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT638);

            STAR639=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR639);

            // EsperEPL2Grammar.g:1454:21: ( AS i= IDENT )?
            int alt233=2;
            int LA233_0 = input.LA(1);

            if ( (LA233_0==AS) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1454:22: AS i= IDENT
                    {
                    AS640=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9435); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS640);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1455:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1455:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1455:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1458:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS641=null;
        Token LPAREN643=null;
        Token RPAREN645=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier642 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList644 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression646 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS641_tree=null;
        CommonTree LPAREN643_tree=null;
        CommonTree RPAREN645_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1461:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1461:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1461:9: (i= IDENT EQUALS )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==IDENT) ) {
                int LA234_1 = input.LA(2);

                if ( (LA234_1==EQUALS) ) {
                    alt234=1;
                }
            }
            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1461:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS641=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS641);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9497);
            classIdentifier642=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier642.getTree());
            // EsperEPL2Grammar.g:1463:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==LPAREN) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    // EsperEPL2Grammar.g:1463:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN643=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN643);

                    // EsperEPL2Grammar.g:1463:17: ( expressionList )?
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==WINDOW||LA235_0==ESCAPE||(LA235_0>=NOT_EXPR && LA235_0<=EVERY_EXPR)||(LA235_0>=SUM && LA235_0<=COUNT)||LA235_0==CASE||LA235_0==OUTER||(LA235_0>=JOIN && LA235_0<=FULL)||(LA235_0>=EVENTS && LA235_0<=LAST)||(LA235_0>=UNIDIRECTIONAL && LA235_0<=CURRENT_TIMESTAMP)||LA235_0==SNAPSHOT||(LA235_0>=VARIABLE && LA235_0<=INDEX)||(LA235_0>=BOOLEAN_TRUE && LA235_0<=VALUE_NULL)||(LA235_0>=DEFINE && LA235_0<=MATCHES)||LA235_0==WHILE||LA235_0==NUM_DOUBLE||LA235_0==IDENT||LA235_0==LPAREN||(LA235_0>=PLUS && LA235_0<=QUESTION)||(LA235_0>=STRING_LITERAL && LA235_0<=QUOTED_STRING_LITERAL)||LA235_0==MINUS||LA235_0==LCURLY||LA235_0==NUM_INT||(LA235_0>=TICKED_STRING_LITERAL && LA235_0<=NUM_FLOAT)) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            // EsperEPL2Grammar.g:1463:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9510);
                            expressionList644=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList644.getTree());

                            }
                            break;

                    }

                    RPAREN645=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9513); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN645);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1464:9: ( propertyExpression )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==LBRACK) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // EsperEPL2Grammar.g:1464:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9525);
                    propertyExpression646=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression646.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, propertyExpression, classIdentifier, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1465:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1465:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1465:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1465:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1465:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1469:1: classIdentifier : i1= escapableStr ( DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT647=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;

        EsperEPL2GrammarParser.escapableStr_return i2 = null;


        CommonTree DOT647_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1471:2: (i1= escapableStr ( DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1471:4: i1= escapableStr ( DOT i2= escapableStr )*
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier9580);
            i1=escapableStr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1472:6: ( DOT i2= escapableStr )*
            loop238:
            do {
                int alt238=2;
                int LA238_0 = input.LA(1);

                if ( (LA238_0==DOT) ) {
                    int LA238_21 = input.LA(2);

                    if ( (LA238_21==IDENT) ) {
                        int LA238_44 = input.LA(3);

                        if ( (LA238_44==EOF||LA238_44==CREATE||(LA238_44>=OR_EXPR && LA238_44<=AS)||LA238_44==SELECT||(LA238_44>=INNER && LA238_44<=ON)||(LA238_44>=GROUP && LA238_44<=HAVING)||LA238_44==OUTPUT||LA238_44==INSERT||LA238_44==ORDER||(LA238_44>=UNIDIRECTIONAL && LA238_44<=RETAININTERSECTION)||LA238_44==DELETE||LA238_44==SET||LA238_44==UNTIL||LA238_44==ROW_LIMIT_EXPR||(LA238_44>=UPDATE && LA238_44<=MATCH_RECOGNIZE)||(LA238_44>=FOR && LA238_44<=WHILE)||(LA238_44>=COMMA && LA238_44<=IDENT)||(LA238_44>=DOT && LA238_44<=RBRACK)||LA238_44==RCURLY||LA238_44==FOLLOWED_BY||LA238_44==TICKED_STRING_LITERAL||LA238_44==EMAILAT) ) {
                            alt238=1;
                        }


                    }
                    else if ( (LA238_21==TICKED_STRING_LITERAL) ) {
                        alt238=1;
                    }


                }


                switch (alt238) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1473:8: DOT i2= escapableStr
            	    {
            	    DOT647=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9599); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT647);

            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier9603);
            	    i2=escapableStr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop238;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1475:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1475:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1478:1: classIdentifierNonGreedy : i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT648=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;

        EsperEPL2GrammarParser.escapableStr_return i2 = null;


        CommonTree DOT648_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1480:2: (i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1480:4: i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )*
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy9648);
            i1=escapableStr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1481:6: ( options {greedy=false; } : DOT i2= escapableStr )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA239_2 = input.LA(3);

                        if ( (LA239_2==DOT) ) {
                            alt239=1;
                        }
                        else if ( (LA239_2==LPAREN) ) {
                            alt239=2;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA239_3 = input.LA(3);

                        if ( (LA239_3==DOT) ) {
                            alt239=1;
                        }
                        else if ( (LA239_3==LPAREN) ) {
                            alt239=2;
                        }


                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt239=2;
                        }
                        break;

                    }

                }


                switch (alt239) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1483:8: DOT i2= escapableStr
            	    {
            	    DOT648=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9683); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT648);

            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy9687);
            	    i2=escapableStr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1485:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1485:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1488:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA650=null;
        EsperEPL2GrammarParser.expression_return expression649 = null;

        EsperEPL2GrammarParser.expression_return expression651 = null;


        CommonTree COMMA650_tree=null;

        try {
            // EsperEPL2Grammar.g:1489:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1489:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9729);
            expression649=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression649.getTree());
            // EsperEPL2Grammar.g:1489:22: ( COMMA expression )*
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==COMMA) ) {
                    alt240=1;
                }


                switch (alt240) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1489:23: COMMA expression
            	    {
            	    COMMA650=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9732); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9735);
            	    expression651=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression651.getTree());

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1492:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA653=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime652 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime654 = null;


        CommonTree COMMA653_tree=null;

        try {
            // EsperEPL2Grammar.g:1493:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1493:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9763);
            expressionWithTime652=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime652.getTree());
            // EsperEPL2Grammar.g:1493:30: ( COMMA expressionWithTime )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==COMMA) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1493:31: COMMA expressionWithTime
            	    {
            	    COMMA653=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9766); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9769);
            	    expressionWithTime654=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime654.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1496:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand655 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand656 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod657 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable658 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand659 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand660 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator661 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator662 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList663 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar664 = null;



        try {
            // EsperEPL2Grammar.g:1497:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt242=10;
            int LA242_0 = input.LA(1);

            if ( (LA242_0==LAST) ) {
                int LA242_1 = input.LA(2);

                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt242=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt242=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==LW) ) {
                int LA242_2 = input.LA(2);

                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt242=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt242=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==NUM_INT) ) {
                int LA242_3 = input.LA(2);

                if ( (LA242_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==TIMEPERIOD_SECONDS) ) {
                    int LA242_162 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 162, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_3==TIMEPERIOD_SECOND) ) {
                    int LA242_163 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 163, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_3==TIMEPERIOD_SEC) ) {
                    int LA242_164 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 164, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt242=5;
                }
                else if ( (LA242_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt242=8;
                }
                else if ( (LA242_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt242=7;
                }
                else if ( (LA242_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==NUM_LONG) ) {
                int LA242_4 = input.LA(2);

                if ( (LA242_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==TIMEPERIOD_SECONDS) ) {
                    int LA242_203 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 203, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_4==TIMEPERIOD_SECOND) ) {
                    int LA242_204 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 204, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_4==TIMEPERIOD_SEC) ) {
                    int LA242_205 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 205, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt242=8;
                }
                else if ( (LA242_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt242=5;
                }
                else if ( (LA242_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt242=7;
                }
                else if ( (LA242_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==NUM_FLOAT) ) {
                int LA242_5 = input.LA(2);

                if ( (LA242_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt242=8;
                }
                else if ( (LA242_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt242=7;
                }
                else if ( (LA242_5==TIMEPERIOD_SECONDS) ) {
                    int LA242_233 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 233, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_5==TIMEPERIOD_SECOND) ) {
                    int LA242_234 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 234, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_5==TIMEPERIOD_SEC) ) {
                    int LA242_235 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 235, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt242=5;
                }
                else if ( (LA242_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==NUM_DOUBLE) ) {
                int LA242_6 = input.LA(2);

                if ( (LA242_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt242=8;
                }
                else if ( (LA242_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt242=7;
                }
                else if ( (LA242_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==TIMEPERIOD_SECONDS) ) {
                    int LA242_279 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 279, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_6==TIMEPERIOD_SECOND) ) {
                    int LA242_280 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 280, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_6==TIMEPERIOD_SEC) ) {
                    int LA242_281 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 281, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt242=5;
                }
                else if ( (LA242_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 6, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==IDENT) ) {
                int LA242_7 = input.LA(2);

                if ( (LA242_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt242=5;
                }
                else if ( (LA242_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt242=7;
                }
                else if ( (LA242_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_7==TIMEPERIOD_SECONDS) ) {
                    int LA242_328 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 328, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_7==TIMEPERIOD_SECOND) ) {
                    int LA242_329 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 329, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_7==TIMEPERIOD_SEC) ) {
                    int LA242_330 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 330, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt242=8;
                }
                else if ( (LA242_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 7, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==QUESTION) ) {
                int LA242_8 = input.LA(2);

                if ( (LA242_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt242=8;
                }
                else if ( (LA242_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt242=5;
                }
                else if ( (LA242_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt242=7;
                }
                else if ( (LA242_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==TIMEPERIOD_SECONDS) ) {
                    int LA242_390 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 390, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_8==TIMEPERIOD_SECOND) ) {
                    int LA242_391 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 391, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_8==TIMEPERIOD_SEC) ) {
                    int LA242_392 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt242=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt242=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 242, 392, input);

                        throw nvae;
                    }
                }
                else if ( (LA242_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt242=4;
                }
                else if ( (LA242_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else if ( (LA242_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt242=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 8, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt242=4;
            }
            else if ( (LA242_0==STAR) ) {
                int LA242_62 = input.LA(2);

                if ( (LA242_62==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt242=6;
                }
                else if ( (LA242_62==COMMA||LA242_62==RPAREN) ) {
                    alt242=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 242, 62, input);

                    throw nvae;
                }
            }
            else if ( (LA242_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt242=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 242, 0, input);

                throw nvae;
            }
            switch (alt242) {
                case 1 :
                    // EsperEPL2Grammar.g:1497:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime9795);
                    lastOperand655=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand655.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1498:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime9806);
                    lastWeekdayOperand656=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand656.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1499:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime9817);
                    timePeriod657=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod657.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1500:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime9828);
                    expressionQualifyable658=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable658.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1501:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime9839);
                    rangeOperand659=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand659.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1502:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime9851);
                    frequencyOperand660=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand660.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1503:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime9862);
                    lastOperator661=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator661.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1504:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime9874);
                    weekDayOperator662=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator662.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1505:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime9886);
                    numericParameterList663=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList663.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1506:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime9891);
                    numberSetStar664=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar664.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1509:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression665 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1510:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1510:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable9902);
            expression665=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression665.getTree());
            // EsperEPL2Grammar.g:1510:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt243=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt243=1;
                    }
                    break;
                case DESC:
                    {
                    alt243=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt243=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt243=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt243=5;
                    }
                    break;
            }

            switch (alt243) {
                case 1 :
                    // EsperEPL2Grammar.g:1510:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable9907); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1510:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable9911); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1510:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9915); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1510:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9919); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1510:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9923); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d, expression, a, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1511:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1511:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1511:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1511:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1512:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1512:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1512:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1513:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1517:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR666=null;

        CommonTree STAR666_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1518:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1518:4: STAR
            {
            STAR666=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar9980); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR666);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1519:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1519:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1522:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW667=null;

        CommonTree LW667_tree=null;

        try {
            // EsperEPL2Grammar.g:1523:2: ( LW )
            // EsperEPL2Grammar.g:1523:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW667=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10000); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW667_tree = (CommonTree)adaptor.create(LW667);
            root_0 = (CommonTree)adaptor.becomeRoot(LW667_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1526:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST668=null;

        CommonTree LAST668_tree=null;

        try {
            // EsperEPL2Grammar.g:1527:2: ( LAST )
            // EsperEPL2Grammar.g:1527:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST668=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10013); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST668_tree = (CommonTree)adaptor.create(LAST668);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST668_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1530:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR669=null;
        Token DIV670=null;
        EsperEPL2GrammarParser.number_return number671 = null;

        EsperEPL2GrammarParser.substitution_return substitution672 = null;


        CommonTree i_tree=null;
        CommonTree STAR669_tree=null;
        CommonTree DIV670_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1531:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1531:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR669=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10025); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR669);

            DIV670=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10027); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV670);

            // EsperEPL2Grammar.g:1531:13: ( number | i= IDENT | substitution )
            int alt244=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt244=1;
                }
                break;
            case IDENT:
                {
                alt244=2;
                }
                break;
            case QUESTION:
                {
                alt244=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 244, 0, input);

                throw nvae;
            }

            switch (alt244) {
                case 1 :
                    // EsperEPL2Grammar.g:1531:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10030);
                    number671=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number671.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1531:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10034); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1531:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10036);
                    substitution672=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution672.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1532:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1532:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1532:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1532:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1533:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1533:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1533:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1533:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1536:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON675=null;
        EsperEPL2GrammarParser.number_return number673 = null;

        EsperEPL2GrammarParser.substitution_return substitution674 = null;

        EsperEPL2GrammarParser.number_return number676 = null;

        EsperEPL2GrammarParser.substitution_return substitution677 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON675_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1537:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1537:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1537:4: ( number | i1= IDENT | substitution )
            int alt245=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt245=1;
                }
                break;
            case IDENT:
                {
                alt245=2;
                }
                break;
            case QUESTION:
                {
                alt245=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }

            switch (alt245) {
                case 1 :
                    // EsperEPL2Grammar.g:1537:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10085);
                    number673=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number673.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1537:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10089); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1537:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10091);
                    substitution674=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution674.getTree());

                    }
                    break;

            }

            COLON675=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10094); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON675);

            // EsperEPL2Grammar.g:1537:41: ( number | i2= IDENT | substitution )
            int alt246=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt246=1;
                }
                break;
            case IDENT:
                {
                alt246=2;
                }
                break;
            case QUESTION:
                {
                alt246=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }

            switch (alt246) {
                case 1 :
                    // EsperEPL2Grammar.g:1537:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10097);
                    number676=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number676.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1537:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10101); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1537:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10103);
                    substitution677=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution677.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i2, substitution, i2, number, number, substitution, substitution, i1, number, i1
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1538:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1538:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1538:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1538:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1538:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1538:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1539:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1539:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1539:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1539:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1539:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1539:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1540:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1540:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1540:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1540:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1540:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1540:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1541:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1541:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1541:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1541:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1544:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST680=null;
        EsperEPL2GrammarParser.number_return number678 = null;

        EsperEPL2GrammarParser.substitution_return substitution679 = null;


        CommonTree i_tree=null;
        CommonTree LAST680_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1545:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1545:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1545:4: ( number | i= IDENT | substitution )
            int alt247=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt247=1;
                }
                break;
            case IDENT:
                {
                alt247=2;
                }
                break;
            case QUESTION:
                {
                alt247=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }

            switch (alt247) {
                case 1 :
                    // EsperEPL2Grammar.g:1545:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10217);
                    number678=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number678.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1545:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10221); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1545:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10223);
                    substitution679=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution679.getTree());

                    }
                    break;

            }

            LAST680=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10226); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST680);



            // AST REWRITE
            // elements: i, number, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1546:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1546:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1546:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1546:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1547:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1547:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1547:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1547:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1550:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY683=null;
        EsperEPL2GrammarParser.number_return number681 = null;

        EsperEPL2GrammarParser.substitution_return substitution682 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY683_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1551:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1551:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1551:4: ( number | i= IDENT | substitution )
            int alt248=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt248=1;
                }
                break;
            case IDENT:
                {
                alt248=2;
                }
                break;
            case QUESTION:
                {
                alt248=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;
            }

            switch (alt248) {
                case 1 :
                    // EsperEPL2Grammar.g:1551:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10274);
                    number681=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number681.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1551:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10278); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1551:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10280);
                    substitution682=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution682.getTree());

                    }
                    break;

            }

            WEEKDAY683=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10283); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY683);



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1552:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1552:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1552:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1552:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1553:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1553:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1553:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1553:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1556:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK684=null;
        Token COMMA686=null;
        Token RBRACK688=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter685 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter687 = null;


        CommonTree LBRACK684_tree=null;
        CommonTree COMMA686_tree=null;
        CommonTree RBRACK688_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1557:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1557:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK684=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK684);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10332);
            numericListParameter685=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter685.getTree());
            // EsperEPL2Grammar.g:1557:32: ( COMMA numericListParameter )*
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( (LA249_0==COMMA) ) {
                    alt249=1;
                }


                switch (alt249) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1557:33: COMMA numericListParameter
            	    {
            	    COMMA686=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10335); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA686);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10337);
            	    numericListParameter687=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter687.getTree());

            	    }
            	    break;

            	default :
            	    break loop249;
                }
            } while (true);

            RBRACK688=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10341); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK688);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1558:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1558:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1561:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand689 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand690 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant691 = null;



        try {
            // EsperEPL2Grammar.g:1562:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt250=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA250_1 = input.LA(2);

                if ( (LA250_1==COLON) ) {
                    alt250=1;
                }
                else if ( (LA250_1==COMMA||LA250_1==RBRACK) ) {
                    alt250=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA250_2 = input.LA(2);

                if ( (LA250_2==COLON) ) {
                    alt250=1;
                }
                else if ( (LA250_2==COMMA||LA250_2==RBRACK) ) {
                    alt250=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA250_3 = input.LA(2);

                if ( (LA250_3==COLON) ) {
                    alt250=1;
                }
                else if ( (LA250_3==COMMA||LA250_3==RBRACK) ) {
                    alt250=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA250_4 = input.LA(2);

                if ( (LA250_4==COMMA||LA250_4==RBRACK) ) {
                    alt250=3;
                }
                else if ( (LA250_4==COLON) ) {
                    alt250=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 250, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt250=1;
                }
                break;
            case STAR:
                {
                alt250=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt250=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 250, 0, input);

                throw nvae;
            }

            switch (alt250) {
                case 1 :
                    // EsperEPL2Grammar.g:1562:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10363);
                    rangeOperand689=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand689.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1563:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10369);
                    frequencyOperand690=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand690.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1564:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10374);
                    numberconstant691=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant691.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1567:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT693=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic692 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic694 = null;


        CommonTree DOT693_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1568:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1568:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10390);
            eventPropertyAtomic692=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic692.getTree());
            // EsperEPL2Grammar.g:1568:24: ( DOT eventPropertyAtomic )*
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);

                if ( (LA251_0==DOT) ) {
                    alt251=1;
                }


                switch (alt251) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1568:25: DOT eventPropertyAtomic
            	    {
            	    DOT693=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10393); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT693);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10395);
            	    eventPropertyAtomic694=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic694.getTree());

            	    }
            	    break;

            	default :
            	    break loop251;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1569:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1569:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1572:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK696=null;
        Token RPAREN697=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent695 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK696_tree=null;
        CommonTree RPAREN697_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1573:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1573:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10421);
            eventPropertyIdent695=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent695.getTree());
            // EsperEPL2Grammar.g:1573:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt255=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt255=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt255=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt255=3;
                    }
                    break;
            }

            switch (alt255) {
                case 1 :
                    // EsperEPL2Grammar.g:1574:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10430); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10434); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK696=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10436); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK696);

                    // EsperEPL2Grammar.g:1574:32: (q= QUESTION )?
                    int alt252=2;
                    int LA252_0 = input.LA(1);

                    if ( (LA252_0==QUESTION) ) {
                        alt252=1;
                    }
                    switch (alt252) {
                        case 1 :
                            // EsperEPL2Grammar.g:1574:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10441); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1576:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10455); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1576:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==STRING_LITERAL) ) {
                        alt253=1;
                    }
                    else if ( (LA253_0==QUOTED_STRING_LITERAL) ) {
                        alt253=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 253, 0, input);

                        throw nvae;
                    }
                    switch (alt253) {
                        case 1 :
                            // EsperEPL2Grammar.g:1576:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10460); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1576:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10466); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN697=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10469); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN697);

                    // EsperEPL2Grammar.g:1576:66: (q= QUESTION )?
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==QUESTION) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            // EsperEPL2Grammar.g:1576:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10474); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1578:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, ni, eventPropertyIdent, eventPropertyIdent, ni, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, s, eventPropertyIdent
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1581:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1581:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1582:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1582:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1583:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1583:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1584:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1584:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1585:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1585:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1586:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1586:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1589:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR698=null;
        Token DOT699=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR698_tree=null;
        CommonTree DOT699_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1591:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1591:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10611);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1592:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop257:
            do {
                int alt257=2;
                int LA257_0 = input.LA(1);

                if ( (LA257_0==ESCAPECHAR) ) {
                    alt257=1;
                }


                switch (alt257) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1593:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR698=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10623); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR698);

            	    DOT699=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10625); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT699);

            	    // EsperEPL2Grammar.g:1593:24: (ipi2= keywordAllowedIdent )?
            	    int alt256=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt256=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA256_5 = input.LA(2);

            	            if ( (LA256_5==EOF||(LA256_5>=IN_SET && LA256_5<=NOT_EXPR)||(LA256_5>=WHERE && LA256_5<=AS)||(LA256_5>=ELSE && LA256_5<=FROM)||(LA256_5>=INNER && LA256_5<=FULL)||LA256_5==IS||(LA256_5>=GROUP && LA256_5<=HAVING)||LA256_5==ALL||LA256_5==OUTPUT||LA256_5==INSERT||(LA256_5>=ORDER && LA256_5<=DESC)||LA256_5==PATTERN||(LA256_5>=TIMEPERIOD_SEC && LA256_5<=TIMEPERIOD_SECONDS)||LA256_5==ROW_LIMIT_EXPR||(LA256_5>=MATCH_RECOGNIZE && LA256_5<=MEASURES)||(LA256_5>=AFTER && LA256_5<=FOR)||LA256_5==COMMA||(LA256_5>=EQUALS && LA256_5<=COLON)||(LA256_5>=BAND && LA256_5<=MOD)||LA256_5==RCURLY||LA256_5==ESCAPECHAR) ) {
            	                alt256=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA256_23 = input.LA(2);

            	            if ( (LA256_23==LPAREN) ) {
            	                int LA256_170 = input.LA(3);

            	                if ( ((LA256_170>=STRING_LITERAL && LA256_170<=QUOTED_STRING_LITERAL)) ) {
            	                    alt256=1;
            	                }
            	            }
            	            else if ( (LA256_23==EOF||(LA256_23>=IN_SET && LA256_23<=NOT_EXPR)||(LA256_23>=WHERE && LA256_23<=AS)||(LA256_23>=ELSE && LA256_23<=FROM)||(LA256_23>=INNER && LA256_23<=FULL)||LA256_23==IS||(LA256_23>=GROUP && LA256_23<=HAVING)||LA256_23==ALL||LA256_23==OUTPUT||LA256_23==INSERT||(LA256_23>=ORDER && LA256_23<=DESC)||LA256_23==PATTERN||(LA256_23>=TIMEPERIOD_SEC && LA256_23<=TIMEPERIOD_SECONDS)||LA256_23==ROW_LIMIT_EXPR||(LA256_23>=MATCH_RECOGNIZE && LA256_23<=MEASURES)||(LA256_23>=AFTER && LA256_23<=FOR)||LA256_23==COMMA||(LA256_23>=EQUALS && LA256_23<=DOT)||(LA256_23>=RPAREN && LA256_23<=COLON)||(LA256_23>=BAND && LA256_23<=MOD)||LA256_23==RCURLY||LA256_23==ESCAPECHAR) ) {
            	                alt256=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA256_36 = input.LA(2);

            	            if ( (LA256_36==EOF||(LA256_36>=IN_SET && LA256_36<=NOT_EXPR)||(LA256_36>=WHERE && LA256_36<=AS)||(LA256_36>=ELSE && LA256_36<=FROM)||(LA256_36>=INNER && LA256_36<=FULL)||LA256_36==IS||(LA256_36>=GROUP && LA256_36<=HAVING)||LA256_36==ALL||LA256_36==OUTPUT||LA256_36==INSERT||(LA256_36>=ORDER && LA256_36<=DESC)||LA256_36==PATTERN||(LA256_36>=TIMEPERIOD_SEC && LA256_36<=TIMEPERIOD_SECONDS)||LA256_36==ROW_LIMIT_EXPR||(LA256_36>=MATCH_RECOGNIZE && LA256_36<=MEASURES)||(LA256_36>=AFTER && LA256_36<=FOR)||LA256_36==COMMA||(LA256_36>=EQUALS && LA256_36<=COLON)||(LA256_36>=BAND && LA256_36<=MOD)||LA256_36==RCURLY||LA256_36==ESCAPECHAR) ) {
            	                alt256=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA256_37 = input.LA(2);

            	            if ( (LA256_37==EOF||(LA256_37>=IN_SET && LA256_37<=NOT_EXPR)||(LA256_37>=WHERE && LA256_37<=AS)||(LA256_37>=ELSE && LA256_37<=FROM)||(LA256_37>=INNER && LA256_37<=FULL)||LA256_37==IS||(LA256_37>=GROUP && LA256_37<=HAVING)||LA256_37==ALL||LA256_37==OUTPUT||LA256_37==INSERT||(LA256_37>=ORDER && LA256_37<=DESC)||LA256_37==PATTERN||(LA256_37>=TIMEPERIOD_SEC && LA256_37<=TIMEPERIOD_SECONDS)||LA256_37==ROW_LIMIT_EXPR||(LA256_37>=MATCH_RECOGNIZE && LA256_37<=MEASURES)||(LA256_37>=AFTER && LA256_37<=FOR)||LA256_37==COMMA||(LA256_37>=EQUALS && LA256_37<=COLON)||(LA256_37>=BAND && LA256_37<=MOD)||LA256_37==RCURLY||LA256_37==ESCAPECHAR) ) {
            	                alt256=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA256_39 = input.LA(2);

            	            if ( (LA256_39==EOF||(LA256_39>=IN_SET && LA256_39<=NOT_EXPR)||(LA256_39>=WHERE && LA256_39<=AS)||(LA256_39>=ELSE && LA256_39<=FROM)||(LA256_39>=INNER && LA256_39<=FULL)||LA256_39==IS||(LA256_39>=GROUP && LA256_39<=HAVING)||LA256_39==ALL||LA256_39==OUTPUT||LA256_39==INSERT||(LA256_39>=ORDER && LA256_39<=DESC)||LA256_39==PATTERN||(LA256_39>=TIMEPERIOD_SEC && LA256_39<=TIMEPERIOD_SECONDS)||LA256_39==ROW_LIMIT_EXPR||(LA256_39>=MATCH_RECOGNIZE && LA256_39<=MEASURES)||(LA256_39>=AFTER && LA256_39<=FOR)||LA256_39==COMMA||(LA256_39>=EQUALS && LA256_39<=COLON)||(LA256_39>=BAND && LA256_39<=MOD)||LA256_39==RCURLY||LA256_39==ESCAPECHAR) ) {
            	                alt256=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA256_40 = input.LA(2);

            	            if ( (LA256_40==EOF||(LA256_40>=IN_SET && LA256_40<=NOT_EXPR)||(LA256_40>=WHERE && LA256_40<=AS)||(LA256_40>=ELSE && LA256_40<=FROM)||(LA256_40>=INNER && LA256_40<=FULL)||LA256_40==IS||(LA256_40>=GROUP && LA256_40<=HAVING)||LA256_40==ALL||LA256_40==OUTPUT||LA256_40==INSERT||(LA256_40>=ORDER && LA256_40<=DESC)||(LA256_40>=TIMEPERIOD_SEC && LA256_40<=TIMEPERIOD_SECONDS)||LA256_40==ROW_LIMIT_EXPR||(LA256_40>=MATCH_RECOGNIZE && LA256_40<=MEASURES)||(LA256_40>=AFTER && LA256_40<=FOR)||LA256_40==COMMA||(LA256_40>=EQUALS && LA256_40<=COLON)||(LA256_40>=BAND && LA256_40<=MOD)||LA256_40==RCURLY||LA256_40==ESCAPECHAR) ) {
            	                alt256=1;
            	            }
            	            else if ( (LA256_40==PATTERN) ) {
            	                int LA256_478 = input.LA(3);

            	                if ( (LA256_478==LPAREN) ) {
            	                    alt256=1;
            	                }
            	            }
            	            }
            	            break;
            	    }

            	    switch (alt256) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1593:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10629);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop257;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1595:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1595:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1598:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | WHILE | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT700=null;
        Token COUNT701=null;
        Token ESCAPE702=null;
        Token EVERY_EXPR703=null;
        Token SUM704=null;
        Token AVG705=null;
        Token MAX706=null;
        Token MIN707=null;
        Token COALESCE708=null;
        Token MEDIAN709=null;
        Token STDDEV710=null;
        Token AVEDEV711=null;
        Token EVENTS712=null;
        Token FIRST713=null;
        Token LAST714=null;
        Token WHILE715=null;
        Token UNIDIRECTIONAL716=null;
        Token RETAINUNION717=null;
        Token RETAININTERSECTION718=null;
        Token UNTIL719=null;
        Token PATTERN720=null;
        Token SQL721=null;
        Token METADATASQL722=null;
        Token PREVIOUS723=null;
        Token PRIOR724=null;
        Token WEEKDAY725=null;
        Token LW726=null;
        Token INSTANCEOF727=null;
        Token CAST728=null;
        Token SNAPSHOT729=null;
        Token VARIABLE730=null;
        Token INDEX731=null;
        Token WINDOW732=null;
        Token LEFT733=null;
        Token RIGHT734=null;
        Token OUTER735=null;
        Token FULL736=null;
        Token JOIN737=null;
        Token DEFINE738=null;
        Token PARTITION739=null;
        Token MATCHES740=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT700_tree=null;
        CommonTree COUNT701_tree=null;
        CommonTree ESCAPE702_tree=null;
        CommonTree EVERY_EXPR703_tree=null;
        CommonTree SUM704_tree=null;
        CommonTree AVG705_tree=null;
        CommonTree MAX706_tree=null;
        CommonTree MIN707_tree=null;
        CommonTree COALESCE708_tree=null;
        CommonTree MEDIAN709_tree=null;
        CommonTree STDDEV710_tree=null;
        CommonTree AVEDEV711_tree=null;
        CommonTree EVENTS712_tree=null;
        CommonTree FIRST713_tree=null;
        CommonTree LAST714_tree=null;
        CommonTree WHILE715_tree=null;
        CommonTree UNIDIRECTIONAL716_tree=null;
        CommonTree RETAINUNION717_tree=null;
        CommonTree RETAININTERSECTION718_tree=null;
        CommonTree UNTIL719_tree=null;
        CommonTree PATTERN720_tree=null;
        CommonTree SQL721_tree=null;
        CommonTree METADATASQL722_tree=null;
        CommonTree PREVIOUS723_tree=null;
        CommonTree PRIOR724_tree=null;
        CommonTree WEEKDAY725_tree=null;
        CommonTree LW726_tree=null;
        CommonTree INSTANCEOF727_tree=null;
        CommonTree CAST728_tree=null;
        CommonTree SNAPSHOT729_tree=null;
        CommonTree VARIABLE730_tree=null;
        CommonTree INDEX731_tree=null;
        CommonTree WINDOW732_tree=null;
        CommonTree LEFT733_tree=null;
        CommonTree RIGHT734_tree=null;
        CommonTree OUTER735_tree=null;
        CommonTree FULL736_tree=null;
        CommonTree JOIN737_tree=null;
        CommonTree DEFINE738_tree=null;
        CommonTree PARTITION739_tree=null;
        CommonTree MATCHES740_tree=null;

        try {
            // EsperEPL2Grammar.g:1599:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | WHILE | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES )
            int alt258=43;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt258=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt258=2;
                }
                break;
            case AT:
                {
                alt258=3;
                }
                break;
            case COUNT:
                {
                alt258=4;
                }
                break;
            case ESCAPE:
                {
                alt258=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt258=6;
                }
                break;
            case SUM:
                {
                alt258=7;
                }
                break;
            case AVG:
                {
                alt258=8;
                }
                break;
            case MAX:
                {
                alt258=9;
                }
                break;
            case MIN:
                {
                alt258=10;
                }
                break;
            case COALESCE:
                {
                alt258=11;
                }
                break;
            case MEDIAN:
                {
                alt258=12;
                }
                break;
            case STDDEV:
                {
                alt258=13;
                }
                break;
            case AVEDEV:
                {
                alt258=14;
                }
                break;
            case EVENTS:
                {
                alt258=15;
                }
                break;
            case FIRST:
                {
                alt258=16;
                }
                break;
            case LAST:
                {
                alt258=17;
                }
                break;
            case WHILE:
                {
                alt258=18;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt258=19;
                }
                break;
            case RETAINUNION:
                {
                alt258=20;
                }
                break;
            case RETAININTERSECTION:
                {
                alt258=21;
                }
                break;
            case UNTIL:
                {
                alt258=22;
                }
                break;
            case PATTERN:
                {
                alt258=23;
                }
                break;
            case SQL:
                {
                alt258=24;
                }
                break;
            case METADATASQL:
                {
                alt258=25;
                }
                break;
            case PREVIOUS:
                {
                alt258=26;
                }
                break;
            case PRIOR:
                {
                alt258=27;
                }
                break;
            case WEEKDAY:
                {
                alt258=28;
                }
                break;
            case LW:
                {
                alt258=29;
                }
                break;
            case INSTANCEOF:
                {
                alt258=30;
                }
                break;
            case CAST:
                {
                alt258=31;
                }
                break;
            case SNAPSHOT:
                {
                alt258=32;
                }
                break;
            case VARIABLE:
                {
                alt258=33;
                }
                break;
            case INDEX:
                {
                alt258=34;
                }
                break;
            case WINDOW:
                {
                alt258=35;
                }
                break;
            case LEFT:
                {
                alt258=36;
                }
                break;
            case RIGHT:
                {
                alt258=37;
                }
                break;
            case OUTER:
                {
                alt258=38;
                }
                break;
            case FULL:
                {
                alt258=39;
                }
                break;
            case JOIN:
                {
                alt258=40;
                }
                break;
            case DEFINE:
                {
                alt258=41;
                }
                break;
            case PARTITION:
                {
                alt258=42;
                }
                break;
            case MATCHES:
                {
                alt258=43;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 258, 0, input);

                throw nvae;
            }

            switch (alt258) {
                case 1 :
                    // EsperEPL2Grammar.g:1599:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10668); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1600:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10677); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1601:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT700=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10684); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT700_tree = (CommonTree)adaptor.create(AT700);
                    adaptor.addChild(root_0, AT700_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1602:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT701=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10691); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT701_tree = (CommonTree)adaptor.create(COUNT701);
                    adaptor.addChild(root_0, COUNT701_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1603:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE702=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10698); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE702_tree = (CommonTree)adaptor.create(ESCAPE702);
                    adaptor.addChild(root_0, ESCAPE702_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1604:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR703=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10709); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR703_tree = (CommonTree)adaptor.create(EVERY_EXPR703);
                    adaptor.addChild(root_0, EVERY_EXPR703_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1605:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM704=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10716); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM704_tree = (CommonTree)adaptor.create(SUM704);
                    adaptor.addChild(root_0, SUM704_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1606:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG705=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10723); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG705_tree = (CommonTree)adaptor.create(AVG705);
                    adaptor.addChild(root_0, AVG705_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1607:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX706=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10730); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX706_tree = (CommonTree)adaptor.create(MAX706);
                    adaptor.addChild(root_0, MAX706_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1608:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN707=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10737); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN707_tree = (CommonTree)adaptor.create(MIN707);
                    adaptor.addChild(root_0, MIN707_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1609:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE708=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10744); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE708_tree = (CommonTree)adaptor.create(COALESCE708);
                    adaptor.addChild(root_0, COALESCE708_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1610:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN709=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10751); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN709_tree = (CommonTree)adaptor.create(MEDIAN709);
                    adaptor.addChild(root_0, MEDIAN709_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1611:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV710=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10758); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV710_tree = (CommonTree)adaptor.create(STDDEV710);
                    adaptor.addChild(root_0, STDDEV710_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1612:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV711=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10765); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV711_tree = (CommonTree)adaptor.create(AVEDEV711);
                    adaptor.addChild(root_0, AVEDEV711_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1613:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS712=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10772); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS712_tree = (CommonTree)adaptor.create(EVENTS712);
                    adaptor.addChild(root_0, EVENTS712_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1614:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST713=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10779); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST713_tree = (CommonTree)adaptor.create(FIRST713);
                    adaptor.addChild(root_0, FIRST713_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1615:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST714=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10786); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST714_tree = (CommonTree)adaptor.create(LAST714);
                    adaptor.addChild(root_0, LAST714_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1616:4: WHILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WHILE715=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent10793); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE715_tree = (CommonTree)adaptor.create(WHILE715);
                    adaptor.addChild(root_0, WHILE715_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1617:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL716=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10800); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL716_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL716);
                    adaptor.addChild(root_0, UNIDIRECTIONAL716_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1618:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION717=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent10807); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION717_tree = (CommonTree)adaptor.create(RETAINUNION717);
                    adaptor.addChild(root_0, RETAINUNION717_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1619:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION718=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10814); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION718_tree = (CommonTree)adaptor.create(RETAININTERSECTION718);
                    adaptor.addChild(root_0, RETAININTERSECTION718_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1620:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL719=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent10821); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL719_tree = (CommonTree)adaptor.create(UNTIL719);
                    adaptor.addChild(root_0, UNTIL719_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1621:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN720=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent10828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN720_tree = (CommonTree)adaptor.create(PATTERN720);
                    adaptor.addChild(root_0, PATTERN720_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1622:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL721=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent10835); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL721_tree = (CommonTree)adaptor.create(SQL721);
                    adaptor.addChild(root_0, SQL721_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1623:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL722=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent10842); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL722_tree = (CommonTree)adaptor.create(METADATASQL722);
                    adaptor.addChild(root_0, METADATASQL722_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1624:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS723=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent10849); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS723_tree = (CommonTree)adaptor.create(PREVIOUS723);
                    adaptor.addChild(root_0, PREVIOUS723_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1625:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR724=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent10856); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR724_tree = (CommonTree)adaptor.create(PRIOR724);
                    adaptor.addChild(root_0, PRIOR724_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1626:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY725=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent10863); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY725_tree = (CommonTree)adaptor.create(WEEKDAY725);
                    adaptor.addChild(root_0, WEEKDAY725_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1627:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW726=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent10870); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW726_tree = (CommonTree)adaptor.create(LW726);
                    adaptor.addChild(root_0, LW726_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1628:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF727=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent10877); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF727_tree = (CommonTree)adaptor.create(INSTANCEOF727);
                    adaptor.addChild(root_0, INSTANCEOF727_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1629:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST728=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent10884); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST728_tree = (CommonTree)adaptor.create(CAST728);
                    adaptor.addChild(root_0, CAST728_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1630:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT729=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent10891); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT729_tree = (CommonTree)adaptor.create(SNAPSHOT729);
                    adaptor.addChild(root_0, SNAPSHOT729_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1631:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE730=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent10898); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE730_tree = (CommonTree)adaptor.create(VARIABLE730);
                    adaptor.addChild(root_0, VARIABLE730_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1632:4: INDEX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INDEX731=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent10907); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX731_tree = (CommonTree)adaptor.create(INDEX731);
                    adaptor.addChild(root_0, INDEX731_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1633:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW732=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent10916); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW732_tree = (CommonTree)adaptor.create(WINDOW732);
                    adaptor.addChild(root_0, WINDOW732_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1634:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT733=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent10923); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT733_tree = (CommonTree)adaptor.create(LEFT733);
                    adaptor.addChild(root_0, LEFT733_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1635:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT734=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent10930); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT734_tree = (CommonTree)adaptor.create(RIGHT734);
                    adaptor.addChild(root_0, RIGHT734_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1636:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER735=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent10937); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER735_tree = (CommonTree)adaptor.create(OUTER735);
                    adaptor.addChild(root_0, OUTER735_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 39 :
                    // EsperEPL2Grammar.g:1637:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL736=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent10944); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL736_tree = (CommonTree)adaptor.create(FULL736);
                    adaptor.addChild(root_0, FULL736_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 40 :
                    // EsperEPL2Grammar.g:1638:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN737=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent10951); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN737_tree = (CommonTree)adaptor.create(JOIN737);
                    adaptor.addChild(root_0, JOIN737_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;
                case 41 :
                    // EsperEPL2Grammar.g:1639:4: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DEFINE738=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent10958); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE738_tree = (CommonTree)adaptor.create(DEFINE738);
                    adaptor.addChild(root_0, DEFINE738_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }

                    }
                    break;
                case 42 :
                    // EsperEPL2Grammar.g:1640:4: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PARTITION739=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent10965); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION739_tree = (CommonTree)adaptor.create(PARTITION739);
                    adaptor.addChild(root_0, PARTITION739_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }

                    }
                    break;
                case 43 :
                    // EsperEPL2Grammar.g:1641:4: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MATCHES740=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent10972); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES740_tree = (CommonTree)adaptor.create(MATCHES740);
                    adaptor.addChild(root_0, MATCHES740_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableStr"
    // EsperEPL2Grammar.g:1644:1: escapableStr returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1645:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( (LA259_0==IDENT) ) {
                alt259=1;
            }
            else if ( (LA259_0==TICKED_STRING_LITERAL) ) {
                alt259=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }
            switch (alt259) {
                case 1 :
                    // EsperEPL2Grammar.g:1645:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr10993); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1646:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11002); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableStr"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1649:1: escapableIdent : ( IDENT | t= TICKED_STRING_LITERAL -> IDENT[$t] );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token IDENT741=null;

        CommonTree t_tree=null;
        CommonTree IDENT741_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1650:2: ( IDENT | t= TICKED_STRING_LITERAL -> IDENT[$t] )
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==IDENT) ) {
                alt260=1;
            }
            else if ( (LA260_0==TICKED_STRING_LITERAL) ) {
                alt260=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    // EsperEPL2Grammar.g:1650:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT741=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11016); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT741_tree = (CommonTree)adaptor.create(IDENT741);
                    adaptor.addChild(root_0, IDENT741_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1651:4: t= TICKED_STRING_LITERAL
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11024); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1651:28: -> IDENT[$t]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1654:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart742 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart743 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart744 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart745 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart746 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart747 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart748 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart749 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart750 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart751 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart752 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart753 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart754 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart755 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart756 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1655:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1656:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1656:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt271=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt271=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt271=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt271=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt271=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt271=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt271=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt271=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt271=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt271=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt271=2;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt271=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt271=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt271=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt271=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt271=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt271=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt271=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt271=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt271=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt271=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt271=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt271=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt271=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt271=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt271=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt271=2;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt271=4;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt271=5;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt271=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt271=3;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 271, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);

                throw nvae;
            }

            switch (alt271) {
                case 1 :
                    // EsperEPL2Grammar.g:1657:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11049);
                    dayPart742=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart742.getTree());
                    // EsperEPL2Grammar.g:1657:11: ( hourPart )?
                    int alt261=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA261_1 = input.LA(2);

                            if ( ((LA261_1>=TIMEPERIOD_HOUR && LA261_1<=TIMEPERIOD_HOURS)) ) {
                                alt261=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA261_2 = input.LA(2);

                            if ( ((LA261_2>=TIMEPERIOD_HOUR && LA261_2<=TIMEPERIOD_HOURS)) ) {
                                alt261=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA261_3 = input.LA(2);

                            if ( ((LA261_3>=TIMEPERIOD_HOUR && LA261_3<=TIMEPERIOD_HOURS)) ) {
                                alt261=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA261_4 = input.LA(2);

                            if ( ((LA261_4>=TIMEPERIOD_HOUR && LA261_4<=TIMEPERIOD_HOURS)) ) {
                                alt261=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA261_5 = input.LA(2);

                            if ( ((LA261_5>=TIMEPERIOD_HOUR && LA261_5<=TIMEPERIOD_HOURS)) ) {
                                alt261=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA261_6 = input.LA(2);

                            if ( ((LA261_6>=TIMEPERIOD_HOUR && LA261_6<=TIMEPERIOD_HOURS)) ) {
                                alt261=1;
                            }
                            }
                            break;
                    }

                    switch (alt261) {
                        case 1 :
                            // EsperEPL2Grammar.g:1657:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11051);
                            hourPart743=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart743.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1657:21: ( minutePart )?
                    int alt262=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA262_1 = input.LA(2);

                            if ( (LA262_1==MIN||(LA262_1>=TIMEPERIOD_MINUTE && LA262_1<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA262_2 = input.LA(2);

                            if ( (LA262_2==MIN||(LA262_2>=TIMEPERIOD_MINUTE && LA262_2<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA262_3 = input.LA(2);

                            if ( (LA262_3==MIN||(LA262_3>=TIMEPERIOD_MINUTE && LA262_3<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA262_4 = input.LA(2);

                            if ( (LA262_4==MIN||(LA262_4>=TIMEPERIOD_MINUTE && LA262_4<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA262_5 = input.LA(2);

                            if ( (LA262_5==MIN||(LA262_5>=TIMEPERIOD_MINUTE && LA262_5<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA262_6 = input.LA(2);

                            if ( (LA262_6==MIN||(LA262_6>=TIMEPERIOD_MINUTE && LA262_6<=TIMEPERIOD_MINUTES)) ) {
                                alt262=1;
                            }
                            }
                            break;
                    }

                    switch (alt262) {
                        case 1 :
                            // EsperEPL2Grammar.g:1657:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11054);
                            minutePart744=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart744.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1657:33: ( secondPart )?
                    int alt263=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA263_1 = input.LA(2);

                            if ( ((LA263_1>=TIMEPERIOD_SEC && LA263_1<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA263_2 = input.LA(2);

                            if ( ((LA263_2>=TIMEPERIOD_SEC && LA263_2<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA263_3 = input.LA(2);

                            if ( ((LA263_3>=TIMEPERIOD_SEC && LA263_3<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA263_4 = input.LA(2);

                            if ( ((LA263_4>=TIMEPERIOD_SEC && LA263_4<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA263_5 = input.LA(2);

                            if ( ((LA263_5>=TIMEPERIOD_SEC && LA263_5<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA263_6 = input.LA(2);

                            if ( ((LA263_6>=TIMEPERIOD_SEC && LA263_6<=TIMEPERIOD_SECONDS)) ) {
                                alt263=1;
                            }
                            }
                            break;
                    }

                    switch (alt263) {
                        case 1 :
                            // EsperEPL2Grammar.g:1657:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11057);
                            secondPart745=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart745.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1657:45: ( millisecondPart )?
                    int alt264=2;
                    int LA264_0 = input.LA(1);

                    if ( (LA264_0==NUM_DOUBLE||LA264_0==IDENT||LA264_0==QUESTION||LA264_0==NUM_INT||(LA264_0>=NUM_LONG && LA264_0<=NUM_FLOAT)) ) {
                        alt264=1;
                    }
                    switch (alt264) {
                        case 1 :
                            // EsperEPL2Grammar.g:1657:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11060);
                            millisecondPart746=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart746.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1658:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11066);
                    hourPart747=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart747.getTree());
                    // EsperEPL2Grammar.g:1658:13: ( minutePart )?
                    int alt265=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA265_1 = input.LA(2);

                            if ( (LA265_1==MIN||(LA265_1>=TIMEPERIOD_MINUTE && LA265_1<=TIMEPERIOD_MINUTES)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA265_2 = input.LA(2);

                            if ( (LA265_2==MIN||(LA265_2>=TIMEPERIOD_MINUTE && LA265_2<=TIMEPERIOD_MINUTES)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA265_3 = input.LA(2);

                            if ( (LA265_3==MIN||(LA265_3>=TIMEPERIOD_MINUTE && LA265_3<=TIMEPERIOD_MINUTES)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA265_4 = input.LA(2);

                            if ( (LA265_4==MIN||(LA265_4>=TIMEPERIOD_MINUTE && LA265_4<=TIMEPERIOD_MINUTES)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA265_5 = input.LA(2);

                            if ( (LA265_5==MIN||(LA265_5>=TIMEPERIOD_MINUTE && LA265_5<=TIMEPERIOD_MINUTES)) ) {
                                alt265=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA265_6 = input.LA(2);

                            if ( (LA265_6==MIN||(LA265_6>=TIMEPERIOD_MINUTE && LA265_6<=TIMEPERIOD_MINUTES)) ) {
                                alt265=1;
                            }
                            }
                            break;
                    }

                    switch (alt265) {
                        case 1 :
                            // EsperEPL2Grammar.g:1658:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11068);
                            minutePart748=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart748.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1658:25: ( secondPart )?
                    int alt266=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA266_1 = input.LA(2);

                            if ( ((LA266_1>=TIMEPERIOD_SEC && LA266_1<=TIMEPERIOD_SECONDS)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA266_2 = input.LA(2);

                            if ( ((LA266_2>=TIMEPERIOD_SEC && LA266_2<=TIMEPERIOD_SECONDS)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA266_3 = input.LA(2);

                            if ( ((LA266_3>=TIMEPERIOD_SEC && LA266_3<=TIMEPERIOD_SECONDS)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA266_4 = input.LA(2);

                            if ( ((LA266_4>=TIMEPERIOD_SEC && LA266_4<=TIMEPERIOD_SECONDS)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA266_5 = input.LA(2);

                            if ( ((LA266_5>=TIMEPERIOD_SEC && LA266_5<=TIMEPERIOD_SECONDS)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA266_6 = input.LA(2);

                            if ( ((LA266_6>=TIMEPERIOD_SEC && LA266_6<=TIMEPERIOD_SECONDS)) ) {
                                alt266=1;
                            }
                            }
                            break;
                    }

                    switch (alt266) {
                        case 1 :
                            // EsperEPL2Grammar.g:1658:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11071);
                            secondPart749=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart749.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1658:37: ( millisecondPart )?
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==NUM_DOUBLE||LA267_0==IDENT||LA267_0==QUESTION||LA267_0==NUM_INT||(LA267_0>=NUM_LONG && LA267_0<=NUM_FLOAT)) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            // EsperEPL2Grammar.g:1658:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11074);
                            millisecondPart750=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart750.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1659:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11080);
                    minutePart751=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart751.getTree());
                    // EsperEPL2Grammar.g:1659:15: ( secondPart )?
                    int alt268=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA268_1 = input.LA(2);

                            if ( ((LA268_1>=TIMEPERIOD_SEC && LA268_1<=TIMEPERIOD_SECONDS)) ) {
                                alt268=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA268_2 = input.LA(2);

                            if ( ((LA268_2>=TIMEPERIOD_SEC && LA268_2<=TIMEPERIOD_SECONDS)) ) {
                                alt268=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA268_3 = input.LA(2);

                            if ( ((LA268_3>=TIMEPERIOD_SEC && LA268_3<=TIMEPERIOD_SECONDS)) ) {
                                alt268=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA268_4 = input.LA(2);

                            if ( ((LA268_4>=TIMEPERIOD_SEC && LA268_4<=TIMEPERIOD_SECONDS)) ) {
                                alt268=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA268_5 = input.LA(2);

                            if ( ((LA268_5>=TIMEPERIOD_SEC && LA268_5<=TIMEPERIOD_SECONDS)) ) {
                                alt268=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA268_6 = input.LA(2);

                            if ( ((LA268_6>=TIMEPERIOD_SEC && LA268_6<=TIMEPERIOD_SECONDS)) ) {
                                alt268=1;
                            }
                            }
                            break;
                    }

                    switch (alt268) {
                        case 1 :
                            // EsperEPL2Grammar.g:1659:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11082);
                            secondPart752=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart752.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1659:27: ( millisecondPart )?
                    int alt269=2;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==NUM_DOUBLE||LA269_0==IDENT||LA269_0==QUESTION||LA269_0==NUM_INT||(LA269_0>=NUM_LONG && LA269_0<=NUM_FLOAT)) ) {
                        alt269=1;
                    }
                    switch (alt269) {
                        case 1 :
                            // EsperEPL2Grammar.g:1659:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11085);
                            millisecondPart753=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart753.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1660:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11091);
                    secondPart754=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart754.getTree());
                    // EsperEPL2Grammar.g:1660:15: ( millisecondPart )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==NUM_DOUBLE||LA270_0==IDENT||LA270_0==QUESTION||LA270_0==NUM_INT||(LA270_0>=NUM_LONG && LA270_0<=NUM_FLOAT)) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // EsperEPL2Grammar.g:1660:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11093);
                            millisecondPart755=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart755.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1661:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11099);
                    millisecondPart756=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart756.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: dayPart, hourPart, secondPart, minutePart, millisecondPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1663:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1663:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1663:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1663:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1663:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1663:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1663:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1666:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS759=null;
        Token TIMEPERIOD_DAY760=null;
        EsperEPL2GrammarParser.number_return number757 = null;

        EsperEPL2GrammarParser.substitution_return substitution758 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS759_tree=null;
        CommonTree TIMEPERIOD_DAY760_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1667:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1667:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1667:4: ( number | i= IDENT | substitution )
            int alt272=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt272=1;
                }
                break;
            case IDENT:
                {
                alt272=2;
                }
                break;
            case QUESTION:
                {
                alt272=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }

            switch (alt272) {
                case 1 :
                    // EsperEPL2Grammar.g:1667:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart11137);
                    number757=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number757.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1667:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart11141); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1667:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart11143);
                    substitution758=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution758.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1667:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt273=2;
            int LA273_0 = input.LA(1);

            if ( (LA273_0==TIMEPERIOD_DAYS) ) {
                alt273=1;
            }
            else if ( (LA273_0==TIMEPERIOD_DAY) ) {
                alt273=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    // EsperEPL2Grammar.g:1667:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS759=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart11147); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS759);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1667:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY760=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart11151); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY760);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1668:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1668:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1668:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1668:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1669:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1669:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1669:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1669:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1672:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS763=null;
        Token TIMEPERIOD_HOUR764=null;
        EsperEPL2GrammarParser.number_return number761 = null;

        EsperEPL2GrammarParser.substitution_return substitution762 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS763_tree=null;
        CommonTree TIMEPERIOD_HOUR764_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1673:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1673:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1673:4: ( number | i= IDENT | substitution )
            int alt274=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt274=1;
                }
                break;
            case IDENT:
                {
                alt274=2;
                }
                break;
            case QUESTION:
                {
                alt274=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);

                throw nvae;
            }

            switch (alt274) {
                case 1 :
                    // EsperEPL2Grammar.g:1673:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart11200);
                    number761=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number761.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1673:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11204); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1673:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11206);
                    substitution762=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution762.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1673:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt275=2;
            int LA275_0 = input.LA(1);

            if ( (LA275_0==TIMEPERIOD_HOURS) ) {
                alt275=1;
            }
            else if ( (LA275_0==TIMEPERIOD_HOUR) ) {
                alt275=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                throw nvae;
            }
            switch (alt275) {
                case 1 :
                    // EsperEPL2Grammar.g:1673:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS763=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11210); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS763);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1673:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR764=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11214); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR764);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1674:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1674:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1674:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1674:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1675:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1675:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1675:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1675:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1678:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES767=null;
        Token TIMEPERIOD_MINUTE768=null;
        Token MIN769=null;
        EsperEPL2GrammarParser.number_return number765 = null;

        EsperEPL2GrammarParser.substitution_return substitution766 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES767_tree=null;
        CommonTree TIMEPERIOD_MINUTE768_tree=null;
        CommonTree MIN769_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1679:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1679:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1679:4: ( number | i= IDENT | substitution )
            int alt276=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt276=1;
                }
                break;
            case IDENT:
                {
                alt276=2;
                }
                break;
            case QUESTION:
                {
                alt276=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);

                throw nvae;
            }

            switch (alt276) {
                case 1 :
                    // EsperEPL2Grammar.g:1679:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart11263);
                    number765=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number765.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1679:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11267); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1679:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11269);
                    substitution766=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution766.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1679:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt277=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt277=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt277=2;
                }
                break;
            case MIN:
                {
                alt277=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;
            }

            switch (alt277) {
                case 1 :
                    // EsperEPL2Grammar.g:1679:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES767=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11273); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES767);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1679:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE768=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11277); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE768);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1679:76: MIN
                    {
                    MIN769=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11281); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN769);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1680:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1680:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1680:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1680:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1681:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1681:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1681:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1681:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1684:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS772=null;
        Token TIMEPERIOD_SECOND773=null;
        Token TIMEPERIOD_SEC774=null;
        EsperEPL2GrammarParser.number_return number770 = null;

        EsperEPL2GrammarParser.substitution_return substitution771 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS772_tree=null;
        CommonTree TIMEPERIOD_SECOND773_tree=null;
        CommonTree TIMEPERIOD_SEC774_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1685:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1685:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1685:4: ( number | i= IDENT | substitution )
            int alt278=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt278=1;
                }
                break;
            case IDENT:
                {
                alt278=2;
                }
                break;
            case QUESTION:
                {
                alt278=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);

                throw nvae;
            }

            switch (alt278) {
                case 1 :
                    // EsperEPL2Grammar.g:1685:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart11331);
                    number770=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number770.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1685:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11335); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1685:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11337);
                    substitution771=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution771.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1685:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt279=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt279=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt279=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt279=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 279, 0, input);

                throw nvae;
            }

            switch (alt279) {
                case 1 :
                    // EsperEPL2Grammar.g:1685:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS772=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS772);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1685:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND773=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND773);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1685:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC774=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11349); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC774);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1686:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1686:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1686:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1686:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1687:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1687:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1687:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1687:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1690:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS777=null;
        Token TIMEPERIOD_MILLISECOND778=null;
        Token TIMEPERIOD_MILLISEC779=null;
        EsperEPL2GrammarParser.number_return number775 = null;

        EsperEPL2GrammarParser.substitution_return substitution776 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS777_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND778_tree=null;
        CommonTree TIMEPERIOD_MILLISEC779_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1691:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1691:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1691:4: ( number | i= IDENT | substitution )
            int alt280=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt280=1;
                }
                break;
            case IDENT:
                {
                alt280=2;
                }
                break;
            case QUESTION:
                {
                alt280=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);

                throw nvae;
            }

            switch (alt280) {
                case 1 :
                    // EsperEPL2Grammar.g:1691:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11399);
                    number775=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number775.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1691:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11403); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1691:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11405);
                    substitution776=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution776.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1691:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt281=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt281=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt281=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt281=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);

                throw nvae;
            }

            switch (alt281) {
                case 1 :
                    // EsperEPL2Grammar.g:1691:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS777=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11409); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS777);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1691:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND778=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND778);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1691:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC779=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11417); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC779);


                    }
                    break;

            }



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1692:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1692:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1692:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1692:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1693:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1693:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1693:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1693:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1696:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1697:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt282=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt282=1;
                }
                break;
            case NUM_LONG:
                {
                alt282=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt282=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt282=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);

                throw nvae;
            }

            switch (alt282) {
                case 1 :
                    // EsperEPL2Grammar.g:1697:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11472); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1697:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1698:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11489); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1698:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1699:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11506); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1699:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1700:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1700:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1703:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1704:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1704:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11544); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1704:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1707:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant780 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant781 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1708:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt283=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt283=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt283=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt283=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt283=4;
                }
                break;
            case VALUE_NULL:
                {
                alt283=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                throw nvae;
            }

            switch (alt283) {
                case 1 :
                    // EsperEPL2Grammar.g:1708:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant11563);
                    numberconstant780=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant780.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1709:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant11570);
                    stringconstant781=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant781.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1710:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1710:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1710:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1711:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant11603); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1711:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1711:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1712:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant11623); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1712:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1712:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1715:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number782 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1716:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1716:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1716:5: (m= MINUS | p= PLUS )?
            int alt284=3;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==MINUS) ) {
                alt284=1;
            }
            else if ( (LA284_0==PLUS) ) {
                alt284=2;
            }
            switch (alt284) {
                case 1 :
                    // EsperEPL2Grammar.g:1716:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11645); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1716:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11651); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11655);
            number782=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number782.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1717:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number782!=null?((CommonTree)number782.tree):null).getType(), "-" + (number782!=null?input.toString(number782.start,number782.stop):null)));

            }
            else // 1718:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1721:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1722:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==STRING_LITERAL) ) {
                alt285=1;
            }
            else if ( (LA285_0==QUOTED_STRING_LITERAL) ) {
                alt285=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);

                throw nvae;
            }
            switch (alt285) {
                case 1 :
                    // EsperEPL2Grammar.g:1722:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11684); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1722:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1722:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1723:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"token retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1723:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1723:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:849:4: ( streamSelector )
        // EsperEPL2Grammar.g:849:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4151);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1027:9: ( timePeriod )
        // EsperEPL2Grammar.g:1027:10: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5524);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1196:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1196:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7344);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1284:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1284:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8118);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1294:4: ( eventProperty )
        // EsperEPL2Grammar.g:1294:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8186);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1447:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1447:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9367);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1497:7: ( lastOperand )
        // EsperEPL2Grammar.g:1497:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar9790);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1498:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1498:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar9801);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1499:4: ( timePeriod )
        // EsperEPL2Grammar.g:1499:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar9812);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1500:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1500:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar9823);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1501:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1501:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar9834);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1502:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1502:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar9846);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1503:4: ( lastOperator )
        // EsperEPL2Grammar.g:1503:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar9857);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1504:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1504:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar9868);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // $ANTLR start synpred15_EsperEPL2Grammar
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1505:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1505:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar9881);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA170 dfa170 = new DFA170(this);
    protected DFA198 dfa198 = new DFA198(this);
    static final String DFA170_eotS =
        "\u09d4\uffff";
    static final String DFA170_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\10\uffff"+
        "\2\16\2\uffff\2\16\3\uffff\1\16\u09a3\uffff";
    static final String DFA170_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\10\uffff\2\6\2\uffff\2\6\3\uffff\1\6\10\uffff\1\u010a\157\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\u0113\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\11"+
        "\uffff\2\6\76\uffff\2\6\75\uffff\2\6\73\uffff\2\6\75\uffff\2\6\75"+
        "\uffff\2\6\64\uffff\2\6\106\uffff\2\6\74\uffff\2\6\63\uffff\2\6"+
        "\105\uffff\2\6\64\uffff\2\6\73\uffff\2\6\173\uffff\1\0\5\uffff\1"+
        "\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff"+
        "\1\0\31\uffff\1\0\u0082\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA170_maxS =
        "\2\u0128\13\uffff\1\u0128\3\uffff\1\u0125\2\uffff\2\u0125\2\uffff"+
        "\4\u0125\1\uffff\2\u0125\10\uffff\2\u0125\2\uffff\2\u0125\3\uffff"+
        "\1\u0125\10\uffff\1\u010a\157\uffff\1\u0128\72\uffff\1\u0128\72"+
        "\uffff\1\u0128\72\uffff\1\u0128\72\uffff\1\u0128\72\uffff\1\u0128"+
        "\72\uffff\1\u0128\72\uffff\1\u0128\72\uffff\1\u0128\72\uffff\1\u0128"+
        "\72\uffff\1\u0123\72\uffff\1\u0128\72\uffff\1\u0128\72\uffff\1\u0128"+
        "\72\uffff\1\u0126\11\uffff\2\u0120\76\uffff\2\u0120\75\uffff\2\u0120"+
        "\73\uffff\2\u0120\75\uffff\2\u0120\75\uffff\2\u0120\64\uffff\2\u0120"+
        "\106\uffff\2\u0120\74\uffff\2\u0120\63\uffff\2\u0120\105\uffff\2"+
        "\u0120\64\uffff\2\u0120\73\uffff\2\u0120\173\uffff\1\0\5\uffff\1"+
        "\0\53\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\114\uffff"+
        "\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\55\uffff"+
        "\1\0\31\uffff\1\0\u0082\uffff\1\0\30\uffff\1\0\5\uffff";
    static final String DFA170_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\53\uffff\1\6\1\7\4\uffff"+
        "\1\1\52\uffff\1\10\1\4\u0377\uffff\11\6\2\uffff\76\6\2\uffff\75"+
        "\6\2\uffff\73\6\2\uffff\75\6\2\uffff\75\6\2\uffff\64\6\2\uffff\106"+
        "\6\2\uffff\74\6\2\uffff\63\6\2\uffff\74\6\2\uffff\7\6\2\uffff\64"+
        "\6\2\uffff\73\6\2\uffff\74\6\1\11\76\6\1\uffff\5\6\1\uffff\53\6"+
        "\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\36\6\2\uffff\54"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31\6\1\uffff\31\6\1\uffff\55"+
        "\6\1\uffff\31\6\1\uffff\36\6\1\uffff\31\6\1\uffff\32\6\2\uffff\55"+
        "\6\1\uffff\30\6\1\uffff\5\6";
    static final String DFA170_specialS =
        "\1\0\u00a8\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1\4\72"+
        "\uffff\1\5\72\uffff\1\6\72\uffff\1\7\72\uffff\1\10\72\uffff\1\11"+
        "\72\uffff\1\12\72\uffff\1\13\72\uffff\1\14\72\uffff\1\15\72\uffff"+
        "\1\16\72\uffff\1\17\11\uffff\1\20\1\21\76\uffff\1\22\1\23\75\uffff"+
        "\1\24\1\25\73\uffff\1\26\1\27\75\uffff\1\30\1\31\75\uffff\1\32\1"+
        "\33\64\uffff\1\34\1\35\106\uffff\1\36\1\37\74\uffff\1\40\1\41\63"+
        "\uffff\1\42\1\43\105\uffff\1\44\1\45\64\uffff\1\46\1\47\73\uffff"+
        "\1\50\1\51\173\uffff\1\52\5\uffff\1\53\53\uffff\1\54\30\uffff\1"+
        "\55\30\uffff\1\56\30\uffff\1\57\114\uffff\1\60\30\uffff\1\61\30"+
        "\uffff\1\62\30\uffff\1\63\30\uffff\1\64\30\uffff\1\65\31\uffff\1"+
        "\66\5\uffff\1\67\31\uffff\1\70\31\uffff\1\71\55\uffff\1\72\31\uffff"+
        "\1\73\u0082\uffff\1\74\30\uffff\1\75\5\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\60\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\47\1\50\1\71\2\16\1\53\1\54\1\72"+
            "\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2\5\uffff\3\16\2\uffff"+
            "\1\16\u008a\uffff\1\2\16\uffff\1\16\2\uffff\1\15\5\uffff\1\2"+
            "\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff\1\73\1\uffff\1\2\2\uffff"+
            "\1\16\2\2",
            "\1\100\4\uffff\1\100\3\uffff\1\100\3\uffff\11\100\10\uffff"+
            "\1\100\1\uffff\4\100\12\uffff\3\100\11\uffff\10\100\1\uffff"+
            "\4\100\2\uffff\1\100\1\uffff\4\100\24\uffff\3\100\2\uffff\1"+
            "\100\u008a\uffff\1\2\16\uffff\1\100\33\uffff\1\2\2\uffff\1\100"+
            "\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\154\4\uffff\1\154\2\uffff\2\154\3\uffff\11\154\1\153\1"+
            "\154\6\uffff\1\154\1\uffff\4\154\12\uffff\3\154\11\uffff\16"+
            "\154\1\uffff\1\154\1\uffff\4\154\14\uffff\3\154\5\uffff\3\154"+
            "\2\uffff\1\154\u008a\uffff\1\154\16\uffff\1\154\2\uffff\1\154"+
            "\5\uffff\2\154\1\uffff\2\154\11\uffff\1\154\2\uffff\1\154\1"+
            "\uffff\1\154\2\uffff\3\154",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u00a9\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u00e4\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u011f\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u015a\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0195\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u01d0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u020b\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0246\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0281\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u02bc\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u02f7\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0332\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u036d\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\27\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u03a8\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03e3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0416\4\uffff\1\u03f8\2\uffff\1\u0422\1\u03f9\3\uffff\1"+
            "\u03fa\1\u03fb\1\u03fc\1\u03fd\1\u03fe\1\u03ff\1\u0400\1\u0401"+
            "\1\u03f7\1\uffff\1\u03e6\6\uffff\1\u0419\1\uffff\1\u041b\1\u0417"+
            "\1\u0418\1\u041a\5\uffff\1\u03e5\1\u03e4\3\uffff\1\u0402\1\u0403"+
            "\1\u0404\11\uffff\1\u0406\1\u0407\1\u0408\1\u040a\1\u040b\1"+
            "\u040c\1\u040d\1\u040e\1\u041f\1\u040f\1\u0410\1\u0411\1\u0412"+
            "\1\u0420\1\uffff\1\u0413\1\uffff\1\u0414\1\u0409\1\u03f6\1\u0415"+
            "\14\uffff\1\u03ef\1\u03f0\1\u03f1\5\uffff\1\u041c\1\u041d\1"+
            "\u041e\2\uffff\1\u0405\u008a\uffff\1\u03ec\16\uffff\1\u03f4"+
            "\2\uffff\1\u03f3\3\uffff\1\u0423\1\uffff\1\u03e8\1\u03f2\1\uffff"+
            "\1\u03ed\1\u03ee\11\uffff\1\u03e7\2\uffff\1\u0421\1\uffff\1"+
            "\u03e9\2\uffff\1\u03f5\1\u03ea\1\u03eb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0456\4\uffff\1\u0438\2\uffff\1\u0462\1\u0439\3\uffff\1"+
            "\u043a\1\u043b\1\u043c\1\u043d\1\u043e\1\u043f\1\u0440\1\u0441"+
            "\1\u0437\1\uffff\1\u0426\6\uffff\1\u0459\1\uffff\1\u045b\1\u0457"+
            "\1\u0458\1\u045a\5\uffff\1\u0425\1\u0424\3\uffff\1\u0442\1\u0443"+
            "\1\u0444\11\uffff\1\u0446\1\u0447\1\u0448\1\u044a\1\u044b\1"+
            "\u044c\1\u044d\1\u044e\1\u045f\1\u044f\1\u0450\1\u0451\1\u0452"+
            "\1\u0460\1\uffff\1\u0453\1\uffff\1\u0454\1\u0449\1\u0436\1\u0455"+
            "\14\uffff\1\u042f\1\u0430\1\u0431\5\uffff\1\u045c\1\u045d\1"+
            "\u045e\2\uffff\1\u0445\u008a\uffff\1\u042c\16\uffff\1\u0434"+
            "\2\uffff\1\u0433\5\uffff\1\u0428\1\u0432\1\uffff\1\u042d\1\u042e"+
            "\11\uffff\1\u0427\2\uffff\1\u0461\1\uffff\1\u0429\2\uffff\1"+
            "\u0435\1\u042a\1\u042b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0495\4\uffff\1\u0477\2\uffff\1\u04a1\1\u0478\3\uffff\1"+
            "\u0479\1\u047a\1\u047b\1\u047c\1\u047d\1\u047e\1\u047f\1\u0480"+
            "\1\u0476\1\uffff\1\u0465\6\uffff\1\u0498\1\uffff\1\u049a\1\u0496"+
            "\1\u0497\1\u0499\5\uffff\1\u0464\1\u0463\3\uffff\1\u0481\1\u0482"+
            "\1\u0483\11\uffff\1\u0485\1\u0486\1\u0487\1\u0489\1\u048a\1"+
            "\u048b\1\u048c\1\u048d\1\u049e\1\u048e\1\u048f\1\u0490\1\u0491"+
            "\1\u049f\1\uffff\1\u0492\1\uffff\1\u0493\1\u0488\1\u0475\1\u0494"+
            "\14\uffff\1\u046e\1\u046f\1\u0470\5\uffff\1\u049b\1\u049c\1"+
            "\u049d\2\uffff\1\u0484\u008a\uffff\1\u046b\16\uffff\1\u0473"+
            "\2\uffff\1\u0472\5\uffff\1\u0467\1\u0471\1\uffff\1\u046c\1\u046d"+
            "\11\uffff\1\u0466\2\uffff\1\u04a0\1\uffff\1\u0468\2\uffff\1"+
            "\u0474\1\u0469\1\u046a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04d2\4\uffff\1\u04b4\2\uffff\1\u04de\1\u04b5\3\uffff\1"+
            "\u04b6\1\u04b7\1\u04b8\1\u04b9\1\u04ba\1\u04bb\1\u04bc\1\u04bd"+
            "\1\u04b3\1\uffff\1\u04a2\6\uffff\1\u04d5\1\uffff\1\u04d7\1\u04d3"+
            "\1\u04d4\1\u04d6\12\uffff\1\u04be\1\u04bf\1\u04c0\11\uffff\1"+
            "\u04c2\1\u04c3\1\u04c4\1\u04c6\1\u04c7\1\u04c8\1\u04c9\1\u04ca"+
            "\1\u04db\1\u04cb\1\u04cc\1\u04cd\1\u04ce\1\u04dc\1\uffff\1\u04cf"+
            "\1\uffff\1\u04d0\1\u04c5\1\u04b2\1\u04d1\14\uffff\1\u04ab\1"+
            "\u04ac\1\u04ad\5\uffff\1\u04d8\1\u04d9\1\u04da\2\uffff\1\u04c1"+
            "\u008a\uffff\1\u04a8\16\uffff\1\u04b0\2\uffff\1\u04af\5\uffff"+
            "\1\u04a4\1\u04ae\1\uffff\1\u04a9\1\u04aa\11\uffff\1\u04a3\2"+
            "\uffff\1\u04dd\1\uffff\1\u04a5\2\uffff\1\u04b1\1\u04a6\1\u04a7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0511\4\uffff\1\u04f3\2\uffff\1\u051d\1\u04f4\3\uffff\1"+
            "\u04f5\1\u04f6\1\u04f7\1\u04f8\1\u04f9\1\u04fa\1\u04fb\1\u04fc"+
            "\1\u04f2\1\uffff\1\u04e1\6\uffff\1\u0514\1\uffff\1\u0516\1\u0512"+
            "\1\u0513\1\u0515\5\uffff\1\u04e0\1\u04df\3\uffff\1\u04fd\1\u04fe"+
            "\1\u04ff\11\uffff\1\u0501\1\u0502\1\u0503\1\u0505\1\u0506\1"+
            "\u0507\1\u0508\1\u0509\1\u051a\1\u050a\1\u050b\1\u050c\1\u050d"+
            "\1\u051b\1\uffff\1\u050e\1\uffff\1\u050f\1\u0504\1\u04f1\1\u0510"+
            "\14\uffff\1\u04ea\1\u04eb\1\u04ec\5\uffff\1\u0517\1\u0518\1"+
            "\u0519\2\uffff\1\u0500\u008a\uffff\1\u04e7\16\uffff\1\u04ef"+
            "\2\uffff\1\u04ee\5\uffff\1\u04e3\1\u04ed\1\uffff\1\u04e8\1\u04e9"+
            "\11\uffff\1\u04e2\2\uffff\1\u051c\1\uffff\1\u04e4\2\uffff\1"+
            "\u04f0\1\u04e5\1\u04e6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0550\4\uffff\1\u0532\2\uffff\1\u055c\1\u0533\3\uffff\1"+
            "\u0534\1\u0535\1\u0536\1\u0537\1\u0538\1\u0539\1\u053a\1\u053b"+
            "\1\u0531\1\uffff\1\u0520\6\uffff\1\u0553\1\uffff\1\u0555\1\u0551"+
            "\1\u0552\1\u0554\5\uffff\1\u051f\1\u051e\3\uffff\1\u053c\1\u053d"+
            "\1\u053e\11\uffff\1\u0540\1\u0541\1\u0542\1\u0544\1\u0545\1"+
            "\u0546\1\u0547\1\u0548\1\u0559\1\u0549\1\u054a\1\u054b\1\u054c"+
            "\1\u055a\1\uffff\1\u054d\1\uffff\1\u054e\1\u0543\1\u0530\1\u054f"+
            "\14\uffff\1\u0529\1\u052a\1\u052b\5\uffff\1\u0556\1\u0557\1"+
            "\u0558\2\uffff\1\u053f\u008a\uffff\1\u0526\16\uffff\1\u052e"+
            "\2\uffff\1\u052d\5\uffff\1\u0522\1\u052c\1\uffff\1\u0527\1\u0528"+
            "\11\uffff\1\u0521\2\uffff\1\u055b\1\uffff\1\u0523\2\uffff\1"+
            "\u052f\1\u0524\1\u0525",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u058f\4\uffff\1\u0571\2\uffff\1\u059b\1\u0572\3\uffff\1"+
            "\u0573\1\u0574\1\u0575\1\u0576\1\u0577\1\u0578\1\u0579\1\u057a"+
            "\1\u0570\1\uffff\1\u0561\6\uffff\1\u0592\1\uffff\1\u0594\1\u0590"+
            "\1\u0591\1\u0593\5\uffff\1\u0560\1\u055f\3\uffff\1\u057b\1\u057c"+
            "\1\u057d\11\uffff\1\u057f\1\u0580\1\u0581\1\u0583\1\u0584\1"+
            "\u0585\1\u0586\1\u0587\1\u0598\1\u0588\1\u0589\1\u058a\1\u058b"+
            "\1\u0599\1\uffff\1\u058c\1\uffff\1\u058d\1\u0582\1\u056f\1\u058e"+
            "\14\uffff\1\u0568\1\u0569\1\u056a\5\uffff\1\u0595\1\u0596\1"+
            "\u0597\2\uffff\1\u057e\u008a\uffff\1\u0567\16\uffff\1\u056d"+
            "\2\uffff\1\u056c\5\uffff\1\u0563\1\u056b\1\uffff\1\u055d\1\u055e"+
            "\11\uffff\1\u0562\2\uffff\1\u059a\1\uffff\1\u0564\2\uffff\1"+
            "\u056e\1\u0565\1\u0566",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05cd\4\uffff\1\u05af\2\uffff\1\u05d9\1\u05b0\3\uffff\1"+
            "\u05b1\1\u05b2\1\u05b3\1\u05b4\1\u05b5\1\u05b6\1\u05b7\1\u05b8"+
            "\1\u05ae\1\uffff\1\u059e\6\uffff\1\u05d0\1\uffff\1\u05d2\1\u05ce"+
            "\1\u05cf\1\u05d1\12\uffff\1\u05b9\1\u05ba\1\u05bb\11\uffff\1"+
            "\u05bd\1\u05be\1\u05bf\1\u05c1\1\u05c2\1\u05c3\1\u05c4\1\u05c5"+
            "\1\u05d6\1\u05c6\1\u05c7\1\u05c8\1\u05c9\1\u05d7\1\uffff\1\u05ca"+
            "\1\uffff\1\u05cb\1\u05c0\1\u05ad\1\u05cc\14\uffff\1\u05a7\1"+
            "\u05a8\1\u05a9\5\uffff\1\u05d3\1\u05d4\1\u05d5\2\uffff\1\u05bc"+
            "\u008a\uffff\1\u05a4\16\uffff\1\u059d\2\uffff\1\u05ab\3\uffff"+
            "\1\u059c\1\uffff\1\u05a0\1\u05aa\1\uffff\1\u05a5\1\u05a6\11"+
            "\uffff\1\u059f\2\uffff\1\u05d8\1\uffff\1\u05a1\2\uffff\1\u05ac"+
            "\1\u05a2\1\u05a3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u060b\4\uffff\1\u05ed\2\uffff\1\u0617\1\u05ee\3\uffff\1"+
            "\u05ef\1\u05f0\1\u05f1\1\u05f2\1\u05f3\1\u05f4\1\u05f5\1\u05f6"+
            "\1\u05ec\1\uffff\1\u05dc\6\uffff\1\u060e\1\uffff\1\u0610\1\u060c"+
            "\1\u060d\1\u060f\12\uffff\1\u05f7\1\u05f8\1\u05f9\11\uffff\1"+
            "\u05fb\1\u05fc\1\u05fd\1\u05ff\1\u0600\1\u0601\1\u0602\1\u0603"+
            "\1\u0614\1\u0604\1\u0605\1\u0606\1\u0607\1\u0615\1\uffff\1\u0608"+
            "\1\uffff\1\u0609\1\u05fe\1\u05eb\1\u060a\14\uffff\1\u05e5\1"+
            "\u05e6\1\u05e7\5\uffff\1\u0611\1\u0612\1\u0613\2\uffff\1\u05fa"+
            "\u008a\uffff\1\u05e2\16\uffff\1\u05db\2\uffff\1\u05e9\3\uffff"+
            "\1\u05da\1\uffff\1\u05de\1\u05e8\1\uffff\1\u05e3\1\u05e4\11"+
            "\uffff\1\u05dd\2\uffff\1\u0616\1\uffff\1\u05df\2\uffff\1\u05ea"+
            "\1\u05e0\1\u05e1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0648\4\uffff\1\u062a\2\uffff\1\u0654\1\u062b\3\uffff\1"+
            "\u062c\1\u062d\1\u062e\1\u062f\1\u0630\1\u0631\1\u0632\1\u0633"+
            "\1\u0629\1\uffff\1\u061a\6\uffff\1\u064b\1\uffff\1\u064d\1\u0649"+
            "\1\u064a\1\u064c\12\uffff\1\u0634\1\u0635\1\u0636\11\uffff\1"+
            "\u0638\1\u0639\1\u063a\1\u063c\1\u063d\1\u063e\1\u063f\1\u0640"+
            "\1\u0651\1\u0641\1\u0642\1\u0643\1\u0644\1\u0652\1\uffff\1\u0645"+
            "\1\uffff\1\u0646\1\u063b\1\u0628\1\u0647\14\uffff\1\u0621\1"+
            "\u0622\1\u0623\5\uffff\1\u064e\1\u064f\1\u0650\2\uffff\1\u0637"+
            "\u008a\uffff\1\u0620\16\uffff\1\u0626\2\uffff\1\u0625\5\uffff"+
            "\1\u061c\1\u0624\1\uffff\1\u0618\1\u0619\11\uffff\1\u061b\2"+
            "\uffff\1\u0653\1\uffff\1\u061d\2\uffff\1\u0627\1\u061e\1\u061f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u0655",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0688\4\uffff\1\u066a\2\uffff\1\u0694\1\u066b\3\uffff\1"+
            "\u066c\1\u066d\1\u066e\1\u066f\1\u0670\1\u0671\1\u0672\1\u0673"+
            "\1\u0669\1\uffff\1\u0658\6\uffff\1\u068b\1\uffff\1\u068d\1\u0689"+
            "\1\u068a\1\u068c\12\uffff\1\u0674\1\u0675\1\u0676\11\uffff\1"+
            "\u0678\1\u0679\1\u067a\1\u067c\1\u067d\1\u067e\1\u067f\1\u0680"+
            "\1\u0691\1\u0681\1\u0682\1\u0683\1\u0684\1\u0692\1\uffff\1\u0685"+
            "\1\uffff\1\u0686\1\u067b\1\u0668\1\u0687\14\uffff\1\u0661\1"+
            "\u0662\1\u0663\5\uffff\1\u068e\1\u068f\1\u0690\2\uffff\1\u0677"+
            "\u008a\uffff\1\u065e\16\uffff\1\u0666\2\uffff\1\u0665\5\uffff"+
            "\1\u065a\1\u0664\1\uffff\1\u065f\1\u0660\11\uffff\1\u0659\2"+
            "\uffff\1\u0693\1\uffff\1\u065b\2\uffff\1\u0667\1\u065c\1\u065d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06c5\4\uffff\1\u06a7\2\uffff\1\u06d1\1\u06a8\3\uffff\1"+
            "\u06a9\1\u06aa\1\u06ab\1\u06ac\1\u06ad\1\u06ae\1\u06af\1\u06b0"+
            "\1\u06a6\1\uffff\1\u0697\6\uffff\1\u06c8\1\uffff\1\u06ca\1\u06c6"+
            "\1\u06c7\1\u06c9\12\uffff\1\u06b1\1\u06b2\1\u06b3\11\uffff\1"+
            "\u06b5\1\u06b6\1\u06b7\1\u06b9\1\u06ba\1\u06bb\1\u06bc\1\u06bd"+
            "\1\u06ce\1\u06be\1\u06bf\1\u06c0\1\u06c1\1\u06cf\1\uffff\1\u06c2"+
            "\1\uffff\1\u06c3\1\u06b8\1\u06a5\1\u06c4\14\uffff\1\u069e\1"+
            "\u069f\1\u06a0\5\uffff\1\u06cb\1\u06cc\1\u06cd\2\uffff\1\u06b4"+
            "\u008a\uffff\1\u069d\16\uffff\1\u06a3\2\uffff\1\u06a2\5\uffff"+
            "\1\u0699\1\u06a1\1\uffff\1\u0695\1\u0696\11\uffff\1\u0698\2"+
            "\uffff\1\u06d0\1\uffff\1\u069a\2\uffff\1\u06a4\1\u069b\1\u069c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0703\4\uffff\1\u06e5\2\uffff\1\u070f\1\u06e6\3\uffff\1"+
            "\u06e7\1\u06e8\1\u06e9\1\u06ea\1\u06eb\1\u06ec\1\u06ed\1\u06ee"+
            "\1\u06e4\1\uffff\1\u06d6\6\uffff\1\u0706\1\uffff\1\u0708\1\u0704"+
            "\1\u0705\1\u0707\12\uffff\1\u06ef\1\u06f0\1\u06f1\11\uffff\1"+
            "\u06f3\1\u06f4\1\u06f5\1\u06f7\1\u06f8\1\u06f9\1\u06fa\1\u06fb"+
            "\1\u070c\1\u06fc\1\u06fd\1\u06fe\1\u06ff\1\u070d\1\uffff\1\u0700"+
            "\1\uffff\1\u0701\1\u06f6\1\u06e3\1\u0702\14\uffff\1\u06dd\1"+
            "\u06de\1\u06df\5\uffff\1\u0709\1\u070a\1\u070b\2\uffff\1\u06f2"+
            "\u008a\uffff\1\u06dc\16\uffff\1\u06d5\2\uffff\1\u06e1\3\uffff"+
            "\1\u06d4\1\uffff\1\u06d8\1\u06e0\1\uffff\1\u06d2\1\u06d3\11"+
            "\uffff\1\u06d7\2\uffff\1\u070e\1\uffff\1\u06d9\2\uffff\1\u06e2"+
            "\1\u06da\1\u06db",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0733\4\uffff\1\u0715\3\uffff\1\u0716\3\uffff\1\u0717\1"+
            "\u0718\1\u0719\1\u071a\1\u071b\1\u071c\1\u071d\1\u071e\1\u0714"+
            "\1\u0710\7\uffff\1\u0736\1\uffff\1\u0738\1\u0734\1\u0735\1\u0737"+
            "\12\uffff\1\u071f\1\u0720\1\u0721\11\uffff\1\u0723\1\u0724\1"+
            "\u0725\1\u0727\1\u0728\1\u0729\1\u072a\1\u072b\1\uffff\1\u072c"+
            "\1\u072d\1\u072e\1\u072f\2\uffff\1\u0730\1\uffff\1\u0731\1\u0726"+
            "\1\u0713\1\u0732\24\uffff\1\u0739\1\u073a\1\u073b\2\uffff\1"+
            "\u0722\u0099\uffff\1\u0711\36\uffff\1\u0712",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0751\1\u0752\1\u0753\1\u0754\1\uffff\1\u074e\1\u074d\1"+
            "\u0750\34\uffff\1\u0747\u00dd\uffff\1\u0746\2\uffff\1\u074f"+
            "\2\uffff\1\u073c\1\u074b\1\u073f\4\uffff\1\u074a\1\u074c\1\u0748"+
            "\1\u0749\1\u0742\1\u0743\1\u0744\1\u0745\1\u0741\1\u0740\1\u073d"+
            "\1\u073e",
            "\1\u076a\1\u076b\1\u076c\1\u076d\1\uffff\1\u0768\1\u0767\1"+
            "\u0769\34\uffff\1\u0761\u00dd\uffff\1\u0760\2\uffff\1\u0755"+
            "\2\uffff\1\u0756\1\u0765\1\u0759\4\uffff\1\u0764\1\u0766\1\u0762"+
            "\1\u0763\1\u075c\1\u075d\1\u075e\1\u075f\1\u075b\1\u075a\1\u0757"+
            "\1\u0758",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0783\1\u0784\1\u0785\1\u0786\1\uffff\1\u0780\1\u077f\1"+
            "\u0782\34\uffff\1\u0779\u00dd\uffff\1\u0778\2\uffff\1\u0781"+
            "\2\uffff\1\u076e\1\u077d\1\u0771\4\uffff\1\u077c\1\u077e\1\u077a"+
            "\1\u077b\1\u0774\1\u0775\1\u0776\1\u0777\1\u0773\1\u0772\1\u076f"+
            "\1\u0770",
            "\1\u079c\1\u079d\1\u079e\1\u079f\1\uffff\1\u0799\1\u0798\1"+
            "\u079b\34\uffff\1\u0792\u00dd\uffff\1\u0791\2\uffff\1\u079a"+
            "\2\uffff\1\u0787\1\u0796\1\u078a\4\uffff\1\u0795\1\u0797\1\u0793"+
            "\1\u0794\1\u078d\1\u078e\1\u078f\1\u0790\1\u078c\1\u078b\1\u0788"+
            "\1\u0789",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07b5\1\u07b6\1\u07b7\1\u07b8\1\uffff\1\u07b2\1\u07b1\1"+
            "\u07b4\34\uffff\1\u07ab\u00dd\uffff\1\u07aa\2\uffff\1\u07b3"+
            "\2\uffff\1\u07a0\1\u07af\1\u07a3\4\uffff\1\u07ae\1\u07b0\1\u07ac"+
            "\1\u07ad\1\u07a6\1\u07a7\1\u07a8\1\u07a9\1\u07a5\1\u07a4\1\u07a1"+
            "\1\u07a2",
            "\1\u07ce\1\u07cf\1\u07d0\1\u07d1\1\uffff\1\u07cb\1\u07ca\1"+
            "\u07cd\34\uffff\1\u07c4\u00dd\uffff\1\u07c3\2\uffff\1\u07cc"+
            "\2\uffff\1\u07b9\1\u07c8\1\u07bc\4\uffff\1\u07c7\1\u07c9\1\u07c5"+
            "\1\u07c6\1\u07bf\1\u07c0\1\u07c1\1\u07c2\1\u07be\1\u07bd\1\u07ba"+
            "\1\u07bb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07e7\1\u07e8\1\u07e9\1\u07ea\1\uffff\1\u07e4\1\u07e3\1"+
            "\u07e6\34\uffff\1\u07dd\u00db\uffff\1\u07e5\1\uffff\1\u07dc"+
            "\2\uffff\1\16\2\uffff\1\u07d2\1\u07e1\1\u07d5\4\uffff\1\u07e0"+
            "\1\u07e2\1\u07de\1\u07df\1\u07d8\1\u07d9\1\u07da\1\u07db\1\u07d7"+
            "\1\u07d6\1\u07d3\1\u07d4",
            "\1\u0802\1\u0803\1\u0804\1\u0805\1\uffff\1\u07ff\1\u07fe\1"+
            "\u0801\34\uffff\1\u07f8\u00db\uffff\1\u0800\1\uffff\1\u07f7"+
            "\2\uffff\1\16\2\uffff\1\u07ed\1\u07fc\1\u07f0\4\uffff\1\u07fb"+
            "\1\u07fd\1\u07f9\1\u07fa\1\u07f3\1\u07f4\1\u07f5\1\u07f6\1\u07f2"+
            "\1\u07f1\1\u07ee\1\u07ef",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u081b\1\u081c\1\u081d\1\u081e\1\uffff\1\u0818\1\u0817\1"+
            "\u081a\34\uffff\1\u0811\u00dd\uffff\1\u0810\2\uffff\1\u0819"+
            "\2\uffff\1\u0806\1\u0815\1\u0809\4\uffff\1\u0814\1\u0816\1\u0812"+
            "\1\u0813\1\u080c\1\u080d\1\u080e\1\u080f\1\u080b\1\u080a\1\u0807"+
            "\1\u0808",
            "\1\u0834\1\u0835\1\u0836\1\u0837\1\uffff\1\u0831\1\u0830\1"+
            "\u0833\34\uffff\1\u082a\u00dd\uffff\1\u0829\2\uffff\1\u0832"+
            "\2\uffff\1\u081f\1\u082e\1\u0822\4\uffff\1\u082d\1\u082f\1\u082b"+
            "\1\u082c\1\u0825\1\u0826\1\u0827\1\u0828\1\u0824\1\u0823\1\u0820"+
            "\1\u0821",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u084d\1\u084e\1\u084f\1\u0850\1\uffff\1\u084a\1\u0849\1"+
            "\u084c\34\uffff\1\u0843\u00dd\uffff\1\u0842\2\uffff\1\u084b"+
            "\2\uffff\1\u0838\1\u0847\1\u083b\4\uffff\1\u0846\1\u0848\1\u0844"+
            "\1\u0845\1\u083e\1\u083f\1\u0840\1\u0841\1\u083d\1\u083c\1\u0839"+
            "\1\u083a",
            "\1\u0866\1\u0867\1\u0868\1\u0869\1\uffff\1\u0863\1\u0862\1"+
            "\u0865\34\uffff\1\u085c\u00dd\uffff\1\u085b\2\uffff\1\u0864"+
            "\2\uffff\1\u0851\1\u0860\1\u0854\4\uffff\1\u085f\1\u0861\1\u085d"+
            "\1\u085e\1\u0857\1\u0858\1\u0859\1\u085a\1\u0856\1\u0855\1\u0852"+
            "\1\u0853",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u087f\1\u0880\1\u0881\1\u0882\1\uffff\1\u087c\1\u087b\1"+
            "\u087e\34\uffff\1\u0875\u00dd\uffff\1\u0874\2\uffff\1\u087d"+
            "\2\uffff\1\u086a\1\u0879\1\u086d\4\uffff\1\u0878\1\u087a\1\u0876"+
            "\1\u0877\1\u0870\1\u0871\1\u0872\1\u0873\1\u086f\1\u086e\1\u086b"+
            "\1\u086c",
            "\1\u0898\1\u0899\1\u089a\1\u089b\1\uffff\1\u0895\1\u0894\1"+
            "\u0897\34\uffff\1\u088e\u00dd\uffff\1\u088d\2\uffff\1\u0896"+
            "\2\uffff\1\u0883\1\u0892\1\u0886\4\uffff\1\u0891\1\u0893\1\u088f"+
            "\1\u0890\1\u0889\1\u088a\1\u088b\1\u088c\1\u0888\1\u0887\1\u0884"+
            "\1\u0885",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08b2\1\u08b3\1\u08b4\1\u08b5\1\uffff\1\u08ae\1\u08ad\1"+
            "\u08b1\34\uffff\1\u08a7\u00db\uffff\1\u08af\1\uffff\1\u08a6"+
            "\2\uffff\1\u08b0\2\uffff\1\u089c\1\u08ab\1\u089f\4\uffff\1\u08aa"+
            "\1\u08ac\1\u08a8\1\u08a9\1\u08a2\1\u08a3\1\u08a4\1\u08a5\1\u08a1"+
            "\1\u08a0\1\u089d\1\u089e",
            "\1\u08cc\1\u08cd\1\u08ce\1\u08cf\1\uffff\1\u08c9\1\u08c8\1"+
            "\u08cb\34\uffff\1\u08c2\u00db\uffff\1\u08ca\1\uffff\1\u08c1"+
            "\2\uffff\1\u08b6\2\uffff\1\u08b7\1\u08c6\1\u08ba\4\uffff\1\u08c5"+
            "\1\u08c7\1\u08c3\1\u08c4\1\u08bd\1\u08be\1\u08bf\1\u08c0\1\u08bc"+
            "\1\u08bb\1\u08b8\1\u08b9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08e6\1\u08e7\1\u08e8\1\u08e9\1\uffff\1\u08e3\1\u08e2\1"+
            "\u08e5\34\uffff\1\u08dc\u00db\uffff\1\u08e4\1\uffff\1\u08db"+
            "\2\uffff\1\u08d0\2\uffff\1\u08d1\1\u08e0\1\u08d4\4\uffff\1\u08df"+
            "\1\u08e1\1\u08dd\1\u08de\1\u08d7\1\u08d8\1\u08d9\1\u08da\1\u08d6"+
            "\1\u08d5\1\u08d2\1\u08d3",
            "\1\u0900\1\u0901\1\u0902\1\u0903\1\uffff\1\u08fd\1\u08fc\1"+
            "\u08ff\34\uffff\1\u08f6\u00db\uffff\1\u08fe\1\uffff\1\u08f5"+
            "\2\uffff\1\u08ea\2\uffff\1\u08eb\1\u08fa\1\u08ee\4\uffff\1\u08f9"+
            "\1\u08fb\1\u08f7\1\u08f8\1\u08f1\1\u08f2\1\u08f3\1\u08f4\1\u08f0"+
            "\1\u08ef\1\u08ec\1\u08ed",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u091a\1\u091b\1\u091c\1\u091d\1\uffff\1\u0916\1\u0915\1"+
            "\u0919\34\uffff\1\u090f\u00db\uffff\1\u0917\1\uffff\1\u090e"+
            "\2\uffff\1\u0918\2\uffff\1\u0904\1\u0913\1\u0907\4\uffff\1\u0912"+
            "\1\u0914\1\u0910\1\u0911\1\u090a\1\u090b\1\u090c\1\u090d\1\u0909"+
            "\1\u0908\1\u0905\1\u0906",
            "\1\u0934\1\u0935\1\u0936\1\u0937\1\uffff\1\u0930\1\u092f\1"+
            "\u0933\34\uffff\1\u0929\u00db\uffff\1\u0931\1\uffff\1\u0928"+
            "\2\uffff\1\u0932\2\uffff\1\u091e\1\u092d\1\u0921\4\uffff\1\u092c"+
            "\1\u092e\1\u092a\1\u092b\1\u0924\1\u0925\1\u0926\1\u0927\1\u0923"+
            "\1\u0922\1\u091f\1\u0920",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u094d\1\u094e\1\u094f\1\u0950\1\uffff\1\u094a\1\u0949\1"+
            "\u094c\34\uffff\1\u0943\u00db\uffff\1\u094b\1\uffff\1\u0942"+
            "\2\uffff\1\16\2\uffff\1\u0938\1\u0947\1\u093b\4\uffff\1\u0946"+
            "\1\u0948\1\u0944\1\u0945\1\u093e\1\u093f\1\u0940\1\u0941\1\u093d"+
            "\1\u093c\1\u0939\1\u093a",
            "\1\u0967\1\u0968\1\u0969\1\u096a\1\uffff\1\u0964\1\u0963\1"+
            "\u0966\34\uffff\1\u095d\u00db\uffff\1\u0965\1\uffff\1\u095c"+
            "\2\uffff\1\16\2\uffff\1\u0952\1\u0961\1\u0955\4\uffff\1\u0960"+
            "\1\u0962\1\u095e\1\u095f\1\u0958\1\u0959\1\u095a\1\u095b\1\u0957"+
            "\1\u0956\1\u0953\1\u0954",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0982\1\u0983\1\u0984\1\u0985\1\uffff\1\u097e\1\u097d\1"+
            "\u0981\3\uffff\1\u0980\30\uffff\1\u0977\u00db\uffff\1\u097f"+
            "\1\uffff\1\u0976\2\uffff\1\16\2\uffff\1\u096c\1\u097b\1\u096f"+
            "\4\uffff\1\u097a\1\u097c\1\u0978\1\u0979\1\u0972\1\u0973\1\u0974"+
            "\1\u0975\1\u0971\1\u0970\1\u096d\1\u096e",
            "\1\u099e\1\u099f\1\u09a0\1\u09a1\1\uffff\1\u099a\1\u0999\1"+
            "\u099d\3\uffff\1\u099c\30\uffff\1\u0993\u00db\uffff\1\u099b"+
            "\1\uffff\1\u0992\2\uffff\1\16\2\uffff\1\u0988\1\u0997\1\u098b"+
            "\4\uffff\1\u0996\1\u0998\1\u0994\1\u0995\1\u098e\1\u098f\1\u0990"+
            "\1\u0991\1\u098d\1\u098c\1\u0989\1\u098a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09b7\1\u09b8\1\u09b9\1\u09ba\1\uffff\1\u09b4\1\u09b3\1"+
            "\u09b6\34\uffff\1\u09ad\u00dd\uffff\1\u09ac\2\uffff\1\u09b5"+
            "\2\uffff\1\u09a2\1\u09b1\1\u09a5\4\uffff\1\u09b0\1\u09b2\1\u09ae"+
            "\1\u09af\1\u09a8\1\u09a9\1\u09aa\1\u09ab\1\u09a7\1\u09a6\1\u09a3"+
            "\1\u09a4",
            "\1\u09d0\1\u09d1\1\u09d2\1\u09d3\1\uffff\1\u09cd\1\u09cc\1"+
            "\u09cf\34\uffff\1\u09c6\u00dd\uffff\1\u09c5\2\uffff\1\u09ce"+
            "\2\uffff\1\u09bb\1\u09ca\1\u09be\4\uffff\1\u09c9\1\u09cb\1\u09c7"+
            "\1\u09c8\1\u09c1\1\u09c2\1\u09c3\1\u09c4\1\u09c0\1\u09bf\1\u09bc"+
            "\1\u09bd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "1190:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_0 = input.LA(1);

                         
                        int index170_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_0==MINUS) ) {s = 1;}

                        else if ( ((LA170_0>=BOOLEAN_TRUE && LA170_0<=VALUE_NULL)||LA170_0==NUM_DOUBLE||LA170_0==PLUS||(LA170_0>=STRING_LITERAL && LA170_0<=QUOTED_STRING_LITERAL)||LA170_0==NUM_INT||(LA170_0>=NUM_LONG && LA170_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA170_0==QUESTION) ) {s = 12;}

                        else if ( (LA170_0==LPAREN) ) {s = 13;}

                        else if ( (LA170_0==ESCAPE||LA170_0==EVERY_EXPR||(LA170_0>=MAX && LA170_0<=MIN)||LA170_0==OUTER||(LA170_0>=JOIN && LA170_0<=FULL)||LA170_0==EVENTS||(LA170_0>=UNIDIRECTIONAL && LA170_0<=METADATASQL)||(LA170_0>=WEEKDAY && LA170_0<=LW)||LA170_0==SNAPSHOT||(LA170_0>=VARIABLE && LA170_0<=INDEX)||(LA170_0>=DEFINE && LA170_0<=MATCHES)||LA170_0==WHILE||LA170_0==IDENT||LA170_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA170_0==COUNT) ) {s = 17;}

                        else if ( (LA170_0==SUM) ) {s = 20;}

                        else if ( (LA170_0==AVG) ) {s = 21;}

                        else if ( (LA170_0==COALESCE) ) {s = 24;}

                        else if ( (LA170_0==MEDIAN) ) {s = 25;}

                        else if ( (LA170_0==STDDEV) ) {s = 26;}

                        else if ( (LA170_0==AVEDEV) ) {s = 27;}

                        else if ( (LA170_0==FIRST) ) {s = 29;}

                        else if ( (LA170_0==LAST) ) {s = 30;}

                        else if ( (LA170_0==PREVIOUS) ) {s = 39;}

                        else if ( (LA170_0==PRIOR) ) {s = 40;}

                        else if ( (LA170_0==INSTANCEOF) ) {s = 43;}

                        else if ( (LA170_0==CAST) ) {s = 44;}

                        else if ( (LA170_0==WINDOW) ) {s = 48;}

                        else if ( (LA170_0==EXISTS) ) {s = 57;}

                        else if ( (LA170_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA170_0==LCURLY) ) {s = 59;}

                         
                        input.seek(index170_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_169 = input.LA(1);

                         
                        int index170_169 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_169==ALL) && (synpred3_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA170_169==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA170_169==CASE) && (synpred3_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA170_169==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA170_169==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA170_169==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA170_169==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA170_169==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA170_169==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA170_169==STRING_LITERAL) ) {s = 1005;}

                        else if ( (LA170_169==QUOTED_STRING_LITERAL) ) {s = 1006;}

                        else if ( (LA170_169==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA170_169==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA170_169==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA170_169==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA170_169==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA170_169==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA170_169==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA170_169==AT) && (synpred3_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA170_169==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA170_169==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA170_169==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA170_169==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA170_169==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA170_169==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1020;}

                        else if ( (LA170_169==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA170_169==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA170_169==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1023;}

                        else if ( (LA170_169==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA170_169==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA170_169==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA170_169==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA170_169==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA170_169==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA170_169==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA170_169==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA170_169==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA170_169==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA170_169==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA170_169==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA170_169==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA170_169==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA170_169==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA170_169==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA170_169==LW) && (synpred3_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA170_169==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA170_169==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA170_169==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA170_169==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA170_169==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA170_169==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA170_169==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA170_169==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA170_169==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA170_169==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA170_169==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA170_169==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA170_169==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA170_169==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA170_169==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA170_169==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA170_169==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA170_169==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA170_169==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1059;}

                         
                        input.seek(index170_169);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA170_228 = input.LA(1);

                         
                        int index170_228 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_228==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA170_228==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA170_228==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA170_228==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA170_228==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA170_228==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA170_228==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA170_228==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA170_228==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA170_228==STRING_LITERAL) ) {s = 1069;}

                        else if ( (LA170_228==QUOTED_STRING_LITERAL) ) {s = 1070;}

                        else if ( (LA170_228==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA170_228==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA170_228==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA170_228==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA170_228==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA170_228==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA170_228==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA170_228==AT) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA170_228==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA170_228==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA170_228==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA170_228==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA170_228==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA170_228==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA170_228==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA170_228==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA170_228==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA170_228==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA170_228==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA170_228==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA170_228==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA170_228==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA170_228==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA170_228==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA170_228==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA170_228==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA170_228==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA170_228==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA170_228==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA170_228==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA170_228==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA170_228==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA170_228==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA170_228==LW) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA170_228==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA170_228==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA170_228==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA170_228==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA170_228==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA170_228==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA170_228==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA170_228==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA170_228==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA170_228==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA170_228==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA170_228==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA170_228==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA170_228==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA170_228==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA170_228==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA170_228==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA170_228==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                         
                        input.seek(index170_228);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA170_287 = input.LA(1);

                         
                        int index170_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_287==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA170_287==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA170_287==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA170_287==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA170_287==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA170_287==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA170_287==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA170_287==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA170_287==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA170_287==STRING_LITERAL) ) {s = 1132;}

                        else if ( (LA170_287==QUOTED_STRING_LITERAL) ) {s = 1133;}

                        else if ( (LA170_287==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA170_287==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA170_287==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA170_287==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA170_287==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1138;}

                        else if ( (LA170_287==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA170_287==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA170_287==AT) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA170_287==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA170_287==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA170_287==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA170_287==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA170_287==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA170_287==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA170_287==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA170_287==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA170_287==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA170_287==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA170_287==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA170_287==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA170_287==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA170_287==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA170_287==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA170_287==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA170_287==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA170_287==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA170_287==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA170_287==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA170_287==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA170_287==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA170_287==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA170_287==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA170_287==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA170_287==LW) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA170_287==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA170_287==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA170_287==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA170_287==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA170_287==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA170_287==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA170_287==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA170_287==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA170_287==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA170_287==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA170_287==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA170_287==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA170_287==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA170_287==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA170_287==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA170_287==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA170_287==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA170_287==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                         
                        input.seek(index170_287);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA170_346 = input.LA(1);

                         
                        int index170_346 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_346==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA170_346==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA170_346==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA170_346==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA170_346==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA170_346==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA170_346==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA170_346==STRING_LITERAL) ) {s = 1193;}

                        else if ( (LA170_346==QUOTED_STRING_LITERAL) ) {s = 1194;}

                        else if ( (LA170_346==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA170_346==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA170_346==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA170_346==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA170_346==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA170_346==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA170_346==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA170_346==AT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA170_346==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA170_346==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1204;}

                        else if ( (LA170_346==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1205;}

                        else if ( (LA170_346==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA170_346==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA170_346==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA170_346==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA170_346==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA170_346==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA170_346==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA170_346==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA170_346==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA170_346==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA170_346==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA170_346==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA170_346==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA170_346==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA170_346==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA170_346==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA170_346==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA170_346==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA170_346==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA170_346==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA170_346==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA170_346==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA170_346==LW) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA170_346==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA170_346==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA170_346==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA170_346==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA170_346==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA170_346==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA170_346==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA170_346==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA170_346==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA170_346==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA170_346==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA170_346==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA170_346==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA170_346==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA170_346==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA170_346==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA170_346==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA170_346==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                         
                        input.seek(index170_346);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA170_405 = input.LA(1);

                         
                        int index170_405 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_405==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA170_405==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA170_405==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA170_405==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA170_405==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA170_405==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA170_405==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA170_405==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA170_405==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA170_405==STRING_LITERAL) ) {s = 1256;}

                        else if ( (LA170_405==QUOTED_STRING_LITERAL) ) {s = 1257;}

                        else if ( (LA170_405==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA170_405==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA170_405==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                        else if ( (LA170_405==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1261;}

                        else if ( (LA170_405==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1262;}

                        else if ( (LA170_405==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA170_405==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA170_405==AT) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA170_405==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA170_405==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA170_405==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA170_405==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA170_405==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA170_405==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA170_405==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA170_405==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA170_405==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA170_405==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA170_405==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA170_405==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA170_405==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA170_405==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA170_405==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA170_405==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA170_405==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA170_405==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA170_405==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA170_405==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA170_405==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA170_405==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA170_405==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA170_405==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA170_405==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA170_405==LW) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA170_405==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA170_405==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA170_405==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA170_405==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA170_405==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA170_405==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA170_405==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA170_405==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA170_405==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA170_405==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA170_405==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA170_405==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA170_405==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA170_405==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA170_405==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA170_405==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA170_405==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA170_405==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                         
                        input.seek(index170_405);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA170_464 = input.LA(1);

                         
                        int index170_464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_464==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA170_464==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA170_464==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA170_464==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA170_464==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA170_464==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA170_464==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA170_464==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA170_464==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA170_464==STRING_LITERAL) ) {s = 1319;}

                        else if ( (LA170_464==QUOTED_STRING_LITERAL) ) {s = 1320;}

                        else if ( (LA170_464==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA170_464==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA170_464==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA170_464==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                        else if ( (LA170_464==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1325;}

                        else if ( (LA170_464==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1326;}

                        else if ( (LA170_464==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA170_464==AT) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA170_464==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA170_464==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA170_464==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA170_464==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA170_464==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA170_464==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA170_464==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA170_464==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA170_464==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA170_464==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA170_464==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA170_464==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA170_464==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA170_464==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA170_464==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA170_464==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA170_464==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA170_464==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA170_464==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA170_464==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA170_464==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA170_464==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA170_464==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA170_464==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA170_464==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA170_464==LW) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA170_464==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA170_464==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA170_464==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA170_464==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA170_464==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA170_464==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA170_464==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA170_464==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA170_464==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA170_464==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA170_464==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA170_464==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA170_464==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA170_464==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA170_464==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA170_464==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA170_464==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA170_464==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                         
                        input.seek(index170_464);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA170_523 = input.LA(1);

                         
                        int index170_523 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_523==STRING_LITERAL) ) {s = 1373;}

                        else if ( (LA170_523==QUOTED_STRING_LITERAL) ) {s = 1374;}

                        else if ( (LA170_523==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA170_523==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA170_523==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA170_523==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA170_523==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA170_523==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA170_523==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA170_523==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA170_523==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA170_523==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA170_523==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA170_523==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA170_523==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA170_523==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA170_523==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA170_523==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                        else if ( (LA170_523==AT) && (synpred3_EsperEPL2Grammar())) {s = 1391;}

                        else if ( (LA170_523==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1392;}

                        else if ( (LA170_523==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA170_523==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA170_523==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA170_523==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA170_523==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA170_523==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA170_523==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA170_523==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA170_523==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA170_523==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA170_523==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA170_523==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA170_523==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA170_523==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA170_523==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA170_523==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA170_523==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA170_523==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA170_523==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA170_523==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA170_523==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA170_523==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA170_523==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA170_523==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA170_523==LW) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA170_523==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA170_523==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA170_523==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA170_523==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA170_523==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA170_523==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA170_523==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA170_523==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA170_523==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA170_523==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA170_523==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA170_523==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA170_523==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA170_523==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA170_523==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA170_523==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA170_523==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA170_523==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                         
                        input.seek(index170_523);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA170_582 = input.LA(1);

                         
                        int index170_582 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_582==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA170_582==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA170_582==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA170_582==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA170_582==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA170_582==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA170_582==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA170_582==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA170_582==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA170_582==STRING_LITERAL) ) {s = 1445;}

                        else if ( (LA170_582==QUOTED_STRING_LITERAL) ) {s = 1446;}

                        else if ( (LA170_582==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA170_582==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA170_582==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA170_582==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA170_582==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA170_582==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA170_582==AT) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA170_582==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA170_582==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA170_582==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                        else if ( (LA170_582==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1457;}

                        else if ( (LA170_582==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1458;}

                        else if ( (LA170_582==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA170_582==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA170_582==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA170_582==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA170_582==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA170_582==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA170_582==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA170_582==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA170_582==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA170_582==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA170_582==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA170_582==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA170_582==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA170_582==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA170_582==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA170_582==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA170_582==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA170_582==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA170_582==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA170_582==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA170_582==LW) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA170_582==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA170_582==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA170_582==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA170_582==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA170_582==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA170_582==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA170_582==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA170_582==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA170_582==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA170_582==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA170_582==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA170_582==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA170_582==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA170_582==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA170_582==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA170_582==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA170_582==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA170_582==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                         
                        input.seek(index170_582);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA170_641 = input.LA(1);

                         
                        int index170_641 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_641==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA170_641==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA170_641==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA170_641==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA170_641==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA170_641==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA170_641==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA170_641==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA170_641==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA170_641==STRING_LITERAL) ) {s = 1507;}

                        else if ( (LA170_641==QUOTED_STRING_LITERAL) ) {s = 1508;}

                        else if ( (LA170_641==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA170_641==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA170_641==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA170_641==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA170_641==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA170_641==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA170_641==AT) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA170_641==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA170_641==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA170_641==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA170_641==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA170_641==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA170_641==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA170_641==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                        else if ( (LA170_641==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}

                        else if ( (LA170_641==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1524;}

                        else if ( (LA170_641==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA170_641==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA170_641==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA170_641==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA170_641==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA170_641==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA170_641==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA170_641==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA170_641==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA170_641==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA170_641==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA170_641==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA170_641==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA170_641==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA170_641==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA170_641==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA170_641==LW) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA170_641==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA170_641==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA170_641==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA170_641==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA170_641==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA170_641==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA170_641==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA170_641==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA170_641==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA170_641==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA170_641==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA170_641==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA170_641==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA170_641==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA170_641==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA170_641==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA170_641==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA170_641==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                         
                        input.seek(index170_641);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA170_700 = input.LA(1);

                         
                        int index170_700 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_700==STRING_LITERAL) ) {s = 1560;}

                        else if ( (LA170_700==QUOTED_STRING_LITERAL) ) {s = 1561;}

                        else if ( (LA170_700==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA170_700==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA170_700==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA170_700==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA170_700==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA170_700==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA170_700==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA170_700==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA170_700==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA170_700==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA170_700==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA170_700==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA170_700==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA170_700==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA170_700==AT) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA170_700==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA170_700==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA170_700==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA170_700==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA170_700==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA170_700==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA170_700==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA170_700==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA170_700==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA170_700==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA170_700==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                        else if ( (LA170_700==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA170_700==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA170_700==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA170_700==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA170_700==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA170_700==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA170_700==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA170_700==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA170_700==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA170_700==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1597;}

                        else if ( (LA170_700==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1598;}

                        else if ( (LA170_700==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA170_700==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA170_700==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA170_700==LW) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA170_700==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA170_700==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA170_700==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA170_700==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA170_700==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA170_700==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA170_700==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA170_700==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA170_700==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA170_700==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA170_700==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA170_700==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA170_700==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA170_700==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA170_700==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA170_700==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA170_700==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA170_700==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                         
                        input.seek(index170_700);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA170_759 = input.LA(1);

                         
                        int index170_759 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_759==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( ((LA170_759>=STRING_LITERAL && LA170_759<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index170_759);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA170_818 = input.LA(1);

                         
                        int index170_818 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_818==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA170_818==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA170_818==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA170_818==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA170_818==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA170_818==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA170_818==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA170_818==STRING_LITERAL) ) {s = 1631;}

                        else if ( (LA170_818==QUOTED_STRING_LITERAL) ) {s = 1632;}

                        else if ( (LA170_818==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA170_818==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA170_818==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA170_818==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA170_818==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA170_818==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA170_818==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA170_818==AT) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA170_818==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA170_818==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA170_818==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA170_818==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA170_818==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA170_818==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA170_818==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA170_818==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA170_818==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA170_818==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA170_818==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA170_818==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                        else if ( (LA170_818==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1653;}

                        else if ( (LA170_818==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1654;}

                        else if ( (LA170_818==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA170_818==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA170_818==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA170_818==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA170_818==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA170_818==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA170_818==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA170_818==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA170_818==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA170_818==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA170_818==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA170_818==LW) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA170_818==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA170_818==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA170_818==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA170_818==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA170_818==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA170_818==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA170_818==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA170_818==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA170_818==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA170_818==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA170_818==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA170_818==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA170_818==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA170_818==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA170_818==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA170_818==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA170_818==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA170_818==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                         
                        input.seek(index170_818);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA170_877 = input.LA(1);

                         
                        int index170_877 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_877==STRING_LITERAL) ) {s = 1685;}

                        else if ( (LA170_877==QUOTED_STRING_LITERAL) ) {s = 1686;}

                        else if ( (LA170_877==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA170_877==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA170_877==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA170_877==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA170_877==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA170_877==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA170_877==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA170_877==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA170_877==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA170_877==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA170_877==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA170_877==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA170_877==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA170_877==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA170_877==AT) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA170_877==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA170_877==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA170_877==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA170_877==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA170_877==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA170_877==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA170_877==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA170_877==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA170_877==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA170_877==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA170_877==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA170_877==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA170_877==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA170_877==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA170_877==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                        else if ( (LA170_877==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1717;}

                        else if ( (LA170_877==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1718;}

                        else if ( (LA170_877==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA170_877==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA170_877==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA170_877==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA170_877==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA170_877==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA170_877==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA170_877==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA170_877==LW) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA170_877==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA170_877==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA170_877==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA170_877==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA170_877==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA170_877==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA170_877==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA170_877==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA170_877==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA170_877==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA170_877==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA170_877==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA170_877==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA170_877==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA170_877==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA170_877==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA170_877==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA170_877==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                         
                        input.seek(index170_877);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA170_936 = input.LA(1);

                         
                        int index170_936 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_936==STRING_LITERAL) ) {s = 1746;}

                        else if ( (LA170_936==QUOTED_STRING_LITERAL) ) {s = 1747;}

                        else if ( (LA170_936==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA170_936==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA170_936==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA170_936==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA170_936==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA170_936==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA170_936==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA170_936==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA170_936==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA170_936==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA170_936==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA170_936==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA170_936==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA170_936==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA170_936==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA170_936==AT) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA170_936==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA170_936==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA170_936==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA170_936==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA170_936==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA170_936==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA170_936==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA170_936==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA170_936==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA170_936==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA170_936==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA170_936==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA170_936==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA170_936==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA170_936==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA170_936==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA170_936==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                        else if ( (LA170_936==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( (LA170_936==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1782;}

                        else if ( (LA170_936==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1783;}

                        else if ( (LA170_936==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1784;}

                        else if ( (LA170_936==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1785;}

                        else if ( (LA170_936==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA170_936==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA170_936==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA170_936==LW) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA170_936==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA170_936==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA170_936==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA170_936==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA170_936==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA170_936==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA170_936==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA170_936==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA170_936==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA170_936==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA170_936==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA170_936==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA170_936==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA170_936==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA170_936==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA170_936==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA170_936==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA170_936==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                         
                        input.seek(index170_936);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA170_995 = input.LA(1);

                         
                        int index170_995 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_995==SELECT) ) {s = 1808;}

                        else if ( (LA170_995==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA170_995==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA170_995==AT) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA170_995==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA170_995==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA170_995==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA170_995==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA170_995==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA170_995==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA170_995==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA170_995==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA170_995==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA170_995==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA170_995==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA170_995==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA170_995==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA170_995==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA170_995==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA170_995==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA170_995==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA170_995==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA170_995==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA170_995==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA170_995==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA170_995==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA170_995==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA170_995==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA170_995==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA170_995==LW) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA170_995==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA170_995==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA170_995==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA170_995==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA170_995==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA170_995==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA170_995==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA170_995==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA170_995==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA170_995==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                        else if ( (LA170_995==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1848;}

                        else if ( (LA170_995==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1849;}

                        else if ( (LA170_995==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA170_995==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                         
                        input.seek(index170_995);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA170_1005 = input.LA(1);

                         
                        int index170_1005 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1005==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA170_1005==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                        else if ( (LA170_1005==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA170_1005==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA170_1005==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA170_1005==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA170_1005==LT) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA170_1005==GT) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA170_1005==LE) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA170_1005==GE) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA170_1005==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA170_1005==IS) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA170_1005==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA170_1005==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA170_1005==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA170_1005==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA170_1005==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA170_1005==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA170_1005==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA170_1005==RPAREN) ) {s = 1871;}

                        else if ( (LA170_1005==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA170_1005==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA170_1005==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA170_1005==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA170_1005==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                         
                        input.seek(index170_1005);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA170_1006 = input.LA(1);

                         
                        int index170_1006 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1006==RPAREN) ) {s = 1877;}

                        else if ( (LA170_1006==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1878;}

                        else if ( (LA170_1006==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1879;}

                        else if ( (LA170_1006==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1880;}

                        else if ( (LA170_1006==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA170_1006==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                        else if ( (LA170_1006==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA170_1006==LT) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA170_1006==GT) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA170_1006==LE) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA170_1006==GE) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA170_1006==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA170_1006==IS) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                        else if ( (LA170_1006==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1890;}

                        else if ( (LA170_1006==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA170_1006==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA170_1006==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA170_1006==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA170_1006==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA170_1006==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA170_1006==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA170_1006==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA170_1006==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA170_1006==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA170_1006==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                         
                        input.seek(index170_1006);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA170_1069 = input.LA(1);

                         
                        int index170_1069 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1069==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                        else if ( (LA170_1069==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA170_1069==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA170_1069==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1905;}

                        else if ( (LA170_1069==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1906;}

                        else if ( (LA170_1069==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA170_1069==LT) && (synpred3_EsperEPL2Grammar())) {s = 1908;}

                        else if ( (LA170_1069==GT) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA170_1069==LE) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA170_1069==GE) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                        else if ( (LA170_1069==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1912;}

                        else if ( (LA170_1069==IS) && (synpred3_EsperEPL2Grammar())) {s = 1913;}

                        else if ( (LA170_1069==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                        else if ( (LA170_1069==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1915;}

                        else if ( (LA170_1069==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA170_1069==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA170_1069==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA170_1069==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA170_1069==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA170_1069==RPAREN) ) {s = 1921;}

                        else if ( (LA170_1069==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1922;}

                        else if ( (LA170_1069==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA170_1069==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA170_1069==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1925;}

                        else if ( (LA170_1069==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                         
                        input.seek(index170_1069);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA170_1070 = input.LA(1);

                         
                        int index170_1070 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1070==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                        else if ( (LA170_1070==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA170_1070==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA170_1070==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                        else if ( (LA170_1070==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1931;}

                        else if ( (LA170_1070==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA170_1070==LT) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA170_1070==GT) && (synpred3_EsperEPL2Grammar())) {s = 1934;}

                        else if ( (LA170_1070==LE) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA170_1070==GE) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA170_1070==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA170_1070==IS) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA170_1070==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                        else if ( (LA170_1070==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}

                        else if ( (LA170_1070==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA170_1070==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA170_1070==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA170_1070==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA170_1070==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA170_1070==RPAREN) ) {s = 1946;}

                        else if ( (LA170_1070==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1947;}

                        else if ( (LA170_1070==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA170_1070==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA170_1070==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1950;}

                        else if ( (LA170_1070==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                         
                        input.seek(index170_1070);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA170_1132 = input.LA(1);

                         
                        int index170_1132 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1132==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                        else if ( (LA170_1132==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA170_1132==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1954;}

                        else if ( (LA170_1132==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                        else if ( (LA170_1132==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1956;}

                        else if ( (LA170_1132==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA170_1132==LT) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA170_1132==GT) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                        else if ( (LA170_1132==LE) && (synpred3_EsperEPL2Grammar())) {s = 1960;}

                        else if ( (LA170_1132==GE) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA170_1132==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA170_1132==IS) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA170_1132==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                        else if ( (LA170_1132==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1965;}

                        else if ( (LA170_1132==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA170_1132==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA170_1132==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA170_1132==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA170_1132==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA170_1132==RPAREN) ) {s = 1971;}

                        else if ( (LA170_1132==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1972;}

                        else if ( (LA170_1132==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA170_1132==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA170_1132==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 1975;}

                        else if ( (LA170_1132==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                         
                        input.seek(index170_1132);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA170_1133 = input.LA(1);

                         
                        int index170_1133 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1133==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1977;}

                        else if ( (LA170_1133==DIV) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA170_1133==MOD) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA170_1133==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                        else if ( (LA170_1133==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1981;}

                        else if ( (LA170_1133==LOR) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA170_1133==LT) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA170_1133==GT) && (synpred3_EsperEPL2Grammar())) {s = 1984;}

                        else if ( (LA170_1133==LE) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA170_1133==GE) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA170_1133==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA170_1133==IS) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA170_1133==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                        else if ( (LA170_1133==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 1990;}

                        else if ( (LA170_1133==BAND) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA170_1133==BOR) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA170_1133==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA170_1133==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA170_1133==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA170_1133==RPAREN) ) {s = 1996;}

                        else if ( (LA170_1133==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1997;}

                        else if ( (LA170_1133==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA170_1133==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA170_1133==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}

                        else if ( (LA170_1133==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                         
                        input.seek(index170_1133);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA170_1193 = input.LA(1);

                         
                        int index170_1193 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1193==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                        else if ( (LA170_1193==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA170_1193==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2004;}

                        else if ( (LA170_1193==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                        else if ( (LA170_1193==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2006;}

                        else if ( (LA170_1193==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA170_1193==LT) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA170_1193==GT) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                        else if ( (LA170_1193==LE) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA170_1193==GE) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA170_1193==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA170_1193==IS) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA170_1193==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                        else if ( (LA170_1193==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2015;}

                        else if ( (LA170_1193==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA170_1193==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA170_1193==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA170_1193==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA170_1193==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA170_1193==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                        else if ( (LA170_1193==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2022;}

                        else if ( (LA170_1193==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA170_1193==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA170_1193==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2025;}

                        else if ( (LA170_1193==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA170_1193==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1193);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA170_1194 = input.LA(1);

                         
                        int index170_1194 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1194==RPAREN) ) {s = 14;}

                        else if ( (LA170_1194==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2029;}

                        else if ( (LA170_1194==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                        else if ( (LA170_1194==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2031;}

                        else if ( (LA170_1194==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA170_1194==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA170_1194==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                        else if ( (LA170_1194==LT) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA170_1194==GT) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA170_1194==LE) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA170_1194==GE) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA170_1194==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                        else if ( (LA170_1194==IS) && (synpred3_EsperEPL2Grammar())) {s = 2040;}

                        else if ( (LA170_1194==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA170_1194==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA170_1194==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA170_1194==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA170_1194==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA170_1194==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                        else if ( (LA170_1194==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA170_1194==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA170_1194==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA170_1194==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2050;}

                        else if ( (LA170_1194==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA170_1194==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                        else if ( (LA170_1194==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                         
                        input.seek(index170_1194);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA170_1256 = input.LA(1);

                         
                        int index170_1256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1256==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2054;}

                        else if ( (LA170_1256==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                        else if ( (LA170_1256==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2056;}

                        else if ( (LA170_1256==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA170_1256==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA170_1256==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                        else if ( (LA170_1256==LT) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA170_1256==GT) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA170_1256==LE) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA170_1256==GE) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA170_1256==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                        else if ( (LA170_1256==IS) && (synpred3_EsperEPL2Grammar())) {s = 2065;}

                        else if ( (LA170_1256==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2066;}

                        else if ( (LA170_1256==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA170_1256==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA170_1256==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA170_1256==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA170_1256==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                        else if ( (LA170_1256==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2072;}

                        else if ( (LA170_1256==RPAREN) ) {s = 2073;}

                        else if ( (LA170_1256==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA170_1256==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2075;}

                        else if ( (LA170_1256==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA170_1256==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA170_1256==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                         
                        input.seek(index170_1256);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA170_1257 = input.LA(1);

                         
                        int index170_1257 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1257==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2079;}

                        else if ( (LA170_1257==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                        else if ( (LA170_1257==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2081;}

                        else if ( (LA170_1257==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA170_1257==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA170_1257==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                        else if ( (LA170_1257==LT) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA170_1257==GT) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA170_1257==LE) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA170_1257==GE) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA170_1257==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                        else if ( (LA170_1257==IS) && (synpred3_EsperEPL2Grammar())) {s = 2090;}

                        else if ( (LA170_1257==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA170_1257==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA170_1257==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA170_1257==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA170_1257==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA170_1257==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                        else if ( (LA170_1257==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA170_1257==RPAREN) ) {s = 2098;}

                        else if ( (LA170_1257==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA170_1257==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2100;}

                        else if ( (LA170_1257==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA170_1257==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA170_1257==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                         
                        input.seek(index170_1257);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA170_1319 = input.LA(1);

                         
                        int index170_1319 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1319==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2104;}

                        else if ( (LA170_1319==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                        else if ( (LA170_1319==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2106;}

                        else if ( (LA170_1319==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA170_1319==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA170_1319==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2109;}

                        else if ( (LA170_1319==LT) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA170_1319==GT) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA170_1319==LE) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA170_1319==GE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA170_1319==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                        else if ( (LA170_1319==IS) && (synpred3_EsperEPL2Grammar())) {s = 2115;}

                        else if ( (LA170_1319==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2116;}

                        else if ( (LA170_1319==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA170_1319==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA170_1319==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA170_1319==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA170_1319==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                        else if ( (LA170_1319==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2122;}

                        else if ( (LA170_1319==RPAREN) ) {s = 2123;}

                        else if ( (LA170_1319==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA170_1319==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2125;}

                        else if ( (LA170_1319==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA170_1319==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA170_1319==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                         
                        input.seek(index170_1319);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA170_1320 = input.LA(1);

                         
                        int index170_1320 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1320==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2129;}

                        else if ( (LA170_1320==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2130;}

                        else if ( (LA170_1320==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2131;}

                        else if ( (LA170_1320==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA170_1320==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA170_1320==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                        else if ( (LA170_1320==LT) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA170_1320==GT) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA170_1320==LE) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA170_1320==GE) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA170_1320==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                        else if ( (LA170_1320==IS) && (synpred3_EsperEPL2Grammar())) {s = 2140;}

                        else if ( (LA170_1320==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA170_1320==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA170_1320==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA170_1320==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA170_1320==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA170_1320==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                        else if ( (LA170_1320==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2147;}

                        else if ( (LA170_1320==RPAREN) ) {s = 2148;}

                        else if ( (LA170_1320==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA170_1320==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2150;}

                        else if ( (LA170_1320==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA170_1320==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA170_1320==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                         
                        input.seek(index170_1320);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA170_1373 = input.LA(1);

                         
                        int index170_1373 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1373==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2154;}

                        else if ( (LA170_1373==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                        else if ( (LA170_1373==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2156;}

                        else if ( (LA170_1373==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA170_1373==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA170_1373==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                        else if ( (LA170_1373==LT) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA170_1373==GT) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA170_1373==LE) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA170_1373==GE) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA170_1373==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA170_1373==IS) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                        else if ( (LA170_1373==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2166;}

                        else if ( (LA170_1373==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA170_1373==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA170_1373==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA170_1373==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA170_1373==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                        else if ( (LA170_1373==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA170_1373==RPAREN) ) {s = 2173;}

                        else if ( (LA170_1373==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA170_1373==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA170_1373==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2176;}

                        else if ( (LA170_1373==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA170_1373==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                         
                        input.seek(index170_1373);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA170_1374 = input.LA(1);

                         
                        int index170_1374 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1374==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2179;}

                        else if ( (LA170_1374==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA170_1374==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                        else if ( (LA170_1374==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA170_1374==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2183;}

                        else if ( (LA170_1374==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                        else if ( (LA170_1374==LT) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA170_1374==GT) && (synpred3_EsperEPL2Grammar())) {s = 2186;}

                        else if ( (LA170_1374==LE) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA170_1374==GE) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA170_1374==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA170_1374==IS) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA170_1374==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                        else if ( (LA170_1374==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2192;}

                        else if ( (LA170_1374==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA170_1374==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA170_1374==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA170_1374==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA170_1374==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2197;}

                        else if ( (LA170_1374==RPAREN) ) {s = 2198;}

                        else if ( (LA170_1374==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA170_1374==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA170_1374==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA170_1374==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2202;}

                        else if ( (LA170_1374==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                         
                        input.seek(index170_1374);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA170_1445 = input.LA(1);

                         
                        int index170_1445 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1445==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA170_1445==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2205;}

                        else if ( (LA170_1445==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA170_1445==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                        else if ( (LA170_1445==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA170_1445==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA170_1445==LT) && (synpred3_EsperEPL2Grammar())) {s = 2210;}

                        else if ( (LA170_1445==GT) && (synpred3_EsperEPL2Grammar())) {s = 2211;}

                        else if ( (LA170_1445==LE) && (synpred3_EsperEPL2Grammar())) {s = 2212;}

                        else if ( (LA170_1445==GE) && (synpred3_EsperEPL2Grammar())) {s = 2213;}

                        else if ( (LA170_1445==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2214;}

                        else if ( (LA170_1445==IS) && (synpred3_EsperEPL2Grammar())) {s = 2215;}

                        else if ( (LA170_1445==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2216;}

                        else if ( (LA170_1445==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2217;}

                        else if ( (LA170_1445==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2218;}

                        else if ( (LA170_1445==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}

                        else if ( (LA170_1445==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2220;}

                        else if ( (LA170_1445==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2221;}

                        else if ( (LA170_1445==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2222;}

                        else if ( (LA170_1445==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2223;}

                        else if ( (LA170_1445==RPAREN) ) {s = 2224;}

                        else if ( (LA170_1445==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2225;}

                        else if ( (LA170_1445==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2226;}

                        else if ( (LA170_1445==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2227;}

                        else if ( (LA170_1445==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2228;}

                        else if ( (LA170_1445==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2229;}

                         
                        input.seek(index170_1445);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA170_1446 = input.LA(1);

                         
                        int index170_1446 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1446==RPAREN) ) {s = 2230;}

                        else if ( (LA170_1446==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2231;}

                        else if ( (LA170_1446==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2232;}

                        else if ( (LA170_1446==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2233;}

                        else if ( (LA170_1446==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2234;}

                        else if ( (LA170_1446==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2235;}

                        else if ( (LA170_1446==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2236;}

                        else if ( (LA170_1446==LT) && (synpred3_EsperEPL2Grammar())) {s = 2237;}

                        else if ( (LA170_1446==GT) && (synpred3_EsperEPL2Grammar())) {s = 2238;}

                        else if ( (LA170_1446==LE) && (synpred3_EsperEPL2Grammar())) {s = 2239;}

                        else if ( (LA170_1446==GE) && (synpred3_EsperEPL2Grammar())) {s = 2240;}

                        else if ( (LA170_1446==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2241;}

                        else if ( (LA170_1446==IS) && (synpred3_EsperEPL2Grammar())) {s = 2242;}

                        else if ( (LA170_1446==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2243;}

                        else if ( (LA170_1446==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2244;}

                        else if ( (LA170_1446==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2245;}

                        else if ( (LA170_1446==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2246;}

                        else if ( (LA170_1446==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2247;}

                        else if ( (LA170_1446==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2248;}

                        else if ( (LA170_1446==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}

                        else if ( (LA170_1446==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2250;}

                        else if ( (LA170_1446==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2251;}

                        else if ( (LA170_1446==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2252;}

                        else if ( (LA170_1446==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2253;}

                        else if ( (LA170_1446==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2254;}

                        else if ( (LA170_1446==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2255;}

                         
                        input.seek(index170_1446);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA170_1507 = input.LA(1);

                         
                        int index170_1507 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1507==RPAREN) ) {s = 2256;}

                        else if ( (LA170_1507==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2257;}

                        else if ( (LA170_1507==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2258;}

                        else if ( (LA170_1507==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2259;}

                        else if ( (LA170_1507==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2260;}

                        else if ( (LA170_1507==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2261;}

                        else if ( (LA170_1507==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2262;}

                        else if ( (LA170_1507==LT) && (synpred3_EsperEPL2Grammar())) {s = 2263;}

                        else if ( (LA170_1507==GT) && (synpred3_EsperEPL2Grammar())) {s = 2264;}

                        else if ( (LA170_1507==LE) && (synpred3_EsperEPL2Grammar())) {s = 2265;}

                        else if ( (LA170_1507==GE) && (synpred3_EsperEPL2Grammar())) {s = 2266;}

                        else if ( (LA170_1507==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2267;}

                        else if ( (LA170_1507==IS) && (synpred3_EsperEPL2Grammar())) {s = 2268;}

                        else if ( (LA170_1507==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2269;}

                        else if ( (LA170_1507==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2270;}

                        else if ( (LA170_1507==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2271;}

                        else if ( (LA170_1507==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2272;}

                        else if ( (LA170_1507==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2273;}

                        else if ( (LA170_1507==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2274;}

                        else if ( (LA170_1507==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2275;}

                        else if ( (LA170_1507==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2276;}

                        else if ( (LA170_1507==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2277;}

                        else if ( (LA170_1507==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2278;}

                        else if ( (LA170_1507==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2279;}

                        else if ( (LA170_1507==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2280;}

                        else if ( (LA170_1507==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2281;}

                         
                        input.seek(index170_1507);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA170_1508 = input.LA(1);

                         
                        int index170_1508 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1508==RPAREN) ) {s = 2282;}

                        else if ( (LA170_1508==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2283;}

                        else if ( (LA170_1508==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2284;}

                        else if ( (LA170_1508==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2285;}

                        else if ( (LA170_1508==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2286;}

                        else if ( (LA170_1508==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2287;}

                        else if ( (LA170_1508==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2288;}

                        else if ( (LA170_1508==LT) && (synpred3_EsperEPL2Grammar())) {s = 2289;}

                        else if ( (LA170_1508==GT) && (synpred3_EsperEPL2Grammar())) {s = 2290;}

                        else if ( (LA170_1508==LE) && (synpred3_EsperEPL2Grammar())) {s = 2291;}

                        else if ( (LA170_1508==GE) && (synpred3_EsperEPL2Grammar())) {s = 2292;}

                        else if ( (LA170_1508==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2293;}

                        else if ( (LA170_1508==IS) && (synpred3_EsperEPL2Grammar())) {s = 2294;}

                        else if ( (LA170_1508==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2295;}

                        else if ( (LA170_1508==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2296;}

                        else if ( (LA170_1508==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2297;}

                        else if ( (LA170_1508==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2298;}

                        else if ( (LA170_1508==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2299;}

                        else if ( (LA170_1508==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2300;}

                        else if ( (LA170_1508==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2301;}

                        else if ( (LA170_1508==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2302;}

                        else if ( (LA170_1508==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2303;}

                        else if ( (LA170_1508==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2304;}

                        else if ( (LA170_1508==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2305;}

                        else if ( (LA170_1508==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2306;}

                        else if ( (LA170_1508==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2307;}

                         
                        input.seek(index170_1508);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA170_1560 = input.LA(1);

                         
                        int index170_1560 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1560==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2308;}

                        else if ( (LA170_1560==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2309;}

                        else if ( (LA170_1560==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2310;}

                        else if ( (LA170_1560==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2311;}

                        else if ( (LA170_1560==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2312;}

                        else if ( (LA170_1560==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2313;}

                        else if ( (LA170_1560==LT) && (synpred3_EsperEPL2Grammar())) {s = 2314;}

                        else if ( (LA170_1560==GT) && (synpred3_EsperEPL2Grammar())) {s = 2315;}

                        else if ( (LA170_1560==LE) && (synpred3_EsperEPL2Grammar())) {s = 2316;}

                        else if ( (LA170_1560==GE) && (synpred3_EsperEPL2Grammar())) {s = 2317;}

                        else if ( (LA170_1560==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2318;}

                        else if ( (LA170_1560==IS) && (synpred3_EsperEPL2Grammar())) {s = 2319;}

                        else if ( (LA170_1560==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2320;}

                        else if ( (LA170_1560==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2321;}

                        else if ( (LA170_1560==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2322;}

                        else if ( (LA170_1560==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2323;}

                        else if ( (LA170_1560==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2324;}

                        else if ( (LA170_1560==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2325;}

                        else if ( (LA170_1560==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2326;}

                        else if ( (LA170_1560==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2327;}

                        else if ( (LA170_1560==RPAREN) ) {s = 2328;}

                        else if ( (LA170_1560==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2329;}

                        else if ( (LA170_1560==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2330;}

                        else if ( (LA170_1560==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2331;}

                        else if ( (LA170_1560==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2332;}

                        else if ( (LA170_1560==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2333;}

                         
                        input.seek(index170_1560);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA170_1561 = input.LA(1);

                         
                        int index170_1561 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1561==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2334;}

                        else if ( (LA170_1561==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2335;}

                        else if ( (LA170_1561==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2336;}

                        else if ( (LA170_1561==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2337;}

                        else if ( (LA170_1561==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2338;}

                        else if ( (LA170_1561==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2339;}

                        else if ( (LA170_1561==LT) && (synpred3_EsperEPL2Grammar())) {s = 2340;}

                        else if ( (LA170_1561==GT) && (synpred3_EsperEPL2Grammar())) {s = 2341;}

                        else if ( (LA170_1561==LE) && (synpred3_EsperEPL2Grammar())) {s = 2342;}

                        else if ( (LA170_1561==GE) && (synpred3_EsperEPL2Grammar())) {s = 2343;}

                        else if ( (LA170_1561==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2344;}

                        else if ( (LA170_1561==IS) && (synpred3_EsperEPL2Grammar())) {s = 2345;}

                        else if ( (LA170_1561==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2346;}

                        else if ( (LA170_1561==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2347;}

                        else if ( (LA170_1561==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2348;}

                        else if ( (LA170_1561==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2349;}

                        else if ( (LA170_1561==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2350;}

                        else if ( (LA170_1561==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2351;}

                        else if ( (LA170_1561==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2352;}

                        else if ( (LA170_1561==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2353;}

                        else if ( (LA170_1561==RPAREN) ) {s = 2354;}

                        else if ( (LA170_1561==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2355;}

                        else if ( (LA170_1561==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2356;}

                        else if ( (LA170_1561==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2357;}

                        else if ( (LA170_1561==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2358;}

                        else if ( (LA170_1561==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2359;}

                         
                        input.seek(index170_1561);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA170_1631 = input.LA(1);

                         
                        int index170_1631 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1631==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}

                        else if ( (LA170_1631==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2361;}

                        else if ( (LA170_1631==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2362;}

                        else if ( (LA170_1631==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2363;}

                        else if ( (LA170_1631==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2364;}

                        else if ( (LA170_1631==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2365;}

                        else if ( (LA170_1631==LT) && (synpred3_EsperEPL2Grammar())) {s = 2366;}

                        else if ( (LA170_1631==GT) && (synpred3_EsperEPL2Grammar())) {s = 2367;}

                        else if ( (LA170_1631==LE) && (synpred3_EsperEPL2Grammar())) {s = 2368;}

                        else if ( (LA170_1631==GE) && (synpred3_EsperEPL2Grammar())) {s = 2369;}

                        else if ( (LA170_1631==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2370;}

                        else if ( (LA170_1631==IS) && (synpred3_EsperEPL2Grammar())) {s = 2371;}

                        else if ( (LA170_1631==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2372;}

                        else if ( (LA170_1631==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2373;}

                        else if ( (LA170_1631==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2374;}

                        else if ( (LA170_1631==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2375;}

                        else if ( (LA170_1631==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2376;}

                        else if ( (LA170_1631==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2377;}

                        else if ( (LA170_1631==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2378;}

                        else if ( (LA170_1631==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2379;}

                        else if ( (LA170_1631==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2380;}

                        else if ( (LA170_1631==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2381;}

                        else if ( (LA170_1631==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2382;}

                        else if ( (LA170_1631==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2383;}

                        else if ( (LA170_1631==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2384;}

                        else if ( (LA170_1631==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1631);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA170_1632 = input.LA(1);

                         
                        int index170_1632 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1632==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2386;}

                        else if ( (LA170_1632==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2387;}

                        else if ( (LA170_1632==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2388;}

                        else if ( (LA170_1632==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2389;}

                        else if ( (LA170_1632==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2390;}

                        else if ( (LA170_1632==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2391;}

                        else if ( (LA170_1632==LT) && (synpred3_EsperEPL2Grammar())) {s = 2392;}

                        else if ( (LA170_1632==GT) && (synpred3_EsperEPL2Grammar())) {s = 2393;}

                        else if ( (LA170_1632==LE) && (synpred3_EsperEPL2Grammar())) {s = 2394;}

                        else if ( (LA170_1632==GE) && (synpred3_EsperEPL2Grammar())) {s = 2395;}

                        else if ( (LA170_1632==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2396;}

                        else if ( (LA170_1632==IS) && (synpred3_EsperEPL2Grammar())) {s = 2397;}

                        else if ( (LA170_1632==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2398;}

                        else if ( (LA170_1632==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2399;}

                        else if ( (LA170_1632==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2400;}

                        else if ( (LA170_1632==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2401;}

                        else if ( (LA170_1632==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2402;}

                        else if ( (LA170_1632==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2403;}

                        else if ( (LA170_1632==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2404;}

                        else if ( (LA170_1632==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2405;}

                        else if ( (LA170_1632==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2406;}

                        else if ( (LA170_1632==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2407;}

                        else if ( (LA170_1632==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2408;}

                        else if ( (LA170_1632==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2409;}

                        else if ( (LA170_1632==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2410;}

                        else if ( (LA170_1632==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1632);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA170_1685 = input.LA(1);

                         
                        int index170_1685 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1685==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}

                        else if ( (LA170_1685==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2413;}

                        else if ( (LA170_1685==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2414;}

                        else if ( (LA170_1685==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2415;}

                        else if ( (LA170_1685==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2416;}

                        else if ( (LA170_1685==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2417;}

                        else if ( (LA170_1685==LT) && (synpred3_EsperEPL2Grammar())) {s = 2418;}

                        else if ( (LA170_1685==GT) && (synpred3_EsperEPL2Grammar())) {s = 2419;}

                        else if ( (LA170_1685==LE) && (synpred3_EsperEPL2Grammar())) {s = 2420;}

                        else if ( (LA170_1685==GE) && (synpred3_EsperEPL2Grammar())) {s = 2421;}

                        else if ( (LA170_1685==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2422;}

                        else if ( (LA170_1685==IS) && (synpred3_EsperEPL2Grammar())) {s = 2423;}

                        else if ( (LA170_1685==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2424;}

                        else if ( (LA170_1685==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2425;}

                        else if ( (LA170_1685==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2426;}

                        else if ( (LA170_1685==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2427;}

                        else if ( (LA170_1685==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2428;}

                        else if ( (LA170_1685==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2429;}

                        else if ( (LA170_1685==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2430;}

                        else if ( (LA170_1685==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2431;}

                        else if ( (LA170_1685==AS) && (synpred3_EsperEPL2Grammar())) {s = 2432;}

                        else if ( (LA170_1685==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2433;}

                        else if ( (LA170_1685==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2434;}

                        else if ( (LA170_1685==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2435;}

                        else if ( (LA170_1685==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2436;}

                        else if ( (LA170_1685==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2437;}

                        else if ( (LA170_1685==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1685);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA170_1686 = input.LA(1);

                         
                        int index170_1686 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1686==RPAREN) ) {s = 14;}

                        else if ( (LA170_1686==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}

                        else if ( (LA170_1686==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2441;}

                        else if ( (LA170_1686==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2442;}

                        else if ( (LA170_1686==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2443;}

                        else if ( (LA170_1686==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2444;}

                        else if ( (LA170_1686==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2445;}

                        else if ( (LA170_1686==LT) && (synpred3_EsperEPL2Grammar())) {s = 2446;}

                        else if ( (LA170_1686==GT) && (synpred3_EsperEPL2Grammar())) {s = 2447;}

                        else if ( (LA170_1686==LE) && (synpred3_EsperEPL2Grammar())) {s = 2448;}

                        else if ( (LA170_1686==GE) && (synpred3_EsperEPL2Grammar())) {s = 2449;}

                        else if ( (LA170_1686==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2450;}

                        else if ( (LA170_1686==IS) && (synpred3_EsperEPL2Grammar())) {s = 2451;}

                        else if ( (LA170_1686==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2452;}

                        else if ( (LA170_1686==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2453;}

                        else if ( (LA170_1686==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2454;}

                        else if ( (LA170_1686==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2455;}

                        else if ( (LA170_1686==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2456;}

                        else if ( (LA170_1686==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2457;}

                        else if ( (LA170_1686==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2458;}

                        else if ( (LA170_1686==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2459;}

                        else if ( (LA170_1686==AS) && (synpred3_EsperEPL2Grammar())) {s = 2460;}

                        else if ( (LA170_1686==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2461;}

                        else if ( (LA170_1686==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2462;}

                        else if ( (LA170_1686==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2463;}

                        else if ( (LA170_1686==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2464;}

                        else if ( (LA170_1686==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2465;}

                         
                        input.seek(index170_1686);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA170_1746 = input.LA(1);

                         
                        int index170_1746 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1746==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2466;}

                        else if ( (LA170_1746==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2467;}

                        else if ( (LA170_1746==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2468;}

                        else if ( (LA170_1746==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2469;}

                        else if ( (LA170_1746==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2470;}

                        else if ( (LA170_1746==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}

                        else if ( (LA170_1746==LT) && (synpred3_EsperEPL2Grammar())) {s = 2472;}

                        else if ( (LA170_1746==GT) && (synpred3_EsperEPL2Grammar())) {s = 2473;}

                        else if ( (LA170_1746==LE) && (synpred3_EsperEPL2Grammar())) {s = 2474;}

                        else if ( (LA170_1746==GE) && (synpred3_EsperEPL2Grammar())) {s = 2475;}

                        else if ( (LA170_1746==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2476;}

                        else if ( (LA170_1746==IS) && (synpred3_EsperEPL2Grammar())) {s = 2477;}

                        else if ( (LA170_1746==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2478;}

                        else if ( (LA170_1746==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2479;}

                        else if ( (LA170_1746==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2480;}

                        else if ( (LA170_1746==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2481;}

                        else if ( (LA170_1746==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2482;}

                        else if ( (LA170_1746==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2483;}

                        else if ( (LA170_1746==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2484;}

                        else if ( (LA170_1746==RPAREN) ) {s = 2485;}

                        else if ( (LA170_1746==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2486;}

                        else if ( (LA170_1746==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2487;}

                        else if ( (LA170_1746==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2488;}

                        else if ( (LA170_1746==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2489;}

                        else if ( (LA170_1746==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2490;}

                         
                        input.seek(index170_1746);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA170_1747 = input.LA(1);

                         
                        int index170_1747 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1747==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2491;}

                        else if ( (LA170_1747==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2492;}

                        else if ( (LA170_1747==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2493;}

                        else if ( (LA170_1747==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2494;}

                        else if ( (LA170_1747==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2495;}

                        else if ( (LA170_1747==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2496;}

                        else if ( (LA170_1747==LT) && (synpred3_EsperEPL2Grammar())) {s = 2497;}

                        else if ( (LA170_1747==GT) && (synpred3_EsperEPL2Grammar())) {s = 2498;}

                        else if ( (LA170_1747==LE) && (synpred3_EsperEPL2Grammar())) {s = 2499;}

                        else if ( (LA170_1747==GE) && (synpred3_EsperEPL2Grammar())) {s = 2500;}

                        else if ( (LA170_1747==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2501;}

                        else if ( (LA170_1747==IS) && (synpred3_EsperEPL2Grammar())) {s = 2502;}

                        else if ( (LA170_1747==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2503;}

                        else if ( (LA170_1747==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2504;}

                        else if ( (LA170_1747==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2505;}

                        else if ( (LA170_1747==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2506;}

                        else if ( (LA170_1747==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2507;}

                        else if ( (LA170_1747==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2508;}

                        else if ( (LA170_1747==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2509;}

                        else if ( (LA170_1747==RPAREN) ) {s = 2510;}

                        else if ( (LA170_1747==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2511;}

                        else if ( (LA170_1747==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2512;}

                        else if ( (LA170_1747==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2513;}

                        else if ( (LA170_1747==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2514;}

                        else if ( (LA170_1747==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2515;}

                         
                        input.seek(index170_1747);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA170_1871 = input.LA(1);

                         
                        int index170_1871 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_1871);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA170_1877 = input.LA(1);

                         
                        int index170_1877 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_1877);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA170_1921 = input.LA(1);

                         
                        int index170_1921 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_1921);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA170_1946 = input.LA(1);

                         
                        int index170_1946 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_1946);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA170_1971 = input.LA(1);

                         
                        int index170_1971 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_1971);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA170_1996 = input.LA(1);

                         
                        int index170_1996 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_1996);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA170_2073 = input.LA(1);

                         
                        int index170_2073 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2073);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA170_2098 = input.LA(1);

                         
                        int index170_2098 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2098);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA170_2123 = input.LA(1);

                         
                        int index170_2123 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2123);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA170_2148 = input.LA(1);

                         
                        int index170_2148 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2148);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA170_2173 = input.LA(1);

                         
                        int index170_2173 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2173);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA170_2198 = input.LA(1);

                         
                        int index170_2198 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2198);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA170_2224 = input.LA(1);

                         
                        int index170_2224 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2224);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA170_2230 = input.LA(1);

                         
                        int index170_2230 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2230);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA170_2256 = input.LA(1);

                         
                        int index170_2256 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2256);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA170_2282 = input.LA(1);

                         
                        int index170_2282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2282);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA170_2328 = input.LA(1);

                         
                        int index170_2328 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2328);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA170_2354 = input.LA(1);

                         
                        int index170_2354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2354);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA170_2485 = input.LA(1);

                         
                        int index170_2485 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2485);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA170_2510 = input.LA(1);

                         
                        int index170_2510 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2515;}

                         
                        input.seek(index170_2510);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String DFA198_eotS =
        "\u0516\uffff";
    static final String DFA198_eofS =
        "\1\uffff\1\112\1\u0085\6\uffff\1\u00c0\1\u00fb\u010d\uffff\1\u028c"+
        "\1\u02c6\6\uffff\1\u0301\1\u033c\u00a1\uffff\1\u03e0\1\u041a\6\uffff"+
        "\1\u0455\1\u0490\u0349\uffff";
    static final String DFA198_minS =
        "\1\5\2\6\6\uffff\2\6\41\uffff\1\5\2\uffff\1\5\71\uffff\1\5\1\uffff"+
        "\1\5\66\uffff\1\5\74\uffff\1\5\70\uffff\2\6\6\uffff\2\6\52\uffff"+
        "\2\6\76\uffff\2\6\65\uffff\2\6\6\uffff\2\6\52\uffff\2\6\76\uffff"+
        "\2\6\65\uffff\1\0\2\uffff\1\0\71\uffff\1\0\67\uffff\2\0\74\uffff"+
        "\1\0\114\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\2\uffff\1\0\71\uffff\1\0\67\uffff\2\0\74\uffff\1\0\114\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff";
    static final String DFA198_maxS =
        "\1\u0126\2\u0125\6\uffff\2\u0125\41\uffff\1\u0126\2\uffff\1\u0128"+
        "\71\uffff\1\u0128\1\uffff\1\u0126\66\uffff\1\u0128\74\uffff\1\u0128"+
        "\70\uffff\2\u0125\6\uffff\2\u0125\52\uffff\2\u0120\76\uffff\2\u0120"+
        "\65\uffff\2\u0125\6\uffff\2\u0125\52\uffff\2\u0120\76\uffff\2\u0120"+
        "\65\uffff\1\0\2\uffff\1\0\71\uffff\1\0\67\uffff\2\0\74\uffff\1\0"+
        "\114\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff\1"+
        "\0\2\uffff\1\0\71\uffff\1\0\67\uffff\2\0\74\uffff\1\0\114\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff";
    static final String DFA198_acceptS =
        "\3\uffff\6\1\2\uffff\41\1\1\uffff\2\1\1\uffff\71\1\1\uffff\1\1"+
        "\1\uffff\66\1\1\uffff\74\1\1\uffff\70\1\2\uffff\6\1\2\uffff\41\1"+
        "\1\2\u0081\uffff\6\1\2\uffff\41\1\u0081\uffff\2\1\1\uffff\71\1\1"+
        "\uffff\67\1\2\uffff\74\1\1\uffff\70\1\151\uffff\2\1\1\uffff\71\1"+
        "\1\uffff\67\1\2\uffff\74\1\1\uffff\70\1\150\uffff";
    static final String DFA198_specialS =
        "\1\0\1\1\1\2\6\uffff\1\3\1\4\41\uffff\1\5\76\uffff\1\6\u00ac\uffff"+
        "\1\7\1\10\6\uffff\1\11\1\12\u00a1\uffff\1\13\1\14\6\uffff\1\15\1"+
        "\16\u00a1\uffff\1\17\2\uffff\1\20\71\uffff\1\21\67\uffff\1\22\1"+
        "\23\74\uffff\1\24\114\uffff\1\25\31\uffff\1\26\31\uffff\1\27\31"+
        "\uffff\1\30\5\uffff\1\31\2\uffff\1\32\71\uffff\1\33\67\uffff\1\34"+
        "\1\35\74\uffff\1\36\114\uffff\1\37\31\uffff\1\40\31\uffff\1\41\31"+
        "\uffff\1\42\5\uffff}>";
    static final String[] DFA198_transitionS = {
            "\1\43\4\uffff\1\5\3\uffff\1\6\3\uffff\1\7\1\10\1\11\1\12\1"+
            "\13\1\14\1\15\1\16\1\4\10\uffff\1\46\1\uffff\1\50\1\44\1\45"+
            "\1\47\12\uffff\1\17\1\20\1\21\11\uffff\1\23\1\24\1\25\1\27\1"+
            "\30\1\31\1\32\1\33\1\uffff\1\34\1\35\1\36\1\37\2\uffff\1\40"+
            "\1\uffff\1\41\1\26\1\3\1\42\24\uffff\1\51\1\52\1\53\2\uffff"+
            "\1\22\u0099\uffff\1\1\36\uffff\1\2",
            "\1\142\1\143\1\144\1\145\1\146\1\103\1\102\1\141\2\uffff\1"+
            "\116\1\117\14\uffff\1\130\1\132\1\127\1\131\1\120\7\uffff\1"+
            "\74\1\uffff\1\104\1\105\1\uffff\1\122\2\uffff\1\106\3\uffff"+
            "\1\113\1\uffff\1\107\1\125\1\126\7\uffff\1\124\27\uffff\1\140"+
            "\1\137\1\136\6\uffff\1\110\3\uffff\1\121\3\uffff\1\123\1\111"+
            "\u0099\uffff\1\115\1\uffff\1\73\1\54\1\57\1\114\1\56\1\134\1"+
            "\61\1\100\1\64\1\60\1\133\2\uffff\1\77\1\101\1\75\1\76\1\67"+
            "\1\70\1\71\1\72\1\66\1\65\1\62\1\63\1\uffff\1\135\2\uffff\1"+
            "\55",
            "\1\u009d\1\u009e\1\u009f\1\u00a0\1\u00a1\1\176\1\175\1\u009c"+
            "\2\uffff\1\u0089\1\u008a\14\uffff\1\u0093\1\u0095\1\u0092\1"+
            "\u0094\1\u008b\7\uffff\1\167\1\uffff\1\177\1\u0080\1\uffff\1"+
            "\u008d\2\uffff\1\u0081\3\uffff\1\u0086\1\uffff\1\u0082\1\u0090"+
            "\1\u0091\7\uffff\1\u008f\27\uffff\1\u009b\1\u009a\1\u0099\6"+
            "\uffff\1\u0083\3\uffff\1\u008c\3\uffff\1\u008e\1\u0084\u0099"+
            "\uffff\1\u0088\1\uffff\1\166\1\153\1\151\1\u0087\1\150\1\u0097"+
            "\1\154\1\173\1\157\1\152\1\u0096\2\uffff\1\172\1\174\1\170\1"+
            "\171\1\162\1\163\1\164\1\165\1\161\1\160\1\155\1\156\1\uffff"+
            "\1\u0098\2\uffff\1\147",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u00d8\1\u00d9\1\u00da\1\u00db\1\u00dc\1\u00b9\1\u00b8\1"+
            "\u00d7\2\uffff\1\u00c4\1\u00c5\14\uffff\1\u00ce\1\u00d0\1\u00cd"+
            "\1\u00cf\1\u00c6\7\uffff\1\u00b2\1\uffff\1\u00ba\1\u00bb\1\uffff"+
            "\1\u00c8\2\uffff\1\u00bc\3\uffff\1\u00c1\1\uffff\1\u00bd\1\u00cb"+
            "\1\u00cc\7\uffff\1\u00ca\27\uffff\1\u00d6\1\u00d5\1\u00d4\6"+
            "\uffff\1\u00be\3\uffff\1\u00c7\3\uffff\1\u00c9\1\u00bf\u0099"+
            "\uffff\1\u00c3\1\uffff\1\u00b1\1\u00a6\1\u00a2\1\u00c2\1\u00a4"+
            "\1\u00d2\1\u00a7\1\u00b6\1\u00aa\1\u00a5\1\u00d1\2\uffff\1\u00b5"+
            "\1\u00b7\1\u00b3\1\u00b4\1\u00ad\1\u00ae\1\u00af\1\u00b0\1\u00ac"+
            "\1\u00ab\1\u00a8\1\u00a9\1\uffff\1\u00d3\2\uffff\1\u00a3",
            "\1\u0113\1\u0114\1\u0115\1\u0116\1\u0117\1\u00f4\1\u00f3\1"+
            "\u0112\2\uffff\1\u00ff\1\u0100\14\uffff\1\u0109\1\u010b\1\u0108"+
            "\1\u010a\1\u0101\7\uffff\1\u00ed\1\uffff\1\u00f5\1\u00f6\1\uffff"+
            "\1\u0103\2\uffff\1\u00f7\3\uffff\1\u00fc\1\uffff\1\u00f8\1\u0106"+
            "\1\u0107\7\uffff\1\u0105\27\uffff\1\u0111\1\u0110\1\u010f\6"+
            "\uffff\1\u00f9\3\uffff\1\u0102\3\uffff\1\u0104\1\u00fa\u0099"+
            "\uffff\1\u00fe\1\uffff\1\u00ec\1\u00e1\1\u00df\1\u00fd\1\u00de"+
            "\1\u010d\1\u00e2\1\u00f1\1\u00e5\1\u00e0\1\u010c\2\uffff\1\u00f0"+
            "\1\u00f2\1\u00ee\1\u00ef\1\u00e8\1\u00e9\1\u00ea\1\u00eb\1\u00e7"+
            "\1\u00e6\1\u00e3\1\u00e4\1\uffff\1\u010e\2\uffff\1\u00dd",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u013a\4\uffff\1\u011c\3\uffff\1\u011d\3\uffff\1\u011e\1"+
            "\u011f\1\u0120\1\u0121\1\u0122\1\u0123\1\u0124\1\u0125\1\u011b"+
            "\10\uffff\1\u013d\1\uffff\1\u013f\1\u013b\1\u013c\1\u013e\12"+
            "\uffff\1\u0126\1\u0127\1\u0128\11\uffff\1\u012a\1\u012b\1\u012c"+
            "\1\u012e\1\u012f\1\u0130\1\u0131\1\u0132\1\uffff\1\u0133\1\u0134"+
            "\1\u0135\1\u0136\2\uffff\1\u0137\1\uffff\1\u0138\1\u012d\1\u011a"+
            "\1\u0139\24\uffff\1\u0140\1\u0141\1\u0142\2\uffff\1\u0129\u0099"+
            "\uffff\1\u0118\36\uffff\1\u0119",
            "",
            "",
            "\1\u0143\4\uffff\1\u0143\2\uffff\2\u0143\3\uffff\11\u0143"+
            "\1\uffff\1\u0143\6\uffff\1\u0143\1\uffff\4\u0143\5\uffff\2\u0143"+
            "\3\uffff\3\u0143\11\uffff\16\u0143\1\uffff\1\u0143\1\uffff\4"+
            "\u0143\14\uffff\3\u0143\5\uffff\3\u0143\2\uffff\1\u0143\u008a"+
            "\uffff\1\u0143\16\uffff\1\u0143\2\uffff\2\u0143\4\uffff\2\u0143"+
            "\1\uffff\1\u014c\1\u014d\11\uffff\1\u0143\2\uffff\1\u0143\1"+
            "\uffff\1\u0143\2\uffff\3\u0143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0143\4\uffff\1\u0143\2\uffff\2\u0143\3\uffff\11\u0143"+
            "\1\uffff\1\u0143\6\uffff\1\u0143\1\uffff\4\u0143\5\uffff\2\u0143"+
            "\3\uffff\3\u0143\11\uffff\16\u0143\1\uffff\1\u0143\1\uffff\4"+
            "\u0143\14\uffff\3\u0143\5\uffff\3\u0143\2\uffff\1\u0143\u008a"+
            "\uffff\1\u0143\16\uffff\1\u0143\2\uffff\2\u0143\4\uffff\2\u0143"+
            "\1\uffff\1\u018c\1\u018d\11\uffff\1\u0143\2\uffff\1\u0143\1"+
            "\uffff\1\u0143\2\uffff\3\u0143",
            "",
            "\1\u01e5\4\uffff\1\u01c7\3\uffff\1\u01c8\3\uffff\1\u01c9\1"+
            "\u01ca\1\u01cb\1\u01cc\1\u01cd\1\u01ce\1\u01cf\1\u01d0\1\u01c6"+
            "\10\uffff\1\u01e8\1\uffff\1\u01ea\1\u01e6\1\u01e7\1\u01e9\12"+
            "\uffff\1\u01d1\1\u01d2\1\u01d3\11\uffff\1\u01d5\1\u01d6\1\u01d7"+
            "\1\u01d9\1\u01da\1\u01db\1\u01dc\1\u01dd\1\uffff\1\u01de\1\u01df"+
            "\1\u01e0\1\u01e1\2\uffff\1\u01e2\1\uffff\1\u01e3\1\u01d8\1\u01c5"+
            "\1\u01e4\24\uffff\1\u01eb\1\u01ec\1\u01ed\2\uffff\1\u01d4\u0099"+
            "\uffff\1\u01c3\36\uffff\1\u01c4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0143\4\uffff\1\u0143\2\uffff\2\u0143\3\uffff\11\u0143"+
            "\1\uffff\1\u0143\6\uffff\1\u0143\1\uffff\4\u0143\5\uffff\2\u0143"+
            "\3\uffff\3\u0143\11\uffff\16\u0143\1\uffff\1\u0143\1\uffff\4"+
            "\u0143\14\uffff\3\u0143\5\uffff\3\u0143\2\uffff\1\u0143\u008a"+
            "\uffff\1\u0143\16\uffff\1\u0143\2\uffff\2\u0143\4\uffff\2\u0143"+
            "\1\uffff\1\u01f7\1\u01f8\11\uffff\1\u0143\2\uffff\1\u0143\1"+
            "\uffff\1\u0143\2\uffff\3\u0143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0143\4\uffff\1\u0143\2\uffff\2\u0143\3\uffff\11\u0143"+
            "\1\uffff\1\u0143\6\uffff\1\u0143\1\uffff\4\u0143\5\uffff\2\u0143"+
            "\3\uffff\3\u0143\11\uffff\16\u0143\1\uffff\1\u0143\1\uffff\4"+
            "\u0143\14\uffff\3\u0143\5\uffff\3\u0143\2\uffff\1\u0143\u008a"+
            "\uffff\1\u0143\16\uffff\1\u0143\2\uffff\2\u0143\4\uffff\2\u0143"+
            "\1\uffff\1\u0237\1\u0238\11\uffff\1\u0143\2\uffff\1\u0143\1"+
            "\uffff\1\u0143\2\uffff\3\u0143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u02a4\1\u02a5\1\u02a6\1\u02a7\1\u02a8\1\u0285\1\u0284\1"+
            "\u02a3\2\uffff\1\u0290\1\u0291\14\uffff\1\u029a\1\u029c\1\u0299"+
            "\1\u029b\1\u0292\7\uffff\1\u027e\1\uffff\1\u0286\1\u0287\1\uffff"+
            "\1\u0294\2\uffff\1\u0288\3\uffff\1\u028d\1\uffff\1\u0289\1\u0297"+
            "\1\u0298\7\uffff\1\u0296\27\uffff\1\u02a2\1\u02a1\1\u02a0\6"+
            "\uffff\1\u028a\3\uffff\1\u0293\3\uffff\1\u0295\1\u028b\u0099"+
            "\uffff\1\u028f\1\uffff\1\u027d\1\u026e\1\u0271\1\u028e\1\u0270"+
            "\1\u029e\1\u0273\1\u0282\1\u0276\1\u0272\1\u029d\2\uffff\1\u0281"+
            "\1\u0283\1\u027f\1\u0280\1\u0279\1\u027a\1\u027b\1\u027c\1\u0278"+
            "\1\u0277\1\u0274\1\u0275\1\uffff\1\u029f\2\uffff\1\u026f",
            "\1\u02de\1\u02df\1\u02e0\1\u02e1\1\u02e2\1\u02bf\1\u02be\1"+
            "\u02dd\2\uffff\1\u02ca\1\u02cb\14\uffff\1\u02d4\1\u02d6\1\u02d3"+
            "\1\u02d5\1\u02cc\7\uffff\1\u02b8\1\uffff\1\u02c0\1\u02c1\1\uffff"+
            "\1\u02ce\2\uffff\1\u02c2\3\uffff\1\u02c7\1\uffff\1\u02c3\1\u02d1"+
            "\1\u02d2\7\uffff\1\u02d0\27\uffff\1\u02dc\1\u02db\1\u02da\6"+
            "\uffff\1\u02c4\3\uffff\1\u02cd\3\uffff\1\u02cf\1\u02c5\u0099"+
            "\uffff\1\u02c9\1\uffff\1\u02b7\1\u02e3\1\u02ab\1\u02c8\1\u02aa"+
            "\1\u02d8\1\u02ad\1\u02bc\1\u02b0\1\u02ac\1\u02d7\2\uffff\1\u02bb"+
            "\1\u02bd\1\u02b9\1\u02ba\1\u02b3\1\u02b4\1\u02b5\1\u02b6\1\u02b2"+
            "\1\u02b1\1\u02ae\1\u02af\1\uffff\1\u02d9\2\uffff\1\u02a9",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0319\1\u031a\1\u031b\1\u031c\1\u031d\1\u02fa\1\u02f9\1"+
            "\u0318\2\uffff\1\u0305\1\u0306\14\uffff\1\u030f\1\u0311\1\u030e"+
            "\1\u0310\1\u0307\7\uffff\1\u02f3\1\uffff\1\u02fb\1\u02fc\1\uffff"+
            "\1\u0309\2\uffff\1\u02fd\3\uffff\1\u0302\1\uffff\1\u02fe\1\u030c"+
            "\1\u030d\7\uffff\1\u030b\27\uffff\1\u0317\1\u0316\1\u0315\6"+
            "\uffff\1\u02ff\3\uffff\1\u0308\3\uffff\1\u030a\1\u0300\u0099"+
            "\uffff\1\u0304\1\uffff\1\u02f2\1\u031e\1\u02e4\1\u0303\1\u02e6"+
            "\1\u0313\1\u02e8\1\u02f7\1\u02eb\1\u02e7\1\u0312\2\uffff\1\u02f6"+
            "\1\u02f8\1\u02f4\1\u02f5\1\u02ee\1\u02ef\1\u02f0\1\u02f1\1\u02ed"+
            "\1\u02ec\1\u02e9\1\u02ea\1\uffff\1\u0314\2\uffff\1\u02e5",
            "\1\u0354\1\u0355\1\u0356\1\u0357\1\u0358\1\u0335\1\u0334\1"+
            "\u0353\2\uffff\1\u0340\1\u0341\14\uffff\1\u034a\1\u034c\1\u0349"+
            "\1\u034b\1\u0342\7\uffff\1\u032e\1\uffff\1\u0336\1\u0337\1\uffff"+
            "\1\u0344\2\uffff\1\u0338\3\uffff\1\u033d\1\uffff\1\u0339\1\u0347"+
            "\1\u0348\7\uffff\1\u0346\27\uffff\1\u0352\1\u0351\1\u0350\6"+
            "\uffff\1\u033a\3\uffff\1\u0343\3\uffff\1\u0345\1\u033b\u0099"+
            "\uffff\1\u033f\1\uffff\1\u032d\1\u0359\1\u0321\1\u033e\1\u0320"+
            "\1\u034e\1\u0323\1\u0332\1\u0326\1\u0322\1\u034d\2\uffff\1\u0331"+
            "\1\u0333\1\u032f\1\u0330\1\u0329\1\u032a\1\u032b\1\u032c\1\u0328"+
            "\1\u0327\1\u0324\1\u0325\1\uffff\1\u034f\2\uffff\1\u031f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0143\1\uffff\3\u0143\34\uffff\1\u0143\u00db\uffff\1\u0143"+
            "\1\uffff\1\u0143\2\uffff\1\u036e\2\uffff\3\u0143\4\uffff\14"+
            "\u0143",
            "\4\u0143\1\uffff\3\u0143\34\uffff\1\u0143\u00db\uffff\1\u0143"+
            "\1\uffff\1\u0143\2\uffff\1\u0388\2\uffff\3\u0143\4\uffff\14"+
            "\u0143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0143\1\uffff\3\u0143\34\uffff\1\u0143\u00db\uffff\1\u0143"+
            "\1\uffff\1\u0143\2\uffff\1\u03a2\2\uffff\3\u0143\4\uffff\14"+
            "\u0143",
            "\4\u0143\1\uffff\3\u0143\34\uffff\1\u0143\u00db\uffff\1\u0143"+
            "\1\uffff\1\u0143\2\uffff\1\u03bc\2\uffff\3\u0143\4\uffff\14"+
            "\u0143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u03f8\1\u03f9\1\u03fa\1\u03fb\1\u03fc\1\u03d9\1\u03d8\1"+
            "\u03f7\2\uffff\1\u03e4\1\u03e5\14\uffff\1\u03ee\1\u03f0\1\u03ed"+
            "\1\u03ef\1\u03e6\7\uffff\1\u03d2\1\uffff\1\u03da\1\u03db\1\uffff"+
            "\1\u03e8\2\uffff\1\u03dc\3\uffff\1\u03e1\1\uffff\1\u03dd\1\u03eb"+
            "\1\u03ec\7\uffff\1\u03ea\27\uffff\1\u03f6\1\u03f5\1\u03f4\6"+
            "\uffff\1\u03de\3\uffff\1\u03e7\3\uffff\1\u03e9\1\u03df\u0099"+
            "\uffff\1\u03e3\1\uffff\1\u03d1\1\u03c2\1\u03c5\1\u03e2\1\u03c4"+
            "\1\u03f2\1\u03c7\1\u03d6\1\u03ca\1\u03c6\1\u03f1\2\uffff\1\u03d5"+
            "\1\u03d7\1\u03d3\1\u03d4\1\u03cd\1\u03ce\1\u03cf\1\u03d0\1\u03cc"+
            "\1\u03cb\1\u03c8\1\u03c9\1\uffff\1\u03f3\2\uffff\1\u03c3",
            "\1\u0432\1\u0433\1\u0434\1\u0435\1\u0436\1\u0413\1\u0412\1"+
            "\u0431\2\uffff\1\u041e\1\u041f\14\uffff\1\u0428\1\u042a\1\u0427"+
            "\1\u0429\1\u0420\7\uffff\1\u040c\1\uffff\1\u0414\1\u0415\1\uffff"+
            "\1\u0422\2\uffff\1\u0416\3\uffff\1\u041b\1\uffff\1\u0417\1\u0425"+
            "\1\u0426\7\uffff\1\u0424\27\uffff\1\u0430\1\u042f\1\u042e\6"+
            "\uffff\1\u0418\3\uffff\1\u0421\3\uffff\1\u0423\1\u0419\u0099"+
            "\uffff\1\u041d\1\uffff\1\u040b\1\u0437\1\u03ff\1\u041c\1\u03fe"+
            "\1\u042c\1\u0401\1\u0410\1\u0404\1\u0400\1\u042b\2\uffff\1\u040f"+
            "\1\u0411\1\u040d\1\u040e\1\u0407\1\u0408\1\u0409\1\u040a\1\u0406"+
            "\1\u0405\1\u0402\1\u0403\1\uffff\1\u042d\2\uffff\1\u03fd",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u046d\1\u046e\1\u046f\1\u0470\1\u0471\1\u044e\1\u044d\1"+
            "\u046c\2\uffff\1\u0459\1\u045a\14\uffff\1\u0463\1\u0465\1\u0462"+
            "\1\u0464\1\u045b\7\uffff\1\u0447\1\uffff\1\u044f\1\u0450\1\uffff"+
            "\1\u045d\2\uffff\1\u0451\3\uffff\1\u0456\1\uffff\1\u0452\1\u0460"+
            "\1\u0461\7\uffff\1\u045f\27\uffff\1\u046b\1\u046a\1\u0469\6"+
            "\uffff\1\u0453\3\uffff\1\u045c\3\uffff\1\u045e\1\u0454\u0099"+
            "\uffff\1\u0458\1\uffff\1\u0446\1\u0472\1\u0438\1\u0457\1\u043a"+
            "\1\u0467\1\u043c\1\u044b\1\u043f\1\u043b\1\u0466\2\uffff\1\u044a"+
            "\1\u044c\1\u0448\1\u0449\1\u0442\1\u0443\1\u0444\1\u0445\1\u0441"+
            "\1\u0440\1\u043d\1\u043e\1\uffff\1\u0468\2\uffff\1\u0439",
            "\1\u04a8\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u0489\1\u0488\1"+
            "\u04a7\2\uffff\1\u0494\1\u0495\14\uffff\1\u049e\1\u04a0\1\u049d"+
            "\1\u049f\1\u0496\7\uffff\1\u0482\1\uffff\1\u048a\1\u048b\1\uffff"+
            "\1\u0498\2\uffff\1\u048c\3\uffff\1\u0491\1\uffff\1\u048d\1\u049b"+
            "\1\u049c\7\uffff\1\u049a\27\uffff\1\u04a6\1\u04a5\1\u04a4\6"+
            "\uffff\1\u048e\3\uffff\1\u0497\3\uffff\1\u0499\1\u048f\u0099"+
            "\uffff\1\u0493\1\uffff\1\u0481\1\u04ad\1\u0475\1\u0492\1\u0474"+
            "\1\u04a2\1\u0477\1\u0486\1\u047a\1\u0476\1\u04a1\2\uffff\1\u0485"+
            "\1\u0487\1\u0483\1\u0484\1\u047d\1\u047e\1\u047f\1\u0480\1\u047c"+
            "\1\u047b\1\u0478\1\u0479\1\uffff\1\u04a3\2\uffff\1\u0473",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0143\1\uffff\3\u0143\34\uffff\1\u0143\u00db\uffff\1\u0143"+
            "\1\uffff\1\u0143\2\uffff\1\u04c2\2\uffff\3\u0143\4\uffff\14"+
            "\u0143",
            "\4\u0143\1\uffff\3\u0143\34\uffff\1\u0143\u00db\uffff\1\u0143"+
            "\1\uffff\1\u0143\2\uffff\1\u04dc\2\uffff\3\u0143\4\uffff\14"+
            "\u0143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\4\u0143\1\uffff\3\u0143\34\uffff\1\u0143\u00db\uffff\1\u0143"+
            "\1\uffff\1\u0143\2\uffff\1\u04f6\2\uffff\3\u0143\4\uffff\14"+
            "\u0143",
            "\4\u0143\1\uffff\3\u0143\34\uffff\1\u0143\u00db\uffff\1\u0143"+
            "\1\uffff\1\u0143\2\uffff\1\u0510\2\uffff\3\u0143\4\uffff\14"+
            "\u0143",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA198_eot = DFA.unpackEncodedString(DFA198_eotS);
    static final short[] DFA198_eof = DFA.unpackEncodedString(DFA198_eofS);
    static final char[] DFA198_min = DFA.unpackEncodedStringToUnsignedChars(DFA198_minS);
    static final char[] DFA198_max = DFA.unpackEncodedStringToUnsignedChars(DFA198_maxS);
    static final short[] DFA198_accept = DFA.unpackEncodedString(DFA198_acceptS);
    static final short[] DFA198_special = DFA.unpackEncodedString(DFA198_specialS);
    static final short[][] DFA198_transition;

    static {
        int numStates = DFA198_transitionS.length;
        DFA198_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA198_transition[i] = DFA.unpackEncodedString(DFA198_transitionS[i]);
        }
    }

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = DFA198_eot;
            this.eof = DFA198_eof;
            this.min = DFA198_min;
            this.max = DFA198_max;
            this.accept = DFA198_accept;
            this.special = DFA198_special;
            this.transition = DFA198_transition;
        }
        public String getDescription() {
            return "1293:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_0 = input.LA(1);

                         
                        int index198_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_0==IDENT) ) {s = 1;}

                        else if ( (LA198_0==TICKED_STRING_LITERAL) ) {s = 2;}

                        else if ( (LA198_0==AT) && (synpred5_EsperEPL2Grammar())) {s = 3;}

                        else if ( (LA198_0==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 4;}

                        else if ( (LA198_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 5;}

                        else if ( (LA198_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 6;}

                        else if ( (LA198_0==SUM) && (synpred5_EsperEPL2Grammar())) {s = 7;}

                        else if ( (LA198_0==AVG) && (synpred5_EsperEPL2Grammar())) {s = 8;}

                        else if ( (LA198_0==MAX) ) {s = 9;}

                        else if ( (LA198_0==MIN) ) {s = 10;}

                        else if ( (LA198_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 11;}

                        else if ( (LA198_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 12;}

                        else if ( (LA198_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 13;}

                        else if ( (LA198_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 14;}

                        else if ( (LA198_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {s = 15;}

                        else if ( (LA198_0==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 16;}

                        else if ( (LA198_0==LAST) && (synpred5_EsperEPL2Grammar())) {s = 17;}

                        else if ( (LA198_0==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 18;}

                        else if ( (LA198_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 19;}

                        else if ( (LA198_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 20;}

                        else if ( (LA198_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 21;}

                        else if ( (LA198_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 22;}

                        else if ( (LA198_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 23;}

                        else if ( (LA198_0==SQL) && (synpred5_EsperEPL2Grammar())) {s = 24;}

                        else if ( (LA198_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 25;}

                        else if ( (LA198_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 26;}

                        else if ( (LA198_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 27;}

                        else if ( (LA198_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 28;}

                        else if ( (LA198_0==LW) && (synpred5_EsperEPL2Grammar())) {s = 29;}

                        else if ( (LA198_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 30;}

                        else if ( (LA198_0==CAST) && (synpred5_EsperEPL2Grammar())) {s = 31;}

                        else if ( (LA198_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 32;}

                        else if ( (LA198_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 33;}

                        else if ( (LA198_0==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 34;}

                        else if ( (LA198_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 35;}

                        else if ( (LA198_0==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 36;}

                        else if ( (LA198_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 37;}

                        else if ( (LA198_0==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 38;}

                        else if ( (LA198_0==FULL) && (synpred5_EsperEPL2Grammar())) {s = 39;}

                        else if ( (LA198_0==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 40;}

                        else if ( (LA198_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 41;}

                        else if ( (LA198_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 42;}

                        else if ( (LA198_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 43;}

                         
                        input.seek(index198_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA198_1 = input.LA(1);

                         
                        int index198_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_1==DOT) ) {s = 44;}

                        else if ( (LA198_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 45;}

                        else if ( (LA198_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 46;}

                        else if ( (LA198_1==LPAREN) ) {s = 47;}

                        else if ( (LA198_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 48;}

                        else if ( (LA198_1==STAR) && (synpred5_EsperEPL2Grammar())) {s = 49;}

                        else if ( (LA198_1==DIV) && (synpred5_EsperEPL2Grammar())) {s = 50;}

                        else if ( (LA198_1==MOD) && (synpred5_EsperEPL2Grammar())) {s = 51;}

                        else if ( (LA198_1==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 52;}

                        else if ( (LA198_1==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 53;}

                        else if ( (LA198_1==LOR) && (synpred5_EsperEPL2Grammar())) {s = 54;}

                        else if ( (LA198_1==LT) && (synpred5_EsperEPL2Grammar())) {s = 55;}

                        else if ( (LA198_1==GT) && (synpred5_EsperEPL2Grammar())) {s = 56;}

                        else if ( (LA198_1==LE) && (synpred5_EsperEPL2Grammar())) {s = 57;}

                        else if ( (LA198_1==GE) && (synpred5_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA198_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA198_1==IS) && (synpred5_EsperEPL2Grammar())) {s = 60;}

                        else if ( (LA198_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA198_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 62;}

                        else if ( (LA198_1==BAND) && (synpred5_EsperEPL2Grammar())) {s = 63;}

                        else if ( (LA198_1==BOR) && (synpred5_EsperEPL2Grammar())) {s = 64;}

                        else if ( (LA198_1==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 65;}

                        else if ( (LA198_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 66;}

                        else if ( (LA198_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 67;}

                        else if ( (LA198_1==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 68;}

                        else if ( (LA198_1==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 69;}

                        else if ( (LA198_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 70;}

                        else if ( (LA198_1==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 71;}

                        else if ( (LA198_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 72;}

                        else if ( (LA198_1==FOR) && (synpred5_EsperEPL2Grammar())) {s = 73;}

                        else if ( (LA198_1==EOF) && (synpred5_EsperEPL2Grammar())) {s = 74;}

                        else if ( (LA198_1==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 75;}

                        else if ( (LA198_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 76;}

                        else if ( (LA198_1==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 77;}

                        else if ( (LA198_1==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 78;}

                        else if ( (LA198_1==AS) && (synpred5_EsperEPL2Grammar())) {s = 79;}

                        else if ( (LA198_1==FROM) && (synpred5_EsperEPL2Grammar())) {s = 80;}

                        else if ( (LA198_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 81;}

                        else if ( (LA198_1==ALL) && (synpred5_EsperEPL2Grammar())) {s = 82;}

                        else if ( (LA198_1==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 83;}

                        else if ( (LA198_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 84;}

                        else if ( (LA198_1==ASC) && (synpred5_EsperEPL2Grammar())) {s = 85;}

                        else if ( (LA198_1==DESC) && (synpred5_EsperEPL2Grammar())) {s = 86;}

                        else if ( (LA198_1==THEN) && (synpred5_EsperEPL2Grammar())) {s = 87;}

                        else if ( (LA198_1==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 88;}

                        else if ( (LA198_1==END) && (synpred5_EsperEPL2Grammar())) {s = 89;}

                        else if ( (LA198_1==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 90;}

                        else if ( (LA198_1==COLON) && (synpred5_EsperEPL2Grammar())) {s = 91;}

                        else if ( (LA198_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 92;}

                        else if ( (LA198_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 93;}

                        else if ( (LA198_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 94;}

                        else if ( (LA198_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 95;}

                        else if ( (LA198_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 96;}

                        else if ( (LA198_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 97;}

                        else if ( (LA198_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 98;}

                        else if ( (LA198_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 99;}

                        else if ( (LA198_1==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 100;}

                        else if ( (LA198_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 101;}

                        else if ( (LA198_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 102;}

                         
                        input.seek(index198_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA198_2 = input.LA(1);

                         
                        int index198_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 103;}

                        else if ( (LA198_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 104;}

                        else if ( (LA198_2==LPAREN) ) {s = 105;}

                        else if ( (LA198_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 106;}

                        else if ( (LA198_2==DOT) ) {s = 107;}

                        else if ( (LA198_2==STAR) && (synpred5_EsperEPL2Grammar())) {s = 108;}

                        else if ( (LA198_2==DIV) && (synpred5_EsperEPL2Grammar())) {s = 109;}

                        else if ( (LA198_2==MOD) && (synpred5_EsperEPL2Grammar())) {s = 110;}

                        else if ( (LA198_2==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 111;}

                        else if ( (LA198_2==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 112;}

                        else if ( (LA198_2==LOR) && (synpred5_EsperEPL2Grammar())) {s = 113;}

                        else if ( (LA198_2==LT) && (synpred5_EsperEPL2Grammar())) {s = 114;}

                        else if ( (LA198_2==GT) && (synpred5_EsperEPL2Grammar())) {s = 115;}

                        else if ( (LA198_2==LE) && (synpred5_EsperEPL2Grammar())) {s = 116;}

                        else if ( (LA198_2==GE) && (synpred5_EsperEPL2Grammar())) {s = 117;}

                        else if ( (LA198_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 118;}

                        else if ( (LA198_2==IS) && (synpred5_EsperEPL2Grammar())) {s = 119;}

                        else if ( (LA198_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 120;}

                        else if ( (LA198_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 121;}

                        else if ( (LA198_2==BAND) && (synpred5_EsperEPL2Grammar())) {s = 122;}

                        else if ( (LA198_2==BOR) && (synpred5_EsperEPL2Grammar())) {s = 123;}

                        else if ( (LA198_2==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 124;}

                        else if ( (LA198_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 125;}

                        else if ( (LA198_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 126;}

                        else if ( (LA198_2==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 127;}

                        else if ( (LA198_2==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 128;}

                        else if ( (LA198_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 129;}

                        else if ( (LA198_2==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 130;}

                        else if ( (LA198_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 131;}

                        else if ( (LA198_2==FOR) && (synpred5_EsperEPL2Grammar())) {s = 132;}

                        else if ( (LA198_2==EOF) && (synpred5_EsperEPL2Grammar())) {s = 133;}

                        else if ( (LA198_2==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 134;}

                        else if ( (LA198_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 135;}

                        else if ( (LA198_2==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 136;}

                        else if ( (LA198_2==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 137;}

                        else if ( (LA198_2==AS) && (synpred5_EsperEPL2Grammar())) {s = 138;}

                        else if ( (LA198_2==FROM) && (synpred5_EsperEPL2Grammar())) {s = 139;}

                        else if ( (LA198_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 140;}

                        else if ( (LA198_2==ALL) && (synpred5_EsperEPL2Grammar())) {s = 141;}

                        else if ( (LA198_2==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 142;}

                        else if ( (LA198_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 143;}

                        else if ( (LA198_2==ASC) && (synpred5_EsperEPL2Grammar())) {s = 144;}

                        else if ( (LA198_2==DESC) && (synpred5_EsperEPL2Grammar())) {s = 145;}

                        else if ( (LA198_2==THEN) && (synpred5_EsperEPL2Grammar())) {s = 146;}

                        else if ( (LA198_2==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 147;}

                        else if ( (LA198_2==END) && (synpred5_EsperEPL2Grammar())) {s = 148;}

                        else if ( (LA198_2==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 149;}

                        else if ( (LA198_2==COLON) && (synpred5_EsperEPL2Grammar())) {s = 150;}

                        else if ( (LA198_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 151;}

                        else if ( (LA198_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 152;}

                        else if ( (LA198_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 153;}

                        else if ( (LA198_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 154;}

                        else if ( (LA198_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 155;}

                        else if ( (LA198_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 156;}

                        else if ( (LA198_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 157;}

                        else if ( (LA198_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 158;}

                        else if ( (LA198_2==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 159;}

                        else if ( (LA198_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 160;}

                        else if ( (LA198_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 161;}

                         
                        input.seek(index198_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA198_9 = input.LA(1);

                         
                        int index198_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_9==LPAREN) ) {s = 162;}

                        else if ( (LA198_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 163;}

                        else if ( (LA198_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 164;}

                        else if ( (LA198_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 165;}

                        else if ( (LA198_9==DOT) && (synpred5_EsperEPL2Grammar())) {s = 166;}

                        else if ( (LA198_9==STAR) && (synpred5_EsperEPL2Grammar())) {s = 167;}

                        else if ( (LA198_9==DIV) && (synpred5_EsperEPL2Grammar())) {s = 168;}

                        else if ( (LA198_9==MOD) && (synpred5_EsperEPL2Grammar())) {s = 169;}

                        else if ( (LA198_9==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 170;}

                        else if ( (LA198_9==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 171;}

                        else if ( (LA198_9==LOR) && (synpred5_EsperEPL2Grammar())) {s = 172;}

                        else if ( (LA198_9==LT) && (synpred5_EsperEPL2Grammar())) {s = 173;}

                        else if ( (LA198_9==GT) && (synpred5_EsperEPL2Grammar())) {s = 174;}

                        else if ( (LA198_9==LE) && (synpred5_EsperEPL2Grammar())) {s = 175;}

                        else if ( (LA198_9==GE) && (synpred5_EsperEPL2Grammar())) {s = 176;}

                        else if ( (LA198_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 177;}

                        else if ( (LA198_9==IS) && (synpred5_EsperEPL2Grammar())) {s = 178;}

                        else if ( (LA198_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 179;}

                        else if ( (LA198_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 180;}

                        else if ( (LA198_9==BAND) && (synpred5_EsperEPL2Grammar())) {s = 181;}

                        else if ( (LA198_9==BOR) && (synpred5_EsperEPL2Grammar())) {s = 182;}

                        else if ( (LA198_9==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 183;}

                        else if ( (LA198_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 184;}

                        else if ( (LA198_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 185;}

                        else if ( (LA198_9==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 186;}

                        else if ( (LA198_9==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 187;}

                        else if ( (LA198_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 188;}

                        else if ( (LA198_9==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 189;}

                        else if ( (LA198_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 190;}

                        else if ( (LA198_9==FOR) && (synpred5_EsperEPL2Grammar())) {s = 191;}

                        else if ( (LA198_9==EOF) && (synpred5_EsperEPL2Grammar())) {s = 192;}

                        else if ( (LA198_9==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 193;}

                        else if ( (LA198_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 194;}

                        else if ( (LA198_9==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 195;}

                        else if ( (LA198_9==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 196;}

                        else if ( (LA198_9==AS) && (synpred5_EsperEPL2Grammar())) {s = 197;}

                        else if ( (LA198_9==FROM) && (synpred5_EsperEPL2Grammar())) {s = 198;}

                        else if ( (LA198_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 199;}

                        else if ( (LA198_9==ALL) && (synpred5_EsperEPL2Grammar())) {s = 200;}

                        else if ( (LA198_9==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 201;}

                        else if ( (LA198_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 202;}

                        else if ( (LA198_9==ASC) && (synpred5_EsperEPL2Grammar())) {s = 203;}

                        else if ( (LA198_9==DESC) && (synpred5_EsperEPL2Grammar())) {s = 204;}

                        else if ( (LA198_9==THEN) && (synpred5_EsperEPL2Grammar())) {s = 205;}

                        else if ( (LA198_9==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 206;}

                        else if ( (LA198_9==END) && (synpred5_EsperEPL2Grammar())) {s = 207;}

                        else if ( (LA198_9==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 208;}

                        else if ( (LA198_9==COLON) && (synpred5_EsperEPL2Grammar())) {s = 209;}

                        else if ( (LA198_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 210;}

                        else if ( (LA198_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 211;}

                        else if ( (LA198_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 212;}

                        else if ( (LA198_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 213;}

                        else if ( (LA198_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 214;}

                        else if ( (LA198_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 215;}

                        else if ( (LA198_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 216;}

                        else if ( (LA198_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 217;}

                        else if ( (LA198_9==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 218;}

                        else if ( (LA198_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 219;}

                        else if ( (LA198_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 220;}

                         
                        input.seek(index198_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA198_10 = input.LA(1);

                         
                        int index198_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 221;}

                        else if ( (LA198_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 222;}

                        else if ( (LA198_10==LPAREN) ) {s = 223;}

                        else if ( (LA198_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 224;}

                        else if ( (LA198_10==DOT) && (synpred5_EsperEPL2Grammar())) {s = 225;}

                        else if ( (LA198_10==STAR) && (synpred5_EsperEPL2Grammar())) {s = 226;}

                        else if ( (LA198_10==DIV) && (synpred5_EsperEPL2Grammar())) {s = 227;}

                        else if ( (LA198_10==MOD) && (synpred5_EsperEPL2Grammar())) {s = 228;}

                        else if ( (LA198_10==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 229;}

                        else if ( (LA198_10==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 230;}

                        else if ( (LA198_10==LOR) && (synpred5_EsperEPL2Grammar())) {s = 231;}

                        else if ( (LA198_10==LT) && (synpred5_EsperEPL2Grammar())) {s = 232;}

                        else if ( (LA198_10==GT) && (synpred5_EsperEPL2Grammar())) {s = 233;}

                        else if ( (LA198_10==LE) && (synpred5_EsperEPL2Grammar())) {s = 234;}

                        else if ( (LA198_10==GE) && (synpred5_EsperEPL2Grammar())) {s = 235;}

                        else if ( (LA198_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 236;}

                        else if ( (LA198_10==IS) && (synpred5_EsperEPL2Grammar())) {s = 237;}

                        else if ( (LA198_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 238;}

                        else if ( (LA198_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 239;}

                        else if ( (LA198_10==BAND) && (synpred5_EsperEPL2Grammar())) {s = 240;}

                        else if ( (LA198_10==BOR) && (synpred5_EsperEPL2Grammar())) {s = 241;}

                        else if ( (LA198_10==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 242;}

                        else if ( (LA198_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 243;}

                        else if ( (LA198_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 244;}

                        else if ( (LA198_10==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 245;}

                        else if ( (LA198_10==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 246;}

                        else if ( (LA198_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 247;}

                        else if ( (LA198_10==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 248;}

                        else if ( (LA198_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 249;}

                        else if ( (LA198_10==FOR) && (synpred5_EsperEPL2Grammar())) {s = 250;}

                        else if ( (LA198_10==EOF) && (synpred5_EsperEPL2Grammar())) {s = 251;}

                        else if ( (LA198_10==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 252;}

                        else if ( (LA198_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 253;}

                        else if ( (LA198_10==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 254;}

                        else if ( (LA198_10==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 255;}

                        else if ( (LA198_10==AS) && (synpred5_EsperEPL2Grammar())) {s = 256;}

                        else if ( (LA198_10==FROM) && (synpred5_EsperEPL2Grammar())) {s = 257;}

                        else if ( (LA198_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 258;}

                        else if ( (LA198_10==ALL) && (synpred5_EsperEPL2Grammar())) {s = 259;}

                        else if ( (LA198_10==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 260;}

                        else if ( (LA198_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 261;}

                        else if ( (LA198_10==ASC) && (synpred5_EsperEPL2Grammar())) {s = 262;}

                        else if ( (LA198_10==DESC) && (synpred5_EsperEPL2Grammar())) {s = 263;}

                        else if ( (LA198_10==THEN) && (synpred5_EsperEPL2Grammar())) {s = 264;}

                        else if ( (LA198_10==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 265;}

                        else if ( (LA198_10==END) && (synpred5_EsperEPL2Grammar())) {s = 266;}

                        else if ( (LA198_10==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 267;}

                        else if ( (LA198_10==COLON) && (synpred5_EsperEPL2Grammar())) {s = 268;}

                        else if ( (LA198_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 269;}

                        else if ( (LA198_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 270;}

                        else if ( (LA198_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 271;}

                        else if ( (LA198_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 272;}

                        else if ( (LA198_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 273;}

                        else if ( (LA198_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 274;}

                        else if ( (LA198_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 275;}

                        else if ( (LA198_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 276;}

                        else if ( (LA198_10==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 277;}

                        else if ( (LA198_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 278;}

                        else if ( (LA198_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 279;}

                         
                        input.seek(index198_10);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA198_44 = input.LA(1);

                         
                        int index198_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_44==IDENT) ) {s = 280;}

                        else if ( (LA198_44==TICKED_STRING_LITERAL) ) {s = 281;}

                        else if ( (LA198_44==AT) && (synpred5_EsperEPL2Grammar())) {s = 282;}

                        else if ( (LA198_44==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 283;}

                        else if ( (LA198_44==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 284;}

                        else if ( (LA198_44==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 285;}

                        else if ( (LA198_44==SUM) && (synpred5_EsperEPL2Grammar())) {s = 286;}

                        else if ( (LA198_44==AVG) && (synpred5_EsperEPL2Grammar())) {s = 287;}

                        else if ( (LA198_44==MAX) ) {s = 288;}

                        else if ( (LA198_44==MIN) ) {s = 289;}

                        else if ( (LA198_44==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 290;}

                        else if ( (LA198_44==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 291;}

                        else if ( (LA198_44==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 292;}

                        else if ( (LA198_44==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 293;}

                        else if ( (LA198_44==EVENTS) && (synpred5_EsperEPL2Grammar())) {s = 294;}

                        else if ( (LA198_44==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 295;}

                        else if ( (LA198_44==LAST) && (synpred5_EsperEPL2Grammar())) {s = 296;}

                        else if ( (LA198_44==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 297;}

                        else if ( (LA198_44==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 298;}

                        else if ( (LA198_44==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 299;}

                        else if ( (LA198_44==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 300;}

                        else if ( (LA198_44==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 301;}

                        else if ( (LA198_44==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 302;}

                        else if ( (LA198_44==SQL) && (synpred5_EsperEPL2Grammar())) {s = 303;}

                        else if ( (LA198_44==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 304;}

                        else if ( (LA198_44==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 305;}

                        else if ( (LA198_44==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 306;}

                        else if ( (LA198_44==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 307;}

                        else if ( (LA198_44==LW) && (synpred5_EsperEPL2Grammar())) {s = 308;}

                        else if ( (LA198_44==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 309;}

                        else if ( (LA198_44==CAST) && (synpred5_EsperEPL2Grammar())) {s = 310;}

                        else if ( (LA198_44==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 311;}

                        else if ( (LA198_44==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 312;}

                        else if ( (LA198_44==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 313;}

                        else if ( (LA198_44==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 314;}

                        else if ( (LA198_44==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 315;}

                        else if ( (LA198_44==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 316;}

                        else if ( (LA198_44==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 317;}

                        else if ( (LA198_44==FULL) && (synpred5_EsperEPL2Grammar())) {s = 318;}

                        else if ( (LA198_44==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 319;}

                        else if ( (LA198_44==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 320;}

                        else if ( (LA198_44==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 321;}

                        else if ( (LA198_44==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 322;}

                         
                        input.seek(index198_44);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA198_107 = input.LA(1);

                         
                        int index198_107 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_107==IDENT) ) {s = 451;}

                        else if ( (LA198_107==TICKED_STRING_LITERAL) ) {s = 452;}

                        else if ( (LA198_107==AT) && (synpred5_EsperEPL2Grammar())) {s = 453;}

                        else if ( (LA198_107==COUNT) && (synpred5_EsperEPL2Grammar())) {s = 454;}

                        else if ( (LA198_107==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 455;}

                        else if ( (LA198_107==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 456;}

                        else if ( (LA198_107==SUM) && (synpred5_EsperEPL2Grammar())) {s = 457;}

                        else if ( (LA198_107==AVG) && (synpred5_EsperEPL2Grammar())) {s = 458;}

                        else if ( (LA198_107==MAX) ) {s = 459;}

                        else if ( (LA198_107==MIN) ) {s = 460;}

                        else if ( (LA198_107==COALESCE) && (synpred5_EsperEPL2Grammar())) {s = 461;}

                        else if ( (LA198_107==MEDIAN) && (synpred5_EsperEPL2Grammar())) {s = 462;}

                        else if ( (LA198_107==STDDEV) && (synpred5_EsperEPL2Grammar())) {s = 463;}

                        else if ( (LA198_107==AVEDEV) && (synpred5_EsperEPL2Grammar())) {s = 464;}

                        else if ( (LA198_107==EVENTS) && (synpred5_EsperEPL2Grammar())) {s = 465;}

                        else if ( (LA198_107==FIRST) && (synpred5_EsperEPL2Grammar())) {s = 466;}

                        else if ( (LA198_107==LAST) && (synpred5_EsperEPL2Grammar())) {s = 467;}

                        else if ( (LA198_107==WHILE) && (synpred5_EsperEPL2Grammar())) {s = 468;}

                        else if ( (LA198_107==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {s = 469;}

                        else if ( (LA198_107==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {s = 470;}

                        else if ( (LA198_107==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {s = 471;}

                        else if ( (LA198_107==UNTIL) && (synpred5_EsperEPL2Grammar())) {s = 472;}

                        else if ( (LA198_107==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 473;}

                        else if ( (LA198_107==SQL) && (synpred5_EsperEPL2Grammar())) {s = 474;}

                        else if ( (LA198_107==METADATASQL) && (synpred5_EsperEPL2Grammar())) {s = 475;}

                        else if ( (LA198_107==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {s = 476;}

                        else if ( (LA198_107==PRIOR) && (synpred5_EsperEPL2Grammar())) {s = 477;}

                        else if ( (LA198_107==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {s = 478;}

                        else if ( (LA198_107==LW) && (synpred5_EsperEPL2Grammar())) {s = 479;}

                        else if ( (LA198_107==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {s = 480;}

                        else if ( (LA198_107==CAST) && (synpred5_EsperEPL2Grammar())) {s = 481;}

                        else if ( (LA198_107==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {s = 482;}

                        else if ( (LA198_107==VARIABLE) && (synpred5_EsperEPL2Grammar())) {s = 483;}

                        else if ( (LA198_107==INDEX) && (synpred5_EsperEPL2Grammar())) {s = 484;}

                        else if ( (LA198_107==WINDOW) && (synpred5_EsperEPL2Grammar())) {s = 485;}

                        else if ( (LA198_107==LEFT) && (synpred5_EsperEPL2Grammar())) {s = 486;}

                        else if ( (LA198_107==RIGHT) && (synpred5_EsperEPL2Grammar())) {s = 487;}

                        else if ( (LA198_107==OUTER) && (synpred5_EsperEPL2Grammar())) {s = 488;}

                        else if ( (LA198_107==FULL) && (synpred5_EsperEPL2Grammar())) {s = 489;}

                        else if ( (LA198_107==JOIN) && (synpred5_EsperEPL2Grammar())) {s = 490;}

                        else if ( (LA198_107==DEFINE) && (synpred5_EsperEPL2Grammar())) {s = 491;}

                        else if ( (LA198_107==PARTITION) && (synpred5_EsperEPL2Grammar())) {s = 492;}

                        else if ( (LA198_107==MATCHES) && (synpred5_EsperEPL2Grammar())) {s = 493;}

                         
                        input.seek(index198_107);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA198_280 = input.LA(1);

                         
                        int index198_280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_280==DOT) ) {s = 622;}

                        else if ( (LA198_280==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 623;}

                        else if ( (LA198_280==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 624;}

                        else if ( (LA198_280==LPAREN) ) {s = 625;}

                        else if ( (LA198_280==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 626;}

                        else if ( (LA198_280==STAR) && (synpred5_EsperEPL2Grammar())) {s = 627;}

                        else if ( (LA198_280==DIV) && (synpred5_EsperEPL2Grammar())) {s = 628;}

                        else if ( (LA198_280==MOD) && (synpred5_EsperEPL2Grammar())) {s = 629;}

                        else if ( (LA198_280==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 630;}

                        else if ( (LA198_280==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 631;}

                        else if ( (LA198_280==LOR) && (synpred5_EsperEPL2Grammar())) {s = 632;}

                        else if ( (LA198_280==LT) && (synpred5_EsperEPL2Grammar())) {s = 633;}

                        else if ( (LA198_280==GT) && (synpred5_EsperEPL2Grammar())) {s = 634;}

                        else if ( (LA198_280==LE) && (synpred5_EsperEPL2Grammar())) {s = 635;}

                        else if ( (LA198_280==GE) && (synpred5_EsperEPL2Grammar())) {s = 636;}

                        else if ( (LA198_280==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 637;}

                        else if ( (LA198_280==IS) && (synpred5_EsperEPL2Grammar())) {s = 638;}

                        else if ( (LA198_280==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 639;}

                        else if ( (LA198_280==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 640;}

                        else if ( (LA198_280==BAND) && (synpred5_EsperEPL2Grammar())) {s = 641;}

                        else if ( (LA198_280==BOR) && (synpred5_EsperEPL2Grammar())) {s = 642;}

                        else if ( (LA198_280==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 643;}

                        else if ( (LA198_280==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 644;}

                        else if ( (LA198_280==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 645;}

                        else if ( (LA198_280==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 646;}

                        else if ( (LA198_280==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 647;}

                        else if ( (LA198_280==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 648;}

                        else if ( (LA198_280==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 649;}

                        else if ( (LA198_280==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 650;}

                        else if ( (LA198_280==FOR) && (synpred5_EsperEPL2Grammar())) {s = 651;}

                        else if ( (LA198_280==EOF) && (synpred5_EsperEPL2Grammar())) {s = 652;}

                        else if ( (LA198_280==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 653;}

                        else if ( (LA198_280==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 654;}

                        else if ( (LA198_280==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 655;}

                        else if ( (LA198_280==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 656;}

                        else if ( (LA198_280==AS) && (synpred5_EsperEPL2Grammar())) {s = 657;}

                        else if ( (LA198_280==FROM) && (synpred5_EsperEPL2Grammar())) {s = 658;}

                        else if ( (LA198_280==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 659;}

                        else if ( (LA198_280==ALL) && (synpred5_EsperEPL2Grammar())) {s = 660;}

                        else if ( (LA198_280==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 661;}

                        else if ( (LA198_280==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 662;}

                        else if ( (LA198_280==ASC) && (synpred5_EsperEPL2Grammar())) {s = 663;}

                        else if ( (LA198_280==DESC) && (synpred5_EsperEPL2Grammar())) {s = 664;}

                        else if ( (LA198_280==THEN) && (synpred5_EsperEPL2Grammar())) {s = 665;}

                        else if ( (LA198_280==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 666;}

                        else if ( (LA198_280==END) && (synpred5_EsperEPL2Grammar())) {s = 667;}

                        else if ( (LA198_280==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 668;}

                        else if ( (LA198_280==COLON) && (synpred5_EsperEPL2Grammar())) {s = 669;}

                        else if ( (LA198_280==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 670;}

                        else if ( (LA198_280==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 671;}

                        else if ( (LA198_280==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 672;}

                        else if ( (LA198_280==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 673;}

                        else if ( (LA198_280==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 674;}

                        else if ( (LA198_280==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 675;}

                        else if ( (LA198_280==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 676;}

                        else if ( (LA198_280==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 677;}

                        else if ( (LA198_280==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 678;}

                        else if ( (LA198_280==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 679;}

                        else if ( (LA198_280==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 680;}

                         
                        input.seek(index198_280);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA198_281 = input.LA(1);

                         
                        int index198_281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_281==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 681;}

                        else if ( (LA198_281==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 682;}

                        else if ( (LA198_281==LPAREN) ) {s = 683;}

                        else if ( (LA198_281==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 684;}

                        else if ( (LA198_281==STAR) && (synpred5_EsperEPL2Grammar())) {s = 685;}

                        else if ( (LA198_281==DIV) && (synpred5_EsperEPL2Grammar())) {s = 686;}

                        else if ( (LA198_281==MOD) && (synpred5_EsperEPL2Grammar())) {s = 687;}

                        else if ( (LA198_281==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 688;}

                        else if ( (LA198_281==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 689;}

                        else if ( (LA198_281==LOR) && (synpred5_EsperEPL2Grammar())) {s = 690;}

                        else if ( (LA198_281==LT) && (synpred5_EsperEPL2Grammar())) {s = 691;}

                        else if ( (LA198_281==GT) && (synpred5_EsperEPL2Grammar())) {s = 692;}

                        else if ( (LA198_281==LE) && (synpred5_EsperEPL2Grammar())) {s = 693;}

                        else if ( (LA198_281==GE) && (synpred5_EsperEPL2Grammar())) {s = 694;}

                        else if ( (LA198_281==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 695;}

                        else if ( (LA198_281==IS) && (synpred5_EsperEPL2Grammar())) {s = 696;}

                        else if ( (LA198_281==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 697;}

                        else if ( (LA198_281==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 698;}

                        else if ( (LA198_281==BAND) && (synpred5_EsperEPL2Grammar())) {s = 699;}

                        else if ( (LA198_281==BOR) && (synpred5_EsperEPL2Grammar())) {s = 700;}

                        else if ( (LA198_281==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 701;}

                        else if ( (LA198_281==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 702;}

                        else if ( (LA198_281==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 703;}

                        else if ( (LA198_281==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 704;}

                        else if ( (LA198_281==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 705;}

                        else if ( (LA198_281==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 706;}

                        else if ( (LA198_281==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 707;}

                        else if ( (LA198_281==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 708;}

                        else if ( (LA198_281==FOR) && (synpred5_EsperEPL2Grammar())) {s = 709;}

                        else if ( (LA198_281==EOF) && (synpred5_EsperEPL2Grammar())) {s = 710;}

                        else if ( (LA198_281==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 711;}

                        else if ( (LA198_281==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 712;}

                        else if ( (LA198_281==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 713;}

                        else if ( (LA198_281==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 714;}

                        else if ( (LA198_281==AS) && (synpred5_EsperEPL2Grammar())) {s = 715;}

                        else if ( (LA198_281==FROM) && (synpred5_EsperEPL2Grammar())) {s = 716;}

                        else if ( (LA198_281==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 717;}

                        else if ( (LA198_281==ALL) && (synpred5_EsperEPL2Grammar())) {s = 718;}

                        else if ( (LA198_281==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 719;}

                        else if ( (LA198_281==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 720;}

                        else if ( (LA198_281==ASC) && (synpred5_EsperEPL2Grammar())) {s = 721;}

                        else if ( (LA198_281==DESC) && (synpred5_EsperEPL2Grammar())) {s = 722;}

                        else if ( (LA198_281==THEN) && (synpred5_EsperEPL2Grammar())) {s = 723;}

                        else if ( (LA198_281==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 724;}

                        else if ( (LA198_281==END) && (synpred5_EsperEPL2Grammar())) {s = 725;}

                        else if ( (LA198_281==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 726;}

                        else if ( (LA198_281==COLON) && (synpred5_EsperEPL2Grammar())) {s = 727;}

                        else if ( (LA198_281==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 728;}

                        else if ( (LA198_281==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 729;}

                        else if ( (LA198_281==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 730;}

                        else if ( (LA198_281==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 731;}

                        else if ( (LA198_281==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 732;}

                        else if ( (LA198_281==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 733;}

                        else if ( (LA198_281==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 734;}

                        else if ( (LA198_281==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 735;}

                        else if ( (LA198_281==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 736;}

                        else if ( (LA198_281==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 737;}

                        else if ( (LA198_281==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 738;}

                        else if ( (LA198_281==DOT) ) {s = 739;}

                         
                        input.seek(index198_281);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA198_288 = input.LA(1);

                         
                        int index198_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_288==LPAREN) ) {s = 740;}

                        else if ( (LA198_288==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 741;}

                        else if ( (LA198_288==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 742;}

                        else if ( (LA198_288==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 743;}

                        else if ( (LA198_288==STAR) && (synpred5_EsperEPL2Grammar())) {s = 744;}

                        else if ( (LA198_288==DIV) && (synpred5_EsperEPL2Grammar())) {s = 745;}

                        else if ( (LA198_288==MOD) && (synpred5_EsperEPL2Grammar())) {s = 746;}

                        else if ( (LA198_288==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 747;}

                        else if ( (LA198_288==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 748;}

                        else if ( (LA198_288==LOR) && (synpred5_EsperEPL2Grammar())) {s = 749;}

                        else if ( (LA198_288==LT) && (synpred5_EsperEPL2Grammar())) {s = 750;}

                        else if ( (LA198_288==GT) && (synpred5_EsperEPL2Grammar())) {s = 751;}

                        else if ( (LA198_288==LE) && (synpred5_EsperEPL2Grammar())) {s = 752;}

                        else if ( (LA198_288==GE) && (synpred5_EsperEPL2Grammar())) {s = 753;}

                        else if ( (LA198_288==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 754;}

                        else if ( (LA198_288==IS) && (synpred5_EsperEPL2Grammar())) {s = 755;}

                        else if ( (LA198_288==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 756;}

                        else if ( (LA198_288==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 757;}

                        else if ( (LA198_288==BAND) && (synpred5_EsperEPL2Grammar())) {s = 758;}

                        else if ( (LA198_288==BOR) && (synpred5_EsperEPL2Grammar())) {s = 759;}

                        else if ( (LA198_288==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 760;}

                        else if ( (LA198_288==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 761;}

                        else if ( (LA198_288==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 762;}

                        else if ( (LA198_288==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 763;}

                        else if ( (LA198_288==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 764;}

                        else if ( (LA198_288==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 765;}

                        else if ( (LA198_288==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 766;}

                        else if ( (LA198_288==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 767;}

                        else if ( (LA198_288==FOR) && (synpred5_EsperEPL2Grammar())) {s = 768;}

                        else if ( (LA198_288==EOF) && (synpred5_EsperEPL2Grammar())) {s = 769;}

                        else if ( (LA198_288==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 770;}

                        else if ( (LA198_288==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 771;}

                        else if ( (LA198_288==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 772;}

                        else if ( (LA198_288==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 773;}

                        else if ( (LA198_288==AS) && (synpred5_EsperEPL2Grammar())) {s = 774;}

                        else if ( (LA198_288==FROM) && (synpred5_EsperEPL2Grammar())) {s = 775;}

                        else if ( (LA198_288==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 776;}

                        else if ( (LA198_288==ALL) && (synpred5_EsperEPL2Grammar())) {s = 777;}

                        else if ( (LA198_288==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 778;}

                        else if ( (LA198_288==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 779;}

                        else if ( (LA198_288==ASC) && (synpred5_EsperEPL2Grammar())) {s = 780;}

                        else if ( (LA198_288==DESC) && (synpred5_EsperEPL2Grammar())) {s = 781;}

                        else if ( (LA198_288==THEN) && (synpred5_EsperEPL2Grammar())) {s = 782;}

                        else if ( (LA198_288==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 783;}

                        else if ( (LA198_288==END) && (synpred5_EsperEPL2Grammar())) {s = 784;}

                        else if ( (LA198_288==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 785;}

                        else if ( (LA198_288==COLON) && (synpred5_EsperEPL2Grammar())) {s = 786;}

                        else if ( (LA198_288==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 787;}

                        else if ( (LA198_288==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 788;}

                        else if ( (LA198_288==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 789;}

                        else if ( (LA198_288==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 790;}

                        else if ( (LA198_288==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 791;}

                        else if ( (LA198_288==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 792;}

                        else if ( (LA198_288==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 793;}

                        else if ( (LA198_288==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 794;}

                        else if ( (LA198_288==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 795;}

                        else if ( (LA198_288==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 796;}

                        else if ( (LA198_288==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 797;}

                        else if ( (LA198_288==DOT) && (synpred5_EsperEPL2Grammar())) {s = 798;}

                         
                        input.seek(index198_288);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA198_289 = input.LA(1);

                         
                        int index198_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_289==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 799;}

                        else if ( (LA198_289==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 800;}

                        else if ( (LA198_289==LPAREN) ) {s = 801;}

                        else if ( (LA198_289==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 802;}

                        else if ( (LA198_289==STAR) && (synpred5_EsperEPL2Grammar())) {s = 803;}

                        else if ( (LA198_289==DIV) && (synpred5_EsperEPL2Grammar())) {s = 804;}

                        else if ( (LA198_289==MOD) && (synpred5_EsperEPL2Grammar())) {s = 805;}

                        else if ( (LA198_289==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 806;}

                        else if ( (LA198_289==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 807;}

                        else if ( (LA198_289==LOR) && (synpred5_EsperEPL2Grammar())) {s = 808;}

                        else if ( (LA198_289==LT) && (synpred5_EsperEPL2Grammar())) {s = 809;}

                        else if ( (LA198_289==GT) && (synpred5_EsperEPL2Grammar())) {s = 810;}

                        else if ( (LA198_289==LE) && (synpred5_EsperEPL2Grammar())) {s = 811;}

                        else if ( (LA198_289==GE) && (synpred5_EsperEPL2Grammar())) {s = 812;}

                        else if ( (LA198_289==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 813;}

                        else if ( (LA198_289==IS) && (synpred5_EsperEPL2Grammar())) {s = 814;}

                        else if ( (LA198_289==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 815;}

                        else if ( (LA198_289==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 816;}

                        else if ( (LA198_289==BAND) && (synpred5_EsperEPL2Grammar())) {s = 817;}

                        else if ( (LA198_289==BOR) && (synpred5_EsperEPL2Grammar())) {s = 818;}

                        else if ( (LA198_289==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 819;}

                        else if ( (LA198_289==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 820;}

                        else if ( (LA198_289==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 821;}

                        else if ( (LA198_289==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 822;}

                        else if ( (LA198_289==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 823;}

                        else if ( (LA198_289==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 824;}

                        else if ( (LA198_289==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 825;}

                        else if ( (LA198_289==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 826;}

                        else if ( (LA198_289==FOR) && (synpred5_EsperEPL2Grammar())) {s = 827;}

                        else if ( (LA198_289==EOF) && (synpred5_EsperEPL2Grammar())) {s = 828;}

                        else if ( (LA198_289==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 829;}

                        else if ( (LA198_289==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 830;}

                        else if ( (LA198_289==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 831;}

                        else if ( (LA198_289==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 832;}

                        else if ( (LA198_289==AS) && (synpred5_EsperEPL2Grammar())) {s = 833;}

                        else if ( (LA198_289==FROM) && (synpred5_EsperEPL2Grammar())) {s = 834;}

                        else if ( (LA198_289==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 835;}

                        else if ( (LA198_289==ALL) && (synpred5_EsperEPL2Grammar())) {s = 836;}

                        else if ( (LA198_289==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 837;}

                        else if ( (LA198_289==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 838;}

                        else if ( (LA198_289==ASC) && (synpred5_EsperEPL2Grammar())) {s = 839;}

                        else if ( (LA198_289==DESC) && (synpred5_EsperEPL2Grammar())) {s = 840;}

                        else if ( (LA198_289==THEN) && (synpred5_EsperEPL2Grammar())) {s = 841;}

                        else if ( (LA198_289==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 842;}

                        else if ( (LA198_289==END) && (synpred5_EsperEPL2Grammar())) {s = 843;}

                        else if ( (LA198_289==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 844;}

                        else if ( (LA198_289==COLON) && (synpred5_EsperEPL2Grammar())) {s = 845;}

                        else if ( (LA198_289==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 846;}

                        else if ( (LA198_289==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 847;}

                        else if ( (LA198_289==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 848;}

                        else if ( (LA198_289==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 849;}

                        else if ( (LA198_289==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 850;}

                        else if ( (LA198_289==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 851;}

                        else if ( (LA198_289==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 852;}

                        else if ( (LA198_289==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 853;}

                        else if ( (LA198_289==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 854;}

                        else if ( (LA198_289==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 855;}

                        else if ( (LA198_289==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 856;}

                        else if ( (LA198_289==DOT) && (synpred5_EsperEPL2Grammar())) {s = 857;}

                         
                        input.seek(index198_289);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA198_451 = input.LA(1);

                         
                        int index198_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_451==DOT) ) {s = 962;}

                        else if ( (LA198_451==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 963;}

                        else if ( (LA198_451==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 964;}

                        else if ( (LA198_451==LPAREN) ) {s = 965;}

                        else if ( (LA198_451==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 966;}

                        else if ( (LA198_451==STAR) && (synpred5_EsperEPL2Grammar())) {s = 967;}

                        else if ( (LA198_451==DIV) && (synpred5_EsperEPL2Grammar())) {s = 968;}

                        else if ( (LA198_451==MOD) && (synpred5_EsperEPL2Grammar())) {s = 969;}

                        else if ( (LA198_451==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 970;}

                        else if ( (LA198_451==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 971;}

                        else if ( (LA198_451==LOR) && (synpred5_EsperEPL2Grammar())) {s = 972;}

                        else if ( (LA198_451==LT) && (synpred5_EsperEPL2Grammar())) {s = 973;}

                        else if ( (LA198_451==GT) && (synpred5_EsperEPL2Grammar())) {s = 974;}

                        else if ( (LA198_451==LE) && (synpred5_EsperEPL2Grammar())) {s = 975;}

                        else if ( (LA198_451==GE) && (synpred5_EsperEPL2Grammar())) {s = 976;}

                        else if ( (LA198_451==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 977;}

                        else if ( (LA198_451==IS) && (synpred5_EsperEPL2Grammar())) {s = 978;}

                        else if ( (LA198_451==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 979;}

                        else if ( (LA198_451==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 980;}

                        else if ( (LA198_451==BAND) && (synpred5_EsperEPL2Grammar())) {s = 981;}

                        else if ( (LA198_451==BOR) && (synpred5_EsperEPL2Grammar())) {s = 982;}

                        else if ( (LA198_451==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 983;}

                        else if ( (LA198_451==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 984;}

                        else if ( (LA198_451==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 985;}

                        else if ( (LA198_451==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 986;}

                        else if ( (LA198_451==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 987;}

                        else if ( (LA198_451==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 988;}

                        else if ( (LA198_451==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 989;}

                        else if ( (LA198_451==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 990;}

                        else if ( (LA198_451==FOR) && (synpred5_EsperEPL2Grammar())) {s = 991;}

                        else if ( (LA198_451==EOF) && (synpred5_EsperEPL2Grammar())) {s = 992;}

                        else if ( (LA198_451==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 993;}

                        else if ( (LA198_451==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 994;}

                        else if ( (LA198_451==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 995;}

                        else if ( (LA198_451==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 996;}

                        else if ( (LA198_451==AS) && (synpred5_EsperEPL2Grammar())) {s = 997;}

                        else if ( (LA198_451==FROM) && (synpred5_EsperEPL2Grammar())) {s = 998;}

                        else if ( (LA198_451==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 999;}

                        else if ( (LA198_451==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1000;}

                        else if ( (LA198_451==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1001;}

                        else if ( (LA198_451==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1002;}

                        else if ( (LA198_451==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1003;}

                        else if ( (LA198_451==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1004;}

                        else if ( (LA198_451==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1005;}

                        else if ( (LA198_451==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1006;}

                        else if ( (LA198_451==END) && (synpred5_EsperEPL2Grammar())) {s = 1007;}

                        else if ( (LA198_451==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1008;}

                        else if ( (LA198_451==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1009;}

                        else if ( (LA198_451==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1010;}

                        else if ( (LA198_451==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1011;}

                        else if ( (LA198_451==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1012;}

                        else if ( (LA198_451==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1013;}

                        else if ( (LA198_451==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1014;}

                        else if ( (LA198_451==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1015;}

                        else if ( (LA198_451==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1016;}

                        else if ( (LA198_451==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1017;}

                        else if ( (LA198_451==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1018;}

                        else if ( (LA198_451==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1019;}

                        else if ( (LA198_451==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1020;}

                         
                        input.seek(index198_451);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA198_452 = input.LA(1);

                         
                        int index198_452 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_452==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1021;}

                        else if ( (LA198_452==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1022;}

                        else if ( (LA198_452==LPAREN) ) {s = 1023;}

                        else if ( (LA198_452==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1024;}

                        else if ( (LA198_452==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1025;}

                        else if ( (LA198_452==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1026;}

                        else if ( (LA198_452==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1027;}

                        else if ( (LA198_452==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1028;}

                        else if ( (LA198_452==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1029;}

                        else if ( (LA198_452==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1030;}

                        else if ( (LA198_452==LT) && (synpred5_EsperEPL2Grammar())) {s = 1031;}

                        else if ( (LA198_452==GT) && (synpred5_EsperEPL2Grammar())) {s = 1032;}

                        else if ( (LA198_452==LE) && (synpred5_EsperEPL2Grammar())) {s = 1033;}

                        else if ( (LA198_452==GE) && (synpred5_EsperEPL2Grammar())) {s = 1034;}

                        else if ( (LA198_452==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1035;}

                        else if ( (LA198_452==IS) && (synpred5_EsperEPL2Grammar())) {s = 1036;}

                        else if ( (LA198_452==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1037;}

                        else if ( (LA198_452==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1038;}

                        else if ( (LA198_452==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1039;}

                        else if ( (LA198_452==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1040;}

                        else if ( (LA198_452==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1041;}

                        else if ( (LA198_452==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1042;}

                        else if ( (LA198_452==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1043;}

                        else if ( (LA198_452==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1044;}

                        else if ( (LA198_452==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1045;}

                        else if ( (LA198_452==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1046;}

                        else if ( (LA198_452==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1047;}

                        else if ( (LA198_452==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1048;}

                        else if ( (LA198_452==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1049;}

                        else if ( (LA198_452==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1050;}

                        else if ( (LA198_452==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1051;}

                        else if ( (LA198_452==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1052;}

                        else if ( (LA198_452==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1053;}

                        else if ( (LA198_452==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1054;}

                        else if ( (LA198_452==AS) && (synpred5_EsperEPL2Grammar())) {s = 1055;}

                        else if ( (LA198_452==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1056;}

                        else if ( (LA198_452==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1057;}

                        else if ( (LA198_452==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1058;}

                        else if ( (LA198_452==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1059;}

                        else if ( (LA198_452==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1060;}

                        else if ( (LA198_452==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1061;}

                        else if ( (LA198_452==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1062;}

                        else if ( (LA198_452==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1063;}

                        else if ( (LA198_452==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA198_452==END) && (synpred5_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA198_452==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA198_452==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA198_452==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA198_452==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA198_452==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA198_452==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA198_452==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA198_452==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA198_452==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA198_452==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA198_452==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA198_452==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA198_452==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA198_452==DOT) ) {s = 1079;}

                         
                        input.seek(index198_452);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA198_459 = input.LA(1);

                         
                        int index198_459 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_459==LPAREN) ) {s = 1080;}

                        else if ( (LA198_459==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA198_459==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA198_459==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA198_459==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA198_459==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA198_459==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA198_459==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA198_459==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA198_459==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA198_459==LT) && (synpred5_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA198_459==GT) && (synpred5_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA198_459==LE) && (synpred5_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA198_459==GE) && (synpred5_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA198_459==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA198_459==IS) && (synpred5_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA198_459==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA198_459==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA198_459==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA198_459==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA198_459==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA198_459==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA198_459==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA198_459==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA198_459==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA198_459==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA198_459==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA198_459==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA198_459==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA198_459==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA198_459==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA198_459==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA198_459==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA198_459==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA198_459==AS) && (synpred5_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA198_459==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA198_459==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA198_459==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA198_459==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA198_459==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA198_459==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA198_459==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA198_459==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA198_459==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA198_459==END) && (synpred5_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA198_459==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA198_459==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA198_459==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA198_459==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1128;}

                        else if ( (LA198_459==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA198_459==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA198_459==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA198_459==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA198_459==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA198_459==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA198_459==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA198_459==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA198_459==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA198_459==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1138;}

                         
                        input.seek(index198_459);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA198_460 = input.LA(1);

                         
                        int index198_460 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA198_460==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {s = 1139;}

                        else if ( (LA198_460==LBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA198_460==LPAREN) ) {s = 1141;}

                        else if ( (LA198_460==QUESTION) && (synpred5_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA198_460==STAR) && (synpred5_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA198_460==DIV) && (synpred5_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA198_460==MOD) && (synpred5_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA198_460==PLUS) && (synpred5_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA198_460==MINUS) && (synpred5_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA198_460==LOR) && (synpred5_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA198_460==LT) && (synpred5_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA198_460==GT) && (synpred5_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA198_460==LE) && (synpred5_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA198_460==GE) && (synpred5_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA198_460==EQUALS) && (synpred5_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA198_460==IS) && (synpred5_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA198_460==SQL_NE) && (synpred5_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA198_460==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA198_460==BAND) && (synpred5_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA198_460==BOR) && (synpred5_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA198_460==BXOR) && (synpred5_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA198_460==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA198_460==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA198_460==GROUP) && (synpred5_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA198_460==HAVING) && (synpred5_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA198_460==OUTPUT) && (synpred5_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA198_460==ORDER) && (synpred5_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA198_460==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA198_460==FOR) && (synpred5_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA198_460==EOF) && (synpred5_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA198_460==INSERT) && (synpred5_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA198_460==RPAREN) && (synpred5_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA198_460==COMMA) && (synpred5_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA198_460==WHERE) && (synpred5_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA198_460==AS) && (synpred5_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA198_460==FROM) && (synpred5_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA198_460==MEASURES) && (synpred5_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA198_460==ALL) && (synpred5_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA198_460==AFTER) && (synpred5_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA198_460==PATTERN) && (synpred5_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA198_460==ASC) && (synpred5_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA198_460==DESC) && (synpred5_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA198_460==THEN) && (synpred5_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA198_460==ELSE) && (synpred5_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA198_460==END) && (synpred5_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA198_460==WHEN) && (synpred5_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA198_460==COLON) && (synpred5_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA198_460==RBRACK) && (synpred5_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA198_460==RCURLY) && (synpred5_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA198_460==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA198_460==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA198_460==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA198_460==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA198_460==IN_SET) && (synpred5_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA198_460==BETWEEN) && (synpred5_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA198_460==LIKE) && (synpred5_EsperEPL2Grammar())) {s = 1194;}

                        else if ( (LA198_460==REGEXP) && (synpred5_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA198_460==ESCAPE) && (synpred5_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA198_460==DOT) && (synpred5_EsperEPL2Grammar())) {s = 1197;}

                         
                        input.seek(index198_460);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA198_622 = input.LA(1);

                         
                        int index198_622 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_622);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA198_625 = input.LA(1);

                         
                        int index198_625 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_625);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA198_683 = input.LA(1);

                         
                        int index198_683 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_683);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA198_739 = input.LA(1);

                         
                        int index198_739 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_739);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA198_740 = input.LA(1);

                         
                        int index198_740 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_740);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA198_801 = input.LA(1);

                         
                        int index198_801 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_801);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA198_878 = input.LA(1);

                         
                        int index198_878 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_878);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA198_904 = input.LA(1);

                         
                        int index198_904 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_904);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA198_930 = input.LA(1);

                         
                        int index198_930 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_930);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA198_956 = input.LA(1);

                         
                        int index198_956 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_956);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA198_962 = input.LA(1);

                         
                        int index198_962 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_962);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA198_965 = input.LA(1);

                         
                        int index198_965 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_965);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA198_1023 = input.LA(1);

                         
                        int index198_1023 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_1023);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA198_1079 = input.LA(1);

                         
                        int index198_1079 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_1079);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA198_1080 = input.LA(1);

                         
                        int index198_1080 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_1080);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA198_1141 = input.LA(1);

                         
                        int index198_1141 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_1141);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA198_1218 = input.LA(1);

                         
                        int index198_1218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_1218);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA198_1244 = input.LA(1);

                         
                        int index198_1244 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_1244);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA198_1270 = input.LA(1);

                         
                        int index198_1270 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_1270);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA198_1296 = input.LA(1);

                         
                        int index198_1296 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred5_EsperEPL2Grammar()) ) {s = 1197;}

                        else if ( (true) ) {s = 323;}

                         
                        input.seek(index198_1296);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1610 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x4000004000001480L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1615 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1633 = new BitSet(new long[]{0x0040020008000010L,0x0000002000000000L,0x0000000000000000L,0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1639 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1669 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1693 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1695 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1699 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0100000000000000L,0x4000018A40190880L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1703 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1712 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1759 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0100000000000000L,0x400001CA40190880L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1763 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1767 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1813 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1816 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1819 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1846 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1869 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1871 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0100000000000000L,0x4000018A40190000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1912 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0100000000000000L,0x400001CA40190080L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1969 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum1992 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2003 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2044 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0100000000000000L,0x4000018E40190040L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2047 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000040L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2050 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0100000000000000L,0x4000018A40190000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2052 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000040L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2063 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2092 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0100000000000000L,0x400001CE401900C0L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000040L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2098 = new BitSet(new long[]{0x0040020008000010L,0x0000002700000000L,0x0000000000000000L,0x0100000000000000L,0x400001CA40190080L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000040L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2144 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2149 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2154 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2159 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2164 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2169 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2174 = new BitSet(new long[]{0x0000000000000002L,0x0000100000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2177 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2191 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2194 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2200 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2203 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2207 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2210 = new BitSet(new long[]{0x0104300000010002L,0x0000004800000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2214 = new BitSet(new long[]{0x0104300000010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2220 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2223 = new BitSet(new long[]{0x0104300000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2230 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2233 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2236 = new BitSet(new long[]{0x0104200000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2243 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2246 = new BitSet(new long[]{0x0104000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2253 = new BitSet(new long[]{0x0130800080004000L,0x0000080800044000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2256 = new BitSet(new long[]{0x0100000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2263 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2266 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2269 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840010080L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2279 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2296 = new BitSet(new long[]{0x0040000008000000L,0x000000200000A000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2301 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2305 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2308 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2365 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2369 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2373 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2377 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2414 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2416 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2418 = new BitSet(new long[]{0x0000000000020000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_AS_in_updateExpr2421 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2425 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2437 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2439 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2442 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2444 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2452 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2454 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2502 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2504 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2510 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2512 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2515 = new BitSet(new long[]{0x0100300400010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2519 = new BitSet(new long[]{0x0100300000010002L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2525 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2527 = new BitSet(new long[]{0x0100300000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2536 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2538 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2540 = new BitSet(new long[]{0x0100200000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2547 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2549 = new BitSet(new long[]{0x0100000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2556 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2558 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2560 = new BitSet(new long[]{0x0000000000000002L,0x0000000800000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2567 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840010080L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2569 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2636 = new BitSet(new long[]{0x0000000000020000L,0x0000000000008000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2639 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2649 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2655 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2657 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2660 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2662 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2669 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2722 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2724 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2728 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2730 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2735 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2768 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2821 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2825 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2830 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2872 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2877 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2879 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment2904 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2906 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2908 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2937 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2950 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2978 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2980 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr2984 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000004000000680L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2989 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000004000000680L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr2992 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr2994 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000004000000680L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3003 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000480L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3007 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000480L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3011 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000480L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3026 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3045 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3062 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3065 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3067 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3154 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F4F7FL,0x0000000000000000L,0x0100000000000000L,0x400001CA40194080L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3157 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3179 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3183 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3189 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3230 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3233 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3277 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_createColumnListElement3312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3315 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3320 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3366 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3369 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F4F7FL,0x0000000000000000L,0x0100000000000000L,0x400001CA40194080L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3400 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3412 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3419 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3440 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3442 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3471 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3475 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3482 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004480L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004480L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3497 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3508 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000880L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3518 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3520 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_variantList3612 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000004080L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3614 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3647 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3672 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3678 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3686 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr3689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr3693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList3727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_columnList3730 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_columnList3732 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3770 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3773 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3791 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3794 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3808 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3811 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3854 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3858 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3862 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3865 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3886 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3900 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3902 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3904 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3969 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3972 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3975 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3978 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3993 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair3995 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair3998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4056 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4062 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4068 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4074 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4108 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4111 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4114 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4156 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4161 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4164 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4224 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4226 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4228 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4231 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4235 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4266 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4270 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4274 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4278 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4287 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4290 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4292 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_AS_in_streamExpression4299 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4303 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4309 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4316 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4323 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4327 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4383 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4387 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4390 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4C80L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4392 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4431 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4445 = new BitSet(new long[]{0x0000000000000000L,0x0000028000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4451 = new BitSet(new long[]{0x0000000000000000L,0x0000028000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4458 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4463 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4469 = new BitSet(new long[]{0x0000800000000000L,0x0000080000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4475 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4481 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4487 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4494 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4531 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4533 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4538 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4569 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4571 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4574 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4576 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4601 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4640 = new BitSet(new long[]{0x0000000000000000L,0x0000040000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4643 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4660 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4686 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4690 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4694 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4698 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4702 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4742 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4775 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4777 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4810 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4853 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000480L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4855 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4857 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000034000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4913 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000034000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4925 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4983 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine4986 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine4988 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5015 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5017 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5046 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5083 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5102 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5106 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5111 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5117 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5173 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5175 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5177 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5180 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4C80L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5182 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5238 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5246 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5C80L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5248 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5251 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5293 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5333 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5335 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5360 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5365 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5407 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5445 = new BitSet(new long[]{0x0030800080004002L,0x0000000000044000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5460 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5464 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5468 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5472 = new BitSet(new long[]{0x0000000080004002L,0x0000000000040000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5529 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5540 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5546 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5552 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5585 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5602 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_outputLimit5604 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5607 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter5759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter5762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter5766 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter5768 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5814 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5820 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5827 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840010080L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840010080L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5897 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5480L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5899 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5901 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5480L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5903 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5905 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5480L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5909 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5480L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5913 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5480L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5915 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5918 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5480L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5920 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5954 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_whenClause5957 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5959 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_whenClause5962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5975 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_elseClause5978 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression5991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6005 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6008 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6011 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6014 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6025 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_caseExpression6027 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6029 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6032 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6035 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6059 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6070 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6075 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6077 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6109 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6114 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6116 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6148 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000608000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6153 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6156 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6159 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6163 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000608000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6178 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6184 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6200 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001800100L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6213 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6231 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6245 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6247 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6261 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6275 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6305 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001800100L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6322 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6328 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6334 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6340 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4C80L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6345 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001800100L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6350 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000001800100L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6478 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6510 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6514 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6518 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6522 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6546 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6563 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6569 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6575 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6581 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4C80L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6583 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6586 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6591 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000001E000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6687 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6726 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6732 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6735 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000042840L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6757 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002800L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6786 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002840L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6820 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression6991 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression6993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7043 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7045 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7048 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7050 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7102 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7166 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7191 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7197 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7199 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7203 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7205 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7246 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040010000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7251 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7254 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7258 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000040010000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7272 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180004000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7277 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7280 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7283 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7287 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000180004000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7302 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7317 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7327 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7332 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7338 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7361 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7366 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7429 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7462 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7468 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7471 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr7474 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7481 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7484 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7492 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7504 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7528 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7535 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7540 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000000280L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7551 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7557 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7608 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CE401B4480L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000040L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7614 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7616 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000040L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7646 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7649 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7653 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7658 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7662 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7664 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7670 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7673 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7677 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7682 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7688 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7697 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7709 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7714 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7718 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc7729 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7740 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7746 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7749 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7753 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7758 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7770 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7773 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7777 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7782 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7786 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7794 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7797 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7801 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7806 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7810 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7818 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc7828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7836 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7839 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7841 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7844 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7847 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7850 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7860 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7863 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7866 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7869 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7872 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7876 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7882 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7885 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7888 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7890 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7893 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7895 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7908 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7911 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7916 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7919 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc7932 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7935 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7938 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_AS_in_builtinFunc7946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc7958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7961 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7964 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc7972 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation7994 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation7996 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation7998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8001 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8003 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8007 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8034 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8036 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8039 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8041 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8045 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8073 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8075 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8107 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8123 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8128 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8150 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_maxFunc8153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8156 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_maxFunc8159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8162 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_maxFunc8165 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction8209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_libFunction8211 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction8215 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction8217 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4C80L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction8220 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction8224 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8261 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8291 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8296 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8303 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8306 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8320 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8322 = new BitSet(new long[]{0x807803E80FFC4430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B0480L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8353 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8365 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8370 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8372 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8411 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8416 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8418 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8450 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8455 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8457 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8492 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8496 = new BitSet(new long[]{0x0000000000000002L,0x0000000000020000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression8501 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression8568 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression8574 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8580 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression8582 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression8588 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression8597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList8712 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8714 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList8717 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000840L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList8723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8746 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix8761 = new BitSet(new long[]{0x0000000000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix8767 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000001480L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix8769 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix8771 = new BitSet(new long[]{0x0000000000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix8778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix8780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix8788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix8790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AT_in_observerExpression8884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8887 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5C80L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8889 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression8941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression8943 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression8946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression8948 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5C80L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression8952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression8956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression8969 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression8972 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression8974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange8995 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401F4480L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000042000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9007 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B6480L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9030 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9043 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9141 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9152 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4C80L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9214 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9247 = new BitSet(new long[]{0x803801E80FFC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9250 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9252 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9254 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9258 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9261 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9263 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9268 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9270 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9274 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9324 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9327 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9330 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9372 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9377 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9380 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9428 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9432 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9435 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000080L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9439 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9488 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9497 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9508 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4C80L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9510 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9513 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier9580 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9599 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier9603 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy9648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9683 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy9687 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_expressionList9729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9732 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B4480L});
    public static final BitSet FOLLOW_expression_in_expressionList9735 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9763 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9766 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00002727000F5FFFL,0x0000000000000000L,0x0100000000000000L,0x400001CA401B5480L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9769 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000040L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime9795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime9806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime9817 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime9828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime9839 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime9851 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime9862 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime9874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime9886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime9891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable9902 = new BitSet(new long[]{0x0600000000000002L,0x000000001C000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable9907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable9911 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9915 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar9980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10000 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10013 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10025 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000080000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10027 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10030 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10036 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10085 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10089 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10091 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_number_in_rangeOperand10097 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10101 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10217 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10221 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10223 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10274 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10278 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10280 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000100L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10283 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840034080L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10332 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10335 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840034080L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10337 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002040L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10369 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10390 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10393 = new BitSet(new long[]{0x803801E807FC4420L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000004000000080L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10395 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10421 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000021400L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10436 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10455 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000180000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10466 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10469 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10474 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10611 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10623 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10625 = new BitSet(new long[]{0x803801E807FC4422L,0x00002700000F4F7FL,0x0000000000000000L,0x0000000000000000L,0x0000006000000080L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10629 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10677 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10709 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10716 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10744 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10765 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10779 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent10793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10800 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent10807 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent10821 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent10828 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent10835 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent10842 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent10849 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent10856 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent10863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent10870 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent10877 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent10884 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent10891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent10898 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent10907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent10916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent10923 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent10930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent10937 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent10944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent10951 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent10958 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent10965 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent10972 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr10993 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11002 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11049 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11051 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11054 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11057 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11060 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11066 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11071 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11074 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11080 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11082 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11091 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840030080L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11093 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart11137 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart11141 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_substitution_in_dayPart11143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000300000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart11147 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart11151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11204 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11206 = new BitSet(new long[]{0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11210 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11214 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11263 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11267 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11269 = new BitSet(new long[]{0x0000000000200000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11273 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11277 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11281 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11331 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11335 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11337 = new BitSet(new long[]{0x0000000000000000L,0x000000001C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11349 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11399 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11403 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11405 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11417 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11506 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11523 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11544 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11563 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11583 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant11603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant11623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840010000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100000000000000L,0x0000018840010000L});
    public static final BitSet FOLLOW_number_in_numberconstant11655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4151 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7344 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8118 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9367 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar9790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar9801 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar9812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar9823 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar9834 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar9846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar9857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar9868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar9881 = new BitSet(new long[]{0x0000000000000002L});

}