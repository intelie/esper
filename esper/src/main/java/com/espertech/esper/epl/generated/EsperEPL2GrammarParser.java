  package com.espertech.esper.epl.generated;
import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import org.antlr.runtime.tree.*;
public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "TYPEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_YEAR", "TIMEPERIOD_YEARS", "TIMEPERIOD_MONTH", "TIMEPERIOD_MONTHS", "TIMEPERIOD_WEEK", "TIMEPERIOD_WEEKS", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "USING", "MERGE", "MATCHED", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "FOLLOWED_BY_ITEM", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "INDEXCOL", "CONCAT", "LIB_FUNCTION", "LIB_FUNC_CHAIN", "DOT_EXPR", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "YEAR_PART", "MONTH_PART", "WEEK_PART", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_MERGE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "MERGE_UNM", "MERGE_MAT", "MERGE_UPD", "MERGE_INS", "MERGE_DEL", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "LPAREN", "RPAREN", "EQUALS", "DOT", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "FOLLOWMAX_BEGIN", "FOLLOWMAX_END", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=185;
    public static final int FLOAT_SUFFIX=355;
    public static final int STAR=296;
    public static final int DOT_EXPR=194;
    public static final int NUMERIC_PARAM_LIST=124;
    public static final int MOD=314;
    public static final int ISTREAM=60;
    public static final int LIB_FUNC_CHAIN=193;
    public static final int OUTERJOIN_EXPR=167;
    public static final int CREATE_COL_TYPE_LIST=247;
    public static final int BSR=337;
    public static final int MERGE_INS=265;
    public static final int MONTH_PART=199;
    public static final int LIB_FUNCTION=192;
    public static final int EOF=-1;
    public static final int TIMEPERIOD_MILLISECONDS=105;
    public static final int FULL_OUTERJOIN_EXPR=171;
    public static final int MATCHREC_PATTERN_CONCAT=278;
    public static final int INC=330;
    public static final int LNOT=326;
    public static final int RPAREN=291;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=301;
    public static final int BSR_ASSIGN=338;
    public static final int CAST_EXPR=226;
    public static final int MATCHES=116;
    public static final int USING=120;
    public static final int STREAM_EXPR=166;
    public static final int TIMEPERIOD_SECONDS=102;
    public static final int NOT_EQUAL=306;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=134;
    public static final int LAST_AGGREG=254;
    public static final int REGEXP=9;
    public static final int MATCHED=122;
    public static final int FOLLOWED_BY_EXPR=127;
    public static final int FOLLOWED_BY=318;
    public static final int HOUR_PART=202;
    public static final int RBRACK=295;
    public static final int MATCHREC_PATTERN_NESTED=280;
    public static final int MATCH_UNTIL_RANGE_CLOSED=245;
    public static final int GE=310;
    public static final int METHOD_JOIN_EXPR=241;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=133;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=132;
    public static final int MINUS_ASSIGN=331;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=144;
    public static final int NUM_DOUBLE=274;
    public static final int INSERTINTO_STREAM_NAME=214;
    public static final int LCURLY=315;
    public static final int UNARY_MINUS=195;
    public static final int TIMEPERIOD_MILLISEC=103;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=212;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=142;
    public static final int WS=347;
    public static final int EMAILAT=346;
    public static final int SUBSELECT_GROUP_EXPR=218;
    public static final int ON_SELECT_INSERT_EXPR=236;
    public static final int YEAR_PART=198;
    public static final int FOLLOWED_BY_ITEM=128;
    public static final int TYPEOF=78;
    public static final int ESCAPECHAR=321;
    public static final int EXPRCOL=189;
    public static final int SL_COMMENT=348;
    public static final int NULL_TYPE=273;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=243;
    public static final int GT=308;
    public static final int BNOT=327;
    public static final int WHERE_EXPR=153;
    public static final int END=33;
    public static final int LAND=344;
    public static final int INNERJOIN_EXPR=168;
    public static final int NOT_REGEXP=209;
    public static final int MATCH_UNTIL_EXPR=242;
    public static final int EVENT_PROP_EXPR=175;
    public static final int LBRACK=294;
    public static final int MERGE_UPD=264;
    public static final int VIEW_EXPR=150;
    public static final int ANNOTATION=250;
    public static final int LONG_TYPE=268;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=135;
    public static final int MATCHREC_PATTERN=276;
    public static final int ON_MERGE_EXPR=235;
    public static final int TIMEPERIOD_SEC=100;
    public static final int TICKED_STRING_LITERAL=322;
    public static final int ON_SELECT_EXPR=233;
    public static final int MINUTE_PART=203;
    public static final int PATTERN_NOT_EXPR=131;
    public static final int SQL_NE=305;
    public static final int SUM=18;
    public static final int HexDigit=353;
    public static final int UPDATE_EXPR=256;
    public static final int LPAREN=290;
    public static final int IN_SUBSELECT_EXPR=220;
    public static final int AT=86;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=106;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=282;
    public static final int NOT_IN_RANGE=216;
    public static final int TIMEPERIOD_MONTH=90;
    public static final int OFFSET=110;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int SECOND_PART=204;
    public static final int PREVIOUS=69;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=112;
    public static final int IDENT=289;
    public static final int DATABASE_JOIN_EXPR=152;
    public static final int BXOR=304;
    public static final int PLUS=298;
    public static final int CASE2=29;
    public static final int MERGE_MAT=263;
    public static final int TIMEPERIOD_DAY=94;
    public static final int CREATE_SCHEMA_EXPR=258;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=178;
    public static final int CREATE_INDEX_EXPR=227;
    public static final int TIMEPERIOD_MILLISECOND=104;
    public static final int EVAL_NOTEQUALS_EXPR=159;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=244;
    public static final int CREATE_VARIABLE_EXPR=240;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=283;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=129;
    public static final int RIGHT_OUTERJOIN_EXPR=170;
    public static final int NUMBERSETSTAR=249;
    public static final int LAST_OPERATOR=223;
    public static final int PATTERN_FILTER_EXPR=130;
    public static final int MERGE=121;
    public static final int FOLLOWMAX_END=320;
    public static final int MERGE_UNM=262;
    public static final int EVAL_AND_EXPR=156;
    public static final int LEFT_OUTERJOIN_EXPR=169;
    public static final int EPL_EXPR=275;
    public static final int GROUP_BY_EXPR=172;
    public static final int SET=83;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=176;
    public static final int MINUS=312;
    public static final int SEMI=345;
    public static final int INDEXCOL=190;
    public static final int STAR_ASSIGN=333;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=261;
    public static final int FIRST_AGGREG=253;
    public static final int COLON=300;
    public static final int EVAL_EQUALS_GROUP_EXPR=160;
    public static final int BAND_ASSIGN=343;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=186;
    public static final int NOT_IN_SET=206;
    public static final int VALUE_NULL=108;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=179;
    public static final int SL=339;
    public static final int NOT_IN_SUBSELECT_EXPR=221;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=148;
    public static final int SR=335;
    public static final int RCURLY=316;
    public static final int PLUS_ASSIGN=329;
    public static final int EXISTS_SUBSELECT_EXPR=219;
    public static final int DAY_PART=201;
    public static final int EVENT_FILTER_IN=143;
    public static final int DIV=313;
    public static final int WEEK_PART=200;
    public static final int OBJECT_PARAM_ORDERED_EXPR=126;
    public static final int OctalEscape=352;
    public static final int MILLISECOND_PART=205;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=109;
    public static final int SELECTION_EXPR=163;
    public static final int LOR=311;
    public static final int CAST=79;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=213;
    public static final int EXPONENT=354;
    public static final int LT=307;
    public static final int PATTERN_INCL_EXPR=151;
    public static final int WHILE=119;
    public static final int ORDER_BY_EXPR=173;
    public static final int BOOL_TYPE=272;
    public static final int MOD_ASSIGN=334;
    public static final int ANNOTATION_ARRAY=251;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=222;
    public static final int EQUALS=292;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=328;
    public static final int WINDOW_AGGREG=255;
    public static final int SL_ASSIGN=340;
    public static final int TIMEPERIOD_WEEKS=93;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=281;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=234;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=197;
    public static final int CREATE_COL_TYPE=248;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=107;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=161;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=269;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=101;
    public static final int EVENT_FILTER_BETWEEN=145;
    public static final int ANNOTATION_VALUE=252;
    public static final int SUBSELECT_EXPR=217;
    public static final int CONCAT=191;
    public static final int NUMERIC_PARAM_RANGE=123;
    public static final int CLASS_IDENT=147;
    public static final int MATCHREC_PATTERN_ALTER=279;
    public static final int ON_EXPR=230;
    public static final int CREATE_WINDOW_EXPR=228;
    public static final int PROPERTY_SELECTION_STREAM=137;
    public static final int ON_DELETE_EXPR=232;
    public static final int NUM_LONG=323;
    public static final int ON=41;
    public static final int TIME_PERIOD=196;
    public static final int DOUBLE_TYPE=270;
    public static final int DELETE=81;
    public static final int INT_TYPE=267;
    public static final int MATCHREC_PARTITION=287;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=155;
    public static final int ORDER_ELEMENT_EXPR=174;
    public static final int TIMEPERIOD_HOURS=97;
    public static final int VARIABLE=84;
    public static final int SUBSTITUTION=225;
    public static final int UNTIL=85;
    public static final int STRING_TYPE=271;
    public static final int NUM_INT=317;
    public static final int MATCHREC_DEFINE_ITEM=284;
    public static final int ON_SET_EXPR=239;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=260;
    public static final int NUM_FLOAT=324;
    public static final int ON_EXPR_FROM=238;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=350;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=136;
    public static final int WEEKDAY_OPERATOR=224;
    public static final int DEC=332;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=341;
    public static final int NUMERIC_PARAM_FREQUENCY=125;
    public static final int SNAPSHOT=82;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=184;
    public static final int EVENT_FILTER_PARAM=140;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=181;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=111;
    public static final int FOR=118;
    public static final int ON_STREAM=231;
    public static final int DEFINE=114;
    public static final int TIMEPERIOD_YEARS=89;
    public static final int TIMEPERIOD_DAYS=95;
    public static final int EVENT_FILTER_RANGE=141;
    public static final int ML_COMMENT=349;
    public static final int INDEX=87;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=180;
    public static final int BOR_ASSIGN=342;
    public static final int COMMA=288;
    public static final int IS=42;
    public static final int PARTITION=115;
    public static final int WHEN_LIMIT_EXPR=187;
    public static final int TIMEPERIOD_LIMIT_EXPR=183;
    public static final int SOME=49;
    public static final int EQUAL=325;
    public static final int BOR=297;
    public static final int MATCHREC_MEASURE_ITEM=286;
    public static final int ALL=47;
    public static final int TIMEPERIOD_HOUR=96;
    public static final int EVENT_FILTER_NOT_BETWEEN=146;
    public static final int IN_RANGE=215;
    public static final int DOT=293;
    public static final int MATCHREC_MEASURES=285;
    public static final int CURRENT_TIMESTAMP=80;
    public static final int TIMEPERIOD_WEEK=92;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=138;
    public static final int INSERTINTO_EXPR=188;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=154;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=246;
    public static final int MERGE_DEL=266;
    public static final int EVAL_EQUALS_EXPR=158;
    public static final int TIMEPERIOD_MINUTES=99;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=208;
    public static final int EVENT_LIMIT_EXPR=182;
    public static final int NOT_BETWEEN=207;
    public static final int TIMEPERIOD_MINUTE=98;
    public static final int EVAL_OR_EXPR=157;
    public static final int ON_SELECT_INSERT_OUTPUT=237;
    public static final int MEASURES=113;
    public static final int AFTER=117;
    public static final int BAND=303;
    public static final int MATCHREC_PATTERN_ATOM=277;
    public static final int QUOTED_STRING_LITERAL=302;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=299;
    public static final int OBSERVER_EXPR=149;
    public static final int CREATE_SCHEMA_EXPR_QUAL=259;
    public static final int EVENT_FILTER_IDENT=139;
    public static final int EVENT_PROP_MAPPED=177;
    public static final int UnicodeEscape=351;
    public static final int TIMEPERIOD_YEAR=88;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=210;
    public static final int FOLLOWMAX_BEGIN=319;
    public static final int TIMEPERIOD_MONTHS=91;
    public static final int SELECTION_ELEMENT_EXPR=164;
    public static final int CREATE_WINDOW_SELECT_EXPR=229;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=257;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=165;
    public static final int SR_ASSIGN=336;
    public static final int LE=309;
    public static final int DBFROM_CLAUSE=211;
    public static final int EVAL_IDENT=162;
        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
        }
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();
    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }
    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }
      private Stack<String> paraphrases = new Stack<String>();
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
      public Stack getParaphrases() {
        return paraphrases;
      }
      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(TYPEOF, "'typeof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_YEAR, "'year'");
    	parserTokenParaphases.put(TIMEPERIOD_YEARS, "'years'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTH, "'month'");
    	parserTokenParaphases.put(TIMEPERIOD_MONTHS, "'months'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEK, "'week'");
    	parserTokenParaphases.put(TIMEPERIOD_WEEKS, "'weeks'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");
    	parserTokenParaphases.put(MERGE, "'merge'");
    	parserTokenParaphases.put(MATCHED, "'matched'");
    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }
      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }
      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }
      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }
    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;
        CommonTree EOF3_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);
                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }
                switch (alt1) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1743);
            	    annotationNoEnum1=annotationNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());
            	    }
            	    break;
            	default :
            	    break loop1;
                }
            } while (true);
            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1748);
            patternExpression2=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1752); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;
        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;
        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            {
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);
                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }
                switch (alt2) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1766);
            	    annotationEnum4=annotationEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());
            	    }
            	    break;
            	default :
            	    break loop2;
                }
            } while (true);
            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1772);
            eplExpression5=eplExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());
                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;
        CommonTree EOF8_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1802);
            eventProperty7=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1806); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;
        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1826); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);
            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1828);
            classIdentifier10=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            int alt4=2;
            int LA4_0 = input.LA(1);
            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);
                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);
                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);
                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1832); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);
                    int alt3=3;
                    int LA3_0 = input.LA(1);
                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1836);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1840);
                            elementValueNoEnum13=elementValueNoEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());
                            }
                            break;
                    }
                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1845); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());
                }
                stream_elementValuePairsNoEnum.reset();
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;
        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;
        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1886); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);
            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1888);
            classIdentifier16=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            int alt6=2;
            int LA6_0 = input.LA(1);
            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);
                    int alt5=3;
                    int LA5_0 = input.LA(1);
                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);
                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==RPAREN||LA5_1==DOT) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1896);
                            elementValuePairsEnum18=elementValuePairsEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());
                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1900);
                            elementValueEnum19=elementValueEnum();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());
                            }
                            break;
                    }
                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());
                }
                stream_elementValuePairsEnum.reset();
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;
        CommonTree COMMA22_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1946);
            elementValuePairNoEnum21=elementValuePairNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);
                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }
                switch (alt7) {
            	case 1 :
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1949); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1952);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());
            	    }
            	    break;
            	default :
            	    break loop7;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;
        CommonTree COMMA25_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1973);
            elementValuePairEnum24=elementValuePairEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);
                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }
                switch (alt8) {
            	case 1 :
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1976); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1979);
            	    elementValuePairEnum26=elementValuePairEnum();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());
            	    }
            	    break;
            	default :
            	    break loop8;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;
        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum2002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum2004); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);
            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2006);
            elementValueNoEnum28=elementValueNoEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;
        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum2043); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum2045); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);
            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum2047);
            elementValueEnum30=elementValueEnum();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;
        EsperEPL2GrammarParser.constant_return constant33 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);
                throw nvae;
            }
            switch (alt9) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum2078);
                    annotationEnum31=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2089);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueNoEnum2102);
                    constant33=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;
        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;
        EsperEPL2GrammarParser.constant_return constant36 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;
        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);
                throw nvae;
            }
            switch (alt10) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2125);
                    annotationEnum34=annotationEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());
                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2136);
                    elementValueArrayEnum35=elementValueArrayEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_elementValueEnum2149);
                    constant36=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2157);
                    classIdentifier37=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;
        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2177); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);
            int alt12=2;
            int LA12_0 = input.LA(1);
            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2180);
                    elementValueNoEnum39=elementValueNoEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);
                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);
                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }
                        }
                        switch (alt11) {
                    	case 1 :
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2183); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);
                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2185);
                    	    elementValueNoEnum41=elementValueNoEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop11;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt13=2;
            int LA13_0 = input.LA(1);
            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2192); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);
                    }
                    break;
            }
            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2196); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());
                }
                stream_elementValueNoEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;
        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);
            int alt15=2;
            int LA15_0 = input.LA(1);
            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2228);
                    elementValueEnum45=elementValueEnum();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);
                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);
                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }
                        }
                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2231); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);
                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2233);
                    	    elementValueEnum47=elementValueEnum();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop14;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt16=2;
            int LA16_0 = input.LA(1);
            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2240); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);
                    }
                    break;
            }
            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());
                }
                stream_elementValueEnum.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;
        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;
        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;
        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;
        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;
        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;
        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;
        EsperEPL2GrammarParser.forExpr_return forExpr57 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);
                    throw nvae;
                }
                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);
                throw nvae;
            }
            switch (alt17) {
                case 1 :
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2277);
                    selectExpr50=selectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2282);
                    createWindowExpr51=createWindowExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2287);
                    createIndexExpr52=createIndexExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2292);
                    createVariableExpr53=createVariableExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2297);
                    createSchemaExpr54=createSchemaExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2302);
                    onExpr55=onExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2307);
                    updateExpr56=updateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());
                    }
                    break;
            }
            int alt18=2;
            int LA18_0 = input.LA(1);
            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2310);
                    forExpr57=forExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr57.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT58=null;
        Token SELECT60=null;
        Token FROM62=null;
        Token WHERE65=null;
        Token GROUP67=null;
        Token BY68=null;
        Token HAVING70=null;
        Token OUTPUT72=null;
        Token ORDER74=null;
        Token BY75=null;
        Token ROW_LIMIT_EXPR77=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr59 = null;
        EsperEPL2GrammarParser.selectClause_return selectClause61 = null;
        EsperEPL2GrammarParser.fromClause_return fromClause63 = null;
        EsperEPL2GrammarParser.matchRecog_return matchRecog64 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause66 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr69 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause71 = null;
        EsperEPL2GrammarParser.outputLimit_return outputLimit73 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr76 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit78 = null;
        CommonTree INSERT58_tree=null;
        CommonTree SELECT60_tree=null;
        CommonTree FROM62_tree=null;
        CommonTree WHERE65_tree=null;
        CommonTree GROUP67_tree=null;
        CommonTree BY68_tree=null;
        CommonTree HAVING70_tree=null;
        CommonTree OUTPUT72_tree=null;
        CommonTree ORDER74_tree=null;
        CommonTree BY75_tree=null;
        CommonTree ROW_LIMIT_EXPR77_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt19=2;
            int LA19_0 = input.LA(1);
            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    {
                    INSERT58=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2324); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2327);
                    insertIntoExpr59=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr59.getTree());
                    }
                    break;
            }
            SELECT60=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2333); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2336);
            selectClause61=selectClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause61.getTree());
            FROM62=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2340); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2343);
            fromClause63=fromClause();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause63.getTree());
            int alt20=2;
            int LA20_0 = input.LA(1);
            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2347);
                    matchRecog64=matchRecog();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog64.getTree());
                    }
                    break;
            }
            int alt21=2;
            int LA21_0 = input.LA(1);
            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    {
                    WHERE65=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2353); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2356);
                    whereClause66=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause66.getTree());
                    }
                    break;
            }
            int alt22=2;
            int LA22_0 = input.LA(1);
            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    {
                    GROUP67=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2363); if (state.failed) return retval;
                    BY68=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2366); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2369);
                    groupByListExpr69=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr69.getTree());
                    }
                    break;
            }
            int alt23=2;
            int LA23_0 = input.LA(1);
            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    HAVING70=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2376); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2379);
                    havingClause71=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause71.getTree());
                    }
                    break;
            }
            int alt24=2;
            int LA24_0 = input.LA(1);
            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    OUTPUT72=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2386); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2389);
                    outputLimit73=outputLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit73.getTree());
                    }
                    break;
            }
            int alt25=2;
            int LA25_0 = input.LA(1);
            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    {
                    ORDER74=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2396); if (state.failed) return retval;
                    BY75=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2399); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2402);
                    orderByListExpr76=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr76.getTree());
                    }
                    break;
            }
            int alt26=2;
            int LA26_0 = input.LA(1);
            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR77=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2409); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2412);
                    rowLimit78=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit78.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON79=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr80 = null;
        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr81 = null;
        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr82 = null;
        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr83 = null;
        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert84 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr85 = null;
        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr86 = null;
        EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr87 = null;
        CommonTree ON79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onMergeExpr=new RewriteRuleSubtreeStream(adaptor,"rule onMergeExpr");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            {
            ON79=(Token)match(input,ON,FOLLOW_ON_in_onExpr2427); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON79);
            pushFollow(FOLLOW_onStreamExpr_in_onExpr2429);
            onStreamExpr80=onStreamExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr80.getTree());
            int alt30=5;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            case MERGE:
                {
                alt30=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);
                throw nvae;
            }
            switch (alt30) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2434);
                    onDeleteExpr81=onDeleteExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr81.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2438);
                    onSelectExpr82=onSelectExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr82.getTree());
                    int alt29=2;
                    int LA29_0 = input.LA(1);
                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            {
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);
                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }
                                switch (alt27) {
                            	case 1 :
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2441);
                            	    onSelectInsertExpr83=onSelectInsertExpr();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr83.getTree());
                            	    }
                            	    break;
                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);
                            int alt28=2;
                            int LA28_0 = input.LA(1);
                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2444);
                                    outputClauseInsert84=outputClauseInsert();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert84.getTree());
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2451);
                    onSetExpr85=onSetExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr85.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2455);
                    onUpdateExpr86=onUpdateExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr86.getTree());
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_onMergeExpr_in_onExpr2459);
                    onMergeExpr87=onMergeExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onMergeExpr.add(onMergeExpr87.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());
                }
                stream_onDeleteExpr.reset();
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());
                }
                stream_onSelectExpr.reset();
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());
                }
                stream_onSelectInsertExpr.reset();
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());
                }
                stream_outputClauseInsert.reset();
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());
                }
                stream_onUpdateExpr.reset();
                if ( stream_onMergeExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onMergeExpr.nextTree());
                }
                stream_onMergeExpr.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS90=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression88 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression89 = null;
        CommonTree i_tree=null;
        CommonTree AS90_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt31=2;
            int LA31_0 = input.LA(1);
            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);
                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2504);
                    eventFilterExpression88=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression88.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2508);
                    patternInclusionExpression89=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression89.getTree());
                    }
                    break;
            }
            int alt32=3;
            int LA32_0 = input.LA(1);
            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    {
                    AS90=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2512); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS90);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2516); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2522); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token UPDATE91=null;
        Token ISTREAM92=null;
        Token AS94=null;
        Token SET95=null;
        Token COMMA97=null;
        Token WHERE99=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier93 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment96 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment98 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause100 = null;
        CommonTree i_tree=null;
        CommonTree UPDATE91_tree=null;
        CommonTree ISTREAM92_tree=null;
        CommonTree AS94_tree=null;
        CommonTree SET95_tree=null;
        CommonTree COMMA97_tree=null;
        CommonTree WHERE99_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            UPDATE91=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2553); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE91);
            ISTREAM92=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2555); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM92);
            pushFollow(FOLLOW_classIdentifier_in_updateExpr2557);
            classIdentifier93=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier93.getTree());
            int alt33=3;
            int LA33_0 = input.LA(1);
            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    {
                    AS94=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2560); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS94);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2570); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET95=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2576); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET95);
            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2578);
            onSetAssignment96=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment96.getTree());
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);
                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }
                switch (alt34) {
            	case 1 :
            	    {
            	    COMMA97=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2581); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA97);
            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2583);
            	    onSetAssignment98=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment98.getTree());
            	    }
            	    break;
            	default :
            	    break loop34;
                }
            } while (true);
            int alt35=2;
            int LA35_0 = input.LA(1);
            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    {
                    WHERE99=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2591); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE99);
                    pushFollow(FOLLOW_whereClause_in_updateExpr2593);
                    whereClause100=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause100.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onMergeExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onMergeExpr_return onMergeExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onMergeExpr_return retval = new EsperEPL2GrammarParser.onMergeExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token MERGE101=null;
        Token INTO102=null;
        Token AS103=null;
        Token WHERE104=null;
        EsperEPL2GrammarParser.whereClause_return whereClause105 = null;
        EsperEPL2GrammarParser.mergeItem_return mergeItem106 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree MERGE101_tree=null;
        CommonTree INTO102_tree=null;
        CommonTree AS103_tree=null;
        CommonTree WHERE104_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleSubtreeStream stream_mergeItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeItem");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        try {
            {
            MERGE101=(Token)match(input,MERGE,FOLLOW_MERGE_in_onMergeExpr2628); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MERGE.add(MERGE101);
            int alt36=2;
            int LA36_0 = input.LA(1);
            if ( (LA36_0==INTO) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    {
                    INTO102=(Token)match(input,INTO,FOLLOW_INTO_in_onMergeExpr2630); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO102);
                    }
                    break;
            }
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt37=3;
            int LA37_0 = input.LA(1);
            if ( (LA37_0==AS) ) {
                alt37=1;
            }
            else if ( (LA37_0==IDENT) ) {
                alt37=2;
            }
            switch (alt37) {
                case 1 :
                    {
                    AS103=(Token)match(input,AS,FOLLOW_AS_in_onMergeExpr2638); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS103);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2642); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onMergeExpr2648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt38=2;
            int LA38_0 = input.LA(1);
            if ( (LA38_0==WHERE) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    {
                    WHERE104=(Token)match(input,WHERE,FOLLOW_WHERE_in_onMergeExpr2655); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE104);
                    pushFollow(FOLLOW_whereClause_in_onMergeExpr2657);
                    whereClause105=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause105.getTree());
                    }
                    break;
            }
            int cnt39=0;
            loop39:
            do {
                int alt39=2;
                int LA39_0 = input.LA(1);
                if ( (LA39_0==WHEN) ) {
                    alt39=1;
                }
                switch (alt39) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeItem_in_onMergeExpr2665);
            	    mergeItem106=mergeItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeItem.add(mergeItem106.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt39 >= 1 ) break loop39;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(39, input);
                        throw eee;
                }
                cnt39++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_MERGE_EXPR, "ON_MERGE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( !(stream_mergeItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeItem.nextTree());
                }
                stream_mergeItem.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeItem_return mergeItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeItem_return retval = new EsperEPL2GrammarParser.mergeItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.mergeMatched_return mergeMatched107 = null;
        EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched108 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt40=2;
            int LA40_0 = input.LA(1);
            if ( (LA40_0==WHEN) ) {
                int LA40_1 = input.LA(2);
                if ( (LA40_1==MATCHED) ) {
                    alt40=1;
                }
                else if ( (LA40_1==NOT_EXPR) ) {
                    alt40=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 40, 1, input);
                    throw nvae;
                }
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 40, 0, input);
                throw nvae;
            }
            switch (alt40) {
                case 1 :
                    {
                    pushFollow(FOLLOW_mergeMatched_in_mergeItem2699);
                    mergeMatched107=mergeMatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeMatched107.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_mergeUnmatched_in_mergeItem2703);
                    mergeUnmatched108=mergeUnmatched();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeUnmatched108.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatched_return mergeMatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatched_return retval = new EsperEPL2GrammarParser.mergeMatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN109=null;
        Token MATCHED110=null;
        Token AND_EXPR111=null;
        EsperEPL2GrammarParser.expression_return expression112 = null;
        EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem113 = null;
        CommonTree WHEN109_tree=null;
        CommonTree MATCHED110_tree=null;
        CommonTree AND_EXPR111_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeMatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeMatchedItem");
        try {
            {
            WHEN109=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeMatched2716); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN109);
            MATCHED110=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeMatched2718); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED110);
            int alt41=2;
            int LA41_0 = input.LA(1);
            if ( (LA41_0==AND_EXPR) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    AND_EXPR111=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeMatched2721); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR111);
                    pushFollow(FOLLOW_expression_in_mergeMatched2723);
                    expression112=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression112.getTree());
                    }
                    break;
            }
            int cnt42=0;
            loop42:
            do {
                int alt42=2;
                int LA42_0 = input.LA(1);
                if ( (LA42_0==THEN) ) {
                    alt42=1;
                }
                switch (alt42) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeMatchedItem_in_mergeMatched2727);
            	    mergeMatchedItem113=mergeMatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeMatchedItem.add(mergeMatchedItem113.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt42 >= 1 ) break loop42;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(42, input);
                        throw eee;
                }
                cnt42++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_MAT, "MERGE_MAT"), root_1);
                if ( !(stream_mergeMatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeMatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeMatchedItem.nextTree());
                }
                stream_mergeMatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeMatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeMatchedItem_return mergeMatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeMatchedItem_return retval = new EsperEPL2GrammarParser.mergeMatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token u=null;
        Token d=null;
        Token THEN114=null;
        Token SET115=null;
        Token COMMA117=null;
        Token WHERE119=null;
        Token WHERE121=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment116 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment118 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause120 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause122 = null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert123 = null;
        CommonTree u_tree=null;
        CommonTree d_tree=null;
        CommonTree THEN114_tree=null;
        CommonTree SET115_tree=null;
        CommonTree COMMA117_tree=null;
        CommonTree WHERE119_tree=null;
        CommonTree WHERE121_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_mergeInsert=new RewriteRuleSubtreeStream(adaptor,"rule mergeInsert");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        try {
            {
            THEN114=(Token)match(input,THEN,FOLLOW_THEN_in_mergeMatchedItem2753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_THEN.add(THEN114);
            int alt46=3;
            switch ( input.LA(1) ) {
            case UPDATE:
                {
                alt46=1;
                }
                break;
            case DELETE:
                {
                alt46=2;
                }
                break;
            case INSERT:
                {
                alt46=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 46, 0, input);
                throw nvae;
            }
            switch (alt46) {
                case 1 :
                    {
                    {
                    u=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_mergeMatchedItem2768); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UPDATE.add(u);
                    SET115=(Token)match(input,SET,FOLLOW_SET_in_mergeMatchedItem2770); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SET.add(SET115);
                    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem2772);
                    onSetAssignment116=onSetAssignment();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment116.getTree());
                    loop43:
                    do {
                        int alt43=2;
                        int LA43_0 = input.LA(1);
                        if ( (LA43_0==COMMA) ) {
                            alt43=1;
                        }
                        switch (alt43) {
                    	case 1 :
                    	    {
                    	    COMMA117=(Token)match(input,COMMA,FOLLOW_COMMA_in_mergeMatchedItem2775); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA117);
                    	    pushFollow(FOLLOW_onSetAssignment_in_mergeMatchedItem2777);
                    	    onSetAssignment118=onSetAssignment();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment118.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop43;
                        }
                    } while (true);
                    }
                    int alt44=2;
                    int LA44_0 = input.LA(1);
                    if ( (LA44_0==WHERE) ) {
                        alt44=1;
                    }
                    switch (alt44) {
                        case 1 :
                            {
                            WHERE119=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem2783); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE119);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem2785);
                            whereClause120=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause120.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DELETE,FOLLOW_DELETE_in_mergeMatchedItem2797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DELETE.add(d);
                    int alt45=2;
                    int LA45_0 = input.LA(1);
                    if ( (LA45_0==WHERE) ) {
                        alt45=1;
                    }
                    switch (alt45) {
                        case 1 :
                            {
                            WHERE121=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeMatchedItem2800); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE121);
                            pushFollow(FOLLOW_whereClause_in_mergeMatchedItem2802);
                            whereClause122=whereClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_whereClause.add(whereClause122.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_mergeInsert_in_mergeMatchedItem2813);
                    mergeInsert123=mergeInsert();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_mergeInsert.add(mergeInsert123.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_DEL, "MERGE_DEL"), root_1);
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_1, (CommonTree)adaptor.create(INT_TYPE, "dummy"));
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (u != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UPD, "MERGE_UPD"), root_1);
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_mergeInsert.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatched_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatched_return mergeUnmatched() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatched_return retval = new EsperEPL2GrammarParser.mergeUnmatched_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN124=null;
        Token NOT_EXPR125=null;
        Token MATCHED126=null;
        Token AND_EXPR127=null;
        EsperEPL2GrammarParser.expression_return expression128 = null;
        EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem129 = null;
        CommonTree WHEN124_tree=null;
        CommonTree NOT_EXPR125_tree=null;
        CommonTree MATCHED126_tree=null;
        CommonTree AND_EXPR127_tree=null;
        RewriteRuleTokenStream stream_MATCHED=new RewriteRuleTokenStream(adaptor,"token MATCHED");
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_mergeUnmatchedItem=new RewriteRuleSubtreeStream(adaptor,"rule mergeUnmatchedItem");
        try {
            {
            WHEN124=(Token)match(input,WHEN,FOLLOW_WHEN_in_mergeUnmatched2870); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WHEN.add(WHEN124);
            NOT_EXPR125=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_mergeUnmatched2872); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR125);
            MATCHED126=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_mergeUnmatched2874); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCHED.add(MATCHED126);
            int alt47=2;
            int LA47_0 = input.LA(1);
            if ( (LA47_0==AND_EXPR) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    {
                    AND_EXPR127=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_mergeUnmatched2877); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AND_EXPR.add(AND_EXPR127);
                    pushFollow(FOLLOW_expression_in_mergeUnmatched2879);
                    expression128=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression128.getTree());
                    }
                    break;
            }
            int cnt48=0;
            loop48:
            do {
                int alt48=2;
                int LA48_0 = input.LA(1);
                if ( (LA48_0==THEN) ) {
                    alt48=1;
                }
                switch (alt48) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_mergeUnmatchedItem_in_mergeUnmatched2883);
            	    mergeUnmatchedItem129=mergeUnmatchedItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_mergeUnmatchedItem.add(mergeUnmatchedItem129.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt48 >= 1 ) break loop48;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(48, input);
                        throw eee;
                }
                cnt48++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_UNM, "MERGE_UNM"), root_1);
                if ( !(stream_mergeUnmatchedItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_mergeUnmatchedItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_mergeUnmatchedItem.nextTree());
                }
                stream_mergeUnmatchedItem.reset();
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeUnmatchedItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeUnmatchedItem_return mergeUnmatchedItem() throws RecognitionException {
        EsperEPL2GrammarParser.mergeUnmatchedItem_return retval = new EsperEPL2GrammarParser.mergeUnmatchedItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token THEN130=null;
        EsperEPL2GrammarParser.mergeInsert_return mergeInsert131 = null;
        CommonTree THEN130_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            THEN130=(Token)match(input,THEN,FOLLOW_THEN_in_mergeUnmatchedItem2910); if (state.failed) return retval;
            pushFollow(FOLLOW_mergeInsert_in_mergeUnmatchedItem2913);
            mergeInsert131=mergeInsert();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, mergeInsert131.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class mergeInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.mergeInsert_return mergeInsert() throws RecognitionException {
        EsperEPL2GrammarParser.mergeInsert_return retval = new EsperEPL2GrammarParser.mergeInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT132=null;
        Token INTO133=null;
        Token LPAREN135=null;
        Token RPAREN137=null;
        Token SELECT138=null;
        Token WHERE140=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier134 = null;
        EsperEPL2GrammarParser.columnList_return columnList136 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList139 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause141 = null;
        CommonTree INSERT132_tree=null;
        CommonTree INTO133_tree=null;
        CommonTree LPAREN135_tree=null;
        CommonTree RPAREN137_tree=null;
        CommonTree SELECT138_tree=null;
        CommonTree WHERE140_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            INSERT132=(Token)match(input,INSERT,FOLLOW_INSERT_in_mergeInsert2928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT132);
            int alt49=2;
            int LA49_0 = input.LA(1);
            if ( (LA49_0==INTO) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    INTO133=(Token)match(input,INTO,FOLLOW_INTO_in_mergeInsert2931); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INTO.add(INTO133);
                    pushFollow(FOLLOW_classIdentifier_in_mergeInsert2933);
                    classIdentifier134=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier134.getTree());
                    }
                    break;
            }
            int alt50=2;
            int LA50_0 = input.LA(1);
            if ( (LA50_0==LPAREN) ) {
                alt50=1;
            }
            switch (alt50) {
                case 1 :
                    {
                    LPAREN135=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_mergeInsert2938); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN135);
                    pushFollow(FOLLOW_columnList_in_mergeInsert2940);
                    columnList136=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList136.getTree());
                    RPAREN137=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_mergeInsert2942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN137);
                    }
                    break;
            }
            SELECT138=(Token)match(input,SELECT,FOLLOW_SELECT_in_mergeInsert2946); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT138);
            pushFollow(FOLLOW_selectionList_in_mergeInsert2948);
            selectionList139=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList139.getTree());
            int alt51=2;
            int LA51_0 = input.LA(1);
            if ( (LA51_0==WHERE) ) {
                alt51=1;
            }
            switch (alt51) {
                case 1 :
                    {
                    WHERE140=(Token)match(input,WHERE,FOLLOW_WHERE_in_mergeInsert2951); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE140);
                    pushFollow(FOLLOW_whereClause_in_mergeInsert2953);
                    whereClause141=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause141.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MERGE_INS, "MERGE_INS"), root_1);
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_classIdentifier.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                }
                stream_classIdentifier.reset();
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT142=null;
        Token SELECT144=null;
        Token DISTINCT145=null;
        Token WHERE148=null;
        Token GROUP150=null;
        Token BY151=null;
        Token HAVING153=null;
        Token ORDER155=null;
        Token BY156=null;
        Token ROW_LIMIT_EXPR158=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr143 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList146 = null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom147 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause149 = null;
        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr152 = null;
        EsperEPL2GrammarParser.havingClause_return havingClause154 = null;
        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr157 = null;
        EsperEPL2GrammarParser.rowLimit_return rowLimit159 = null;
        CommonTree INSERT142_tree=null;
        CommonTree SELECT144_tree=null;
        CommonTree DISTINCT145_tree=null;
        CommonTree WHERE148_tree=null;
        CommonTree GROUP150_tree=null;
        CommonTree BY151_tree=null;
        CommonTree HAVING153_tree=null;
        CommonTree ORDER155_tree=null;
        CommonTree BY156_tree=null;
        CommonTree ROW_LIMIT_EXPR158_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            {
            int alt52=2;
            int LA52_0 = input.LA(1);
            if ( (LA52_0==INSERT) ) {
                alt52=1;
            }
            switch (alt52) {
                case 1 :
                    {
                    INSERT142=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2999); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT142);
                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr3001);
                    insertIntoExpr143=insertIntoExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr143.getTree());
                    }
                    break;
            }
            SELECT144=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr3007); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT144);
            int alt53=2;
            int LA53_0 = input.LA(1);
            if ( (LA53_0==DISTINCT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    {
                    DISTINCT145=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr3009); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT145);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_onSelectExpr3012);
            selectionList146=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList146.getTree());
            int alt54=2;
            int LA54_0 = input.LA(1);
            if ( (LA54_0==FROM) ) {
                alt54=1;
            }
            switch (alt54) {
                case 1 :
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr3016);
                    onExprFrom147=onExprFrom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom147.getTree());
                    }
                    break;
            }
            int alt55=2;
            int LA55_0 = input.LA(1);
            if ( (LA55_0==WHERE) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    {
                    WHERE148=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr3022); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE148);
                    pushFollow(FOLLOW_whereClause_in_onSelectExpr3024);
                    whereClause149=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause149.getTree());
                    }
                    break;
            }
            int alt56=2;
            int LA56_0 = input.LA(1);
            if ( (LA56_0==GROUP) ) {
                alt56=1;
            }
            switch (alt56) {
                case 1 :
                    {
                    GROUP150=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr3033); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP150);
                    BY151=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3035); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY151);
                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr3037);
                    groupByListExpr152=groupByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr152.getTree());
                    }
                    break;
            }
            int alt57=2;
            int LA57_0 = input.LA(1);
            if ( (LA57_0==HAVING) ) {
                alt57=1;
            }
            switch (alt57) {
                case 1 :
                    {
                    HAVING153=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr3044); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING153);
                    pushFollow(FOLLOW_havingClause_in_onSelectExpr3046);
                    havingClause154=havingClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause154.getTree());
                    }
                    break;
            }
            int alt58=2;
            int LA58_0 = input.LA(1);
            if ( (LA58_0==ORDER) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    ORDER155=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr3053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER155);
                    BY156=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr3055); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY156);
                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr3057);
                    orderByListExpr157=orderByListExpr();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr157.getTree());
                    }
                    break;
            }
            int alt59=2;
            int LA59_0 = input.LA(1);
            if ( (LA59_0==ROW_LIMIT_EXPR) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    ROW_LIMIT_EXPR158=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3064); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR158);
                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr3066);
                    rowLimit159=rowLimit();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit159.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                }
                stream_insertIntoExpr.reset();
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());
                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                }
                stream_onExprFrom.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());
                }
                stream_groupByListExpr.reset();
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());
                }
                stream_havingClause.reset();
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());
                }
                stream_orderByListExpr.reset();
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());
                }
                stream_rowLimit.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token UPDATE160=null;
        Token AS161=null;
        Token SET162=null;
        Token COMMA164=null;
        Token WHERE166=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment163 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment165 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause167 = null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE160_tree=null;
        CommonTree AS161_tree=null;
        CommonTree SET162_tree=null;
        CommonTree COMMA164_tree=null;
        CommonTree WHERE166_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            {
            UPDATE160=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr3126); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE160);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3133); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt60=3;
            int LA60_0 = input.LA(1);
            if ( (LA60_0==AS) ) {
                alt60=1;
            }
            else if ( (LA60_0==IDENT) ) {
                alt60=2;
            }
            switch (alt60) {
                case 1 :
                    {
                    AS161=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr3136); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS161);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3140); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr3146); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            SET162=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr3152); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET162);
            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3154);
            onSetAssignment163=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment163.getTree());
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);
                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }
                switch (alt61) {
            	case 1 :
            	    {
            	    COMMA164=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr3157); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA164);
            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr3159);
            	    onSetAssignment165=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment165.getTree());
            	    }
            	    break;
            	default :
            	    break loop61;
                }
            } while (true);
            int alt62=2;
            int LA62_0 = input.LA(1);
            if ( (LA62_0==WHERE) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    WHERE166=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr3166); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE166);
                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr3168);
                    whereClause167=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause167.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);
                adaptor.addChild(root_2, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token INSERT168=null;
        Token SELECT170=null;
        Token WHERE172=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr169 = null;
        EsperEPL2GrammarParser.selectionList_return selectionList171 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause173 = null;
        CommonTree INSERT168_tree=null;
        CommonTree SELECT170_tree=null;
        CommonTree WHERE172_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            {
            INSERT168=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr3219); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT168);
            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr3221);
            insertIntoExpr169=insertIntoExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr169.getTree());
            SELECT170=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr3225); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT170);
            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr3227);
            selectionList171=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList171.getTree());
            int alt63=2;
            int LA63_0 = input.LA(1);
            if ( (LA63_0==WHERE) ) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    WHERE172=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr3232); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE172);
                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr3234);
                    whereClause173=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause173.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token a=null;
        Token OUTPUT174=null;
        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT174_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        try {
            {
            OUTPUT174=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert3265); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT174);
            int alt64=2;
            int LA64_0 = input.LA(1);
            if ( (LA64_0==FIRST) ) {
                alt64=1;
            }
            else if ( (LA64_0==ALL) ) {
                alt64=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 64, 0, input);
                throw nvae;
            }
            switch (alt64) {
                case 1 :
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert3270); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert3276); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());
                }
                stream_f.reset();
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DELETE175=null;
        Token WHERE177=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom176 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause178 = null;
        CommonTree DELETE175_tree=null;
        CommonTree WHERE177_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            {
            DELETE175=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr3318); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE175);
            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr3322);
            onExprFrom176=onExprFrom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom176.getTree());
            int alt65=2;
            int LA65_0 = input.LA(1);
            if ( (LA65_0==WHERE) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    WHERE177=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr3327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE177);
                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr3329);
                    whereClause178=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause178.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());
                }
                stream_whereClause.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SET179=null;
        Token COMMA181=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment180 = null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment182 = null;
        CommonTree SET179_tree=null;
        CommonTree COMMA181_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            {
            SET179=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr3369); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET179);
            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3371);
            onSetAssignment180=onSetAssignment();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment180.getTree());
            loop66:
            do {
                int alt66=2;
                int LA66_0 = input.LA(1);
                if ( (LA66_0==COMMA) ) {
                    alt66=1;
                }
                switch (alt66) {
            	case 1 :
            	    {
            	    COMMA181=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr3374); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA181);
            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr3376);
            	    onSetAssignment182=onSetAssignment();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment182.getTree());
            	    }
            	    break;
            	default :
            	    break loop66;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());
                }
                stream_onSetAssignment.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS184=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty183 = null;
        EsperEPL2GrammarParser.expression_return expression185 = null;
        CommonTree EQUALS184_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment3401);
            eventProperty183=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty183.getTree());
            EQUALS184=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment3403); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS184);
            pushFollow(FOLLOW_expression_in_onSetAssignment3405);
            expression185=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression185.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token i=null;
        Token FROM186=null;
        Token AS187=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM186_tree=null;
        CommonTree AS187_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        try {
            {
            FROM186=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom3430); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM186);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt67=3;
            int LA67_0 = input.LA(1);
            if ( (LA67_0==AS) ) {
                alt67=1;
            }
            else if ( (LA67_0==IDENT) ) {
                alt67=2;
            }
            switch (alt67) {
                case 1 :
                    {
                    AS187=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom3437); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS187);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3441); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom3447); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE188=null;
        Token WINDOW189=null;
        Token DOT190=null;
        Token DOT192=null;
        Token AS194=null;
        Token LPAREN196=null;
        Token RPAREN198=null;
        Token WHERE199=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression191 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression193 = null;
        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter195 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList197 = null;
        EsperEPL2GrammarParser.expression_return expression200 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE188_tree=null;
        CommonTree WINDOW189_tree=null;
        CommonTree DOT190_tree=null;
        CommonTree DOT192_tree=null;
        CommonTree AS194_tree=null;
        CommonTree LPAREN196_tree=null;
        CommonTree RPAREN198_tree=null;
        CommonTree WHERE199_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            {
            CREATE188=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr3475); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE188);
            WINDOW189=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr3477); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW189);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3481); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt69=2;
            int LA69_0 = input.LA(1);
            if ( (LA69_0==DOT) ) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    DOT190=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT190);
                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3486);
                    viewExpression191=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression191.getTree());
                    loop68:
                    do {
                        int alt68=2;
                        int LA68_0 = input.LA(1);
                        if ( (LA68_0==DOT) ) {
                            alt68=1;
                        }
                        switch (alt68) {
                    	case 1 :
                    	    {
                    	    DOT192=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3489); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT192);
                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3491);
                    	    viewExpression193=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression193.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop68;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt70=3;
            int LA70_0 = input.LA(1);
            if ( (LA70_0==RETAINUNION) ) {
                alt70=1;
            }
            else if ( (LA70_0==RETAININTERSECTION) ) {
                alt70=2;
            }
            switch (alt70) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3500); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            int alt71=2;
            int LA71_0 = input.LA(1);
            if ( (LA71_0==AS) ) {
                alt71=1;
            }
            switch (alt71) {
                case 1 :
                    {
                    AS194=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3508); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS194);
                    }
                    break;
            }
            int alt72=2;
            int LA72_0 = input.LA(1);
            if ( (LA72_0==SELECT||LA72_0==IDENT||LA72_0==TICKED_STRING_LITERAL) ) {
                alt72=1;
            }
            else if ( (LA72_0==LPAREN) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);
                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3523);
                    createWindowExprModelAfter195=createWindowExprModelAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter195.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN196=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3538); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN196);
                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3540);
                    createColumnList197=createColumnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList197.getTree());
                    RPAREN198=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3542); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN198);
                    }
                    break;
            }
            int alt74=2;
            int LA74_0 = input.LA(1);
            if ( (LA74_0==INSERT) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3559); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);
                    int alt73=2;
                    int LA73_0 = input.LA(1);
                    if ( (LA73_0==WHERE) ) {
                        alt73=1;
                    }
                    switch (alt73) {
                        case 1 :
                            {
                            WHERE199=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3562); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE199);
                            pushFollow(FOLLOW_expression_in_createWindowExpr3564);
                            expression200=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression200.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());
                }
                stream_createWindowExprModelAfter.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SELECT201=null;
        Token FROM203=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList202 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier204 = null;
        CommonTree SELECT201_tree=null;
        CommonTree FROM203_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt75=2;
            int LA75_0 = input.LA(1);
            if ( (LA75_0==SELECT) ) {
                alt75=1;
            }
            switch (alt75) {
                case 1 :
                    {
                    SELECT201=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3651); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3654);
                    createSelectionList202=createSelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList202.getTree());
                    FROM203=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3656); if (state.failed) return retval;
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3661);
            classIdentifier204=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier204.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token w=null;
        Token CREATE205=null;
        Token INDEX206=null;
        Token ON207=null;
        Token LPAREN208=null;
        Token RPAREN210=null;
        EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList209 = null;
        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE205_tree=null;
        CommonTree INDEX206_tree=null;
        CommonTree ON207_tree=null;
        CommonTree LPAREN208_tree=null;
        CommonTree RPAREN210_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createIndexColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumnList");
        try {
            {
            CREATE205=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE205);
            INDEX206=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX206);
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3680); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            ON207=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON207);
            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3686); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);
            LPAREN208=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3688); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN208);
            pushFollow(FOLLOW_createIndexColumnList_in_createIndexExpr3690);
            createIndexColumnList209=createIndexColumnList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumnList.add(createIndexColumnList209.getTree());
            RPAREN210=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3692); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN210);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);
                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_createIndexColumnList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumnList_return createIndexColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumnList_return retval = new EsperEPL2GrammarParser.createIndexColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA212=null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn211 = null;
        EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn213 = null;
        CommonTree COMMA212_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createIndexColumn=new RewriteRuleSubtreeStream(adaptor,"rule createIndexColumn");
        try {
            {
            pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3721);
            createIndexColumn211=createIndexColumn();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn211.getTree());
            loop76:
            do {
                int alt76=2;
                int LA76_0 = input.LA(1);
                if ( (LA76_0==COMMA) ) {
                    alt76=1;
                }
                switch (alt76) {
            	case 1 :
            	    {
            	    COMMA212=(Token)match(input,COMMA,FOLLOW_COMMA_in_createIndexColumnList3724); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA212);
            	    pushFollow(FOLLOW_createIndexColumn_in_createIndexColumnList3726);
            	    createIndexColumn213=createIndexColumn();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createIndexColumn.add(createIndexColumn213.getTree());
            	    }
            	    break;
            	default :
            	    break loop76;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                if ( !(stream_createIndexColumn.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createIndexColumn.hasNext() ) {
                    adaptor.addChild(root_1, stream_createIndexColumn.nextTree());
                }
                stream_createIndexColumn.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createIndexColumn_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createIndexColumn_return createIndexColumn() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexColumn_return retval = new EsperEPL2GrammarParser.createIndexColumn_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT214=null;
        Token IDENT215=null;
        CommonTree IDENT214_tree=null;
        CommonTree IDENT215_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        try {
            {
            IDENT214=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3753); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT214);
            int alt77=2;
            int LA77_0 = input.LA(1);
            if ( (LA77_0==IDENT) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    IDENT215=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexColumn3755); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT215);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INDEXCOL, "INDEXCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token n=null;
        Token CREATE216=null;
        Token VARIABLE217=null;
        Token EQUALS219=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier218 = null;
        EsperEPL2GrammarParser.expression_return expression220 = null;
        CommonTree n_tree=null;
        CommonTree CREATE216_tree=null;
        CommonTree VARIABLE217_tree=null;
        CommonTree EQUALS219_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            CREATE216=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE216);
            VARIABLE217=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3782); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE217);
            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3784);
            classIdentifier218=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier218.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3788); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);
            int alt78=2;
            int LA78_0 = input.LA(1);
            if ( (LA78_0==EQUALS) ) {
                alt78=1;
            }
            switch (alt78) {
                case 1 :
                    {
                    EQUALS219=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS219);
                    pushFollow(FOLLOW_expression_in_createVariableExpr3793);
                    expression220=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression220.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA222=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement221 = null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement223 = null;
        CommonTree COMMA222_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3835);
            createColumnListElement221=createColumnListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement221.getTree());
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);
                if ( (LA79_0==COMMA) ) {
                    alt79=1;
                }
                switch (alt79) {
            	case 1 :
            	    {
            	    COMMA222=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3838); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA222);
            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3840);
            	    createColumnListElement223=createColumnListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement223.getTree());
            	    }
            	    break;
            	default :
            	    break loop79;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);
                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());
                }
                stream_createColumnListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token b=null;
        Token RBRACK226=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy224 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier225 = null;
        CommonTree b_tree=null;
        CommonTree RBRACK226_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            {
            pushFollow(FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3868);
            classIdentifierNonGreedy224=classIdentifierNonGreedy();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy224.getTree());
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3871);
            classIdentifier225=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier225.getTree());
            int alt80=2;
            int LA80_0 = input.LA(1);
            if ( (LA80_0==LBRACK) ) {
                alt80=1;
            }
            switch (alt80) {
                case 1 :
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3876); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);
                    RBRACK226=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3878); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK226);
                    }
                    break;
            }
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);
                adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());
                }
                stream_b.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA228=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement227 = null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement229 = null;
        CommonTree COMMA228_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3921);
            createSelectionListElement227=createSelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement227.getTree());
            loop81:
            do {
                int alt81=2;
                int LA81_0 = input.LA(1);
                if ( (LA81_0==COMMA) ) {
                    alt81=1;
                }
                switch (alt81) {
            	case 1 :
            	    {
            	    COMMA228=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3924); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA228);
            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3926);
            	    createSelectionListElement229=createSelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement229.getTree());
            	    }
            	    break;
            	default :
            	    break loop81;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);
                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());
                }
                stream_createSelectionListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token AS231=null;
        Token AS233=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty230 = null;
        EsperEPL2GrammarParser.constant_return constant232 = null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS231_tree=null;
        CommonTree AS233_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt83=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt83=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt83=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt83=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 83, 0, input);
                throw nvae;
            }
            switch (alt83) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3955); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3967);
                    eventProperty230=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty230.getTree());
                    int alt82=2;
                    int LA82_0 = input.LA(1);
                    if ( (LA82_0==AS) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            {
                            AS231=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3970); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS231);
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3974); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3995);
                    constant232=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant232.getTree());
                    AS233=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3997); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS233);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement4001); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_constant.nextTree());
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());
                        }
                        stream_i.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE234=null;
        Token SCHEMA235=null;
        Token AS236=null;
        Token LPAREN238=null;
        Token RPAREN240=null;
        EsperEPL2GrammarParser.variantList_return variantList237 = null;
        EsperEPL2GrammarParser.createColumnList_return createColumnList239 = null;
        EsperEPL2GrammarParser.columnList_return columnList241 = null;
        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE234_tree=null;
        CommonTree SCHEMA235_tree=null;
        CommonTree AS236_tree=null;
        CommonTree LPAREN238_tree=null;
        CommonTree RPAREN240_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            {
            CREATE234=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr4026); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE234);
            int alt84=2;
            int LA84_0 = input.LA(1);
            if ( (LA84_0==IDENT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4030); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);
                    }
                    break;
            }
            SCHEMA235=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr4033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA235);
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4037); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);
            int alt85=2;
            int LA85_0 = input.LA(1);
            if ( (LA85_0==AS) ) {
                alt85=1;
            }
            switch (alt85) {
                case 1 :
                    {
                    AS236=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr4039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS236);
                    }
                    break;
            }
            int alt88=2;
            int LA88_0 = input.LA(1);
            if ( (LA88_0==IDENT||LA88_0==STAR||LA88_0==TICKED_STRING_LITERAL) ) {
                alt88=1;
            }
            else if ( (LA88_0==LPAREN) ) {
                alt88=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);
                throw nvae;
            }
            switch (alt88) {
                case 1 :
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr4052);
                    variantList237=variantList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList237.getTree());
                    }
                    break;
                case 2 :
                    {
                    LPAREN238=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr4063); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN238);
                    int alt86=2;
                    int LA86_0 = input.LA(1);
                    if ( (LA86_0==IDENT||LA86_0==TICKED_STRING_LITERAL) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr4065);
                            createColumnList239=createColumnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList239.getTree());
                            }
                            break;
                    }
                    RPAREN240=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr4068); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN240);
                    int alt87=2;
                    int LA87_0 = input.LA(1);
                    if ( (LA87_0==IDENT) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr4073); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);
                            pushFollow(FOLLOW_columnList_in_createSchemaExpr4075);
                            columnList241=columnList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList241.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (inherits != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);
                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (keyword != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);
                adaptor.addChild(root_2, stream_keyword.nextNode());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);
                adaptor.addChild(root_1, stream_name.nextNode());
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());
                }
                stream_variantList.reset();
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());
                }
                stream_createColumnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA243=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement242 = null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement244 = null;
        CommonTree COMMA243_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            {
            pushFollow(FOLLOW_variantListElement_in_variantList4164);
            variantListElement242=variantListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement242.getTree());
            loop89:
            do {
                int alt89=2;
                int LA89_0 = input.LA(1);
                if ( (LA89_0==COMMA) ) {
                    alt89=1;
                }
                switch (alt89) {
            	case 1 :
            	    {
            	    COMMA243=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList4167); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA243);
            	    pushFollow(FOLLOW_variantListElement_in_variantList4169);
            	    variantListElement244=variantListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement244.getTree());
            	    }
            	    break;
            	default :
            	    break loop89;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);
                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());
                }
                stream_variantListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR245=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier246 = null;
        CommonTree STAR245_tree=null;
        try {
            int alt90=2;
            int LA90_0 = input.LA(1);
            if ( (LA90_0==STAR) ) {
                alt90=1;
            }
            else if ( (LA90_0==IDENT||LA90_0==TICKED_STRING_LITERAL) ) {
                alt90=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 90, 0, input);
                throw nvae;
            }
            switch (alt90) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STAR245=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement4196); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR245_tree = (CommonTree)adaptor.create(STAR245);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR245_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_classIdentifier_in_variantListElement4202);
                    classIdentifier246=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier246.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token INTO247=null;
        Token LPAREN249=null;
        Token RPAREN251=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier248 = null;
        EsperEPL2GrammarParser.columnList_return columnList250 = null;
        CommonTree s_tree=null;
        CommonTree INTO247_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN251_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("insert-into clause"); 
        try {
            {
            int alt91=3;
            int LA91_0 = input.LA(1);
            if ( (LA91_0==ISTREAM) ) {
                alt91=1;
            }
            else if ( (LA91_0==RSTREAM) ) {
                alt91=2;
            }
            switch (alt91) {
                case 1 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr4227); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr4233); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
            }
            INTO247=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr4237); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO247);
            pushFollow(FOLLOW_classIdentifier_in_insertIntoExpr4239);
            classIdentifier248=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier248.getTree());
            int alt92=2;
            int LA92_0 = input.LA(1);
            if ( (LA92_0==LPAREN) ) {
                alt92=1;
            }
            switch (alt92) {
                case 1 :
                    {
                    LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr4242); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);
                    pushFollow(FOLLOW_columnList_in_insertIntoExpr4244);
                    columnList250=columnList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList250.getTree());
                    RPAREN251=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr4246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN251);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());
                }
                stream_columnList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT252=null;
        Token COMMA253=null;
        Token IDENT254=null;
        CommonTree IDENT252_tree=null;
        CommonTree COMMA253_tree=null;
        CommonTree IDENT254_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        try {
            {
            IDENT252=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4279); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT252);
            loop93:
            do {
                int alt93=2;
                int LA93_0 = input.LA(1);
                if ( (LA93_0==COMMA) ) {
                    alt93=1;
                }
                switch (alt93) {
            	case 1 :
            	    {
            	    COMMA253=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList4282); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA253);
            	    IDENT254=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList4284); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT254);
            	    }
            	    break;
            	default :
            	    break loop93;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression255 = null;
        EsperEPL2GrammarParser.regularJoin_return regularJoin256 = null;
        EsperEPL2GrammarParser.outerJoinList_return outerJoinList257 = null;
         paraphrases.push("from clause"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_streamExpression_in_fromClause4322);
            streamExpression255=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression255.getTree());
            int alt94=2;
            int LA94_0 = input.LA(1);
            if ( (LA94_0==EOF||LA94_0==WHERE||(LA94_0>=GROUP && LA94_0<=HAVING)||LA94_0==OUTPUT||LA94_0==ORDER||LA94_0==ROW_LIMIT_EXPR||LA94_0==MATCH_RECOGNIZE||LA94_0==FOR||LA94_0==COMMA) ) {
                alt94=1;
            }
            else if ( ((LA94_0>=INNER && LA94_0<=FULL)) ) {
                alt94=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);
                throw nvae;
            }
            switch (alt94) {
                case 1 :
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause4325);
                    regularJoin256=regularJoin();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin256.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause4329);
                    outerJoinList257=outerJoinList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList257.getTree());
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA258=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression259 = null;
        CommonTree COMMA258_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            loop95:
            do {
                int alt95=2;
                int LA95_0 = input.LA(1);
                if ( (LA95_0==COMMA) ) {
                    alt95=1;
                }
                switch (alt95) {
            	case 1 :
            	    {
            	    COMMA258=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin4343); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin4346);
            	    streamExpression259=streamExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression259.getTree());
            	    }
            	    break;
            	default :
            	    break loop95;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin260 = null;
        EsperEPL2GrammarParser.outerJoin_return outerJoin261 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_outerJoin_in_outerJoinList4360);
            outerJoin260=outerJoin();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin260.getTree());
            loop96:
            do {
                int alt96=2;
                int LA96_0 = input.LA(1);
                if ( ((LA96_0>=INNER && LA96_0<=FULL)) ) {
                    alt96=1;
                }
                switch (alt96) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList4363);
            	    outerJoin261=outerJoin();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin261.getTree());
            	    }
            	    break;
            	default :
            	    break loop96;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER262=null;
        Token JOIN263=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression264 = null;
        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent265 = null;
        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER262_tree=null;
        CommonTree JOIN263_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            {
            int alt99=2;
            int LA99_0 = input.LA(1);
            if ( ((LA99_0>=JOIN && LA99_0<=FULL)) ) {
                alt99=1;
            }
            else if ( (LA99_0==INNER) ) {
                alt99=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 99, 0, input);
                throw nvae;
            }
            switch (alt99) {
                case 1 :
                    {
                    int alt98=2;
                    int LA98_0 = input.LA(1);
                    if ( ((LA98_0>=LEFT && LA98_0<=FULL)) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            {
                            int alt97=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt97=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt97=2;
                                }
                                break;
                            case FULL:
                                {
                                alt97=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 97, 0, input);
                                throw nvae;
                            }
                            switch (alt97) {
                                case 1 :
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin4406); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);
                                    }
                                    break;
                                case 2 :
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin4410); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);
                                    }
                                    break;
                                case 3 :
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin4414); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);
                                    }
                                    break;
                            }
                            OUTER262=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin4417); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER262);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin4438); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);
                    }
                    }
                    break;
            }
            JOIN263=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin4452); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN263);
            pushFollow(FOLLOW_streamExpression_in_outerJoin4454);
            streamExpression264=streamExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression264.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin4456);
            outerJoinIdent265=outerJoinIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent265.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ON266=null;
        Token AND_EXPR268=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair267 = null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair269 = null;
        CommonTree ON266_tree=null;
        CommonTree AND_EXPR268_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ON266=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent4521); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4524);
            outerJoinIdentPair267=outerJoinIdentPair();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair267.getTree());
            loop100:
            do {
                int alt100=2;
                int LA100_0 = input.LA(1);
                if ( (LA100_0==AND_EXPR) ) {
                    alt100=1;
                }
                switch (alt100) {
            	case 1 :
            	    {
            	    AND_EXPR268=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent4527); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent4530);
            	    outerJoinIdentPair269=outerJoinIdentPair();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair269.getTree());
            	    }
            	    break;
            	default :
            	    break loop100;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EQUALS271=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty270 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty272 = null;
        CommonTree EQUALS271_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4545);
            eventProperty270=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty270.getTree());
            EQUALS271=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4547); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4550);
            eventProperty272=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty272.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression273 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4572);
            evalOrExpression273=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression273.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList274 = null;
        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            {
            int alt101=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt101=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt101=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt101=3;
                    }
                    break;
            }
            switch (alt101) {
                case 1 :
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4608); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);
                    }
                    break;
            }
            int alt102=2;
            int LA102_0 = input.LA(1);
            if ( (LA102_0==DISTINCT) ) {
                alt102=1;
            }
            switch (alt102) {
                case 1 :
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4626); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_selectClause4629);
            selectionList274=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList274.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA276=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement275 = null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement277 = null;
        CommonTree COMMA276_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_selectionListElement_in_selectionList4660);
            selectionListElement275=selectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement275.getTree());
            loop103:
            do {
                int alt103=2;
                int LA103_0 = input.LA(1);
                if ( (LA103_0==COMMA) ) {
                    alt103=1;
                }
                switch (alt103) {
            	case 1 :
            	    {
            	    COMMA276=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4663); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4666);
            	    selectionListElement277=selectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement277.getTree());
            	    }
            	    break;
            	default :
            	    break loop103;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS280=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.streamSelector_return streamSelector278 = null;
        EsperEPL2GrammarParser.expression_return expression279 = null;
        CommonTree s_tree=null;
        CommonTree AS280_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt105=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt105=1;
                }
                break;
            case IDENT:
                {
                int LA105_2 = input.LA(2);
                if ( (LA105_2==DOT) ) {
                    int LA105_69 = input.LA(3);
                    if ( (LA105_69==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt105=2;
                    }
                    else if ( (LA105_69==WINDOW||LA105_69==ESCAPE||LA105_69==EVERY_EXPR||(LA105_69>=SUM && LA105_69<=COUNT)||LA105_69==OUTER||(LA105_69>=JOIN && LA105_69<=FULL)||(LA105_69>=EVENTS && LA105_69<=LAST)||(LA105_69>=UNIDIRECTIONAL && LA105_69<=PREVIOUSTAIL)||LA105_69==PRIOR||(LA105_69>=WEEKDAY && LA105_69<=CAST)||LA105_69==SNAPSHOT||(LA105_69>=VARIABLE && LA105_69<=INDEX)||(LA105_69>=DEFINE && LA105_69<=MATCHES)||LA105_69==WHILE||(LA105_69>=MERGE && LA105_69<=MATCHED)||LA105_69==IDENT||LA105_69==TICKED_STRING_LITERAL) ) {
                        alt105=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 105, 69, input);
                        throw nvae;
                    }
                }
                else if ( (LA105_2==EOF||(LA105_2>=IN_SET && LA105_2<=REGEXP)||(LA105_2>=OR_EXPR && LA105_2<=NOT_EXPR)||(LA105_2>=WHERE && LA105_2<=AS)||(LA105_2>=WHEN && LA105_2<=THEN)||LA105_2==FROM||LA105_2==IS||(LA105_2>=GROUP && LA105_2<=HAVING)||LA105_2==OUTPUT||LA105_2==INSERT||LA105_2==ORDER||LA105_2==ROW_LIMIT_EXPR||LA105_2==FOR||LA105_2==COMMA||LA105_2==LPAREN||LA105_2==EQUALS||LA105_2==LBRACK||(LA105_2>=STAR && LA105_2<=QUESTION)||(LA105_2>=BAND && LA105_2<=MOD)||LA105_2==ESCAPECHAR) ) {
                    alt105=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 105, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt105=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 105, 0, input);
                throw nvae;
            }
            switch (alt105) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4692); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4708);
                    streamSelector278=streamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector278.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4713);
                    expression279=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression279.getTree());
                    int alt104=2;
                    int LA104_0 = input.LA(1);
                    if ( (LA104_0==AS) ) {
                        alt104=1;
                    }
                    switch (alt104) {
                        case 1 :
                            {
                            AS280=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4716); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS280);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4720);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (identifier == null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT281=null;
        Token STAR282=null;
        Token AS283=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT281_tree=null;
        CommonTree STAR282_tree=null;
        CommonTree AS283_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4776); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT281=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4778); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT281);
            STAR282=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR282);
            int alt106=2;
            int LA106_0 = input.LA(1);
            if ( (LA106_0==AS) ) {
                alt106=1;
            }
            switch (alt106) {
                case 1 :
                    {
                    AS283=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4783); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS283);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4787); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT288=null;
        Token DOT290=null;
        Token AS292=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression284 = null;
        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression285 = null;
        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression286 = null;
        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression287 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression289 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression291 = null;
        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT288_tree=null;
        CommonTree DOT290_tree=null;
        CommonTree AS292_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            {
            int alt107=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA107_1 = input.LA(2);
                if ( (LA107_1==EOF||(LA107_1>=WHERE && LA107_1<=AS)||(LA107_1>=INNER && LA107_1<=ON)||(LA107_1>=GROUP && LA107_1<=HAVING)||LA107_1==OUTPUT||LA107_1==ORDER||(LA107_1>=UNIDIRECTIONAL && LA107_1<=RETAININTERSECTION)||LA107_1==ROW_LIMIT_EXPR||LA107_1==MATCH_RECOGNIZE||LA107_1==FOR||(LA107_1>=COMMA && LA107_1<=LPAREN)||(LA107_1>=EQUALS && LA107_1<=LBRACK)) ) {
                    alt107=1;
                }
                else if ( (LA107_1==COLON) ) {
                    alt107=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 107, 1, input);
                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt107=1;
                }
                break;
            case PATTERN:
                {
                alt107=2;
                }
                break;
            case SQL:
                {
                alt107=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);
                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4818);
                    eventFilterExpression284=eventFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression284.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4822);
                    patternInclusionExpression285=patternInclusionExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression285.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4826);
                    databaseJoinExpression286=databaseJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression286.getTree());
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4830);
                    methodJoinExpression287=methodJoinExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression287.getTree());
                    }
                    break;
            }
            int alt109=2;
            int LA109_0 = input.LA(1);
            if ( (LA109_0==DOT) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    {
                    DOT288=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4837); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT288);
                    pushFollow(FOLLOW_viewExpression_in_streamExpression4839);
                    viewExpression289=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression289.getTree());
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);
                        if ( (LA108_0==DOT) ) {
                            alt108=1;
                        }
                        switch (alt108) {
                    	case 1 :
                    	    {
                    	    DOT290=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4842); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT290);
                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4844);
                    	    viewExpression291=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression291.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop108;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt110=3;
            int LA110_0 = input.LA(1);
            if ( (LA110_0==AS) ) {
                alt110=1;
            }
            else if ( (LA110_0==IDENT) ) {
                alt110=2;
            }
            switch (alt110) {
                case 1 :
                    {
                    AS292=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4851); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS292);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4855); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4861); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt111=2;
            int LA111_0 = input.LA(1);
            if ( (LA111_0==UNIDIRECTIONAL) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);
                    }
                    break;
            }
            int alt112=3;
            int LA112_0 = input.LA(1);
            if ( (LA112_0==RETAINUNION) ) {
                alt112=1;
            }
            else if ( (LA112_0==RETAININTERSECTION) ) {
                alt112=2;
            }
            switch (alt112) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4875); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4879); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                }
                stream_eventFilterExpression.reset();
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());
                }
                stream_patternInclusionExpression.reset();
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());
                }
                stream_databaseJoinExpression.reset();
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());
                }
                stream_methodJoinExpression.reset();
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());
                }
                stream_u.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token FOR293=null;
        Token LPAREN294=null;
        Token RPAREN296=null;
        EsperEPL2GrammarParser.expressionList_return expressionList295 = null;
        CommonTree i_tree=null;
        CommonTree FOR293_tree=null;
        CommonTree LPAREN294_tree=null;
        CommonTree RPAREN296_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            {
            FOR293=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4935); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR293);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt114=2;
            int LA114_0 = input.LA(1);
            if ( (LA114_0==LPAREN) ) {
                alt114=1;
            }
            switch (alt114) {
                case 1 :
                    {
                    LPAREN294=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4942); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN294);
                    int alt113=2;
                    int LA113_0 = input.LA(1);
                    if ( (LA113_0==WINDOW||LA113_0==ESCAPE||(LA113_0>=NOT_EXPR && LA113_0<=EVERY_EXPR)||(LA113_0>=SUM && LA113_0<=COUNT)||LA113_0==CASE||LA113_0==OUTER||(LA113_0>=JOIN && LA113_0<=FULL)||(LA113_0>=EVENTS && LA113_0<=LAST)||(LA113_0>=UNIDIRECTIONAL && LA113_0<=CURRENT_TIMESTAMP)||LA113_0==SNAPSHOT||(LA113_0>=VARIABLE && LA113_0<=INDEX)||(LA113_0>=BOOLEAN_TRUE && LA113_0<=VALUE_NULL)||(LA113_0>=DEFINE && LA113_0<=MATCHES)||LA113_0==WHILE||(LA113_0>=MERGE && LA113_0<=MATCHED)||LA113_0==NUM_DOUBLE||(LA113_0>=IDENT && LA113_0<=LPAREN)||(LA113_0>=PLUS && LA113_0<=QUESTION)||(LA113_0>=STRING_LITERAL && LA113_0<=QUOTED_STRING_LITERAL)||LA113_0==MINUS||LA113_0==LCURLY||LA113_0==NUM_INT||(LA113_0>=TICKED_STRING_LITERAL && LA113_0<=NUM_FLOAT)) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4944);
                            expressionList295=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList295.getTree());
                            }
                            break;
                    }
                    RPAREN296=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4947); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN296);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MATCH_RECOGNIZE297=null;
        Token LPAREN298=null;
        Token RPAREN306=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy299 = null;
        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures300 = null;
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection301 = null;
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip302 = null;
        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern303 = null;
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval304 = null;
        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine305 = null;
        CommonTree MATCH_RECOGNIZE297_tree=null;
        CommonTree LPAREN298_tree=null;
        CommonTree RPAREN306_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            {
            MATCH_RECOGNIZE297=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE297);
            LPAREN298=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4997); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN298);
            int alt115=2;
            int LA115_0 = input.LA(1);
            if ( (LA115_0==PARTITION) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog5003);
                    matchRecogPartitionBy299=matchRecogPartitionBy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy299.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog5010);
            matchRecogMeasures300=matchRecogMeasures();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures300.getTree());
            int alt116=2;
            int LA116_0 = input.LA(1);
            if ( (LA116_0==ALL) ) {
                alt116=1;
            }
            switch (alt116) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog5015);
                    matchRecogMatchesSelection301=matchRecogMatchesSelection();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection301.getTree());
                    }
                    break;
            }
            int alt117=2;
            int LA117_0 = input.LA(1);
            if ( (LA117_0==AFTER) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5021);
                    matchRecogMatchesAfterSkip302=matchRecogMatchesAfterSkip();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip302.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog5027);
            matchRecogPattern303=matchRecogPattern();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern303.getTree());
            int alt118=2;
            int LA118_0 = input.LA(1);
            if ( (LA118_0==IDENT) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog5033);
                    matchRecogMatchesInterval304=matchRecogMatchesInterval();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval304.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog5039);
            matchRecogDefine305=matchRecogDefine();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine305.getTree());
            RPAREN306=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog5046); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN306);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());
                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());
                }
                stream_matchRecogMatchesSelection.reset();
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());
                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());
                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PARTITION307=null;
        Token BY308=null;
        Token COMMA310=null;
        EsperEPL2GrammarParser.expression_return expression309 = null;
        EsperEPL2GrammarParser.expression_return expression311 = null;
        CommonTree PARTITION307_tree=null;
        CommonTree BY308_tree=null;
        CommonTree COMMA310_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            PARTITION307=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy5083); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION307);
            BY308=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy5085); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY308);
            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5087);
            expression309=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression309.getTree());
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);
                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }
                switch (alt119) {
            	case 1 :
            	    {
            	    COMMA310=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy5090); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA310);
            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy5092);
            	    expression311=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression311.getTree());
            	    }
            	    break;
            	default :
            	    break loop119;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MEASURES312=null;
        Token COMMA314=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem313 = null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem315 = null;
        CommonTree MEASURES312_tree=null;
        CommonTree COMMA314_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            {
            MEASURES312=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures5121); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES312);
            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5123);
            matchRecogMeasureItem313=matchRecogMeasureItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem313.getTree());
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);
                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }
                switch (alt120) {
            	case 1 :
            	    {
            	    COMMA314=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures5126); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA314);
            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5128);
            	    matchRecogMeasureItem315=matchRecogMeasureItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem315.getTree());
            	    }
            	    break;
            	default :
            	    break loop120;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());
                }
                stream_matchRecogMeasureItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS317=null;
        EsperEPL2GrammarParser.expression_return expression316 = null;
        CommonTree i_tree=null;
        CommonTree AS317_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem5153);
            expression316=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression316.getTree());
            int alt122=2;
            int LA122_0 = input.LA(1);
            if ( (LA122_0==AS) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    {
                    AS317=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem5156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS317);
                    int alt121=2;
                    int LA121_0 = input.LA(1);
                    if ( (LA121_0==IDENT) ) {
                        alt121=1;
                    }
                    switch (alt121) {
                        case 1 :
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem5161); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL318=null;
        Token MATCHES319=null;
        CommonTree ALL318_tree=null;
        CommonTree MATCHES319_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            ALL318=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection5192); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL318_tree = (CommonTree)adaptor.create(ALL318);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL318_tree, root_0);
            }
            MATCHES319=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection5195); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN320=null;
        Token LPAREN321=null;
        Token RPAREN323=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration322 = null;
        CommonTree PATTERN320_tree=null;
        CommonTree LPAREN321_tree=null;
        CommonTree RPAREN323_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            PATTERN320=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern5210); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN320);
            LPAREN321=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern5212); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN321);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5214);
            matchRecogPatternAlteration322=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration322.getTree());
            RPAREN323=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern5216); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN323);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AFTER324=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;
        CommonTree AFTER324_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            {
            AFTER324=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5238); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER324);
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5242);
            i1=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5246);
            i2=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5250);
            i3=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5254);
            i4=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5258);
            i5=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);
                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod325 = null;
        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval5294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval5296);
            timePeriod325=timePeriod();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod325.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat326 = null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat327 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5322);
            matchRecogPatternConcat326=matchRecogPatternConcat();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat326.getTree());
            loop123:
            do {
                int alt123=2;
                int LA123_0 = input.LA(1);
                if ( (LA123_0==BOR) ) {
                    alt123=1;
                }
                switch (alt123) {
            	case 1 :
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration5327); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);
            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5329);
            	    matchRecogPatternConcat327=matchRecogPatternConcat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat327.getTree());
            	    }
            	    break;
            	default :
            	    break loop123;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);
                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());
                }
                stream_matchRecogPatternConcat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary328 = null;
        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            {
            int cnt124=0;
            loop124:
            do {
                int alt124=2;
                int LA124_0 = input.LA(1);
                if ( ((LA124_0>=IDENT && LA124_0<=LPAREN)) ) {
                    alt124=1;
                }
                switch (alt124) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5362);
            	    matchRecogPatternUnary328=matchRecogPatternUnary();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary328.getTree());
            	    }
            	    break;
            	default :
            	    if ( cnt124 >= 1 ) break loop124;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(124, input);
                        throw eee;
                }
                cnt124++;
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);
                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());
                }
                stream_matchRecogPatternUnary.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested329 = null;
        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom330 = null;
        try {
            int alt125=2;
            int LA125_0 = input.LA(1);
            if ( (LA125_0==LPAREN) ) {
                alt125=1;
            }
            else if ( (LA125_0==IDENT) ) {
                alt125=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 125, 0, input);
                throw nvae;
            }
            switch (alt125) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5387);
                    matchRecogPatternNested329=matchRecogPatternNested();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested329.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5393);
                    matchRecogPatternAtom330=matchRecogPatternAtom();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom330.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN331=null;
        Token RPAREN333=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration332 = null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN331_tree=null;
        CommonTree RPAREN333_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            {
            LPAREN331=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested5405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN331);
            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5407);
            matchRecogPatternAlteration332=matchRecogPatternAlteration();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration332.getTree());
            RPAREN333=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested5409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN333);
            int alt126=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt126=1;
                    }
                    break;
                case PLUS:
                    {
                    alt126=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt126=3;
                    }
                    break;
            }
            switch (alt126) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested5414); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested5420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
                case 3 :
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested5426); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);
                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom5465); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            int alt129=2;
            int LA129_0 = input.LA(1);
            if ( (LA129_0==STAR||(LA129_0>=PLUS && LA129_0<=QUESTION)) ) {
                alt129=1;
            }
            switch (alt129) {
                case 1 :
                    {
                    int alt127=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt127=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt127=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt127=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 127, 0, input);
                        throw nvae;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom5471); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);
                            }
                            break;
                        case 2 :
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom5477); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);
                            }
                            break;
                        case 3 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5483); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    int alt128=2;
                    int LA128_0 = input.LA(1);
                    if ( (LA128_0==QUESTION) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom5489); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());
                }
                stream_s.reset();
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());
                }
                stream_p.reset();
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());
                }
                stream_q.reset();
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());
                }
                stream_reluctant.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DEFINE334=null;
        Token COMMA336=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem335 = null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem337 = null;
        CommonTree DEFINE334_tree=null;
        CommonTree COMMA336_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            {
            DEFINE334=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine5533); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE334);
            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5535);
            matchRecogDefineItem335=matchRecogDefineItem();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem335.getTree());
            loop130:
            do {
                int alt130=2;
                int LA130_0 = input.LA(1);
                if ( (LA130_0==COMMA) ) {
                    alt130=1;
                }
                switch (alt130) {
            	case 1 :
            	    {
            	    COMMA336=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5538); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA336);
            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5540);
            	    matchRecogDefineItem337=matchRecogDefineItem();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem337.getTree());
            	    }
            	    break;
            	default :
            	    break loop130;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);
                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());
                }
                stream_matchRecogDefineItem.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token AS338=null;
        EsperEPL2GrammarParser.expression_return expression339 = null;
        CommonTree i_tree=null;
        CommonTree AS338_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5567); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            AS338=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5569); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS338);
            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5571);
            expression339=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression339.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PATTERN340=null;
        Token LBRACK341=null;
        Token RBRACK343=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression342 = null;
        CommonTree PATTERN340_tree=null;
        CommonTree LBRACK341_tree=null;
        CommonTree RBRACK343_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            PATTERN340=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5596); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN340);
            LBRACK341=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5598); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK341);
            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5600);
            patternExpression342=patternExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression342.getTree());
            RBRACK343=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5602); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK343);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_patternExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL344=null;
        Token COLON345=null;
        Token LBRACK346=null;
        Token METADATASQL347=null;
        Token RBRACK348=null;
        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL344_tree=null;
        CommonTree COLON345_tree=null;
        CommonTree LBRACK346_tree=null;
        CommonTree METADATASQL347_tree=null;
        CommonTree RBRACK348_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
         paraphrases.push("relational data join"); 
        try {
            {
            SQL344=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5635); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL344);
            COLON345=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5637); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON345);
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            LBRACK346=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5643); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK346);
            int alt131=2;
            int LA131_0 = input.LA(1);
            if ( (LA131_0==STRING_LITERAL) ) {
                alt131=1;
            }
            else if ( (LA131_0==QUOTED_STRING_LITERAL) ) {
                alt131=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 131, 0, input);
                throw nvae;
            }
            switch (alt131) {
                case 1 :
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5648); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                    }
                    break;
                case 2 :
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5654); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                    }
                    break;
            }
            int alt133=2;
            int LA133_0 = input.LA(1);
            if ( (LA133_0==METADATASQL) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    {
                    METADATASQL347=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL347);
                    int alt132=2;
                    int LA132_0 = input.LA(1);
                    if ( (LA132_0==STRING_LITERAL) ) {
                        alt132=1;
                    }
                    else if ( (LA132_0==QUOTED_STRING_LITERAL) ) {
                        alt132=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 132, 0, input);
                        throw nvae;
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5663); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);
                            }
                            break;
                        case 2 :
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5669); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);
                            }
                            break;
                    }
                    }
                    break;
            }
            RBRACK348=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5674); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK348);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());
                }
                stream_s2.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token COLON349=null;
        Token LPAREN351=null;
        Token RPAREN353=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier350 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList352 = null;
        CommonTree i_tree=null;
        CommonTree COLON349_tree=null;
        CommonTree LPAREN351_tree=null;
        CommonTree RPAREN353_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5725); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);
            COLON349=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5727); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON349);
            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5729);
            classIdentifier350=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier350.getTree());
            int alt135=2;
            int LA135_0 = input.LA(1);
            if ( (LA135_0==LPAREN) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    {
                    LPAREN351=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5732); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN351);
                    int alt134=2;
                    int LA134_0 = input.LA(1);
                    if ( (LA134_0==WINDOW||LA134_0==ESCAPE||(LA134_0>=NOT_EXPR && LA134_0<=EVERY_EXPR)||(LA134_0>=SUM && LA134_0<=COUNT)||LA134_0==CASE||LA134_0==OUTER||(LA134_0>=JOIN && LA134_0<=FULL)||(LA134_0>=EVENTS && LA134_0<=LAST)||(LA134_0>=UNIDIRECTIONAL && LA134_0<=CURRENT_TIMESTAMP)||LA134_0==SNAPSHOT||(LA134_0>=VARIABLE && LA134_0<=INDEX)||(LA134_0>=BOOLEAN_TRUE && LA134_0<=VALUE_NULL)||(LA134_0>=DEFINE && LA134_0<=MATCHES)||LA134_0==WHILE||(LA134_0>=MERGE && LA134_0<=MATCHED)||LA134_0==NUM_DOUBLE||(LA134_0>=IDENT && LA134_0<=LPAREN)||(LA134_0>=PLUS && LA134_0<=QUESTION)||(LA134_0>=STRING_LITERAL && LA134_0<=QUOTED_STRING_LITERAL)||LA134_0==MINUS||LA134_0==LCURLY||LA134_0==NUM_INT||(LA134_0>=TICKED_STRING_LITERAL && LA134_0<=NUM_FLOAT)) ) {
                        alt134=1;
                    }
                    switch (alt134) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5734);
                            expressionList352=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList352.getTree());
                            }
                            break;
                    }
                    RPAREN353=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5737); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN353);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);
                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token i=null;
        Token m=null;
        Token COLON354=null;
        Token LPAREN355=null;
        Token RPAREN357=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList356 = null;
        CommonTree ns_tree=null;
        CommonTree i_tree=null;
        CommonTree m_tree=null;
        CommonTree COLON354_tree=null;
        CommonTree LPAREN355_tree=null;
        CommonTree RPAREN357_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MERGE=new RewriteRuleTokenStream(adaptor,"token MERGE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5790); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON354=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5792); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON354);
            int alt136=2;
            int LA136_0 = input.LA(1);
            if ( (LA136_0==IDENT) ) {
                alt136=1;
            }
            else if ( (LA136_0==MERGE) ) {
                alt136=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 136, 0, input);
                throw nvae;
            }
            switch (alt136) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    m=(Token)match(input,MERGE,FOLLOW_MERGE_in_viewExpression5801); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MERGE.add(m);
                    }
                    break;
            }
            LPAREN355=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5804); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN355);
            int alt137=2;
            int LA137_0 = input.LA(1);
            if ( (LA137_0==WINDOW||LA137_0==ESCAPE||(LA137_0>=NOT_EXPR && LA137_0<=EVERY_EXPR)||(LA137_0>=SUM && LA137_0<=COUNT)||LA137_0==CASE||LA137_0==OUTER||(LA137_0>=JOIN && LA137_0<=FULL)||(LA137_0>=EVENTS && LA137_0<=LAST)||(LA137_0>=UNIDIRECTIONAL && LA137_0<=CURRENT_TIMESTAMP)||LA137_0==SNAPSHOT||(LA137_0>=VARIABLE && LA137_0<=INDEX)||(LA137_0>=BOOLEAN_TRUE && LA137_0<=VALUE_NULL)||(LA137_0>=DEFINE && LA137_0<=MATCHES)||LA137_0==WHILE||(LA137_0>=MERGE && LA137_0<=MATCHED)||LA137_0==NUM_DOUBLE||(LA137_0>=IDENT && LA137_0<=LPAREN)||LA137_0==LBRACK||LA137_0==STAR||(LA137_0>=PLUS && LA137_0<=QUESTION)||(LA137_0>=STRING_LITERAL && LA137_0<=QUOTED_STRING_LITERAL)||LA137_0==MINUS||LA137_0==LCURLY||LA137_0==NUM_INT||(LA137_0>=TICKED_STRING_LITERAL && LA137_0<=NUM_FLOAT)) ) {
                alt137=1;
            }
            switch (alt137) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5806);
                    expressionWithTimeList356=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList356.getTree());
                    }
                    break;
            }
            RPAREN357=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5809); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN357);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, "merge"), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_i.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA359=null;
        EsperEPL2GrammarParser.expression_return expression358 = null;
        EsperEPL2GrammarParser.expression_return expression360 = null;
        CommonTree COMMA359_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5869);
            expression358=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression358.getTree());
            loop138:
            do {
                int alt138=2;
                int LA138_0 = input.LA(1);
                if ( (LA138_0==COMMA) ) {
                    alt138=1;
                }
                switch (alt138) {
            	case 1 :
            	    {
            	    COMMA359=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5872); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA359);
            	    pushFollow(FOLLOW_expression_in_groupByListExpr5874);
            	    expression360=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression360.getTree());
            	    }
            	    break;
            	default :
            	    break loop138;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);
                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA362=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement361 = null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement363 = null;
        CommonTree COMMA362_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5909);
            orderByListElement361=orderByListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement361.getTree());
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);
                if ( (LA139_0==COMMA) ) {
                    alt139=1;
                }
                switch (alt139) {
            	case 1 :
            	    {
            	    COMMA362=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5912); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA362);
            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5914);
            	    orderByListElement363=orderByListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement363.getTree());
            	    }
            	    break;
            	default :
            	    break loop139;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);
                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());
                }
                stream_orderByListElement.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        EsperEPL2GrammarParser.expression_return expression364 = null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5939);
            expression364=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression364.getTree());
            int alt140=3;
            int LA140_0 = input.LA(1);
            if ( (LA140_0==ASC) ) {
                alt140=1;
            }
            else if ( (LA140_0==DESC) ) {
                alt140=2;
            }
            switch (alt140) {
                case 1 :
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5944); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression365 = null;
        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5986);
            evalOrExpression365=evalOrExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression365.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN371=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter366 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod367 = null;
        EsperEPL2GrammarParser.number_return number368 = null;
        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet369 = null;
        EsperEPL2GrammarParser.expression_return expression370 = null;
        EsperEPL2GrammarParser.onSetExpr_return onSetExpr372 = null;
        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN371_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            {
            int alt141=2;
            int LA141_0 = input.LA(1);
            if ( (LA141_0==AFTER) ) {
                alt141=1;
            }
            switch (alt141) {
                case 1 :
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit6024);
                    outputLimitAfter366=outputLimitAfter();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter366.getTree());
                    }
                    break;
            }
            int alt142=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt142=1;
                    }
                    break;
                case FIRST:
                    {
                    alt142=2;
                    }
                    break;
                case LAST:
                    {
                    alt142=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt142=4;
                    }
                    break;
            }
            switch (alt142) {
                case 1 :
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit6039); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);
                    }
                    break;
                case 2 :
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit6043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);
                    }
                    break;
                case 3 :
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit6047); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);
                    }
                    break;
                case 4 :
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit6051); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);
                    }
                    break;
            }
            int alt146=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt146=1;
                }
                break;
            case AT:
                {
                alt146=2;
                }
                break;
            case WHEN:
                {
                alt146=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt146=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);
                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    {
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit6082); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);
                    int alt144=2;
                    int LA144_0 = input.LA(1);
                    if ( (LA144_0==NUM_INT) ) {
                        int LA144_1 = input.LA(2);
                        if ( (LA144_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_1==EVENTS) ) {
                            alt144=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 144, 1, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA144_0==NUM_LONG) ) {
                        int LA144_2 = input.LA(2);
                        if ( (LA144_2==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==EVENTS) ) {
                            alt144=2;
                        }
                        else if ( (LA144_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_2==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 144, 2, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA144_0==NUM_FLOAT) ) {
                        int LA144_3 = input.LA(2);
                        if ( (LA144_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==EVENTS) ) {
                            alt144=2;
                        }
                        else if ( (LA144_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_3==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 144, 3, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA144_0==NUM_DOUBLE) ) {
                        int LA144_4 = input.LA(2);
                        if ( (LA144_4==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==EVENTS) ) {
                            alt144=2;
                        }
                        else if ( (LA144_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_4==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 144, 4, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA144_0==IDENT) ) {
                        int LA144_5 = input.LA(2);
                        if ( (LA144_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==EVENTS) ) {
                            alt144=2;
                        }
                        else if ( (LA144_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_MONTHS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_MONTH) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_WEEKS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_WEEK) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_YEARS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_YEAR) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else if ( (LA144_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt144=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 144, 5, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA144_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt144=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 144, 0, input);
                        throw nvae;
                    }
                    switch (alt144) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit6108);
                            timePeriod367=timePeriod();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod367.getTree());
                            }
                            break;
                        case 2 :
                            {
                            int alt143=2;
                            int LA143_0 = input.LA(1);
                            if ( (LA143_0==NUM_DOUBLE||LA143_0==NUM_INT||(LA143_0>=NUM_LONG && LA143_0<=NUM_FLOAT)) ) {
                                alt143=1;
                            }
                            else if ( (LA143_0==IDENT) ) {
                                alt143=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 143, 0, input);
                                throw nvae;
                            }
                            switch (alt143) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit6119);
                                    number368=number();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number368.getTree());
                                    }
                                    break;
                                case 2 :
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit6125); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                                    }
                                    break;
                            }
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit6131); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);
                            }
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit6162); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);
                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit6164);
                    crontabLimitParameterSet369=crontabLimitParameterSet();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet369.getTree());
                    }
                    }
                    break;
                case 3 :
                    {
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit6181); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);
                    pushFollow(FOLLOW_expression_in_outputLimit6183);
                    expression370=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression370.getTree());
                    int alt145=2;
                    int LA145_0 = input.LA(1);
                    if ( (LA145_0==THEN) ) {
                        alt145=1;
                    }
                    switch (alt145) {
                        case 1 :
                            {
                            THEN371=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit6186); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN371);
                            pushFollow(FOLLOW_onSetExpr_in_outputLimit6188);
                            onSetExpr372=onSetExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr372.getTree());
                            }
                            break;
                    }
                    }
                    }
                    break;
                case 4 :
                    {
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (ev != null && e != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (ev != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (at != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());
                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());
                }
                stream_onSetExpr.reset();
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                }
                stream_outputLimitAfter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token EVENTS375=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod373 = null;
        EsperEPL2GrammarParser.number_return number374 = null;
        CommonTree a_tree=null;
        CommonTree EVENTS375_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter6338); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);
            int alt147=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA147_1 = input.LA(2);
                if ( (LA147_1==EVENTS) ) {
                    alt147=2;
                }
                else if ( (LA147_1==MIN||(LA147_1>=TIMEPERIOD_YEAR && LA147_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt147=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA147_2 = input.LA(2);
                if ( (LA147_2==MIN||(LA147_2>=TIMEPERIOD_YEAR && LA147_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt147=1;
                }
                else if ( (LA147_2==EVENTS) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA147_3 = input.LA(2);
                if ( (LA147_3==MIN||(LA147_3>=TIMEPERIOD_YEAR && LA147_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt147=1;
                }
                else if ( (LA147_3==EVENTS) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA147_4 = input.LA(2);
                if ( (LA147_4==MIN||(LA147_4>=TIMEPERIOD_YEAR && LA147_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt147=1;
                }
                else if ( (LA147_4==EVENTS) ) {
                    alt147=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 147, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt147=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);
                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter6341);
                    timePeriod373=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod373.getTree());
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter6345);
                    number374=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number374.getTree());
                    EVENTS375=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter6347); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS375);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());
                }
                stream_timePeriod.reset();
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;
        EsperEPL2GrammarParser.numberconstant_return n2 = null;
        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            {
            int alt148=2;
            int LA148_0 = input.LA(1);
            if ( (LA148_0==NUM_DOUBLE||LA148_0==PLUS||LA148_0==MINUS||LA148_0==NUM_INT||(LA148_0>=NUM_LONG && LA148_0<=NUM_FLOAT)) ) {
                alt148=1;
            }
            else if ( (LA148_0==IDENT) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);
                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit6393);
                    n1=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6399); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
            }
            int alt151=2;
            int LA151_0 = input.LA(1);
            if ( (LA151_0==OFFSET||LA151_0==COMMA) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    {
                    int alt149=2;
                    int LA149_0 = input.LA(1);
                    if ( (LA149_0==COMMA) ) {
                        alt149=1;
                    }
                    else if ( (LA149_0==OFFSET) ) {
                        alt149=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 149, 0, input);
                        throw nvae;
                    }
                    switch (alt149) {
                        case 1 :
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit6406); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);
                            }
                            break;
                        case 2 :
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit6412); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);
                            }
                            break;
                    }
                    int alt150=2;
                    int LA150_0 = input.LA(1);
                    if ( (LA150_0==NUM_DOUBLE||LA150_0==PLUS||LA150_0==MINUS||LA150_0==NUM_INT||(LA150_0>=NUM_LONG && LA150_0<=NUM_FLOAT)) ) {
                        alt150=1;
                    }
                    else if ( (LA150_0==IDENT) ) {
                        alt150=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 150, 0, input);
                        throw nvae;
                    }
                    switch (alt150) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit6418);
                            n2=numberconstant();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());
                            }
                            break;
                        case 2 :
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit6424); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);
                            }
                            break;
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());
                }
                stream_n1.reset();
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());
                }
                stream_i1.reset();
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());
                }
                stream_n2.reset();
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());
                }
                stream_i2.reset();
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());
                }
                stream_o.reset();
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());
                }
                stream_c.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN376=null;
        Token COMMA378=null;
        Token COMMA380=null;
        Token COMMA382=null;
        Token COMMA384=null;
        Token COMMA386=null;
        Token RPAREN388=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime377 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime379 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime381 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime383 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime385 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime387 = null;
        CommonTree LPAREN376_tree=null;
        CommonTree COMMA378_tree=null;
        CommonTree COMMA380_tree=null;
        CommonTree COMMA382_tree=null;
        CommonTree COMMA384_tree=null;
        CommonTree COMMA386_tree=null;
        CommonTree RPAREN388_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            {
            LPAREN376=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet6476); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN376);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6478);
            expressionWithTime377=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime377.getTree());
            COMMA378=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6480); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA378);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6482);
            expressionWithTime379=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime379.getTree());
            COMMA380=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6484); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA380);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6486);
            expressionWithTime381=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime381.getTree());
            COMMA382=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6488); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA382);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6490);
            expressionWithTime383=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime383.getTree());
            COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6492); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA384);
            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6494);
            expressionWithTime385=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime385.getTree());
            int alt152=2;
            int LA152_0 = input.LA(1);
            if ( (LA152_0==COMMA) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    COMMA386=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet6497); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA386);
                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet6499);
                    expressionWithTime387=expressionWithTime();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime387.getTree());
                    }
                    break;
            }
            RPAREN388=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet6503); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN388);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());
                }
                stream_expressionWithTime.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WHEN389=null;
        Token THEN391=null;
        EsperEPL2GrammarParser.expression_return expression390 = null;
        EsperEPL2GrammarParser.expression_return expression392 = null;
        CommonTree WHEN389_tree=null;
        CommonTree THEN391_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            WHEN389=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause6533); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6536);
            expression390=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression390.getTree());
            THEN391=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause6538); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause6541);
            expression392=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression392.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ELSE393=null;
        EsperEPL2GrammarParser.expression_return expression394 = null;
        CommonTree ELSE393_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            {
            ELSE393=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause6554); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause6557);
            expression394=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression394.getTree());
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.caseExpression_return caseExpression395 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_caseExpression_in_expression6570);
            caseExpression395=caseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression395.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token CASE396=null;
        Token END399=null;
        Token CASE400=null;
        Token END404=null;
        EsperEPL2GrammarParser.whenClause_return whenClause397 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause398 = null;
        EsperEPL2GrammarParser.expression_return expression401 = null;
        EsperEPL2GrammarParser.whenClause_return whenClause402 = null;
        EsperEPL2GrammarParser.elseClause_return elseClause403 = null;
        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression405 = null;
        CommonTree CASE396_tree=null;
        CommonTree END399_tree=null;
        CommonTree CASE400_tree=null;
        CommonTree END404_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            int alt157=3;
            int LA157_0 = input.LA(1);
            if ( (LA157_0==CASE) ) {
                int LA157_1 = input.LA(2);
                if ( (LA157_1==WINDOW||LA157_1==ESCAPE||(LA157_1>=NOT_EXPR && LA157_1<=EVERY_EXPR)||(LA157_1>=SUM && LA157_1<=COUNT)||LA157_1==CASE||LA157_1==OUTER||(LA157_1>=JOIN && LA157_1<=FULL)||(LA157_1>=EVENTS && LA157_1<=LAST)||(LA157_1>=UNIDIRECTIONAL && LA157_1<=CURRENT_TIMESTAMP)||LA157_1==SNAPSHOT||(LA157_1>=VARIABLE && LA157_1<=INDEX)||(LA157_1>=BOOLEAN_TRUE && LA157_1<=VALUE_NULL)||(LA157_1>=DEFINE && LA157_1<=MATCHES)||LA157_1==WHILE||(LA157_1>=MERGE && LA157_1<=MATCHED)||LA157_1==NUM_DOUBLE||(LA157_1>=IDENT && LA157_1<=LPAREN)||(LA157_1>=PLUS && LA157_1<=QUESTION)||(LA157_1>=STRING_LITERAL && LA157_1<=QUOTED_STRING_LITERAL)||LA157_1==MINUS||LA157_1==LCURLY||LA157_1==NUM_INT||(LA157_1>=TICKED_STRING_LITERAL && LA157_1<=NUM_FLOAT)) ) {
                    alt157=2;
                }
                else if ( (LA157_1==WHEN) ) {
                    alt157=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 157, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA157_0==WINDOW||LA157_0==ESCAPE||(LA157_0>=NOT_EXPR && LA157_0<=EVERY_EXPR)||(LA157_0>=SUM && LA157_0<=COUNT)||LA157_0==OUTER||(LA157_0>=JOIN && LA157_0<=FULL)||(LA157_0>=EVENTS && LA157_0<=LAST)||(LA157_0>=UNIDIRECTIONAL && LA157_0<=CURRENT_TIMESTAMP)||LA157_0==SNAPSHOT||(LA157_0>=VARIABLE && LA157_0<=INDEX)||(LA157_0>=BOOLEAN_TRUE && LA157_0<=VALUE_NULL)||(LA157_0>=DEFINE && LA157_0<=MATCHES)||LA157_0==WHILE||(LA157_0>=MERGE && LA157_0<=MATCHED)||LA157_0==NUM_DOUBLE||(LA157_0>=IDENT && LA157_0<=LPAREN)||(LA157_0>=PLUS && LA157_0<=QUESTION)||(LA157_0>=STRING_LITERAL && LA157_0<=QUOTED_STRING_LITERAL)||LA157_0==MINUS||LA157_0==LCURLY||LA157_0==NUM_INT||(LA157_0>=TICKED_STRING_LITERAL && LA157_0<=NUM_FLOAT)) ) {
                alt157=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 157, 0, input);
                throw nvae;
            }
            switch (alt157) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE396=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6584); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE396_tree = (CommonTree)adaptor.create(CASE396);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE396_tree, root_0);
                    }
                    int cnt153=0;
                    loop153:
                    do {
                        int alt153=2;
                        int LA153_0 = input.LA(1);
                        if ( (LA153_0==WHEN) ) {
                            alt153=1;
                        }
                        switch (alt153) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6587);
                    	    whenClause397=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause397.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt153 >= 1 ) break loop153;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(153, input);
                                throw eee;
                        }
                        cnt153++;
                    } while (true);
                    int alt154=2;
                    int LA154_0 = input.LA(1);
                    if ( (LA154_0==ELSE) ) {
                        alt154=1;
                    }
                    switch (alt154) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6590);
                            elseClause398=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause398.getTree());
                            }
                            break;
                    }
                    END399=(Token)match(input,END,FOLLOW_END_in_caseExpression6593); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE400=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE400);
                    pushFollow(FOLLOW_expression_in_caseExpression6606);
                    expression401=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression401.getTree());
                    int cnt155=0;
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);
                        if ( (LA155_0==WHEN) ) {
                            alt155=1;
                        }
                        switch (alt155) {
                    	case 1 :
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6608);
                    	    whenClause402=whenClause();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause402.getTree());
                    	    }
                    	    break;
                    	default :
                    	    if ( cnt155 >= 1 ) break loop155;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(155, input);
                                throw eee;
                        }
                        cnt155++;
                    } while (true);
                    int alt156=2;
                    int LA156_0 = input.LA(1);
                    if ( (LA156_0==ELSE) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6611);
                            elseClause403=elseClause();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause403.getTree());
                            }
                            break;
                    }
                    END404=(Token)match(input,END,FOLLOW_END_in_caseExpression6614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END404);
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());
                        }
                        stream_whenClause.reset();
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());
                        }
                        stream_elseClause.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6638);
                    evalOrExpression405=evalOrExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression405.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression406 = null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression407 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6649);
            evalAndExpression406=evalAndExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression406.getTree());
            loop158:
            do {
                int alt158=2;
                int LA158_0 = input.LA(1);
                if ( (LA158_0==OR_EXPR) ) {
                    alt158=1;
                }
                switch (alt158) {
            	case 1 :
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6654); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);
            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6656);
            	    evalAndExpression407=evalAndExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression407.getTree());
            	    }
            	    break;
            	default :
            	    break loop158;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());
                }
                stream_evalAndExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression408 = null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression409 = null;
        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6688);
            bitWiseExpression408=bitWiseExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression408.getTree());
            loop159:
            do {
                int alt159=2;
                int LA159_0 = input.LA(1);
                if ( (LA159_0==AND_EXPR) ) {
                    alt159=1;
                }
                switch (alt159) {
            	case 1 :
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6693); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);
            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6695);
            	    bitWiseExpression409=bitWiseExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression409.getTree());
            	    }
            	    break;
            	default :
            	    break loop159;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (op != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);
                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());
                }
                stream_bitWiseExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token BAND411=null;
        Token BOR412=null;
        Token BXOR413=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression410 = null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression414 = null;
        CommonTree BAND411_tree=null;
        CommonTree BOR412_tree=null;
        CommonTree BXOR413_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6727);
            negatedExpression410=negatedExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression410.getTree());
            loop161:
            do {
                int alt161=2;
                int LA161_0 = input.LA(1);
                if ( (LA161_0==BOR||(LA161_0>=BAND && LA161_0<=BXOR)) ) {
                    alt161=1;
                }
                switch (alt161) {
            	case 1 :
            	    {
            	    int alt160=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt160=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt160=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt160=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 160, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt160) {
            	        case 1 :
            	            {
            	            BAND411=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6732); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND411_tree = (CommonTree)adaptor.create(BAND411);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND411_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            BOR412=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6735); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR412_tree = (CommonTree)adaptor.create(BOR412);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR412_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            BXOR413=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6738); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR413_tree = (CommonTree)adaptor.create(BXOR413);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR413_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6742);
            	    negatedExpression414=negatedExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression414.getTree());
            	    }
            	    break;
            	default :
            	    break loop161;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token NOT_EXPR416=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression415 = null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression417 = null;
        CommonTree NOT_EXPR416_tree=null;
        try {
            int alt162=2;
            int LA162_0 = input.LA(1);
            if ( (LA162_0==WINDOW||LA162_0==ESCAPE||LA162_0==EVERY_EXPR||(LA162_0>=SUM && LA162_0<=COUNT)||LA162_0==OUTER||(LA162_0>=JOIN && LA162_0<=FULL)||(LA162_0>=EVENTS && LA162_0<=LAST)||(LA162_0>=UNIDIRECTIONAL && LA162_0<=CURRENT_TIMESTAMP)||LA162_0==SNAPSHOT||(LA162_0>=VARIABLE && LA162_0<=INDEX)||(LA162_0>=BOOLEAN_TRUE && LA162_0<=VALUE_NULL)||(LA162_0>=DEFINE && LA162_0<=MATCHES)||LA162_0==WHILE||(LA162_0>=MERGE && LA162_0<=MATCHED)||LA162_0==NUM_DOUBLE||(LA162_0>=IDENT && LA162_0<=LPAREN)||(LA162_0>=PLUS && LA162_0<=QUESTION)||(LA162_0>=STRING_LITERAL && LA162_0<=QUOTED_STRING_LITERAL)||LA162_0==MINUS||LA162_0==LCURLY||LA162_0==NUM_INT||(LA162_0>=TICKED_STRING_LITERAL && LA162_0<=NUM_FLOAT)) ) {
                alt162=1;
            }
            else if ( (LA162_0==NOT_EXPR) ) {
                alt162=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 162, 0, input);
                throw nvae;
            }
            switch (alt162) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6757);
                    evalEqualsExpression415=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression415.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    NOT_EXPR416=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6763); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR416_tree = (CommonTree)adaptor.create(NOT_EXPR416);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR416_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6766);
                    evalEqualsExpression417=evalEqualsExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression417.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR419=null;
        Token LPAREN421=null;
        Token RPAREN423=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression418 = null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression420 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList422 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression424 = null;
        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR419_tree=null;
        CommonTree LPAREN421_tree=null;
        CommonTree RPAREN423_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6779);
            evalRelationalExpression418=evalRelationalExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression418.getTree());
            loop168:
            do {
                int alt168=2;
                int LA168_0 = input.LA(1);
                if ( (LA168_0==IS||LA168_0==EQUALS||(LA168_0>=SQL_NE && LA168_0<=NOT_EQUAL)) ) {
                    alt168=1;
                }
                switch (alt168) {
            	case 1 :
            	    {
            	    int alt163=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt163=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA163_2 = input.LA(2);
            	        if ( (LA163_2==NOT_EXPR) ) {
            	            alt163=3;
            	        }
            	        else if ( (LA163_2==WINDOW||LA163_2==ESCAPE||LA163_2==EVERY_EXPR||(LA163_2>=SUM && LA163_2<=COUNT)||LA163_2==OUTER||(LA163_2>=JOIN && LA163_2<=FULL)||(LA163_2>=ALL && LA163_2<=SOME)||(LA163_2>=EVENTS && LA163_2<=LAST)||(LA163_2>=UNIDIRECTIONAL && LA163_2<=CURRENT_TIMESTAMP)||LA163_2==SNAPSHOT||(LA163_2>=VARIABLE && LA163_2<=INDEX)||(LA163_2>=BOOLEAN_TRUE && LA163_2<=VALUE_NULL)||(LA163_2>=DEFINE && LA163_2<=MATCHES)||LA163_2==WHILE||(LA163_2>=MERGE && LA163_2<=MATCHED)||LA163_2==NUM_DOUBLE||(LA163_2>=IDENT && LA163_2<=LPAREN)||(LA163_2>=PLUS && LA163_2<=QUESTION)||(LA163_2>=STRING_LITERAL && LA163_2<=QUOTED_STRING_LITERAL)||LA163_2==MINUS||LA163_2==LCURLY||LA163_2==NUM_INT||(LA163_2>=TICKED_STRING_LITERAL && LA163_2<=NUM_FLOAT)) ) {
            	            alt163=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 163, 2, input);
            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt163=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt163=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 163, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt163) {
            	        case 1 :
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6792); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);
            	            }
            	            break;
            	        case 2 :
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6810); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);
            	            }
            	            break;
            	        case 3 :
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6824); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);
            	            NOT_EXPR419=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6826); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR419);
            	            }
            	            break;
            	        case 4 :
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6840); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);
            	            }
            	            break;
            	        case 5 :
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6854); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);
            	            }
            	            break;
            	    }
            	    int alt167=2;
            	    int LA167_0 = input.LA(1);
            	    if ( (LA167_0==WINDOW||LA167_0==ESCAPE||LA167_0==EVERY_EXPR||(LA167_0>=SUM && LA167_0<=COUNT)||LA167_0==OUTER||(LA167_0>=JOIN && LA167_0<=FULL)||(LA167_0>=EVENTS && LA167_0<=LAST)||(LA167_0>=UNIDIRECTIONAL && LA167_0<=CURRENT_TIMESTAMP)||LA167_0==SNAPSHOT||(LA167_0>=VARIABLE && LA167_0<=INDEX)||(LA167_0>=BOOLEAN_TRUE && LA167_0<=VALUE_NULL)||(LA167_0>=DEFINE && LA167_0<=MATCHES)||LA167_0==WHILE||(LA167_0>=MERGE && LA167_0<=MATCHED)||LA167_0==NUM_DOUBLE||(LA167_0>=IDENT && LA167_0<=LPAREN)||(LA167_0>=PLUS && LA167_0<=QUESTION)||(LA167_0>=STRING_LITERAL && LA167_0<=QUOTED_STRING_LITERAL)||LA167_0==MINUS||LA167_0==LCURLY||LA167_0==NUM_INT||(LA167_0>=TICKED_STRING_LITERAL && LA167_0<=NUM_FLOAT)) ) {
            	        alt167=1;
            	    }
            	    else if ( ((LA167_0>=ALL && LA167_0<=SOME)) ) {
            	        alt167=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 167, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt167) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6884);
            	            evalRelationalExpression420=evalRelationalExpression();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression420.getTree());
            	            }
            	            break;
            	        case 2 :
            	            {
            	            int alt164=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt164=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt164=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt164=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 164, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt164) {
            	                case 1 :
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6901); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6907); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);
            	                    }
            	                    break;
            	                case 3 :
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6913); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);
            	                    }
            	                    break;
            	            }
            	            int alt166=2;
            	            int LA166_0 = input.LA(1);
            	            if ( (LA166_0==LPAREN) ) {
            	                int LA166_1 = input.LA(2);
            	                if ( (LA166_1==SELECT) ) {
            	                    alt166=2;
            	                }
            	                else if ( (LA166_1==WINDOW||LA166_1==ESCAPE||(LA166_1>=NOT_EXPR && LA166_1<=EVERY_EXPR)||(LA166_1>=SUM && LA166_1<=COUNT)||LA166_1==CASE||LA166_1==OUTER||(LA166_1>=JOIN && LA166_1<=FULL)||(LA166_1>=EVENTS && LA166_1<=LAST)||(LA166_1>=UNIDIRECTIONAL && LA166_1<=CURRENT_TIMESTAMP)||LA166_1==SNAPSHOT||(LA166_1>=VARIABLE && LA166_1<=INDEX)||(LA166_1>=BOOLEAN_TRUE && LA166_1<=VALUE_NULL)||(LA166_1>=DEFINE && LA166_1<=MATCHES)||LA166_1==WHILE||(LA166_1>=MERGE && LA166_1<=MATCHED)||LA166_1==NUM_DOUBLE||(LA166_1>=IDENT && LA166_1<=RPAREN)||(LA166_1>=PLUS && LA166_1<=QUESTION)||(LA166_1>=STRING_LITERAL && LA166_1<=QUOTED_STRING_LITERAL)||LA166_1==MINUS||LA166_1==LCURLY||LA166_1==NUM_INT||(LA166_1>=TICKED_STRING_LITERAL && LA166_1<=NUM_FLOAT)) ) {
            	                    alt166=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 166, 1, input);
            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 166, 0, input);
            	                throw nvae;
            	            }
            	            switch (alt166) {
            	                case 1 :
            	                    {
            	                    {
            	                    LPAREN421=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6919); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN421);
            	                    int alt165=2;
            	                    int LA165_0 = input.LA(1);
            	                    if ( (LA165_0==WINDOW||LA165_0==ESCAPE||(LA165_0>=NOT_EXPR && LA165_0<=EVERY_EXPR)||(LA165_0>=SUM && LA165_0<=COUNT)||LA165_0==CASE||LA165_0==OUTER||(LA165_0>=JOIN && LA165_0<=FULL)||(LA165_0>=EVENTS && LA165_0<=LAST)||(LA165_0>=UNIDIRECTIONAL && LA165_0<=CURRENT_TIMESTAMP)||LA165_0==SNAPSHOT||(LA165_0>=VARIABLE && LA165_0<=INDEX)||(LA165_0>=BOOLEAN_TRUE && LA165_0<=VALUE_NULL)||(LA165_0>=DEFINE && LA165_0<=MATCHES)||LA165_0==WHILE||(LA165_0>=MERGE && LA165_0<=MATCHED)||LA165_0==NUM_DOUBLE||(LA165_0>=IDENT && LA165_0<=LPAREN)||(LA165_0>=PLUS && LA165_0<=QUESTION)||(LA165_0>=STRING_LITERAL && LA165_0<=QUOTED_STRING_LITERAL)||LA165_0==MINUS||LA165_0==LCURLY||LA165_0==NUM_INT||(LA165_0>=TICKED_STRING_LITERAL && LA165_0<=NUM_FLOAT)) ) {
            	                        alt165=1;
            	                    }
            	                    switch (alt165) {
            	                        case 1 :
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6921);
            	                            expressionList422=expressionList();
            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList422.getTree());
            	                            }
            	                            break;
            	                    }
            	                    RPAREN423=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6924); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN423);
            	                    }
            	                    }
            	                    break;
            	                case 2 :
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6929);
            	                    subSelectGroupExpression424=subSelectGroupExpression();
            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression424.getTree());
            	                    }
            	                    break;
            	            }
            	            }
            	            break;
            	    }
            	    }
            	    break;
            	default :
            	    break loop168;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a == null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (eq != null || is != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                }
                stream_subSelectGroupExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());
                }
                stream_evalRelationalExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN427=null;
        Token RPAREN429=null;
        Token COMMA433=null;
        Token IN_SET435=null;
        Token BETWEEN437=null;
        Token LIKE439=null;
        Token ESCAPE441=null;
        Token REGEXP443=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr425 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr426 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList428 = null;
        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression430 = null;
        EsperEPL2GrammarParser.expression_return expression431 = null;
        EsperEPL2GrammarParser.expression_return expression432 = null;
        EsperEPL2GrammarParser.expression_return expression434 = null;
        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery436 = null;
        EsperEPL2GrammarParser.betweenList_return betweenList438 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr440 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant442 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr444 = null;
        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN427_tree=null;
        CommonTree RPAREN429_tree=null;
        CommonTree COMMA433_tree=null;
        CommonTree IN_SET435_tree=null;
        CommonTree BETWEEN437_tree=null;
        CommonTree LIKE439_tree=null;
        CommonTree ESCAPE441_tree=null;
        CommonTree REGEXP443_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7057);
            concatenationExpr425=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr425.getTree());
            int alt182=2;
            int LA182_0 = input.LA(1);
            if ( (LA182_0==EOF||(LA182_0>=OR_EXPR && LA182_0<=AND_EXPR)||(LA182_0>=WHERE && LA182_0<=AS)||(LA182_0>=ELSE && LA182_0<=FROM)||LA182_0==IS||(LA182_0>=GROUP && LA182_0<=HAVING)||LA182_0==ALL||LA182_0==OUTPUT||LA182_0==INSERT||(LA182_0>=ORDER && LA182_0<=DESC)||LA182_0==PATTERN||(LA182_0>=TIMEPERIOD_SEC && LA182_0<=TIMEPERIOD_SECONDS)||LA182_0==ROW_LIMIT_EXPR||LA182_0==MEASURES||(LA182_0>=AFTER && LA182_0<=FOR)||LA182_0==COMMA||(LA182_0>=RPAREN && LA182_0<=EQUALS)||LA182_0==RBRACK||LA182_0==BOR||LA182_0==COLON||(LA182_0>=BAND && LA182_0<=GE)||LA182_0==RCURLY||LA182_0==FOLLOWMAX_END) ) {
                alt182=1;
            }
            else if ( ((LA182_0>=IN_SET && LA182_0<=REGEXP)||LA182_0==NOT_EXPR) ) {
                alt182=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 182, 0, input);
                throw nvae;
            }
            switch (alt182) {
                case 1 :
                    {
                    {
                    loop174:
                    do {
                        int alt174=2;
                        int LA174_0 = input.LA(1);
                        if ( ((LA174_0>=LT && LA174_0<=GE)) ) {
                            alt174=1;
                        }
                        switch (alt174) {
                    	case 1 :
                    	    {
                    	    int alt169=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt169=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt169=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt169=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt169=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 169, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt169) {
                    	        case 1 :
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression7089); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression7093); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);
                    	            }
                    	            break;
                    	        case 3 :
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression7097); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);
                    	            }
                    	            break;
                    	        case 4 :
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression7101); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);
                    	            }
                    	            break;
                    	    }
                    	    int alt173=2;
                    	    int LA173_0 = input.LA(1);
                    	    if ( (LA173_0==WINDOW||LA173_0==ESCAPE||LA173_0==EVERY_EXPR||(LA173_0>=SUM && LA173_0<=COUNT)||LA173_0==OUTER||(LA173_0>=JOIN && LA173_0<=FULL)||(LA173_0>=EVENTS && LA173_0<=LAST)||(LA173_0>=UNIDIRECTIONAL && LA173_0<=CURRENT_TIMESTAMP)||LA173_0==SNAPSHOT||(LA173_0>=VARIABLE && LA173_0<=INDEX)||(LA173_0>=BOOLEAN_TRUE && LA173_0<=VALUE_NULL)||(LA173_0>=DEFINE && LA173_0<=MATCHES)||LA173_0==WHILE||(LA173_0>=MERGE && LA173_0<=MATCHED)||LA173_0==NUM_DOUBLE||(LA173_0>=IDENT && LA173_0<=LPAREN)||(LA173_0>=PLUS && LA173_0<=QUESTION)||(LA173_0>=STRING_LITERAL && LA173_0<=QUOTED_STRING_LITERAL)||LA173_0==MINUS||LA173_0==LCURLY||LA173_0==NUM_INT||(LA173_0>=TICKED_STRING_LITERAL && LA173_0<=NUM_FLOAT)) ) {
                    	        alt173=1;
                    	    }
                    	    else if ( ((LA173_0>=ALL && LA173_0<=SOME)) ) {
                    	        alt173=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 173, 0, input);
                    	        throw nvae;
                    	    }
                    	    switch (alt173) {
                    	        case 1 :
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7125);
                    	            concatenationExpr426=concatenationExpr();
                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr426.getTree());
                    	            }
                    	            break;
                    	        case 2 :
                    	            {
                    	            int alt170=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt170=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt170=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt170=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 170, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt170) {
                    	                case 1 :
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression7142); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression7148); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);
                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression7154); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);
                    	                    }
                    	                    break;
                    	            }
                    	            int alt172=2;
                    	            int LA172_0 = input.LA(1);
                    	            if ( (LA172_0==LPAREN) ) {
                    	                int LA172_1 = input.LA(2);
                    	                if ( (LA172_1==SELECT) ) {
                    	                    alt172=2;
                    	                }
                    	                else if ( (LA172_1==WINDOW||LA172_1==ESCAPE||(LA172_1>=NOT_EXPR && LA172_1<=EVERY_EXPR)||(LA172_1>=SUM && LA172_1<=COUNT)||LA172_1==CASE||LA172_1==OUTER||(LA172_1>=JOIN && LA172_1<=FULL)||(LA172_1>=EVENTS && LA172_1<=LAST)||(LA172_1>=UNIDIRECTIONAL && LA172_1<=CURRENT_TIMESTAMP)||LA172_1==SNAPSHOT||(LA172_1>=VARIABLE && LA172_1<=INDEX)||(LA172_1>=BOOLEAN_TRUE && LA172_1<=VALUE_NULL)||(LA172_1>=DEFINE && LA172_1<=MATCHES)||LA172_1==WHILE||(LA172_1>=MERGE && LA172_1<=MATCHED)||LA172_1==NUM_DOUBLE||(LA172_1>=IDENT && LA172_1<=RPAREN)||(LA172_1>=PLUS && LA172_1<=QUESTION)||(LA172_1>=STRING_LITERAL && LA172_1<=QUOTED_STRING_LITERAL)||LA172_1==MINUS||LA172_1==LCURLY||LA172_1==NUM_INT||(LA172_1>=TICKED_STRING_LITERAL && LA172_1<=NUM_FLOAT)) ) {
                    	                    alt172=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 172, 1, input);
                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 172, 0, input);
                    	                throw nvae;
                    	            }
                    	            switch (alt172) {
                    	                case 1 :
                    	                    {
                    	                    {
                    	                    LPAREN427=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7160); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN427);
                    	                    int alt171=2;
                    	                    int LA171_0 = input.LA(1);
                    	                    if ( (LA171_0==WINDOW||LA171_0==ESCAPE||(LA171_0>=NOT_EXPR && LA171_0<=EVERY_EXPR)||(LA171_0>=SUM && LA171_0<=COUNT)||LA171_0==CASE||LA171_0==OUTER||(LA171_0>=JOIN && LA171_0<=FULL)||(LA171_0>=EVENTS && LA171_0<=LAST)||(LA171_0>=UNIDIRECTIONAL && LA171_0<=CURRENT_TIMESTAMP)||LA171_0==SNAPSHOT||(LA171_0>=VARIABLE && LA171_0<=INDEX)||(LA171_0>=BOOLEAN_TRUE && LA171_0<=VALUE_NULL)||(LA171_0>=DEFINE && LA171_0<=MATCHES)||LA171_0==WHILE||(LA171_0>=MERGE && LA171_0<=MATCHED)||LA171_0==NUM_DOUBLE||(LA171_0>=IDENT && LA171_0<=LPAREN)||(LA171_0>=PLUS && LA171_0<=QUESTION)||(LA171_0>=STRING_LITERAL && LA171_0<=QUOTED_STRING_LITERAL)||LA171_0==MINUS||LA171_0==LCURLY||LA171_0==NUM_INT||(LA171_0>=TICKED_STRING_LITERAL && LA171_0<=NUM_FLOAT)) ) {
                    	                        alt171=1;
                    	                    }
                    	                    switch (alt171) {
                    	                        case 1 :
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression7162);
                    	                            expressionList428=expressionList();
                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList428.getTree());
                    	                            }
                    	                            break;
                    	                    }
                    	                    RPAREN429=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7165); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN429);
                    	                    }
                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7170);
                    	                    subSelectGroupExpression430=subSelectGroupExpression();
                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression430.getTree());
                    	                    }
                    	                    break;
                    	            }
                    	            }
                    	            break;
                    	    }
                    	    }
                    	    break;
                    	default :
                    	    break loop174;
                        }
                    } while (true);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (g == null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    if (g != null && r != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);
                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());
                        }
                        stream_expressionList.reset();
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());
                        }
                        stream_subSelectGroupExpression.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());
                        }
                        stream_concatenationExpr.reset();
                    }
                    retval.tree = root_0;}
                    }
                    }
                    break;
                case 2 :
                    {
                    int alt175=2;
                    int LA175_0 = input.LA(1);
                    if ( (LA175_0==NOT_EXPR) ) {
                        alt175=1;
                    }
                    switch (alt175) {
                        case 1 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression7266); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                    }
                    int alt181=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA181_1 = input.LA(2);
                        if ( (LA181_1==LPAREN) ) {
                            int LA181_5 = input.LA(3);
                            if ( (LA181_5==SELECT) ) {
                                alt181=2;
                            }
                            else if ( (LA181_5==WINDOW||LA181_5==ESCAPE||(LA181_5>=NOT_EXPR && LA181_5<=EVERY_EXPR)||(LA181_5>=SUM && LA181_5<=COUNT)||LA181_5==CASE||LA181_5==OUTER||(LA181_5>=JOIN && LA181_5<=FULL)||(LA181_5>=EVENTS && LA181_5<=LAST)||(LA181_5>=UNIDIRECTIONAL && LA181_5<=CURRENT_TIMESTAMP)||LA181_5==SNAPSHOT||(LA181_5>=VARIABLE && LA181_5<=INDEX)||(LA181_5>=BOOLEAN_TRUE && LA181_5<=VALUE_NULL)||(LA181_5>=DEFINE && LA181_5<=MATCHES)||LA181_5==WHILE||(LA181_5>=MERGE && LA181_5<=MATCHED)||LA181_5==NUM_DOUBLE||(LA181_5>=IDENT && LA181_5<=LPAREN)||(LA181_5>=PLUS && LA181_5<=QUESTION)||(LA181_5>=STRING_LITERAL && LA181_5<=QUOTED_STRING_LITERAL)||LA181_5==MINUS||LA181_5==LCURLY||LA181_5==NUM_INT||(LA181_5>=TICKED_STRING_LITERAL && LA181_5<=NUM_FLOAT)) ) {
                                alt181=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 181, 5, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA181_1==LBRACK) ) {
                            alt181=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 181, 1, input);
                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt181=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt181=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt181=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 181, 0, input);
                        throw nvae;
                    }
                    switch (alt181) {
                        case 1 :
                            {
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7293); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);
                            int alt176=2;
                            int LA176_0 = input.LA(1);
                            if ( (LA176_0==LPAREN) ) {
                                alt176=1;
                            }
                            else if ( (LA176_0==LBRACK) ) {
                                alt176=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 176, 0, input);
                                throw nvae;
                            }
                            switch (alt176) {
                                case 1 :
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression7305); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                                    }
                                    break;
                                case 2 :
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression7311); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_evalRelationalExpression7314);
                            expression431=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression431.getTree());
                            int alt178=2;
                            int LA178_0 = input.LA(1);
                            if ( (LA178_0==COLON) ) {
                                alt178=1;
                            }
                            else if ( (LA178_0==COMMA||LA178_0==RPAREN||LA178_0==RBRACK) ) {
                                alt178=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 178, 0, input);
                                throw nvae;
                            }
                            switch (alt178) {
                                case 1 :
                                    {
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression7336); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression7339);
                                    expression432=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression432.getTree());
                                    }
                                    }
                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    loop177:
                                    do {
                                        int alt177=2;
                                        int LA177_0 = input.LA(1);
                                        if ( (LA177_0==COMMA) ) {
                                            alt177=1;
                                        }
                                        switch (alt177) {
                                    	case 1 :
                                    	    {
                                    	    COMMA433=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression7365); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA433);
                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression7367);
                                    	    expression434=expression();
                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression434.getTree());
                                    	    }
                                    	    break;
                                    	default :
                                    	    break loop177;
                                        }
                                    } while (true);
                                    }
                                    }
                                    break;
                            }
                            int alt179=2;
                            int LA179_0 = input.LA(1);
                            if ( (LA179_0==RPAREN) ) {
                                alt179=1;
                            }
                            else if ( (LA179_0==RBRACK) ) {
                                alt179=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 179, 0, input);
                                throw nvae;
                            }
                            switch (alt179) {
                                case 1 :
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression7393); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);
                                    }
                                    break;
                                case 2 :
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression7399); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);
                                    }
                                    break;
                            }
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (col == null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col == null && n != null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            if (col != null && n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());
                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            {
                            IN_SET435=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression7522); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET435);
                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression7524);
                            inSubSelectQuery436=inSubSelectQuery();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery436.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            {
                            BETWEEN437=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7570); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN437);
                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7572);
                            betweenList438=betweenList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList438.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);
                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            {
                            LIKE439=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7622); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE439);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7624);
                            concatenationExpr440=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr440.getTree());
                            int alt180=2;
                            int LA180_0 = input.LA(1);
                            if ( (LA180_0==ESCAPE) ) {
                                alt180=1;
                            }
                            switch (alt180) {
                                case 1 :
                                    {
                                    ESCAPE441=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7627); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE441);
                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7629);
                                    stringconstant442=stringconstant();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant442.getTree());
                                    }
                                    break;
                            }
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());
                                }
                                stream_stringconstant.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            {
                            REGEXP443=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7681); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP443);
                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7683);
                            concatenationExpr444=concatenationExpr();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr444.getTree());
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                            root_0 = (CommonTree)adaptor.nil();
                            if (n == null) {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            else 
                            {
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);
                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                }
                                stream_concatenationExpr.reset();
                                adaptor.addChild(root_0, root_1);
                                }
                            }
                            retval.tree = root_0;}
                            }
                            break;
                    }
                    }
                    break;
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr445 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7745);
            subQueryExpr445=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr445.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c=null;
        Token LOR448=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression446 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression447 = null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression449 = null;
        CommonTree c_tree=null;
        CommonTree LOR448_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7770);
            additiveExpression446=additiveExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression446.getTree());
            int alt184=2;
            int LA184_0 = input.LA(1);
            if ( (LA184_0==LOR) ) {
                alt184=1;
            }
            switch (alt184) {
                case 1 :
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7776); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);
                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7778);
                    additiveExpression447=additiveExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression447.getTree());
                    loop183:
                    do {
                        int alt183=2;
                        int LA183_0 = input.LA(1);
                        if ( (LA183_0==LOR) ) {
                            alt183=1;
                        }
                        switch (alt183) {
                    	case 1 :
                    	    {
                    	    LOR448=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7782); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR448);
                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7784);
                    	    additiveExpression449=additiveExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression449.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop183;
                        }
                    } while (true);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);
                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());
                }
                stream_additiveExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token PLUS451=null;
        Token MINUS452=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression450 = null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression453 = null;
        CommonTree PLUS451_tree=null;
        CommonTree MINUS452_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7825);
            multiplyExpression450=multiplyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression450.getTree());
            loop186:
            do {
                int alt186=2;
                int LA186_0 = input.LA(1);
                if ( (LA186_0==PLUS||LA186_0==MINUS) ) {
                    alt186=1;
                }
                switch (alt186) {
            	case 1 :
            	    {
            	    int alt185=2;
            	    int LA185_0 = input.LA(1);
            	    if ( (LA185_0==PLUS) ) {
            	        alt185=1;
            	    }
            	    else if ( (LA185_0==MINUS) ) {
            	        alt185=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 185, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt185) {
            	        case 1 :
            	            {
            	            PLUS451=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7830); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS451_tree = (CommonTree)adaptor.create(PLUS451);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS451_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            MINUS452=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7833); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS452_tree = (CommonTree)adaptor.create(MINUS452);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS452_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7837);
            	    multiplyExpression453=multiplyExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression453.getTree());
            	    }
            	    break;
            	default :
            	    break loop186;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR455=null;
        Token DIV456=null;
        Token MOD457=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression454 = null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression458 = null;
        CommonTree STAR455_tree=null;
        CommonTree DIV456_tree=null;
        CommonTree MOD457_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7851);
            unaryExpression454=unaryExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression454.getTree());
            loop188:
            do {
                int alt188=2;
                int LA188_0 = input.LA(1);
                if ( (LA188_0==STAR||(LA188_0>=DIV && LA188_0<=MOD)) ) {
                    alt188=1;
                }
                switch (alt188) {
            	case 1 :
            	    {
            	    int alt187=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt187=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt187=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt187=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 187, 0, input);
            	        throw nvae;
            	    }
            	    switch (alt187) {
            	        case 1 :
            	            {
            	            STAR455=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7856); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR455_tree = (CommonTree)adaptor.create(STAR455);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR455_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 2 :
            	            {
            	            DIV456=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7859); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV456_tree = (CommonTree)adaptor.create(DIV456);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV456_tree, root_0);
            	            }
            	            }
            	            break;
            	        case 3 :
            	            {
            	            MOD457=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7862); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD457_tree = (CommonTree)adaptor.create(MOD457);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD457_tree, root_0);
            	            }
            	            }
            	            break;
            	    }
            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7866);
            	    unaryExpression458=unaryExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression458.getTree());
            	    }
            	    break;
            	default :
            	    break loop188;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token d=null;
        Token MINUS459=null;
        Token LPAREN463=null;
        Token RPAREN465=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty460 = null;
        EsperEPL2GrammarParser.constant_return constant461 = null;
        EsperEPL2GrammarParser.substitution_return substitution462 = null;
        EsperEPL2GrammarParser.expression_return expression464 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass466 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass467 = null;
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction468 = null;
        EsperEPL2GrammarParser.builtinFunc_return builtinFunc469 = null;
        EsperEPL2GrammarParser.arrayExpression_return arrayExpression470 = null;
        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression471 = null;
        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression472 = null;
        CommonTree d_tree=null;
        CommonTree MINUS459_tree=null;
        CommonTree LPAREN463_tree=null;
        CommonTree RPAREN465_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            int alt191=9;
            alt191 = dfa191.predict(input);
            switch (alt191) {
                case 1 :
                    {
                    MINUS459=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7881); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS459);
                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7883);
                    eventProperty460=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty460.getTree());
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);
                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_constant_in_unaryExpression7896);
                    constant461=constant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant461.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_substitution_in_unaryExpression7901);
                    substitution462=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution462.getTree());
                    }
                    break;
                case 4 :
                    {
                    LPAREN463=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7906); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN463);
                    pushFollow(FOLLOW_expression_in_unaryExpression7908);
                    expression464=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression464.getTree());
                    RPAREN465=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7910); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN465);
                    int alt190=2;
                    int LA190_0 = input.LA(1);
                    if ( (LA190_0==DOT) ) {
                        alt190=1;
                    }
                    switch (alt190) {
                        case 1 :
                            {
                            d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7915); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_DOT.add(d);
                            pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7917);
                            libFunctionNoClass466=libFunctionNoClass();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass466.getTree());
                            loop189:
                            do {
                                int alt189=2;
                                int LA189_0 = input.LA(1);
                                if ( (LA189_0==DOT) ) {
                                    alt189=1;
                                }
                                switch (alt189) {
                            	case 1 :
                            	    {
                            	    d=(Token)match(input,DOT,FOLLOW_DOT_in_unaryExpression7922); if (state.failed) return retval; 
                            	    if ( state.backtracking==0 ) stream_DOT.add(d);
                            	    pushFollow(FOLLOW_libFunctionNoClass_in_unaryExpression7924);
                            	    libFunctionNoClass467=libFunctionNoClass();
                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass467.getTree());
                            	    }
                            	    break;
                            	default :
                            	    break loop189;
                                }
                            } while (true);
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (d != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DOT_EXPR, "DOT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_libFunctionNoClass.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_libFunctionNoClass.hasNext() ) {
                            adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                        }
                        stream_libFunctionNoClass.reset();
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        adaptor.addChild(root_0, stream_expression.nextTree());
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7961);
                    eventPropertyOrLibFunction468=eventPropertyOrLibFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction468.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7973);
                    builtinFunc469=builtinFunc();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc469.getTree());
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7979);
                    arrayExpression470=arrayExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression470.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7984);
                    subSelectExpression471=subSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression471.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7989);
                    existsSubSelectExpression472=existsSubSelectExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression472.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr473 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression8006);
            subQueryExpr473=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr473.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr474 = null;
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression8028);
            subQueryExpr474=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr474.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token EXISTS475=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr476 = null;
        CommonTree EXISTS475_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            {
            EXISTS475=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression8050); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS475);
            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression8052);
            subQueryExpr476=subQueryExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr476.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN477=null;
        Token SELECT478=null;
        Token DISTINCT479=null;
        Token FROM481=null;
        Token WHERE483=null;
        Token RPAREN485=null;
        EsperEPL2GrammarParser.selectionList_return selectionList480 = null;
        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr482 = null;
        EsperEPL2GrammarParser.whereClause_return whereClause484 = null;
        CommonTree LPAREN477_tree=null;
        CommonTree SELECT478_tree=null;
        CommonTree DISTINCT479_tree=null;
        CommonTree FROM481_tree=null;
        CommonTree WHERE483_tree=null;
        CommonTree RPAREN485_tree=null;
         paraphrases.push("subquery"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN477=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr8085); if (state.failed) return retval;
            SELECT478=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr8091); if (state.failed) return retval;
            int alt192=2;
            int LA192_0 = input.LA(1);
            if ( (LA192_0==DISTINCT) ) {
                alt192=1;
            }
            switch (alt192) {
                case 1 :
                    {
                    DISTINCT479=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr8094); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT479_tree = (CommonTree)adaptor.create(DISTINCT479);
                    adaptor.addChild(root_0, DISTINCT479_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_selectionList_in_subQueryExpr8097);
            selectionList480=selectionList();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionList480.getTree());
            FROM481=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr8104); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr8107);
            subSelectFilterExpr482=subSelectFilterExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr482.getTree());
            int alt193=2;
            int LA193_0 = input.LA(1);
            if ( (LA193_0==WHERE) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    {
                    WHERE483=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr8115); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr8118);
                    whereClause484=whereClause();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause484.getTree());
                    }
                    break;
            }
            RPAREN485=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr8127); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT487=null;
        Token DOT489=null;
        Token AS491=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression486 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression488 = null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression490 = null;
        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT487_tree=null;
        CommonTree DOT489_tree=null;
        CommonTree AS491_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr8151);
            eventFilterExpression486=eventFilterExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression486.getTree());
            int alt195=2;
            int LA195_0 = input.LA(1);
            if ( (LA195_0==DOT) ) {
                alt195=1;
            }
            switch (alt195) {
                case 1 :
                    {
                    DOT487=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8156); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT487);
                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8158);
                    viewExpression488=viewExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression488.getTree());
                    loop194:
                    do {
                        int alt194=2;
                        int LA194_0 = input.LA(1);
                        if ( (LA194_0==DOT) ) {
                            alt194=1;
                        }
                        switch (alt194) {
                    	case 1 :
                    	    {
                    	    DOT489=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr8161); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT489);
                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr8163);
                    	    viewExpression490=viewExpression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression490.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop194;
                        }
                    } while (true);
                    }
                    break;
            }
            int alt196=3;
            int LA196_0 = input.LA(1);
            if ( (LA196_0==AS) ) {
                alt196=1;
            }
            else if ( (LA196_0==IDENT) ) {
                alt196=2;
            }
            switch (alt196) {
                case 1 :
                    {
                    AS491=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr8170); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS491);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8174); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr8180); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            int alt197=3;
            int LA197_0 = input.LA(1);
            if ( (LA197_0==RETAINUNION) ) {
                alt197=1;
            }
            else if ( (LA197_0==RETAININTERSECTION) ) {
                alt197=2;
            }
            switch (alt197) {
                case 1 :
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr8187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);
                    }
                    break;
                case 2 :
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8191); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);
                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());
                }
                stream_viewExpression.reset();
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());
                }
                stream_ru.reset();
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());
                }
                stream_ri.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LCURLY492=null;
        Token COMMA494=null;
        Token RCURLY496=null;
        EsperEPL2GrammarParser.expression_return expression493 = null;
        EsperEPL2GrammarParser.expression_return expression495 = null;
        CommonTree LCURLY492_tree=null;
        CommonTree COMMA494_tree=null;
        CommonTree RCURLY496_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            LCURLY492=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression8231); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY492);
            int alt199=2;
            int LA199_0 = input.LA(1);
            if ( (LA199_0==WINDOW||LA199_0==ESCAPE||(LA199_0>=NOT_EXPR && LA199_0<=EVERY_EXPR)||(LA199_0>=SUM && LA199_0<=COUNT)||LA199_0==CASE||LA199_0==OUTER||(LA199_0>=JOIN && LA199_0<=FULL)||(LA199_0>=EVENTS && LA199_0<=LAST)||(LA199_0>=UNIDIRECTIONAL && LA199_0<=CURRENT_TIMESTAMP)||LA199_0==SNAPSHOT||(LA199_0>=VARIABLE && LA199_0<=INDEX)||(LA199_0>=BOOLEAN_TRUE && LA199_0<=VALUE_NULL)||(LA199_0>=DEFINE && LA199_0<=MATCHES)||LA199_0==WHILE||(LA199_0>=MERGE && LA199_0<=MATCHED)||LA199_0==NUM_DOUBLE||(LA199_0>=IDENT && LA199_0<=LPAREN)||(LA199_0>=PLUS && LA199_0<=QUESTION)||(LA199_0>=STRING_LITERAL && LA199_0<=QUOTED_STRING_LITERAL)||LA199_0==MINUS||LA199_0==LCURLY||LA199_0==NUM_INT||(LA199_0>=TICKED_STRING_LITERAL && LA199_0<=NUM_FLOAT)) ) {
                alt199=1;
            }
            switch (alt199) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression8234);
                    expression493=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression493.getTree());
                    loop198:
                    do {
                        int alt198=2;
                        int LA198_0 = input.LA(1);
                        if ( (LA198_0==COMMA) ) {
                            alt198=1;
                        }
                        switch (alt198) {
                    	case 1 :
                    	    {
                    	    COMMA494=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression8237); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA494);
                    	    pushFollow(FOLLOW_expression_in_arrayExpression8239);
                    	    expression495=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression495.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop198;
                        }
                    } while (true);
                    }
                    break;
            }
            RCURLY496=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression8246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY496);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token SUM497=null;
        Token LPAREN498=null;
        Token ALL499=null;
        Token DISTINCT500=null;
        Token RPAREN502=null;
        Token AVG503=null;
        Token LPAREN504=null;
        Token ALL505=null;
        Token DISTINCT506=null;
        Token RPAREN508=null;
        Token COUNT509=null;
        Token LPAREN510=null;
        Token ALL511=null;
        Token DISTINCT512=null;
        Token STAR514=null;
        Token RPAREN515=null;
        Token MEDIAN516=null;
        Token LPAREN517=null;
        Token ALL518=null;
        Token DISTINCT519=null;
        Token RPAREN521=null;
        Token STDDEV522=null;
        Token LPAREN523=null;
        Token ALL524=null;
        Token DISTINCT525=null;
        Token RPAREN527=null;
        Token AVEDEV528=null;
        Token LPAREN529=null;
        Token ALL530=null;
        Token DISTINCT531=null;
        Token RPAREN533=null;
        Token COALESCE537=null;
        Token LPAREN538=null;
        Token COMMA540=null;
        Token COMMA542=null;
        Token RPAREN544=null;
        Token PREVIOUS545=null;
        Token LPAREN546=null;
        Token COMMA548=null;
        Token RPAREN550=null;
        Token PREVIOUSTAIL551=null;
        Token LPAREN552=null;
        Token COMMA554=null;
        Token RPAREN556=null;
        Token PREVIOUSCOUNT557=null;
        Token LPAREN558=null;
        Token RPAREN560=null;
        Token PREVIOUSWINDOW561=null;
        Token LPAREN562=null;
        Token RPAREN564=null;
        Token PRIOR565=null;
        Token LPAREN566=null;
        Token NUM_INT567=null;
        Token COMMA568=null;
        Token RPAREN570=null;
        Token INSTANCEOF571=null;
        Token LPAREN572=null;
        Token COMMA574=null;
        Token COMMA576=null;
        Token RPAREN578=null;
        Token TYPEOF579=null;
        Token LPAREN580=null;
        Token RPAREN582=null;
        Token CAST583=null;
        Token LPAREN584=null;
        Token COMMA586=null;
        Token AS587=null;
        Token RPAREN589=null;
        Token EXISTS590=null;
        Token LPAREN591=null;
        Token RPAREN593=null;
        Token CURRENT_TIMESTAMP594=null;
        Token LPAREN595=null;
        Token RPAREN596=null;
        EsperEPL2GrammarParser.expression_return expression501 = null;
        EsperEPL2GrammarParser.expression_return expression507 = null;
        EsperEPL2GrammarParser.expression_return expression513 = null;
        EsperEPL2GrammarParser.expression_return expression520 = null;
        EsperEPL2GrammarParser.expression_return expression526 = null;
        EsperEPL2GrammarParser.expression_return expression532 = null;
        EsperEPL2GrammarParser.firstAggregation_return firstAggregation534 = null;
        EsperEPL2GrammarParser.lastAggregation_return lastAggregation535 = null;
        EsperEPL2GrammarParser.windowAggregation_return windowAggregation536 = null;
        EsperEPL2GrammarParser.expression_return expression539 = null;
        EsperEPL2GrammarParser.expression_return expression541 = null;
        EsperEPL2GrammarParser.expression_return expression543 = null;
        EsperEPL2GrammarParser.expression_return expression547 = null;
        EsperEPL2GrammarParser.expression_return expression549 = null;
        EsperEPL2GrammarParser.expression_return expression553 = null;
        EsperEPL2GrammarParser.expression_return expression555 = null;
        EsperEPL2GrammarParser.expression_return expression559 = null;
        EsperEPL2GrammarParser.expression_return expression563 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty569 = null;
        EsperEPL2GrammarParser.expression_return expression573 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier575 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier577 = null;
        EsperEPL2GrammarParser.expression_return expression581 = null;
        EsperEPL2GrammarParser.expression_return expression585 = null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier588 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty592 = null;
        CommonTree SUM497_tree=null;
        CommonTree LPAREN498_tree=null;
        CommonTree ALL499_tree=null;
        CommonTree DISTINCT500_tree=null;
        CommonTree RPAREN502_tree=null;
        CommonTree AVG503_tree=null;
        CommonTree LPAREN504_tree=null;
        CommonTree ALL505_tree=null;
        CommonTree DISTINCT506_tree=null;
        CommonTree RPAREN508_tree=null;
        CommonTree COUNT509_tree=null;
        CommonTree LPAREN510_tree=null;
        CommonTree ALL511_tree=null;
        CommonTree DISTINCT512_tree=null;
        CommonTree STAR514_tree=null;
        CommonTree RPAREN515_tree=null;
        CommonTree MEDIAN516_tree=null;
        CommonTree LPAREN517_tree=null;
        CommonTree ALL518_tree=null;
        CommonTree DISTINCT519_tree=null;
        CommonTree RPAREN521_tree=null;
        CommonTree STDDEV522_tree=null;
        CommonTree LPAREN523_tree=null;
        CommonTree ALL524_tree=null;
        CommonTree DISTINCT525_tree=null;
        CommonTree RPAREN527_tree=null;
        CommonTree AVEDEV528_tree=null;
        CommonTree LPAREN529_tree=null;
        CommonTree ALL530_tree=null;
        CommonTree DISTINCT531_tree=null;
        CommonTree RPAREN533_tree=null;
        CommonTree COALESCE537_tree=null;
        CommonTree LPAREN538_tree=null;
        CommonTree COMMA540_tree=null;
        CommonTree COMMA542_tree=null;
        CommonTree RPAREN544_tree=null;
        CommonTree PREVIOUS545_tree=null;
        CommonTree LPAREN546_tree=null;
        CommonTree COMMA548_tree=null;
        CommonTree RPAREN550_tree=null;
        CommonTree PREVIOUSTAIL551_tree=null;
        CommonTree LPAREN552_tree=null;
        CommonTree COMMA554_tree=null;
        CommonTree RPAREN556_tree=null;
        CommonTree PREVIOUSCOUNT557_tree=null;
        CommonTree LPAREN558_tree=null;
        CommonTree RPAREN560_tree=null;
        CommonTree PREVIOUSWINDOW561_tree=null;
        CommonTree LPAREN562_tree=null;
        CommonTree RPAREN564_tree=null;
        CommonTree PRIOR565_tree=null;
        CommonTree LPAREN566_tree=null;
        CommonTree NUM_INT567_tree=null;
        CommonTree COMMA568_tree=null;
        CommonTree RPAREN570_tree=null;
        CommonTree INSTANCEOF571_tree=null;
        CommonTree LPAREN572_tree=null;
        CommonTree COMMA574_tree=null;
        CommonTree COMMA576_tree=null;
        CommonTree RPAREN578_tree=null;
        CommonTree TYPEOF579_tree=null;
        CommonTree LPAREN580_tree=null;
        CommonTree RPAREN582_tree=null;
        CommonTree CAST583_tree=null;
        CommonTree LPAREN584_tree=null;
        CommonTree COMMA586_tree=null;
        CommonTree AS587_tree=null;
        CommonTree RPAREN589_tree=null;
        CommonTree EXISTS590_tree=null;
        CommonTree LPAREN591_tree=null;
        CommonTree RPAREN593_tree=null;
        CommonTree CURRENT_TIMESTAMP594_tree=null;
        CommonTree LPAREN595_tree=null;
        CommonTree RPAREN596_tree=null;
        try {
            int alt213=20;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt213=1;
                }
                break;
            case AVG:
                {
                alt213=2;
                }
                break;
            case COUNT:
                {
                alt213=3;
                }
                break;
            case MEDIAN:
                {
                alt213=4;
                }
                break;
            case STDDEV:
                {
                alt213=5;
                }
                break;
            case AVEDEV:
                {
                alt213=6;
                }
                break;
            case FIRST:
                {
                alt213=7;
                }
                break;
            case LAST:
                {
                alt213=8;
                }
                break;
            case WINDOW:
                {
                alt213=9;
                }
                break;
            case COALESCE:
                {
                alt213=10;
                }
                break;
            case PREVIOUS:
                {
                alt213=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt213=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt213=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt213=14;
                }
                break;
            case PRIOR:
                {
                alt213=15;
                }
                break;
            case INSTANCEOF:
                {
                alt213=16;
                }
                break;
            case TYPEOF:
                {
                alt213=17;
                }
                break;
            case CAST:
                {
                alt213=18;
                }
                break;
            case EXISTS:
                {
                alt213=19;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt213=20;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 213, 0, input);
                throw nvae;
            }
            switch (alt213) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM497=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc8269); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM497_tree = (CommonTree)adaptor.create(SUM497);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM497_tree, root_0);
                    }
                    LPAREN498=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8272); if (state.failed) return retval;
                    int alt200=3;
                    int LA200_0 = input.LA(1);
                    if ( (LA200_0==ALL) ) {
                        alt200=1;
                    }
                    else if ( (LA200_0==DISTINCT) ) {
                        alt200=2;
                    }
                    switch (alt200) {
                        case 1 :
                            {
                            ALL499=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8276); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT500=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8281); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT500_tree = (CommonTree)adaptor.create(DISTINCT500);
                            adaptor.addChild(root_0, DISTINCT500_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8285);
                    expression501=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression501.getTree());
                    RPAREN502=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8287); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG503=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc8293); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG503_tree = (CommonTree)adaptor.create(AVG503);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG503_tree, root_0);
                    }
                    LPAREN504=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8296); if (state.failed) return retval;
                    int alt201=3;
                    int LA201_0 = input.LA(1);
                    if ( (LA201_0==ALL) ) {
                        alt201=1;
                    }
                    else if ( (LA201_0==DISTINCT) ) {
                        alt201=2;
                    }
                    switch (alt201) {
                        case 1 :
                            {
                            ALL505=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8300); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT506=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8305); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT506_tree = (CommonTree)adaptor.create(DISTINCT506);
                            adaptor.addChild(root_0, DISTINCT506_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8309);
                    expression507=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression507.getTree());
                    RPAREN508=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8311); if (state.failed) return retval;
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT509=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc8317); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT509_tree = (CommonTree)adaptor.create(COUNT509);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT509_tree, root_0);
                    }
                    LPAREN510=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8320); if (state.failed) return retval;
                    int alt203=2;
                    int LA203_0 = input.LA(1);
                    if ( (LA203_0==WINDOW||LA203_0==ESCAPE||(LA203_0>=NOT_EXPR && LA203_0<=EVERY_EXPR)||(LA203_0>=SUM && LA203_0<=COUNT)||LA203_0==CASE||LA203_0==OUTER||(LA203_0>=JOIN && LA203_0<=FULL)||(LA203_0>=DISTINCT && LA203_0<=ALL)||(LA203_0>=EVENTS && LA203_0<=LAST)||(LA203_0>=UNIDIRECTIONAL && LA203_0<=CURRENT_TIMESTAMP)||LA203_0==SNAPSHOT||(LA203_0>=VARIABLE && LA203_0<=INDEX)||(LA203_0>=BOOLEAN_TRUE && LA203_0<=VALUE_NULL)||(LA203_0>=DEFINE && LA203_0<=MATCHES)||LA203_0==WHILE||(LA203_0>=MERGE && LA203_0<=MATCHED)||LA203_0==NUM_DOUBLE||(LA203_0>=IDENT && LA203_0<=LPAREN)||(LA203_0>=PLUS && LA203_0<=QUESTION)||(LA203_0>=STRING_LITERAL && LA203_0<=QUOTED_STRING_LITERAL)||LA203_0==MINUS||LA203_0==LCURLY||LA203_0==NUM_INT||(LA203_0>=TICKED_STRING_LITERAL && LA203_0<=NUM_FLOAT)) ) {
                        alt203=1;
                    }
                    else if ( (LA203_0==STAR) ) {
                        alt203=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 203, 0, input);
                        throw nvae;
                    }
                    switch (alt203) {
                        case 1 :
                            {
                            {
                            int alt202=3;
                            int LA202_0 = input.LA(1);
                            if ( (LA202_0==ALL) ) {
                                alt202=1;
                            }
                            else if ( (LA202_0==DISTINCT) ) {
                                alt202=2;
                            }
                            switch (alt202) {
                                case 1 :
                                    {
                                    ALL511=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8332); if (state.failed) return retval;
                                    }
                                    break;
                                case 2 :
                                    {
                                    DISTINCT512=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8337); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT512_tree = (CommonTree)adaptor.create(DISTINCT512);
                                    adaptor.addChild(root_0, DISTINCT512_tree);
                                    }
                                    }
                                    break;
                            }
                            pushFollow(FOLLOW_expression_in_builtinFunc8341);
                            expression513=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression513.getTree());
                            }
                            }
                            break;
                        case 2 :
                            {
                            {
                            STAR514=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc8352); if (state.failed) return retval;
                            }
                            }
                            break;
                    }
                    RPAREN515=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8363); if (state.failed) return retval;
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN516=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc8369); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN516_tree = (CommonTree)adaptor.create(MEDIAN516);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN516_tree, root_0);
                    }
                    LPAREN517=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8372); if (state.failed) return retval;
                    int alt204=3;
                    int LA204_0 = input.LA(1);
                    if ( (LA204_0==ALL) ) {
                        alt204=1;
                    }
                    else if ( (LA204_0==DISTINCT) ) {
                        alt204=2;
                    }
                    switch (alt204) {
                        case 1 :
                            {
                            ALL518=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8376); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT519=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8381); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT519_tree = (CommonTree)adaptor.create(DISTINCT519);
                            adaptor.addChild(root_0, DISTINCT519_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8385);
                    expression520=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression520.getTree());
                    RPAREN521=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8387); if (state.failed) return retval;
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV522=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc8393); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV522_tree = (CommonTree)adaptor.create(STDDEV522);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV522_tree, root_0);
                    }
                    LPAREN523=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8396); if (state.failed) return retval;
                    int alt205=3;
                    int LA205_0 = input.LA(1);
                    if ( (LA205_0==ALL) ) {
                        alt205=1;
                    }
                    else if ( (LA205_0==DISTINCT) ) {
                        alt205=2;
                    }
                    switch (alt205) {
                        case 1 :
                            {
                            ALL524=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8400); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT525=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8405); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT525_tree = (CommonTree)adaptor.create(DISTINCT525);
                            adaptor.addChild(root_0, DISTINCT525_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8409);
                    expression526=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression526.getTree());
                    RPAREN527=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8411); if (state.failed) return retval;
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV528=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc8417); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV528_tree = (CommonTree)adaptor.create(AVEDEV528);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV528_tree, root_0);
                    }
                    LPAREN529=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8420); if (state.failed) return retval;
                    int alt206=3;
                    int LA206_0 = input.LA(1);
                    if ( (LA206_0==ALL) ) {
                        alt206=1;
                    }
                    else if ( (LA206_0==DISTINCT) ) {
                        alt206=2;
                    }
                    switch (alt206) {
                        case 1 :
                            {
                            ALL530=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc8424); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            DISTINCT531=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc8429); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT531_tree = (CommonTree)adaptor.create(DISTINCT531);
                            adaptor.addChild(root_0, DISTINCT531_tree);
                            }
                            }
                            break;
                    }
                    pushFollow(FOLLOW_expression_in_builtinFunc8433);
                    expression532=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression532.getTree());
                    RPAREN533=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8435); if (state.failed) return retval;
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc8441);
                    firstAggregation534=firstAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation534.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc8446);
                    lastAggregation535=lastAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation535.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc8451);
                    windowAggregation536=windowAggregation();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation536.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE537=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc8456); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE537_tree = (CommonTree)adaptor.create(COALESCE537);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE537_tree, root_0);
                    }
                    LPAREN538=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8459); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8462);
                    expression539=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression539.getTree());
                    COMMA540=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8464); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8467);
                    expression541=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression541.getTree());
                    loop207:
                    do {
                        int alt207=2;
                        int LA207_0 = input.LA(1);
                        if ( (LA207_0==COMMA) ) {
                            alt207=1;
                        }
                        switch (alt207) {
                    	case 1 :
                    	    {
                    	    COMMA542=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8470); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc8473);
                    	    expression543=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression543.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop207;
                        }
                    } while (true);
                    RPAREN544=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8477); if (state.failed) return retval;
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS545=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc8483); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS545_tree = (CommonTree)adaptor.create(PREVIOUS545);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS545_tree, root_0);
                    }
                    LPAREN546=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8486); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8489);
                    expression547=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression547.getTree());
                    int alt208=2;
                    int LA208_0 = input.LA(1);
                    if ( (LA208_0==COMMA) ) {
                        alt208=1;
                    }
                    switch (alt208) {
                        case 1 :
                            {
                            COMMA548=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8492); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8495);
                            expression549=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression549.getTree());
                            }
                            break;
                    }
                    RPAREN550=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8499); if (state.failed) return retval;
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL551=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc8505); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL551_tree = (CommonTree)adaptor.create(PREVIOUSTAIL551);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSTAIL551_tree, root_0);
                    }
                    LPAREN552=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8508); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8511);
                    expression553=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression553.getTree());
                    int alt209=2;
                    int LA209_0 = input.LA(1);
                    if ( (LA209_0==COMMA) ) {
                        alt209=1;
                    }
                    switch (alt209) {
                        case 1 :
                            {
                            COMMA554=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8514); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc8517);
                            expression555=expression();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression555.getTree());
                            }
                            break;
                    }
                    RPAREN556=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8521); if (state.failed) return retval;
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSCOUNT557=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc8527); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT557_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT557);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT557_tree, root_0);
                    }
                    LPAREN558=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8530); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8533);
                    expression559=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression559.getTree());
                    RPAREN560=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8535); if (state.failed) return retval;
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSWINDOW561=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc8541); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSWINDOW561_tree = (CommonTree)adaptor.create(PREVIOUSWINDOW561);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSWINDOW561_tree, root_0);
                    }
                    LPAREN562=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8544); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8547);
                    expression563=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression563.getTree());
                    RPAREN564=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8549); if (state.failed) return retval;
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR565=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc8555); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR565_tree = (CommonTree)adaptor.create(PRIOR565);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR565_tree, root_0);
                    }
                    LPAREN566=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8558); if (state.failed) return retval;
                    NUM_INT567=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc8561); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT567_tree = (CommonTree)adaptor.create(NUM_INT567);
                    adaptor.addChild(root_0, NUM_INT567_tree);
                    }
                    COMMA568=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8563); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8566);
                    eventProperty569=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty569.getTree());
                    RPAREN570=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8568); if (state.failed) return retval;
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF571=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc8578); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF571_tree = (CommonTree)adaptor.create(INSTANCEOF571);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF571_tree, root_0);
                    }
                    LPAREN572=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8581); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8584);
                    expression573=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression573.getTree());
                    COMMA574=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8586); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8589);
                    classIdentifier575=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier575.getTree());
                    loop210:
                    do {
                        int alt210=2;
                        int LA210_0 = input.LA(1);
                        if ( (LA210_0==COMMA) ) {
                            alt210=1;
                        }
                        switch (alt210) {
                    	case 1 :
                    	    {
                    	    COMMA576=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8592); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8595);
                    	    classIdentifier577=classIdentifier();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier577.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop210;
                        }
                    } while (true);
                    RPAREN578=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8599); if (state.failed) return retval;
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF579=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_builtinFunc8605); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF579_tree = (CommonTree)adaptor.create(TYPEOF579);
                    root_0 = (CommonTree)adaptor.becomeRoot(TYPEOF579_tree, root_0);
                    }
                    LPAREN580=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8608); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8611);
                    expression581=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression581.getTree());
                    RPAREN582=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8613); if (state.failed) return retval;
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST583=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8619); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST583_tree = (CommonTree)adaptor.create(CAST583);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST583_tree, root_0);
                    }
                    LPAREN584=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8622); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8625);
                    expression585=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression585.getTree());
                    int alt211=2;
                    int LA211_0 = input.LA(1);
                    if ( (LA211_0==COMMA) ) {
                        alt211=1;
                    }
                    else if ( (LA211_0==AS) ) {
                        alt211=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 211, 0, input);
                        throw nvae;
                    }
                    switch (alt211) {
                        case 1 :
                            {
                            COMMA586=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8628); if (state.failed) return retval;
                            }
                            break;
                        case 2 :
                            {
                            AS587=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8633); if (state.failed) return retval;
                            }
                            break;
                    }
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8637);
                    classIdentifier588=classIdentifier();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier588.getTree());
                    RPAREN589=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8639); if (state.failed) return retval;
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EXISTS590=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8645); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS590_tree = (CommonTree)adaptor.create(EXISTS590);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS590_tree, root_0);
                    }
                    LPAREN591=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8648); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8651);
                    eventProperty592=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty592.getTree());
                    RPAREN593=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8653); if (state.failed) return retval;
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CURRENT_TIMESTAMP594=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP594_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP594);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP594_tree, root_0);
                    }
                    int alt212=2;
                    int LA212_0 = input.LA(1);
                    if ( (LA212_0==LPAREN) ) {
                        alt212=1;
                    }
                    switch (alt212) {
                        case 1 :
                            {
                            LPAREN595=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8663); if (state.failed) return retval;
                            RPAREN596=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8666); if (state.failed) return retval;
                            }
                            break;
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token FIRST597=null;
        Token LPAREN598=null;
        Token COMMA600=null;
        Token RPAREN602=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr599 = null;
        EsperEPL2GrammarParser.expression_return expression601 = null;
        CommonTree FIRST597_tree=null;
        CommonTree LPAREN598_tree=null;
        CommonTree COMMA600_tree=null;
        CommonTree RPAREN602_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            FIRST597=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8681); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST597);
            LPAREN598=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8683); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN598);
            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation8685);
            accessAggExpr599=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr599.getTree());
            int alt214=2;
            int LA214_0 = input.LA(1);
            if ( (LA214_0==COMMA) ) {
                alt214=1;
            }
            switch (alt214) {
                case 1 :
                    {
                    COMMA600=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8688); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA600);
                    pushFollow(FOLLOW_expression_in_firstAggregation8690);
                    expression601=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression601.getTree());
                    }
                    break;
            }
            RPAREN602=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8694); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN602);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST603=null;
        Token LPAREN604=null;
        Token COMMA606=null;
        Token RPAREN608=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr605 = null;
        EsperEPL2GrammarParser.expression_return expression607 = null;
        CommonTree LAST603_tree=null;
        CommonTree LPAREN604_tree=null;
        CommonTree COMMA606_tree=null;
        CommonTree RPAREN608_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            LAST603=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8719); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST603);
            LPAREN604=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8721); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN604);
            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8723);
            accessAggExpr605=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr605.getTree());
            int alt215=2;
            int LA215_0 = input.LA(1);
            if ( (LA215_0==COMMA) ) {
                alt215=1;
            }
            switch (alt215) {
                case 1 :
                    {
                    COMMA606=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA606);
                    pushFollow(FOLLOW_expression_in_lastAggregation8728);
                    expression607=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression607.getTree());
                    }
                    break;
            }
            RPAREN608=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8732); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN608);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token WINDOW609=null;
        Token LPAREN610=null;
        Token RPAREN612=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr611 = null;
        CommonTree WINDOW609_tree=null;
        CommonTree LPAREN610_tree=null;
        CommonTree RPAREN612_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            {
            WINDOW609=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8758); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW609);
            LPAREN610=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN610);
            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8762);
            accessAggExpr611=accessAggExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr611.getTree());
            RPAREN612=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8764); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN612);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);
                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector613 = null;
        EsperEPL2GrammarParser.expression_return expression614 = null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            int alt216=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt216=1;
                }
                break;
            case IDENT:
                {
                int LA216_2 = input.LA(2);
                if ( (LA216_2==DOT) ) {
                    int LA216_69 = input.LA(3);
                    if ( (LA216_69==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt216=2;
                    }
                    else if ( (LA216_69==WINDOW||LA216_69==ESCAPE||LA216_69==EVERY_EXPR||(LA216_69>=SUM && LA216_69<=COUNT)||LA216_69==OUTER||(LA216_69>=JOIN && LA216_69<=FULL)||(LA216_69>=EVENTS && LA216_69<=LAST)||(LA216_69>=UNIDIRECTIONAL && LA216_69<=PREVIOUSTAIL)||LA216_69==PRIOR||(LA216_69>=WEEKDAY && LA216_69<=CAST)||LA216_69==SNAPSHOT||(LA216_69>=VARIABLE && LA216_69<=INDEX)||(LA216_69>=DEFINE && LA216_69<=MATCHES)||LA216_69==WHILE||(LA216_69>=MERGE && LA216_69<=MATCHED)||LA216_69==IDENT||LA216_69==TICKED_STRING_LITERAL) ) {
                        alt216=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 216, 69, input);
                        throw nvae;
                    }
                }
                else if ( ((LA216_2>=IN_SET && LA216_2<=REGEXP)||(LA216_2>=OR_EXPR && LA216_2<=NOT_EXPR)||LA216_2==IS||LA216_2==COMMA||(LA216_2>=LPAREN && LA216_2<=EQUALS)||LA216_2==LBRACK||(LA216_2>=STAR && LA216_2<=QUESTION)||(LA216_2>=BAND && LA216_2<=MOD)||LA216_2==ESCAPECHAR) ) {
                    alt216=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 216, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt216=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);
                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8794); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8810);
                    propertyStreamSelector613=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector613.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expression_in_accessAggExpr8815);
                    expression614=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression614.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token MAX615=null;
        Token MIN616=null;
        Token LPAREN617=null;
        Token COMMA619=null;
        Token COMMA621=null;
        Token RPAREN623=null;
        EsperEPL2GrammarParser.expression_return expression618 = null;
        EsperEPL2GrammarParser.expression_return expression620 = null;
        EsperEPL2GrammarParser.expression_return expression622 = null;
        CommonTree MAX615_tree=null;
        CommonTree MIN616_tree=null;
        CommonTree LPAREN617_tree=null;
        CommonTree COMMA619_tree=null;
        CommonTree COMMA621_tree=null;
        CommonTree RPAREN623_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt217=2;
            int LA217_0 = input.LA(1);
            if ( (LA217_0==MAX) ) {
                alt217=1;
            }
            else if ( (LA217_0==MIN) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);
                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    {
                    MAX615=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8828); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX615_tree = (CommonTree)adaptor.create(MAX615);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX615_tree, root_0);
                    }
                    }
                    break;
                case 2 :
                    {
                    MIN616=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN616_tree = (CommonTree)adaptor.create(MIN616);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN616_tree, root_0);
                    }
                    }
                    break;
            }
            LPAREN617=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8837); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8840);
            expression618=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression618.getTree());
            int alt219=2;
            int LA219_0 = input.LA(1);
            if ( (LA219_0==COMMA) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    {
                    COMMA619=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8843); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8846);
                    expression620=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression620.getTree());
                    loop218:
                    do {
                        int alt218=2;
                        int LA218_0 = input.LA(1);
                        if ( (LA218_0==COMMA) ) {
                            alt218=1;
                        }
                        switch (alt218) {
                    	case 1 :
                    	    {
                    	    COMMA621=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8849); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8852);
                    	    expression622=expression();
                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression622.getTree());
                    	    }
                    	    break;
                    	default :
                    	    break loop218;
                        }
                    } while (true);
                    }
                    break;
            }
            RPAREN623=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8859); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty624 = null;
        EsperEPL2GrammarParser.libFunction_return libFunction625 = null;
        try {
            int alt220=2;
            int LA220_0 = input.LA(1);
            if ( (LA220_0==IDENT) ) {
                int LA220_1 = input.LA(2);
                if ( (LA220_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt220=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA220_297 = input.LA(4);
                        if ( ((LA220_297>=IN_SET && LA220_297<=REGEXP)||(LA220_297>=OR_EXPR && LA220_297<=NOT_EXPR)||LA220_297==IS||LA220_297==COMMA||LA220_297==EQUALS||(LA220_297>=STAR && LA220_297<=PLUS)||(LA220_297>=BAND && LA220_297<=MOD)) ) {
                            alt220=2;
                        }
                        else if ( (LA220_297==RPAREN) ) {
                            int LA220_682 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 682, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 297, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA220_298 = input.LA(4);
                        if ( ((LA220_298>=IN_SET && LA220_298<=REGEXP)||(LA220_298>=OR_EXPR && LA220_298<=NOT_EXPR)||LA220_298==IS||LA220_298==COMMA||LA220_298==EQUALS||(LA220_298>=STAR && LA220_298<=PLUS)||(LA220_298>=BAND && LA220_298<=MOD)) ) {
                            alt220=2;
                        }
                        else if ( (LA220_298==RPAREN) ) {
                            int LA220_708 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 708, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 298, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 50, input);
                        throw nvae;
                    }
                }
                else if ( (LA220_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==DOT) ) {
                    int LA220_52 = input.LA(3);
                    if ( (LA220_52==IDENT) ) {
                        int LA220_358 = input.LA(4);
                        if ( (LA220_358==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==LPAREN) ) {
                            int LA220_716 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 716, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA220_358==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_358==DOT) ) {
                            int LA220_773 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 773, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 358, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA220_52==TICKED_STRING_LITERAL) ) {
                        int LA220_359 = input.LA(4);
                        if ( (LA220_359==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==LPAREN) ) {
                            int LA220_776 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 776, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA220_359==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_359==DOT) ) {
                            int LA220_833 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 833, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 359, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA220_52==MAX) ) {
                        int LA220_360 = input.LA(4);
                        if ( (LA220_360==LPAREN) ) {
                            int LA220_834 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 834, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA220_360==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_360==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 360, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA220_52==MIN) ) {
                        int LA220_361 = input.LA(4);
                        if ( (LA220_361==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==LPAREN) ) {
                            int LA220_896 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 896, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA220_361==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_361==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 361, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA220_52==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_52==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 52, input);
                        throw nvae;
                    }
                }
                else if ( (LA220_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA220_0==TICKED_STRING_LITERAL) ) {
                int LA220_2 = input.LA(2);
                if ( (LA220_2==DOT) ) {
                    int LA220_108 = input.LA(3);
                    if ( (LA220_108==IDENT) ) {
                        int LA220_405 = input.LA(4);
                        if ( (LA220_405==LPAREN) ) {
                            int LA220_954 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 954, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA220_405==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_405==DOT) ) {
                            int LA220_1013 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1013, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 405, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA220_108==TICKED_STRING_LITERAL) ) {
                        int LA220_406 = input.LA(4);
                        if ( (LA220_406==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==LPAREN) ) {
                            int LA220_1016 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1016, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA220_406==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_406==DOT) ) {
                            int LA220_1073 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1073, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 406, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA220_108==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==MAX) ) {
                        int LA220_413 = input.LA(4);
                        if ( (LA220_413==LPAREN) ) {
                            int LA220_1074 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1074, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA220_413==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_413==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 413, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA220_108==MIN) ) {
                        int LA220_414 = input.LA(4);
                        if ( (LA220_414==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==LPAREN) ) {
                            int LA220_1136 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1136, input);
                                throw nvae;
                            }
                        }
                        else if ( (LA220_414==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else if ( (LA220_414==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt220=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 414, input);
                            throw nvae;
                        }
                    }
                    else if ( (LA220_108==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==MERGE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else if ( (LA220_108==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt220=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 108, input);
                        throw nvae;
                    }
                }
                else if ( (LA220_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt220=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA220_461 = input.LA(4);
                        if ( ((LA220_461>=IN_SET && LA220_461<=REGEXP)||(LA220_461>=OR_EXPR && LA220_461<=NOT_EXPR)||LA220_461==IS||LA220_461==COMMA||LA220_461==EQUALS||(LA220_461>=STAR && LA220_461<=PLUS)||(LA220_461>=BAND && LA220_461<=MOD)) ) {
                            alt220=2;
                        }
                        else if ( (LA220_461==RPAREN) ) {
                            int LA220_1214 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1214, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 461, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA220_462 = input.LA(4);
                        if ( ((LA220_462>=IN_SET && LA220_462<=REGEXP)||(LA220_462>=OR_EXPR && LA220_462<=NOT_EXPR)||LA220_462==IS||LA220_462==COMMA||LA220_462==EQUALS||(LA220_462>=STAR && LA220_462<=PLUS)||(LA220_462>=BAND && LA220_462<=MOD)) ) {
                            alt220=2;
                        }
                        else if ( (LA220_462==RPAREN) ) {
                            int LA220_1240 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1240, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 462, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 111, input);
                        throw nvae;
                    }
                }
                else if ( (LA220_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA220_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==MAX) ) {
                int LA220_9 = input.LA(2);
                if ( (LA220_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt220=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA220_531 = input.LA(4);
                        if ( ((LA220_531>=IN_SET && LA220_531<=REGEXP)||(LA220_531>=OR_EXPR && LA220_531<=NOT_EXPR)||LA220_531==IS||LA220_531==COMMA||LA220_531==EQUALS||(LA220_531>=STAR && LA220_531<=PLUS)||(LA220_531>=BAND && LA220_531<=MOD)) ) {
                            alt220=2;
                        }
                        else if ( (LA220_531==RPAREN) ) {
                            int LA220_1266 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1266, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 531, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA220_532 = input.LA(4);
                        if ( ((LA220_532>=IN_SET && LA220_532<=REGEXP)||(LA220_532>=OR_EXPR && LA220_532<=NOT_EXPR)||LA220_532==IS||LA220_532==COMMA||LA220_532==EQUALS||(LA220_532>=STAR && LA220_532<=PLUS)||(LA220_532>=BAND && LA220_532<=MOD)) ) {
                            alt220=2;
                        }
                        else if ( (LA220_532==RPAREN) ) {
                            int LA220_1292 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1292, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 532, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 170, input);
                        throw nvae;
                    }
                }
                else if ( (LA220_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 9, input);
                    throw nvae;
                }
            }
            else if ( (LA220_0==MIN) ) {
                int LA220_10 = input.LA(2);
                if ( (LA220_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case TYPEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case MERGE:
                    case MATCHED:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt220=2;
                        }
                        break;
                    case STRING_LITERAL:
                        {
                        int LA220_601 = input.LA(4);
                        if ( ((LA220_601>=IN_SET && LA220_601<=REGEXP)||(LA220_601>=OR_EXPR && LA220_601<=NOT_EXPR)||LA220_601==IS||LA220_601==COMMA||LA220_601==EQUALS||(LA220_601>=STAR && LA220_601<=PLUS)||(LA220_601>=BAND && LA220_601<=MOD)) ) {
                            alt220=2;
                        }
                        else if ( (LA220_601==RPAREN) ) {
                            int LA220_1318 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1318, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 601, input);
                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA220_602 = input.LA(4);
                        if ( ((LA220_602>=IN_SET && LA220_602<=REGEXP)||(LA220_602>=OR_EXPR && LA220_602<=NOT_EXPR)||LA220_602==IS||LA220_602==COMMA||LA220_602==EQUALS||(LA220_602>=STAR && LA220_602<=PLUS)||(LA220_602>=BAND && LA220_602<=MOD)) ) {
                            alt220=2;
                        }
                        else if ( (LA220_602==RPAREN) ) {
                            int LA220_1344 = input.LA(5);
                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt220=1;
                            }
                            else if ( (true) ) {
                                alt220=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 220, 1344, input);
                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 220, 602, input);
                            throw nvae;
                        }
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 220, 228, input);
                        throw nvae;
                    }
                }
                else if ( (LA220_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==FOLLOWMAX_END) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else if ( (LA220_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt220=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 220, 10, input);
                    throw nvae;
                }
            }
            else if ( (LA220_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==MERGE) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==MATCHED) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==TYPEOF) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else if ( (LA220_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt220=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 220, 0, input);
                throw nvae;
            }
            switch (alt220) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8878);
                    eventProperty624=eventProperty();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty624.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8883);
                    libFunction625=libFunction();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction625.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT627=null;
        EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass626 = null;
        EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass628 = null;
        CommonTree DOT627_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_libFunctionWithClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionWithClass");
        RewriteRuleSubtreeStream stream_libFunctionNoClass=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionNoClass");
        try {
            {
            pushFollow(FOLLOW_libFunctionWithClass_in_libFunction8895);
            libFunctionWithClass626=libFunctionWithClass();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_libFunctionWithClass.add(libFunctionWithClass626.getTree());
            loop221:
            do {
                int alt221=2;
                int LA221_0 = input.LA(1);
                if ( (LA221_0==DOT) ) {
                    alt221=1;
                }
                switch (alt221) {
            	case 1 :
            	    {
            	    DOT627=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8898); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT627);
            	    pushFollow(FOLLOW_libFunctionNoClass_in_libFunction8900);
            	    libFunctionNoClass628=libFunctionNoClass();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_libFunctionNoClass.add(libFunctionNoClass628.getTree());
            	    }
            	    break;
            	default :
            	    break loop221;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNC_CHAIN, "LIB_FUNC_CHAIN"), root_1);
                adaptor.addChild(root_1, stream_libFunctionWithClass.nextTree());
                while ( stream_libFunctionNoClass.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionNoClass.nextTree());
                }
                stream_libFunctionNoClass.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionWithClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionWithClass_return libFunctionWithClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionWithClass_return retval = new EsperEPL2GrammarParser.libFunctionWithClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT630=null;
        Token LPAREN632=null;
        Token RPAREN634=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy629 = null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent631 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs633 = null;
        CommonTree DOT630_tree=null;
        CommonTree LPAREN632_tree=null;
        CommonTree RPAREN634_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            int alt222=2;
            int LA222_0 = input.LA(1);
            if ( (LA222_0==IDENT) ) {
                int LA222_1 = input.LA(2);
                if ( (LA222_1==DOT) ) {
                    alt222=1;
                }
            }
            else if ( (LA222_0==TICKED_STRING_LITERAL) ) {
                int LA222_2 = input.LA(2);
                if ( (LA222_2==DOT) ) {
                    alt222=1;
                }
            }
            switch (alt222) {
                case 1 :
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8930);
                    classIdentifierNonGreedy629=classIdentifierNonGreedy();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy629.getTree());
                    DOT630=(Token)match(input,DOT,FOLLOW_DOT_in_libFunctionWithClass8932); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT630);
                    }
                    break;
            }
            pushFollow(FOLLOW_funcIdent_in_libFunctionWithClass8936);
            funcIdent631=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent631.getTree());
            LPAREN632=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionWithClass8938); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN632);
            int alt223=2;
            int LA223_0 = input.LA(1);
            if ( (LA223_0==WINDOW||LA223_0==ESCAPE||(LA223_0>=NOT_EXPR && LA223_0<=EVERY_EXPR)||(LA223_0>=SUM && LA223_0<=COUNT)||LA223_0==CASE||LA223_0==OUTER||(LA223_0>=JOIN && LA223_0<=FULL)||(LA223_0>=DISTINCT && LA223_0<=ALL)||(LA223_0>=EVENTS && LA223_0<=LAST)||(LA223_0>=UNIDIRECTIONAL && LA223_0<=CURRENT_TIMESTAMP)||LA223_0==SNAPSHOT||(LA223_0>=VARIABLE && LA223_0<=INDEX)||(LA223_0>=BOOLEAN_TRUE && LA223_0<=VALUE_NULL)||(LA223_0>=DEFINE && LA223_0<=MATCHES)||LA223_0==WHILE||(LA223_0>=MERGE && LA223_0<=MATCHED)||LA223_0==NUM_DOUBLE||(LA223_0>=IDENT && LA223_0<=LPAREN)||(LA223_0>=PLUS && LA223_0<=QUESTION)||(LA223_0>=STRING_LITERAL && LA223_0<=QUOTED_STRING_LITERAL)||LA223_0==MINUS||LA223_0==LCURLY||LA223_0==NUM_INT||(LA223_0>=TICKED_STRING_LITERAL && LA223_0<=NUM_FLOAT)) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionWithClass8941);
                    libFunctionArgs633=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs633.getTree());
                    }
                    break;
            }
            RPAREN634=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionWithClass8945); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN634);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());
                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionNoClass_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionNoClass_return libFunctionNoClass() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionNoClass_return retval = new EsperEPL2GrammarParser.libFunctionNoClass_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN636=null;
        Token RPAREN638=null;
        EsperEPL2GrammarParser.funcIdent_return funcIdent635 = null;
        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs637 = null;
        CommonTree LPAREN636_tree=null;
        CommonTree RPAREN638_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            {
            pushFollow(FOLLOW_funcIdent_in_libFunctionNoClass8974);
            funcIdent635=funcIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent635.getTree());
            LPAREN636=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunctionNoClass8976); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN636);
            int alt224=2;
            int LA224_0 = input.LA(1);
            if ( (LA224_0==WINDOW||LA224_0==ESCAPE||(LA224_0>=NOT_EXPR && LA224_0<=EVERY_EXPR)||(LA224_0>=SUM && LA224_0<=COUNT)||LA224_0==CASE||LA224_0==OUTER||(LA224_0>=JOIN && LA224_0<=FULL)||(LA224_0>=DISTINCT && LA224_0<=ALL)||(LA224_0>=EVENTS && LA224_0<=LAST)||(LA224_0>=UNIDIRECTIONAL && LA224_0<=CURRENT_TIMESTAMP)||LA224_0==SNAPSHOT||(LA224_0>=VARIABLE && LA224_0<=INDEX)||(LA224_0>=BOOLEAN_TRUE && LA224_0<=VALUE_NULL)||(LA224_0>=DEFINE && LA224_0<=MATCHES)||LA224_0==WHILE||(LA224_0>=MERGE && LA224_0<=MATCHED)||LA224_0==NUM_DOUBLE||(LA224_0>=IDENT && LA224_0<=LPAREN)||(LA224_0>=PLUS && LA224_0<=QUESTION)||(LA224_0>=STRING_LITERAL && LA224_0<=QUOTED_STRING_LITERAL)||LA224_0==MINUS||LA224_0==LCURLY||LA224_0==NUM_INT||(LA224_0>=TICKED_STRING_LITERAL && LA224_0<=NUM_FLOAT)) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunctionNoClass8979);
                    libFunctionArgs637=libFunctionArgs();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs637.getTree());
                    }
                    break;
            }
            RPAREN638=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunctionNoClass8983); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN638);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());
                }
                stream_libFunctionArgs.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent639 = null;
        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        try {
            int alt225=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt225=1;
                }
                break;
            case MAX:
                {
                alt225=2;
                }
                break;
            case MIN:
                {
                alt225=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 225, 0, input);
                throw nvae;
            }
            switch (alt225) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_escapableIdent_in_funcIdent9009);
                    escapableIdent639=escapableIdent();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent639.getTree());
                    }
                    break;
                case 2 :
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent9016); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent9028); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ALL640=null;
        Token DISTINCT641=null;
        Token COMMA643=null;
        EsperEPL2GrammarParser.expression_return expression642 = null;
        EsperEPL2GrammarParser.expression_return expression644 = null;
        CommonTree ALL640_tree=null;
        CommonTree DISTINCT641_tree=null;
        CommonTree COMMA643_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            int alt226=3;
            int LA226_0 = input.LA(1);
            if ( (LA226_0==ALL) ) {
                alt226=1;
            }
            else if ( (LA226_0==DISTINCT) ) {
                alt226=2;
            }
            switch (alt226) {
                case 1 :
                    {
                    ALL640=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs9046); if (state.failed) return retval;
                    }
                    break;
                case 2 :
                    {
                    DISTINCT641=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs9051); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT641_tree = (CommonTree)adaptor.create(DISTINCT641);
                    adaptor.addChild(root_0, DISTINCT641_tree);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_expression_in_libFunctionArgs9055);
            expression642=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression642.getTree());
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);
                if ( (LA227_0==COMMA) ) {
                    alt227=1;
                }
                switch (alt227) {
            	case 1 :
            	    {
            	    COMMA643=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs9058); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs9061);
            	    expression644=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression644.getTree());
            	    }
            	    break;
            	default :
            	    break loop227;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token AND_EXPR646=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr645 = null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr647 = null;
        CommonTree AND_EXPR646_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_concatenationExpr_in_betweenList9075);
            concatenationExpr645=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr645.getTree());
            AND_EXPR646=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList9077); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList9080);
            concatenationExpr647=concatenationExpr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr647.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.followedByExpression_return followedByExpression648 = null;
         paraphrases.push("pattern expression"); 
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_followedByExpression_in_patternExpression9108);
            followedByExpression648=followedByExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression648.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression649 = null;
        EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat650 = null;
        RewriteRuleSubtreeStream stream_followedByRepeat=new RewriteRuleSubtreeStream(adaptor,"rule followedByRepeat");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
         boolean fb = false; 
        try {
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression9127);
            orExpression649=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression649.getTree());
            loop228:
            do {
                int alt228=2;
                int LA228_0 = input.LA(1);
                if ( ((LA228_0>=FOLLOWED_BY && LA228_0<=FOLLOWMAX_BEGIN)) ) {
                    alt228=1;
                }
                switch (alt228) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_followedByRepeat_in_followedByExpression9130);
            	    followedByRepeat650=followedByRepeat();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_followedByRepeat.add(followedByRepeat650.getTree());
            	    if ( state.backtracking==0 ) {
            	       fb = true; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop228;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (fb == true) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_2);
                adaptor.addChild(root_2, stream_orExpression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_followedByRepeat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_followedByRepeat.hasNext() ) {
                    adaptor.addChild(root_1, stream_followedByRepeat.nextTree());
                }
                stream_followedByRepeat.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class followedByRepeat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.followedByRepeat_return followedByRepeat() throws RecognitionException {
        EsperEPL2GrammarParser.followedByRepeat_return retval = new EsperEPL2GrammarParser.followedByRepeat_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token f=null;
        Token g=null;
        Token FOLLOWMAX_END652=null;
        EsperEPL2GrammarParser.expression_return expression651 = null;
        EsperEPL2GrammarParser.orExpression_return orExpression653 = null;
        CommonTree f_tree=null;
        CommonTree g_tree=null;
        CommonTree FOLLOWMAX_END652_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleTokenStream stream_FOLLOWMAX_END=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_END");
        RewriteRuleTokenStream stream_FOLLOWMAX_BEGIN=new RewriteRuleTokenStream(adaptor,"token FOLLOWMAX_BEGIN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            {
            int alt229=2;
            int LA229_0 = input.LA(1);
            if ( (LA229_0==FOLLOWED_BY) ) {
                alt229=1;
            }
            else if ( (LA229_0==FOLLOWMAX_BEGIN) ) {
                alt229=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 229, 0, input);
                throw nvae;
            }
            switch (alt229) {
                case 1 :
                    {
                    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByRepeat9183); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);
                    }
                    break;
                case 2 :
                    {
                    {
                    g=(Token)match(input,FOLLOWMAX_BEGIN,FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9190); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_BEGIN.add(g);
                    pushFollow(FOLLOW_expression_in_followedByRepeat9192);
                    expression651=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression651.getTree());
                    FOLLOWMAX_END652=(Token)match(input,FOLLOWMAX_END,FOLLOW_FOLLOWMAX_END_in_followedByRepeat9194); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FOLLOWMAX_END.add(FOLLOWMAX_END652);
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_orExpression_in_followedByRepeat9198);
            orExpression653=orExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression653.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_ITEM, "FOLLOWED_BY_ITEM"), root_1);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, stream_orExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression654 = null;
        EsperEPL2GrammarParser.andExpression_return andExpression655 = null;
        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            {
            pushFollow(FOLLOW_andExpression_in_orExpression9227);
            andExpression654=andExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression654.getTree());
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);
                if ( (LA230_0==OR_EXPR) ) {
                    alt230=1;
                }
                switch (alt230) {
            	case 1 :
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression9232); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);
            	    pushFollow(FOLLOW_andExpression_in_orExpression9234);
            	    andExpression655=andExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression655.getTree());
            	    }
            	    break;
            	default :
            	    break loop230;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (o != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);
                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());
                }
                stream_andExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression656 = null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression657 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression9266);
            matchUntilExpression656=matchUntilExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression656.getTree());
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);
                if ( (LA231_0==AND_EXPR) ) {
                    alt231=1;
                }
                switch (alt231) {
            	case 1 :
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression9271); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);
            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression9273);
            	    matchUntilExpression657=matchUntilExpression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression657.getTree());
            	    }
            	    break;
            	default :
            	    break loop231;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);
                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());
                }
                stream_matchUntilExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression658 = null;
        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression659 = null;
        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt232=2;
            int LA232_0 = input.LA(1);
            if ( (LA232_0==LBRACK) ) {
                alt232=1;
            }
            switch (alt232) {
                case 1 :
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression9308);
                    r=matchUntilRange();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                    }
                    break;
            }
            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9312);
            qualifyExpression658=qualifyExpression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression658.getTree());
            int alt233=2;
            int LA233_0 = input.LA(1);
            if ( (LA233_0==UNTIL) ) {
                alt233=1;
            }
            switch (alt233) {
                case 1 :
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression9317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);
                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression9319);
                    qualifyExpression659=qualifyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression659.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (r != null && a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (r != null && a == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());
                }
                stream_qualifyExpression.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;
        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList660 = null;
        EsperEPL2GrammarParser.guardPostFix_return guardPostFix661 = null;
        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            {
            int alt236=2;
            int LA236_0 = input.LA(1);
            if ( ((LA236_0>=NOT_EXPR && LA236_0<=EVERY_DISTINCT_EXPR)) ) {
                alt236=1;
            }
            switch (alt236) {
                case 1 :
                    {
                    int alt234=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt234=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt234=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt234=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 234, 0, input);
                        throw nvae;
                    }
                    switch (alt234) {
                        case 1 :
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression9384); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);
                            }
                            break;
                        case 2 :
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression9390); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);
                            }
                            break;
                        case 3 :
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9396); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);
                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression9398);
                            distinctExpressionList660=distinctExpressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList660.getTree());
                            }
                            break;
                    }
                    int alt235=2;
                    int LA235_0 = input.LA(1);
                    if ( (LA235_0==LBRACK) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression9404);
                            r=matchUntilRange();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());
                            }
                            break;
                    }
                    }
                    break;
            }
            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression9413);
            guardPostFix661=guardPostFix();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix661.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (e != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (e != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (n != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (d != null && r != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);
                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);
                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN662=null;
        Token COMMA664=null;
        Token RPAREN666=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom663 = null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom665 = null;
        CommonTree LPAREN662_tree=null;
        CommonTree COMMA664_tree=null;
        CommonTree RPAREN666_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            {
            LPAREN662=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList9528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN662);
            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9530);
            distinctExpressionAtom663=distinctExpressionAtom();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom663.getTree());
            loop237:
            do {
                int alt237=2;
                int LA237_0 = input.LA(1);
                if ( (LA237_0==COMMA) ) {
                    alt237=1;
                }
                switch (alt237) {
            	case 1 :
            	    {
            	    COMMA664=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList9533); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA664);
            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList9535);
            	    distinctExpressionAtom665=distinctExpressionAtom();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom665.getTree());
            	    }
            	    break;
            	default :
            	    break loop237;
                }
            } while (true);
            RPAREN666=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList9539); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN666);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);
                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());
                }
                stream_distinctExpressionAtom.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime667 = null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_distinctExpressionAtom9562);
            expressionWithTime667=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime667.getTree());
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN670=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression668 = null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression669 = null;
        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression671 = null;
        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression672 = null;
        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN670_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            {
            int alt238=2;
            int LA238_0 = input.LA(1);
            if ( (LA238_0==IDENT||LA238_0==TICKED_STRING_LITERAL) ) {
                alt238=1;
            }
            else if ( (LA238_0==LPAREN) ) {
                alt238=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 238, 0, input);
                throw nvae;
            }
            switch (alt238) {
                case 1 :
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix9577);
                    atomicExpression668=atomicExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression668.getTree());
                    }
                    break;
                case 2 :
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix9583); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);
                    pushFollow(FOLLOW_patternExpression_in_guardPostFix9585);
                    patternExpression669=patternExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression669.getTree());
                    RPAREN670=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix9587); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN670);
                    }
                    break;
            }
            int alt239=3;
            int LA239_0 = input.LA(1);
            if ( (LA239_0==WHERE) ) {
                alt239=1;
            }
            else if ( (LA239_0==WHILE) ) {
                alt239=2;
            }
            switch (alt239) {
                case 1 :
                    {
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix9594); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);
                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix9596);
                    guardWhereExpression671=guardWhereExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression671.getTree());
                    }
                    }
                    break;
                case 2 :
                    {
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix9604); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);
                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix9606);
                    guardWhileExpression672=guardWhileExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression672.getTree());
                    }
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (wh != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (wi != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());
                }
                stream_atomicExpression.reset();
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());
                }
                stream_patternExpression.reset();
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.observerExpression_return observerExpression673 = null;
        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression674 = null;
        try {
            int alt240=2;
            int LA240_0 = input.LA(1);
            if ( (LA240_0==IDENT) ) {
                int LA240_1 = input.LA(2);
                if ( (LA240_1==COLON) ) {
                    alt240=1;
                }
                else if ( (LA240_1==EOF||(LA240_1>=OR_EXPR && LA240_1<=AND_EXPR)||LA240_1==WHERE||LA240_1==UNTIL||LA240_1==WHILE||(LA240_1>=LPAREN && LA240_1<=RBRACK)||(LA240_1>=FOLLOWED_BY && LA240_1<=FOLLOWMAX_BEGIN)) ) {
                    alt240=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 240, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA240_0==TICKED_STRING_LITERAL) ) {
                alt240=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 240, 0, input);
                throw nvae;
            }
            switch (alt240) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_observerExpression_in_atomicExpression9668);
                    observerExpression673=observerExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression673.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression9672);
                    patternFilterExpression674=patternFilterExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression674.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON675=null;
        Token LPAREN676=null;
        Token RPAREN678=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList677 = null;
        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON675_tree=null;
        CommonTree LPAREN676_tree=null;
        CommonTree RPAREN678_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9687); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);
            COLON675=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression9689); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON675);
            int alt241=2;
            int LA241_0 = input.LA(1);
            if ( (LA241_0==IDENT) ) {
                alt241=1;
            }
            else if ( (LA241_0==AT) ) {
                alt241=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 241, 0, input);
                throw nvae;
            }
            switch (alt241) {
                case 1 :
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression9694); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);
                    }
                    break;
                case 2 :
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression9700); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);
                    }
                    break;
            }
            LPAREN676=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression9703); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN676);
            int alt242=2;
            int LA242_0 = input.LA(1);
            if ( (LA242_0==WINDOW||LA242_0==ESCAPE||(LA242_0>=NOT_EXPR && LA242_0<=EVERY_EXPR)||(LA242_0>=SUM && LA242_0<=COUNT)||LA242_0==CASE||LA242_0==OUTER||(LA242_0>=JOIN && LA242_0<=FULL)||(LA242_0>=EVENTS && LA242_0<=LAST)||(LA242_0>=UNIDIRECTIONAL && LA242_0<=CURRENT_TIMESTAMP)||LA242_0==SNAPSHOT||(LA242_0>=VARIABLE && LA242_0<=INDEX)||(LA242_0>=BOOLEAN_TRUE && LA242_0<=VALUE_NULL)||(LA242_0>=DEFINE && LA242_0<=MATCHES)||LA242_0==WHILE||(LA242_0>=MERGE && LA242_0<=MATCHED)||LA242_0==NUM_DOUBLE||(LA242_0>=IDENT && LA242_0<=LPAREN)||LA242_0==LBRACK||LA242_0==STAR||(LA242_0>=PLUS && LA242_0<=QUESTION)||(LA242_0>=STRING_LITERAL && LA242_0<=QUOTED_STRING_LITERAL)||LA242_0==MINUS||LA242_0==LCURLY||LA242_0==NUM_INT||(LA242_0>=TICKED_STRING_LITERAL && LA242_0<=NUM_FLOAT)) ) {
                alt242=1;
            }
            switch (alt242) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression9705);
                    expressionWithTimeList677=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList677.getTree());
                    }
                    break;
            }
            RPAREN678=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression9708); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN678);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);
                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());
                }
                stream_expressionWithTimeList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token IDENT679=null;
        Token COLON680=null;
        Token IDENT681=null;
        Token LPAREN682=null;
        Token RPAREN684=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList683 = null;
        CommonTree IDENT679_tree=null;
        CommonTree COLON680_tree=null;
        CommonTree IDENT681_tree=null;
        CommonTree LPAREN682_tree=null;
        CommonTree RPAREN684_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            IDENT679=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9757); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT679_tree = (CommonTree)adaptor.create(IDENT679);
            adaptor.addChild(root_0, IDENT679_tree);
            }
            COLON680=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression9759); if (state.failed) return retval;
            IDENT681=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9762); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT681_tree = (CommonTree)adaptor.create(IDENT681);
            adaptor.addChild(root_0, IDENT681_tree);
            }
            LPAREN682=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression9764); if (state.failed) return retval;
            int alt243=2;
            int LA243_0 = input.LA(1);
            if ( (LA243_0==WINDOW||LA243_0==ESCAPE||(LA243_0>=NOT_EXPR && LA243_0<=EVERY_EXPR)||(LA243_0>=SUM && LA243_0<=COUNT)||LA243_0==CASE||LA243_0==OUTER||(LA243_0>=JOIN && LA243_0<=FULL)||(LA243_0>=EVENTS && LA243_0<=LAST)||(LA243_0>=UNIDIRECTIONAL && LA243_0<=CURRENT_TIMESTAMP)||LA243_0==SNAPSHOT||(LA243_0>=VARIABLE && LA243_0<=INDEX)||(LA243_0>=BOOLEAN_TRUE && LA243_0<=VALUE_NULL)||(LA243_0>=DEFINE && LA243_0<=MATCHES)||LA243_0==WHILE||(LA243_0>=MERGE && LA243_0<=MATCHED)||LA243_0==NUM_DOUBLE||(LA243_0>=IDENT && LA243_0<=LPAREN)||LA243_0==LBRACK||LA243_0==STAR||(LA243_0>=PLUS && LA243_0<=QUESTION)||(LA243_0>=STRING_LITERAL && LA243_0<=QUOTED_STRING_LITERAL)||LA243_0==MINUS||LA243_0==LCURLY||LA243_0==NUM_INT||(LA243_0>=TICKED_STRING_LITERAL && LA243_0<=NUM_FLOAT)) ) {
                alt243=1;
            }
            switch (alt243) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression9768);
                    expressionWithTimeList683=expressionWithTimeList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList683.getTree());
                    }
                    break;
            }
            RPAREN684=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression9772); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LPAREN685=null;
        Token RPAREN687=null;
        EsperEPL2GrammarParser.expression_return expression686 = null;
        CommonTree LPAREN685_tree=null;
        CommonTree RPAREN687_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LPAREN685=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression9785); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression9788);
            expression686=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression686.getTree());
            RPAREN687=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression9790); if (state.failed) return retval;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token c1=null;
        Token c2=null;
        Token LBRACK688=null;
        Token RBRACK692=null;
        EsperEPL2GrammarParser.expression_return expression689 = null;
        EsperEPL2GrammarParser.expression_return expression690 = null;
        EsperEPL2GrammarParser.expression_return expression691 = null;
        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK688_tree=null;
        CommonTree RBRACK692_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            {
            LBRACK688=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange9811); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK688);
            int alt246=2;
            int LA246_0 = input.LA(1);
            if ( (LA246_0==WINDOW||LA246_0==ESCAPE||(LA246_0>=NOT_EXPR && LA246_0<=EVERY_EXPR)||(LA246_0>=SUM && LA246_0<=COUNT)||LA246_0==CASE||LA246_0==OUTER||(LA246_0>=JOIN && LA246_0<=FULL)||(LA246_0>=EVENTS && LA246_0<=LAST)||(LA246_0>=UNIDIRECTIONAL && LA246_0<=CURRENT_TIMESTAMP)||LA246_0==SNAPSHOT||(LA246_0>=VARIABLE && LA246_0<=INDEX)||(LA246_0>=BOOLEAN_TRUE && LA246_0<=VALUE_NULL)||(LA246_0>=DEFINE && LA246_0<=MATCHES)||LA246_0==WHILE||(LA246_0>=MERGE && LA246_0<=MATCHED)||LA246_0==NUM_DOUBLE||(LA246_0>=IDENT && LA246_0<=LPAREN)||(LA246_0>=PLUS && LA246_0<=QUESTION)||(LA246_0>=STRING_LITERAL && LA246_0<=QUOTED_STRING_LITERAL)||LA246_0==MINUS||LA246_0==LCURLY||LA246_0==NUM_INT||(LA246_0>=TICKED_STRING_LITERAL && LA246_0<=NUM_FLOAT)) ) {
                alt246=1;
            }
            else if ( (LA246_0==COLON) ) {
                alt246=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);
                throw nvae;
            }
            switch (alt246) {
                case 1 :
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9818);
                    expression689=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression689.getTree());
                    int alt245=2;
                    int LA245_0 = input.LA(1);
                    if ( (LA245_0==COLON) ) {
                        alt245=1;
                    }
                    switch (alt245) {
                        case 1 :
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9823); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);
                            int alt244=2;
                            int LA244_0 = input.LA(1);
                            if ( (LA244_0==WINDOW||LA244_0==ESCAPE||(LA244_0>=NOT_EXPR && LA244_0<=EVERY_EXPR)||(LA244_0>=SUM && LA244_0<=COUNT)||LA244_0==CASE||LA244_0==OUTER||(LA244_0>=JOIN && LA244_0<=FULL)||(LA244_0>=EVENTS && LA244_0<=LAST)||(LA244_0>=UNIDIRECTIONAL && LA244_0<=CURRENT_TIMESTAMP)||LA244_0==SNAPSHOT||(LA244_0>=VARIABLE && LA244_0<=INDEX)||(LA244_0>=BOOLEAN_TRUE && LA244_0<=VALUE_NULL)||(LA244_0>=DEFINE && LA244_0<=MATCHES)||LA244_0==WHILE||(LA244_0>=MERGE && LA244_0<=MATCHED)||LA244_0==NUM_DOUBLE||(LA244_0>=IDENT && LA244_0<=LPAREN)||(LA244_0>=PLUS && LA244_0<=QUESTION)||(LA244_0>=STRING_LITERAL && LA244_0<=QUOTED_STRING_LITERAL)||LA244_0==MINUS||LA244_0==LCURLY||LA244_0==NUM_INT||(LA244_0>=TICKED_STRING_LITERAL && LA244_0<=NUM_FLOAT)) ) {
                                alt244=1;
                            }
                            switch (alt244) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9826);
                                    expression690=expression();
                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression690.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }
                                    }
                                    break;
                            }
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);
                    pushFollow(FOLLOW_expression_in_matchUntilRange9848);
                    expression691=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression691.getTree());
                    }
                    break;
            }
            RBRACK692=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9859); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK692);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (c1 != null && !isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c1 != null && isopen) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (c2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS693=null;
        Token LPAREN695=null;
        Token RPAREN697=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier694 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList696 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression698 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS693_tree=null;
        CommonTree LPAREN695_tree=null;
        CommonTree RPAREN697_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt247=2;
            int LA247_0 = input.LA(1);
            if ( (LA247_0==IDENT) ) {
                int LA247_1 = input.LA(2);
                if ( (LA247_1==EQUALS) ) {
                    alt247=1;
                }
            }
            switch (alt247) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9946); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS693=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9948); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS693);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9957);
            classIdentifier694=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier694.getTree());
            int alt249=2;
            int LA249_0 = input.LA(1);
            if ( (LA249_0==LPAREN) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    {
                    LPAREN695=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN695);
                    int alt248=2;
                    int LA248_0 = input.LA(1);
                    if ( (LA248_0==WINDOW||LA248_0==ESCAPE||(LA248_0>=NOT_EXPR && LA248_0<=EVERY_EXPR)||(LA248_0>=SUM && LA248_0<=COUNT)||LA248_0==CASE||LA248_0==OUTER||(LA248_0>=JOIN && LA248_0<=FULL)||(LA248_0>=EVENTS && LA248_0<=LAST)||(LA248_0>=UNIDIRECTIONAL && LA248_0<=CURRENT_TIMESTAMP)||LA248_0==SNAPSHOT||(LA248_0>=VARIABLE && LA248_0<=INDEX)||(LA248_0>=BOOLEAN_TRUE && LA248_0<=VALUE_NULL)||(LA248_0>=DEFINE && LA248_0<=MATCHES)||LA248_0==WHILE||(LA248_0>=MERGE && LA248_0<=MATCHED)||LA248_0==NUM_DOUBLE||(LA248_0>=IDENT && LA248_0<=LPAREN)||(LA248_0>=PLUS && LA248_0<=QUESTION)||(LA248_0>=STRING_LITERAL && LA248_0<=QUOTED_STRING_LITERAL)||LA248_0==MINUS||LA248_0==LCURLY||LA248_0==NUM_INT||(LA248_0>=TICKED_STRING_LITERAL && LA248_0<=NUM_FLOAT)) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9970);
                            expressionList696=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList696.getTree());
                            }
                            break;
                    }
                    RPAREN697=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9973); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN697);
                    }
                    break;
            }
            int alt250=2;
            int LA250_0 = input.LA(1);
            if ( (LA250_0==LBRACK) ) {
                alt250=1;
            }
            switch (alt250) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9985);
                    propertyExpression698=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression698.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic699 = null;
        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic700 = null;
        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression10030);
            propertyExpressionAtomic699=propertyExpressionAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic699.getTree());
            loop251:
            do {
                int alt251=2;
                int LA251_0 = input.LA(1);
                if ( (LA251_0==LBRACK) ) {
                    alt251=1;
                }
                switch (alt251) {
            	case 1 :
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression10033);
            	    propertyExpressionAtomic700=propertyExpressionAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic700.getTree());
            	    }
            	    break;
            	default :
            	    break loop251;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);
                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());
                }
                stream_propertyExpressionAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK701=null;
        Token SELECT702=null;
        Token FROM704=null;
        Token AS706=null;
        Token IDENT707=null;
        Token WHERE708=null;
        Token RBRACK710=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList703 = null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty705 = null;
        EsperEPL2GrammarParser.expression_return expression709 = null;
        CommonTree LBRACK701_tree=null;
        CommonTree SELECT702_tree=null;
        CommonTree FROM704_tree=null;
        CommonTree AS706_tree=null;
        CommonTree IDENT707_tree=null;
        CommonTree WHERE708_tree=null;
        CommonTree RBRACK710_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            {
            LBRACK701=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic10063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK701);
            int alt252=2;
            int LA252_0 = input.LA(1);
            if ( (LA252_0==SELECT) ) {
                alt252=1;
            }
            switch (alt252) {
                case 1 :
                    {
                    SELECT702=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic10066); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT702);
                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic10068);
                    propertySelectionList703=propertySelectionList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList703.getTree());
                    FROM704=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic10070); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM704);
                    }
                    break;
            }
            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic10074);
            eventProperty705=eventProperty();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty705.getTree());
            int alt253=2;
            int LA253_0 = input.LA(1);
            if ( (LA253_0==AS) ) {
                alt253=1;
            }
            switch (alt253) {
                case 1 :
                    {
                    AS706=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic10077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS706);
                    IDENT707=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic10079); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT707);
                    }
                    break;
            }
            int alt254=2;
            int LA254_0 = input.LA(1);
            if ( (LA254_0==WHERE) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    WHERE708=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic10084); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE708);
                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic10086);
                    expression709=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression709.getTree());
                    }
                    break;
            }
            RBRACK710=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic10090); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK710);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());
                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());
                }
                stream_IDENT.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());
                }
                stream_expression.reset();
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA712=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement711 = null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement713 = null;
        CommonTree COMMA712_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10140);
            propertySelectionListElement711=propertySelectionListElement();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement711.getTree());
            loop255:
            do {
                int alt255=2;
                int LA255_0 = input.LA(1);
                if ( (LA255_0==COMMA) ) {
                    alt255=1;
                }
                switch (alt255) {
            	case 1 :
            	    {
            	    COMMA712=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList10143); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList10146);
            	    propertySelectionListElement713=propertySelectionListElement();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement713.getTree());
            	    }
            	    break;
            	default :
            	    break loop255;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token AS716=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector714 = null;
        EsperEPL2GrammarParser.expression_return expression715 = null;
        CommonTree s_tree=null;
        CommonTree AS716_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            int alt257=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt257=1;
                }
                break;
            case IDENT:
                {
                int LA257_2 = input.LA(2);
                if ( (LA257_2==DOT) ) {
                    int LA257_69 = input.LA(3);
                    if ( (LA257_69==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt257=2;
                    }
                    else if ( (LA257_69==WINDOW||LA257_69==ESCAPE||LA257_69==EVERY_EXPR||(LA257_69>=SUM && LA257_69<=COUNT)||LA257_69==OUTER||(LA257_69>=JOIN && LA257_69<=FULL)||(LA257_69>=EVENTS && LA257_69<=LAST)||(LA257_69>=UNIDIRECTIONAL && LA257_69<=PREVIOUSTAIL)||LA257_69==PRIOR||(LA257_69>=WEEKDAY && LA257_69<=CAST)||LA257_69==SNAPSHOT||(LA257_69>=VARIABLE && LA257_69<=INDEX)||(LA257_69>=DEFINE && LA257_69<=MATCHES)||LA257_69==WHILE||(LA257_69>=MERGE && LA257_69<=MATCHED)||LA257_69==IDENT||LA257_69==TICKED_STRING_LITERAL) ) {
                        alt257=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 257, 69, input);
                        throw nvae;
                    }
                }
                else if ( ((LA257_2>=IN_SET && LA257_2<=REGEXP)||(LA257_2>=OR_EXPR && LA257_2<=NOT_EXPR)||LA257_2==AS||LA257_2==FROM||LA257_2==IS||LA257_2==COMMA||LA257_2==LPAREN||LA257_2==EQUALS||LA257_2==LBRACK||(LA257_2>=STAR && LA257_2<=QUESTION)||(LA257_2>=BAND && LA257_2<=MOD)||LA257_2==ESCAPECHAR) ) {
                    alt257=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 257, 2, input);
                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case TYPEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case MERGE:
            case MATCHED:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt257=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 257, 0, input);
                throw nvae;
            }
            switch (alt257) {
                case 1 :
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement10172); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement10188);
                    propertyStreamSelector714=propertyStreamSelector();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector714.getTree());
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement10193);
                    expression715=expression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression715.getTree());
                    int alt256=2;
                    int LA256_0 = input.LA(1);
                    if ( (LA256_0==AS) ) {
                        alt256=1;
                    }
                    switch (alt256) {
                        case 1 :
                            {
                            AS716=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement10196); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS716);
                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10200);
                            i=keywordAllowedIdent();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }
                            }
                            break;
                    }
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    if (identifier != null) {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    else 
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);
                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token s=null;
        Token i=null;
        Token DOT717=null;
        Token STAR718=null;
        Token AS719=null;
        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT717_tree=null;
        CommonTree STAR718_tree=null;
        CommonTree AS719_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        try {
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);
            DOT717=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector10246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT717);
            STAR718=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector10248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR718);
            int alt258=2;
            int LA258_0 = input.LA(1);
            if ( (LA258_0==AS) ) {
                alt258=1;
            }
            switch (alt258) {
                case 1 :
                    {
                    AS719=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector10251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS719);
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector10255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);
                adaptor.addChild(root_1, stream_s.nextNode());
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token EQUALS720=null;
        Token LPAREN722=null;
        Token RPAREN724=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier721 = null;
        EsperEPL2GrammarParser.expressionList_return expressionList723 = null;
        EsperEPL2GrammarParser.propertyExpression_return propertyExpression725 = null;
        CommonTree i_tree=null;
        CommonTree EQUALS720_tree=null;
        CommonTree LPAREN722_tree=null;
        CommonTree RPAREN724_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            {
            int alt259=2;
            int LA259_0 = input.LA(1);
            if ( (LA259_0==IDENT) ) {
                int LA259_1 = input.LA(2);
                if ( (LA259_1==EQUALS) ) {
                    alt259=1;
                }
            }
            switch (alt259) {
                case 1 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression10302); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    EQUALS720=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression10304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS720);
                    }
                    break;
            }
            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression10313);
            classIdentifier721=classIdentifier();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier721.getTree());
            int alt261=2;
            int LA261_0 = input.LA(1);
            if ( (LA261_0==LPAREN) ) {
                alt261=1;
            }
            switch (alt261) {
                case 1 :
                    {
                    LPAREN722=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression10324); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN722);
                    int alt260=2;
                    int LA260_0 = input.LA(1);
                    if ( (LA260_0==WINDOW||LA260_0==ESCAPE||(LA260_0>=NOT_EXPR && LA260_0<=EVERY_EXPR)||(LA260_0>=SUM && LA260_0<=COUNT)||LA260_0==CASE||LA260_0==OUTER||(LA260_0>=JOIN && LA260_0<=FULL)||(LA260_0>=EVENTS && LA260_0<=LAST)||(LA260_0>=UNIDIRECTIONAL && LA260_0<=CURRENT_TIMESTAMP)||LA260_0==SNAPSHOT||(LA260_0>=VARIABLE && LA260_0<=INDEX)||(LA260_0>=BOOLEAN_TRUE && LA260_0<=VALUE_NULL)||(LA260_0>=DEFINE && LA260_0<=MATCHES)||LA260_0==WHILE||(LA260_0>=MERGE && LA260_0<=MATCHED)||LA260_0==NUM_DOUBLE||(LA260_0>=IDENT && LA260_0<=LPAREN)||(LA260_0>=PLUS && LA260_0<=QUESTION)||(LA260_0>=STRING_LITERAL && LA260_0<=QUOTED_STRING_LITERAL)||LA260_0==MINUS||LA260_0==LCURLY||LA260_0==NUM_INT||(LA260_0>=TICKED_STRING_LITERAL && LA260_0<=NUM_FLOAT)) ) {
                        alt260=1;
                    }
                    switch (alt260) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression10326);
                            expressionList723=expressionList();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList723.getTree());
                            }
                            break;
                    }
                    RPAREN724=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression10329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN724);
                    }
                    break;
            }
            int alt262=2;
            int LA262_0 = input.LA(1);
            if ( (LA262_0==LBRACK) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression10341);
                    propertyExpression725=propertyExpression();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression725.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());
                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());
                }
                stream_propertyExpression.reset();
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());
                }
                stream_expressionList.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT726=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT726_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier10396);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop263:
            do {
                int alt263=2;
                int LA263_0 = input.LA(1);
                if ( (LA263_0==DOT) ) {
                    int LA263_21 = input.LA(2);
                    if ( (LA263_21==IDENT) ) {
                        int LA263_46 = input.LA(3);
                        if ( (LA263_46==EOF||LA263_46==CREATE||(LA263_46>=OR_EXPR && LA263_46<=AS)||LA263_46==SELECT||(LA263_46>=INNER && LA263_46<=ON)||(LA263_46>=GROUP && LA263_46<=HAVING)||LA263_46==OUTPUT||LA263_46==INSERT||LA263_46==ORDER||(LA263_46>=UNIDIRECTIONAL && LA263_46<=RETAININTERSECTION)||LA263_46==DELETE||LA263_46==SET||LA263_46==UNTIL||LA263_46==ROW_LIMIT_EXPR||(LA263_46>=UPDATE && LA263_46<=MATCH_RECOGNIZE)||(LA263_46>=FOR && LA263_46<=WHILE)||LA263_46==MERGE||(LA263_46>=COMMA && LA263_46<=RPAREN)||(LA263_46>=DOT && LA263_46<=RBRACK)||LA263_46==RCURLY||(LA263_46>=FOLLOWED_BY && LA263_46<=FOLLOWMAX_BEGIN)||LA263_46==TICKED_STRING_LITERAL||LA263_46==EMAILAT) ) {
                            alt263=1;
                        }
                    }
                    else if ( (LA263_21==TICKED_STRING_LITERAL) ) {
                        alt263=1;
                    }
                }
                switch (alt263) {
            	case 1 :
            	    {
            	    DOT726=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier10415); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT726);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier10419);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop263;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT727=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;
        EsperEPL2GrammarParser.escapableStr_return i2 = null;
        CommonTree DOT727_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10464);
            i1=escapableStr();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            loop264:
            do {
                int alt264=2;
                int LA264_0 = input.LA(1);
                if ( (LA264_0==IDENT||LA264_0==TICKED_STRING_LITERAL) ) {
                    alt264=2;
                }
                else if ( (LA264_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA264_4 = input.LA(3);
                        if ( (LA264_4==LPAREN) ) {
                            alt264=2;
                        }
                        else if ( (LA264_4==IDENT||LA264_4==DOT||LA264_4==TICKED_STRING_LITERAL) ) {
                            alt264=1;
                        }
                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA264_5 = input.LA(3);
                        if ( (LA264_5==LPAREN) ) {
                            alt264=2;
                        }
                        else if ( (LA264_5==IDENT||LA264_5==DOT||LA264_5==TICKED_STRING_LITERAL) ) {
                            alt264=1;
                        }
                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt264=2;
                        }
                        break;
                    }
                }
                switch (alt264) {
            	case 1 :
            	    {
            	    DOT727=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy10499); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT727);
            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy10503);
            	    i2=escapableStr();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }
            	    }
            	    break;
            	default :
            	    break loop264;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA729=null;
        EsperEPL2GrammarParser.expression_return expression728 = null;
        EsperEPL2GrammarParser.expression_return expression730 = null;
        CommonTree COMMA729_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expression_in_expressionList10545);
            expression728=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression728.getTree());
            loop265:
            do {
                int alt265=2;
                int LA265_0 = input.LA(1);
                if ( (LA265_0==COMMA) ) {
                    alt265=1;
                }
                switch (alt265) {
            	case 1 :
            	    {
            	    COMMA729=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList10548); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList10551);
            	    expression730=expression();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression730.getTree());
            	    }
            	    break;
            	default :
            	    break loop265;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token COMMA732=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime731 = null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime733 = null;
        CommonTree COMMA732_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10579);
            expressionWithTime731=expressionWithTime();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime731.getTree());
            loop266:
            do {
                int alt266=2;
                int LA266_0 = input.LA(1);
                if ( (LA266_0==COMMA) ) {
                    alt266=1;
                }
                switch (alt266) {
            	case 1 :
            	    {
            	    COMMA732=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList10582); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList10585);
            	    expressionWithTime733=expressionWithTime();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime733.getTree());
            	    }
            	    break;
            	default :
            	    break loop266;
                }
            } while (true);
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.lastOperand_return lastOperand734 = null;
        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand735 = null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod736 = null;
        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable737 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand738 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand739 = null;
        EsperEPL2GrammarParser.lastOperator_return lastOperator740 = null;
        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator741 = null;
        EsperEPL2GrammarParser.numericParameterList_return numericParameterList742 = null;
        EsperEPL2GrammarParser.numberSetStar_return numberSetStar743 = null;
        try {
            int alt267=10;
            int LA267_0 = input.LA(1);
            if ( (LA267_0==LAST) ) {
                int LA267_1 = input.LA(2);
                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt267=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt267=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 1, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==LW) ) {
                int LA267_2 = input.LA(2);
                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt267=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt267=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 2, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==NUM_INT) ) {
                int LA267_3 = input.LA(2);
                if ( (LA267_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt267=5;
                }
                else if ( (LA267_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_SECONDS) ) {
                    int LA267_155 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 155, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_3==TIMEPERIOD_SECOND) ) {
                    int LA267_156 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 156, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_3==TIMEPERIOD_SEC) ) {
                    int LA267_157 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 157, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_3==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt267=8;
                }
                else if ( (LA267_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt267=7;
                }
                else if ( (LA267_3==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_3==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 3, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==NUM_LONG) ) {
                int LA267_4 = input.LA(2);
                if ( (LA267_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==TIMEPERIOD_SECONDS) ) {
                    int LA267_215 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 215, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_4==TIMEPERIOD_SECOND) ) {
                    int LA267_216 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 216, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_4==TIMEPERIOD_SEC) ) {
                    int LA267_217 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 217, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt267=5;
                }
                else if ( (LA267_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt267=8;
                }
                else if ( (LA267_4==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt267=7;
                }
                else if ( (LA267_4==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 4, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==NUM_FLOAT) ) {
                int LA267_5 = input.LA(2);
                if ( (LA267_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==TIMEPERIOD_SECONDS) ) {
                    int LA267_265 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 265, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_5==TIMEPERIOD_SECOND) ) {
                    int LA267_266 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 266, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_5==TIMEPERIOD_SEC) ) {
                    int LA267_267 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 267, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt267=5;
                }
                else if ( (LA267_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt267=8;
                }
                else if ( (LA267_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt267=7;
                }
                else if ( (LA267_5==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_5==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 5, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==NUM_DOUBLE) ) {
                int LA267_6 = input.LA(2);
                if ( (LA267_6==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt267=8;
                }
                else if ( (LA267_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==TIMEPERIOD_SECONDS) ) {
                    int LA267_325 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 325, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_6==TIMEPERIOD_SECOND) ) {
                    int LA267_326 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 326, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_6==TIMEPERIOD_SEC) ) {
                    int LA267_327 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 327, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt267=7;
                }
                else if ( (LA267_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt267=5;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 6, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==IDENT) ) {
                int LA267_7 = input.LA(2);
                if ( (LA267_7==TIMEPERIOD_SECONDS) ) {
                    int LA267_344 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 344, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_7==TIMEPERIOD_SECOND) ) {
                    int LA267_345 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 345, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_7==TIMEPERIOD_SEC) ) {
                    int LA267_346 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 346, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_7==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt267=7;
                }
                else if ( (LA267_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt267=5;
                }
                else if ( (LA267_7==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt267=8;
                }
                else if ( (LA267_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 7, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==QUESTION) ) {
                int LA267_8 = input.LA(2);
                if ( (LA267_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt267=5;
                }
                else if ( (LA267_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_SECONDS) ) {
                    int LA267_403 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 403, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_8==TIMEPERIOD_SECOND) ) {
                    int LA267_404 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 404, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_8==TIMEPERIOD_SEC) ) {
                    int LA267_405 = input.LA(3);
                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt267=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt267=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 267, 405, input);
                        throw nvae;
                    }
                }
                else if ( (LA267_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt267=8;
                }
                else if ( (LA267_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_MONTHS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_MONTH) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_WEEKS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_WEEK) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt267=4;
                }
                else if ( (LA267_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt267=7;
                }
                else if ( (LA267_8==TIMEPERIOD_YEARS) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else if ( (LA267_8==TIMEPERIOD_YEAR) && (synpred9_EsperEPL2Grammar())) {
                    alt267=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 8, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==MERGE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==MATCHED) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==TYPEOF) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt267=4;
            }
            else if ( (LA267_0==STAR) ) {
                int LA267_68 = input.LA(2);
                if ( (LA267_68==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt267=6;
                }
                else if ( (LA267_68==COMMA||LA267_68==RPAREN) ) {
                    alt267=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 267, 68, input);
                    throw nvae;
                }
            }
            else if ( (LA267_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt267=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 267, 0, input);
                throw nvae;
            }
            switch (alt267) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime10611);
                    lastOperand734=lastOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand734.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime10622);
                    lastWeekdayOperand735=lastWeekdayOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand735.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime10633);
                    timePeriod736=timePeriod();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod736.getTree());
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime10644);
                    expressionQualifyable737=expressionQualifyable();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable737.getTree());
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime10655);
                    rangeOperand738=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand738.getTree());
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime10667);
                    frequencyOperand739=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand739.getTree());
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime10678);
                    lastOperator740=lastOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator740.getTree());
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime10690);
                    weekDayOperator741=weekDayOperator();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator741.getTree());
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime10702);
                    numericParameterList742=numericParameterList();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList742.getTree());
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime10707);
                    numberSetStar743=numberSetStar();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar743.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression744 = null;
        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable10718);
            expression744=expression();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression744.getTree());
            int alt268=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt268=1;
                    }
                    break;
                case DESC:
                    {
                    alt268=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt268=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt268=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt268=5;
                    }
                    break;
            }
            switch (alt268) {
                case 1 :
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable10723); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);
                    }
                    break;
                case 2 :
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable10727); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);
                    }
                    break;
                case 3 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);
                    }
                    break;
                case 4 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10735); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);
                    }
                    break;
                case 5 :
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10739); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (d != null || a != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);
                adaptor.addChild(root_1, stream_expression.nextTree());
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());
                }
                stream_a.reset();
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());
                }
                stream_d.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (s != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);
                adaptor.addChild(root_2, stream_expression.nextTree());
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                adaptor.addChild(root_0, stream_expression.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token STAR745=null;
        CommonTree STAR745_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        try {
            {
            STAR745=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10796); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR745);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LW746=null;
        CommonTree LW746_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LW746=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10816); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW746_tree = (CommonTree)adaptor.create(LW746);
            root_0 = (CommonTree)adaptor.becomeRoot(LW746_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LAST747=null;
        CommonTree LAST747_tree=null;
        try {
            {
            root_0 = (CommonTree)adaptor.nil();
            LAST747=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10829); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST747_tree = (CommonTree)adaptor.create(LAST747);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST747_tree, root_0);
            }
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token STAR748=null;
        Token DIV749=null;
        EsperEPL2GrammarParser.number_return number750 = null;
        EsperEPL2GrammarParser.substitution_return substitution751 = null;
        CommonTree i_tree=null;
        CommonTree STAR748_tree=null;
        CommonTree DIV749_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            STAR748=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10841); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR748);
            DIV749=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10843); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV749);
            int alt269=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt269=1;
                }
                break;
            case IDENT:
                {
                alt269=2;
                }
                break;
            case QUESTION:
                {
                alt269=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 269, 0, input);
                throw nvae;
            }
            switch (alt269) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10846);
                    number750=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number750.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10850); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10852);
                    substitution751=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution751.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token COLON754=null;
        EsperEPL2GrammarParser.number_return number752 = null;
        EsperEPL2GrammarParser.substitution_return substitution753 = null;
        EsperEPL2GrammarParser.number_return number755 = null;
        EsperEPL2GrammarParser.substitution_return substitution756 = null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON754_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt270=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt270=1;
                }
                break;
            case IDENT:
                {
                alt270=2;
                }
                break;
            case QUESTION:
                {
                alt270=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 270, 0, input);
                throw nvae;
            }
            switch (alt270) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10901);
                    number752=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number752.getTree());
                    }
                    break;
                case 2 :
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10905); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10907);
                    substitution753=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution753.getTree());
                    }
                    break;
            }
            COLON754=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10910); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON754);
            int alt271=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt271=1;
                }
                break;
            case IDENT:
                {
                alt271=2;
                }
                break;
            case QUESTION:
                {
                alt271=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 271, 0, input);
                throw nvae;
            }
            switch (alt271) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10913);
                    number755=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number755.getTree());
                    }
                    break;
                case 2 :
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10917); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10919);
                    substitution756=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution756.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i1 != null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 != null && i2 == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i1.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (i1 == null && i2 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i2.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token LAST759=null;
        EsperEPL2GrammarParser.number_return number757 = null;
        EsperEPL2GrammarParser.substitution_return substitution758 = null;
        CommonTree i_tree=null;
        CommonTree LAST759_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt272=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt272=1;
                }
                break;
            case IDENT:
                {
                alt272=2;
                }
                break;
            case QUESTION:
                {
                alt272=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);
                throw nvae;
            }
            switch (alt272) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_lastOperator11033);
                    number757=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number757.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator11037); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator11039);
                    substitution758=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution758.getTree());
                    }
                    break;
            }
            LAST759=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator11042); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST759);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token WEEKDAY762=null;
        EsperEPL2GrammarParser.number_return number760 = null;
        EsperEPL2GrammarParser.substitution_return substitution761 = null;
        CommonTree i_tree=null;
        CommonTree WEEKDAY762_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt273=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt273=1;
                }
                break;
            case IDENT:
                {
                alt273=2;
                }
                break;
            case QUESTION:
                {
                alt273=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);
                throw nvae;
            }
            switch (alt273) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator11090);
                    number760=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number760.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator11094); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator11096);
                    substitution761=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution761.getTree());
                    }
                    break;
            }
            WEEKDAY762=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator11099); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY762);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token LBRACK763=null;
        Token COMMA765=null;
        Token RBRACK767=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter764 = null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter766 = null;
        CommonTree LBRACK763_tree=null;
        CommonTree COMMA765_tree=null;
        CommonTree RBRACK767_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            {
            LBRACK763=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList11146); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK763);
            pushFollow(FOLLOW_numericListParameter_in_numericParameterList11148);
            numericListParameter764=numericListParameter();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter764.getTree());
            loop274:
            do {
                int alt274=2;
                int LA274_0 = input.LA(1);
                if ( (LA274_0==COMMA) ) {
                    alt274=1;
                }
                switch (alt274) {
            	case 1 :
            	    {
            	    COMMA765=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList11151); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA765);
            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList11153);
            	    numericListParameter766=numericListParameter();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter766.getTree());
            	    }
            	    break;
            	default :
            	    break loop274;
                }
            } while (true);
            RBRACK767=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList11157); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK767);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);
                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());
                }
                stream_numericListParameter.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.rangeOperand_return rangeOperand768 = null;
        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand769 = null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant770 = null;
        try {
            int alt275=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA275_1 = input.LA(2);
                if ( (LA275_1==COMMA||LA275_1==RBRACK) ) {
                    alt275=3;
                }
                else if ( (LA275_1==COLON) ) {
                    alt275=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 275, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA275_2 = input.LA(2);
                if ( (LA275_2==COMMA||LA275_2==RBRACK) ) {
                    alt275=3;
                }
                else if ( (LA275_2==COLON) ) {
                    alt275=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 275, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA275_3 = input.LA(2);
                if ( (LA275_3==COMMA||LA275_3==RBRACK) ) {
                    alt275=3;
                }
                else if ( (LA275_3==COLON) ) {
                    alt275=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 275, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA275_4 = input.LA(2);
                if ( (LA275_4==COLON) ) {
                    alt275=1;
                }
                else if ( (LA275_4==COMMA||LA275_4==RBRACK) ) {
                    alt275=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 275, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt275=1;
                }
                break;
            case STAR:
                {
                alt275=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt275=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);
                throw nvae;
            }
            switch (alt275) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter11179);
                    rangeOperand768=rangeOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand768.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter11185);
                    frequencyOperand769=frequencyOperand();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand769.getTree());
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_numericListParameter11190);
                    numberconstant770=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant770.getTree());
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token DOT772=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic771 = null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic773 = null;
        CommonTree DOT772_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty11206);
            eventPropertyAtomic771=eventPropertyAtomic();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic771.getTree());
            loop276:
            do {
                int alt276=2;
                int LA276_0 = input.LA(1);
                if ( (LA276_0==DOT) ) {
                    alt276=1;
                }
                switch (alt276) {
            	case 1 :
            	    {
            	    DOT772=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty11209); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT772);
            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty11211);
            	    eventPropertyAtomic773=eventPropertyAtomic();
            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic773.getTree());
            	    }
            	    break;
            	default :
            	    break loop276;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);
                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());
                }
                stream_eventPropertyAtomic.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK775=null;
        Token RPAREN776=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent774 = null;
        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK775_tree=null;
        CommonTree RPAREN776_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic11237);
            eventPropertyIdent774=eventPropertyIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent774.getTree());
            int alt280=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt280=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt280=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt280=3;
                    }
                    break;
            }
            switch (alt280) {
                case 1 :
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic11246); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic11250); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    RBRACK775=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic11252); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK775);
                    int alt277=2;
                    int LA277_0 = input.LA(1);
                    if ( (LA277_0==QUESTION) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11257); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic11271); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);
                    int alt278=2;
                    int LA278_0 = input.LA(1);
                    if ( (LA278_0==STRING_LITERAL) ) {
                        alt278=1;
                    }
                    else if ( (LA278_0==QUOTED_STRING_LITERAL) ) {
                        alt278=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 278, 0, input);
                        throw nvae;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic11276); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);
                            }
                            break;
                        case 2 :
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic11282); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);
                            }
                            break;
                    }
                    RPAREN776=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic11285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN776);
                    int alt279=2;
                    int LA279_0 = input.LA(1);
                    if ( (LA279_0==QUESTION) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11290); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic11304); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (lb!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lb!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q == null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (lp!= null && q != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            if (q1 != null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);
                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ESCAPECHAR777=null;
        Token DOT778=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;
        CommonTree ESCAPECHAR777_tree=null;
        CommonTree DOT778_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11427);
            ipi=keywordAllowedIdent();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            loop282:
            do {
                int alt282=2;
                int LA282_0 = input.LA(1);
                if ( (LA282_0==ESCAPECHAR) ) {
                    alt282=1;
                }
                switch (alt282) {
            	case 1 :
            	    {
            	    ESCAPECHAR777=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent11439); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR777);
            	    DOT778=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent11441); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT778);
            	    int alt281=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case TYPEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case MERGE:
            	        case MATCHED:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt281=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA281_5 = input.LA(2);
            	            if ( (LA281_5==EOF||(LA281_5>=IN_SET && LA281_5<=NOT_EXPR)||(LA281_5>=WHERE && LA281_5<=AS)||(LA281_5>=ELSE && LA281_5<=FROM)||(LA281_5>=INNER && LA281_5<=FULL)||LA281_5==IS||(LA281_5>=GROUP && LA281_5<=HAVING)||LA281_5==ALL||LA281_5==OUTPUT||LA281_5==INSERT||(LA281_5>=ORDER && LA281_5<=DESC)||LA281_5==PATTERN||(LA281_5>=TIMEPERIOD_SEC && LA281_5<=TIMEPERIOD_SECONDS)||LA281_5==ROW_LIMIT_EXPR||(LA281_5>=MATCH_RECOGNIZE && LA281_5<=MEASURES)||(LA281_5>=AFTER && LA281_5<=FOR)||LA281_5==COMMA||(LA281_5>=LPAREN && LA281_5<=COLON)||(LA281_5>=BAND && LA281_5<=MOD)||LA281_5==RCURLY||(LA281_5>=FOLLOWMAX_END && LA281_5<=ESCAPECHAR)) ) {
            	                alt281=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA281_25 = input.LA(2);
            	            if ( (LA281_25==LPAREN) ) {
            	                int LA281_176 = input.LA(3);
            	                if ( ((LA281_176>=STRING_LITERAL && LA281_176<=QUOTED_STRING_LITERAL)) ) {
            	                    alt281=1;
            	                }
            	            }
            	            else if ( (LA281_25==EOF||(LA281_25>=IN_SET && LA281_25<=NOT_EXPR)||(LA281_25>=WHERE && LA281_25<=AS)||(LA281_25>=ELSE && LA281_25<=FROM)||(LA281_25>=INNER && LA281_25<=FULL)||LA281_25==IS||(LA281_25>=GROUP && LA281_25<=HAVING)||LA281_25==ALL||LA281_25==OUTPUT||LA281_25==INSERT||(LA281_25>=ORDER && LA281_25<=DESC)||LA281_25==PATTERN||(LA281_25>=TIMEPERIOD_SEC && LA281_25<=TIMEPERIOD_SECONDS)||LA281_25==ROW_LIMIT_EXPR||(LA281_25>=MATCH_RECOGNIZE && LA281_25<=MEASURES)||(LA281_25>=AFTER && LA281_25<=FOR)||LA281_25==COMMA||(LA281_25>=RPAREN && LA281_25<=COLON)||(LA281_25>=BAND && LA281_25<=MOD)||LA281_25==RCURLY||(LA281_25>=FOLLOWMAX_END && LA281_25<=ESCAPECHAR)) ) {
            	                alt281=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA281_40 = input.LA(2);
            	            if ( (LA281_40==EOF||(LA281_40>=IN_SET && LA281_40<=NOT_EXPR)||(LA281_40>=WHERE && LA281_40<=AS)||(LA281_40>=ELSE && LA281_40<=FROM)||(LA281_40>=INNER && LA281_40<=FULL)||LA281_40==IS||(LA281_40>=GROUP && LA281_40<=HAVING)||LA281_40==ALL||LA281_40==OUTPUT||LA281_40==INSERT||(LA281_40>=ORDER && LA281_40<=DESC)||LA281_40==PATTERN||(LA281_40>=TIMEPERIOD_SEC && LA281_40<=TIMEPERIOD_SECONDS)||LA281_40==ROW_LIMIT_EXPR||(LA281_40>=MATCH_RECOGNIZE && LA281_40<=MEASURES)||(LA281_40>=AFTER && LA281_40<=FOR)||LA281_40==COMMA||(LA281_40>=LPAREN && LA281_40<=COLON)||(LA281_40>=BAND && LA281_40<=MOD)||LA281_40==RCURLY||(LA281_40>=FOLLOWMAX_END && LA281_40<=ESCAPECHAR)) ) {
            	                alt281=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA281_41 = input.LA(2);
            	            if ( (LA281_41==EOF||(LA281_41>=IN_SET && LA281_41<=NOT_EXPR)||(LA281_41>=WHERE && LA281_41<=AS)||(LA281_41>=ELSE && LA281_41<=FROM)||(LA281_41>=INNER && LA281_41<=FULL)||LA281_41==IS||(LA281_41>=GROUP && LA281_41<=HAVING)||LA281_41==ALL||LA281_41==OUTPUT||LA281_41==INSERT||(LA281_41>=ORDER && LA281_41<=DESC)||LA281_41==PATTERN||(LA281_41>=TIMEPERIOD_SEC && LA281_41<=TIMEPERIOD_SECONDS)||LA281_41==ROW_LIMIT_EXPR||(LA281_41>=MATCH_RECOGNIZE && LA281_41<=MEASURES)||(LA281_41>=AFTER && LA281_41<=FOR)||LA281_41==COMMA||(LA281_41>=LPAREN && LA281_41<=COLON)||(LA281_41>=BAND && LA281_41<=MOD)||LA281_41==RCURLY||(LA281_41>=FOLLOWMAX_END && LA281_41<=ESCAPECHAR)) ) {
            	                alt281=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA281_43 = input.LA(2);
            	            if ( (LA281_43==EOF||(LA281_43>=IN_SET && LA281_43<=NOT_EXPR)||(LA281_43>=WHERE && LA281_43<=AS)||(LA281_43>=ELSE && LA281_43<=FROM)||(LA281_43>=INNER && LA281_43<=FULL)||LA281_43==IS||(LA281_43>=GROUP && LA281_43<=HAVING)||LA281_43==ALL||LA281_43==OUTPUT||LA281_43==INSERT||(LA281_43>=ORDER && LA281_43<=DESC)||LA281_43==PATTERN||(LA281_43>=TIMEPERIOD_SEC && LA281_43<=TIMEPERIOD_SECONDS)||LA281_43==ROW_LIMIT_EXPR||(LA281_43>=MATCH_RECOGNIZE && LA281_43<=MEASURES)||(LA281_43>=AFTER && LA281_43<=FOR)||LA281_43==COMMA||(LA281_43>=LPAREN && LA281_43<=COLON)||(LA281_43>=BAND && LA281_43<=MOD)||LA281_43==RCURLY||(LA281_43>=FOLLOWMAX_END && LA281_43<=ESCAPECHAR)) ) {
            	                alt281=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA281_44 = input.LA(2);
            	            if ( (LA281_44==EOF||(LA281_44>=IN_SET && LA281_44<=NOT_EXPR)||(LA281_44>=WHERE && LA281_44<=AS)||(LA281_44>=ELSE && LA281_44<=FROM)||(LA281_44>=INNER && LA281_44<=FULL)||LA281_44==IS||(LA281_44>=GROUP && LA281_44<=HAVING)||LA281_44==ALL||LA281_44==OUTPUT||LA281_44==INSERT||(LA281_44>=ORDER && LA281_44<=DESC)||(LA281_44>=TIMEPERIOD_SEC && LA281_44<=TIMEPERIOD_SECONDS)||LA281_44==ROW_LIMIT_EXPR||(LA281_44>=MATCH_RECOGNIZE && LA281_44<=MEASURES)||(LA281_44>=AFTER && LA281_44<=FOR)||LA281_44==COMMA||(LA281_44>=LPAREN && LA281_44<=COLON)||(LA281_44>=BAND && LA281_44<=MOD)||LA281_44==RCURLY||(LA281_44>=FOLLOWMAX_END && LA281_44<=ESCAPECHAR)) ) {
            	                alt281=1;
            	            }
            	            else if ( (LA281_44==PATTERN) ) {
            	                int LA281_490 = input.LA(3);
            	                if ( (LA281_490==LPAREN) ) {
            	                    alt281=1;
            	                }
            	            }
            	            }
            	            break;
            	    }
            	    switch (alt281) {
            	        case 1 :
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11445);
            	            ipi2=keywordAllowedIdent();
            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());
            	            }
            	            break;
            	    }
            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }
            	    }
            	    break;
            	default :
            	    break loop282;
                }
            } while (true);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        Token AT779=null;
        Token COUNT780=null;
        Token ESCAPE781=null;
        Token EVERY_EXPR782=null;
        Token SUM783=null;
        Token AVG784=null;
        Token MAX785=null;
        Token MIN786=null;
        Token COALESCE787=null;
        Token MEDIAN788=null;
        Token STDDEV789=null;
        Token AVEDEV790=null;
        Token EVENTS791=null;
        Token FIRST792=null;
        Token LAST793=null;
        Token WHILE794=null;
        Token MERGE795=null;
        Token MATCHED796=null;
        Token UNIDIRECTIONAL797=null;
        Token RETAINUNION798=null;
        Token RETAININTERSECTION799=null;
        Token UNTIL800=null;
        Token PATTERN801=null;
        Token SQL802=null;
        Token METADATASQL803=null;
        Token PREVIOUS804=null;
        Token PREVIOUSTAIL805=null;
        Token PRIOR806=null;
        Token WEEKDAY807=null;
        Token LW808=null;
        Token INSTANCEOF809=null;
        Token TYPEOF810=null;
        Token CAST811=null;
        Token SNAPSHOT812=null;
        Token VARIABLE813=null;
        Token INDEX814=null;
        Token WINDOW815=null;
        Token LEFT816=null;
        Token RIGHT817=null;
        Token OUTER818=null;
        Token FULL819=null;
        Token JOIN820=null;
        Token DEFINE821=null;
        Token PARTITION822=null;
        Token MATCHES823=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT779_tree=null;
        CommonTree COUNT780_tree=null;
        CommonTree ESCAPE781_tree=null;
        CommonTree EVERY_EXPR782_tree=null;
        CommonTree SUM783_tree=null;
        CommonTree AVG784_tree=null;
        CommonTree MAX785_tree=null;
        CommonTree MIN786_tree=null;
        CommonTree COALESCE787_tree=null;
        CommonTree MEDIAN788_tree=null;
        CommonTree STDDEV789_tree=null;
        CommonTree AVEDEV790_tree=null;
        CommonTree EVENTS791_tree=null;
        CommonTree FIRST792_tree=null;
        CommonTree LAST793_tree=null;
        CommonTree WHILE794_tree=null;
        CommonTree MERGE795_tree=null;
        CommonTree MATCHED796_tree=null;
        CommonTree UNIDIRECTIONAL797_tree=null;
        CommonTree RETAINUNION798_tree=null;
        CommonTree RETAININTERSECTION799_tree=null;
        CommonTree UNTIL800_tree=null;
        CommonTree PATTERN801_tree=null;
        CommonTree SQL802_tree=null;
        CommonTree METADATASQL803_tree=null;
        CommonTree PREVIOUS804_tree=null;
        CommonTree PREVIOUSTAIL805_tree=null;
        CommonTree PRIOR806_tree=null;
        CommonTree WEEKDAY807_tree=null;
        CommonTree LW808_tree=null;
        CommonTree INSTANCEOF809_tree=null;
        CommonTree TYPEOF810_tree=null;
        CommonTree CAST811_tree=null;
        CommonTree SNAPSHOT812_tree=null;
        CommonTree VARIABLE813_tree=null;
        CommonTree INDEX814_tree=null;
        CommonTree WINDOW815_tree=null;
        CommonTree LEFT816_tree=null;
        CommonTree RIGHT817_tree=null;
        CommonTree OUTER818_tree=null;
        CommonTree FULL819_tree=null;
        CommonTree JOIN820_tree=null;
        CommonTree DEFINE821_tree=null;
        CommonTree PARTITION822_tree=null;
        CommonTree MATCHES823_tree=null;
        try {
            int alt283=47;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt283=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt283=2;
                }
                break;
            case AT:
                {
                alt283=3;
                }
                break;
            case COUNT:
                {
                alt283=4;
                }
                break;
            case ESCAPE:
                {
                alt283=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt283=6;
                }
                break;
            case SUM:
                {
                alt283=7;
                }
                break;
            case AVG:
                {
                alt283=8;
                }
                break;
            case MAX:
                {
                alt283=9;
                }
                break;
            case MIN:
                {
                alt283=10;
                }
                break;
            case COALESCE:
                {
                alt283=11;
                }
                break;
            case MEDIAN:
                {
                alt283=12;
                }
                break;
            case STDDEV:
                {
                alt283=13;
                }
                break;
            case AVEDEV:
                {
                alt283=14;
                }
                break;
            case EVENTS:
                {
                alt283=15;
                }
                break;
            case FIRST:
                {
                alt283=16;
                }
                break;
            case LAST:
                {
                alt283=17;
                }
                break;
            case WHILE:
                {
                alt283=18;
                }
                break;
            case MERGE:
                {
                alt283=19;
                }
                break;
            case MATCHED:
                {
                alt283=20;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt283=21;
                }
                break;
            case RETAINUNION:
                {
                alt283=22;
                }
                break;
            case RETAININTERSECTION:
                {
                alt283=23;
                }
                break;
            case UNTIL:
                {
                alt283=24;
                }
                break;
            case PATTERN:
                {
                alt283=25;
                }
                break;
            case SQL:
                {
                alt283=26;
                }
                break;
            case METADATASQL:
                {
                alt283=27;
                }
                break;
            case PREVIOUS:
                {
                alt283=28;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt283=29;
                }
                break;
            case PRIOR:
                {
                alt283=30;
                }
                break;
            case WEEKDAY:
                {
                alt283=31;
                }
                break;
            case LW:
                {
                alt283=32;
                }
                break;
            case INSTANCEOF:
                {
                alt283=33;
                }
                break;
            case TYPEOF:
                {
                alt283=34;
                }
                break;
            case CAST:
                {
                alt283=35;
                }
                break;
            case SNAPSHOT:
                {
                alt283=36;
                }
                break;
            case VARIABLE:
                {
                alt283=37;
                }
                break;
            case INDEX:
                {
                alt283=38;
                }
                break;
            case WINDOW:
                {
                alt283=39;
                }
                break;
            case LEFT:
                {
                alt283=40;
                }
                break;
            case RIGHT:
                {
                alt283=41;
                }
                break;
            case OUTER:
                {
                alt283=42;
                }
                break;
            case FULL:
                {
                alt283=43;
                }
                break;
            case JOIN:
                {
                alt283=44;
                }
                break;
            case DEFINE:
                {
                alt283=45;
                }
                break;
            case PARTITION:
                {
                alt283=46;
                }
                break;
            case MATCHES:
                {
                alt283=47;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);
                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent11484); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11493); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
                case 3 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AT779=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent11500); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT779_tree = (CommonTree)adaptor.create(AT779);
                    adaptor.addChild(root_0, AT779_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }
                    }
                    break;
                case 4 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COUNT780=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent11507); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT780_tree = (CommonTree)adaptor.create(COUNT780);
                    adaptor.addChild(root_0, COUNT780_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }
                    }
                    break;
                case 5 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    ESCAPE781=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent11514); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE781_tree = (CommonTree)adaptor.create(ESCAPE781);
                    adaptor.addChild(root_0, ESCAPE781_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }
                    }
                    break;
                case 6 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVERY_EXPR782=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11525); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR782_tree = (CommonTree)adaptor.create(EVERY_EXPR782);
                    adaptor.addChild(root_0, EVERY_EXPR782_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }
                    }
                    break;
                case 7 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SUM783=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent11532); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM783_tree = (CommonTree)adaptor.create(SUM783);
                    adaptor.addChild(root_0, SUM783_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }
                    }
                    break;
                case 8 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVG784=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent11539); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG784_tree = (CommonTree)adaptor.create(AVG784);
                    adaptor.addChild(root_0, AVG784_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }
                    }
                    break;
                case 9 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MAX785=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent11546); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX785_tree = (CommonTree)adaptor.create(MAX785);
                    adaptor.addChild(root_0, MAX785_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }
                    }
                    break;
                case 10 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MIN786=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent11553); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN786_tree = (CommonTree)adaptor.create(MIN786);
                    adaptor.addChild(root_0, MIN786_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }
                    }
                    break;
                case 11 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    COALESCE787=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent11560); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE787_tree = (CommonTree)adaptor.create(COALESCE787);
                    adaptor.addChild(root_0, COALESCE787_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }
                    }
                    break;
                case 12 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MEDIAN788=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent11567); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN788_tree = (CommonTree)adaptor.create(MEDIAN788);
                    adaptor.addChild(root_0, MEDIAN788_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }
                    }
                    break;
                case 13 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    STDDEV789=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent11574); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV789_tree = (CommonTree)adaptor.create(STDDEV789);
                    adaptor.addChild(root_0, STDDEV789_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }
                    }
                    break;
                case 14 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    AVEDEV790=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent11581); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV790_tree = (CommonTree)adaptor.create(AVEDEV790);
                    adaptor.addChild(root_0, AVEDEV790_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }
                    }
                    break;
                case 15 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    EVENTS791=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent11588); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS791_tree = (CommonTree)adaptor.create(EVENTS791);
                    adaptor.addChild(root_0, EVENTS791_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }
                    }
                    break;
                case 16 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FIRST792=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent11595); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST792_tree = (CommonTree)adaptor.create(FIRST792);
                    adaptor.addChild(root_0, FIRST792_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }
                    }
                    break;
                case 17 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LAST793=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent11602); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST793_tree = (CommonTree)adaptor.create(LAST793);
                    adaptor.addChild(root_0, LAST793_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }
                    }
                    break;
                case 18 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WHILE794=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent11609); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE794_tree = (CommonTree)adaptor.create(WHILE794);
                    adaptor.addChild(root_0, WHILE794_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }
                    }
                    break;
                case 19 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MERGE795=(Token)match(input,MERGE,FOLLOW_MERGE_in_keywordAllowedIdent11616); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MERGE795_tree = (CommonTree)adaptor.create(MERGE795);
                    adaptor.addChild(root_0, MERGE795_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "merge"; 
                    }
                    }
                    break;
                case 20 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHED796=(Token)match(input,MATCHED,FOLLOW_MATCHED_in_keywordAllowedIdent11623); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHED796_tree = (CommonTree)adaptor.create(MATCHED796);
                    adaptor.addChild(root_0, MATCHED796_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matched"; 
                    }
                    }
                    break;
                case 21 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNIDIRECTIONAL797=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11630); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL797_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL797);
                    adaptor.addChild(root_0, UNIDIRECTIONAL797_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }
                    }
                    break;
                case 22 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAINUNION798=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent11637); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION798_tree = (CommonTree)adaptor.create(RETAINUNION798);
                    adaptor.addChild(root_0, RETAINUNION798_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }
                    }
                    break;
                case 23 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RETAININTERSECTION799=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11644); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION799_tree = (CommonTree)adaptor.create(RETAININTERSECTION799);
                    adaptor.addChild(root_0, RETAININTERSECTION799_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }
                    }
                    break;
                case 24 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    UNTIL800=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent11651); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL800_tree = (CommonTree)adaptor.create(UNTIL800);
                    adaptor.addChild(root_0, UNTIL800_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }
                    }
                    break;
                case 25 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PATTERN801=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent11658); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN801_tree = (CommonTree)adaptor.create(PATTERN801);
                    adaptor.addChild(root_0, PATTERN801_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }
                    }
                    break;
                case 26 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SQL802=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent11665); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL802_tree = (CommonTree)adaptor.create(SQL802);
                    adaptor.addChild(root_0, SQL802_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }
                    }
                    break;
                case 27 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    METADATASQL803=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent11672); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL803_tree = (CommonTree)adaptor.create(METADATASQL803);
                    adaptor.addChild(root_0, METADATASQL803_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }
                    }
                    break;
                case 28 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUS804=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent11679); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS804_tree = (CommonTree)adaptor.create(PREVIOUS804);
                    adaptor.addChild(root_0, PREVIOUS804_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }
                    }
                    break;
                case 29 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PREVIOUSTAIL805=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11686); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL805_tree = (CommonTree)adaptor.create(PREVIOUSTAIL805);
                    adaptor.addChild(root_0, PREVIOUSTAIL805_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }
                    }
                    break;
                case 30 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PRIOR806=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent11693); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR806_tree = (CommonTree)adaptor.create(PRIOR806);
                    adaptor.addChild(root_0, PRIOR806_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }
                    }
                    break;
                case 31 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WEEKDAY807=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent11700); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY807_tree = (CommonTree)adaptor.create(WEEKDAY807);
                    adaptor.addChild(root_0, WEEKDAY807_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }
                    }
                    break;
                case 32 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LW808=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent11707); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW808_tree = (CommonTree)adaptor.create(LW808);
                    adaptor.addChild(root_0, LW808_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }
                    }
                    break;
                case 33 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INSTANCEOF809=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent11714); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF809_tree = (CommonTree)adaptor.create(INSTANCEOF809);
                    adaptor.addChild(root_0, INSTANCEOF809_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }
                    }
                    break;
                case 34 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    TYPEOF810=(Token)match(input,TYPEOF,FOLLOW_TYPEOF_in_keywordAllowedIdent11721); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    TYPEOF810_tree = (CommonTree)adaptor.create(TYPEOF810);
                    adaptor.addChild(root_0, TYPEOF810_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "typeof"; 
                    }
                    }
                    break;
                case 35 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    CAST811=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent11728); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST811_tree = (CommonTree)adaptor.create(CAST811);
                    adaptor.addChild(root_0, CAST811_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }
                    }
                    break;
                case 36 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    SNAPSHOT812=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent11735); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT812_tree = (CommonTree)adaptor.create(SNAPSHOT812);
                    adaptor.addChild(root_0, SNAPSHOT812_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }
                    }
                    break;
                case 37 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    VARIABLE813=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent11742); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE813_tree = (CommonTree)adaptor.create(VARIABLE813);
                    adaptor.addChild(root_0, VARIABLE813_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }
                    }
                    break;
                case 38 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    INDEX814=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent11751); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX814_tree = (CommonTree)adaptor.create(INDEX814);
                    adaptor.addChild(root_0, INDEX814_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }
                    }
                    break;
                case 39 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    WINDOW815=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent11760); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW815_tree = (CommonTree)adaptor.create(WINDOW815);
                    adaptor.addChild(root_0, WINDOW815_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }
                    }
                    break;
                case 40 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    LEFT816=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent11767); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT816_tree = (CommonTree)adaptor.create(LEFT816);
                    adaptor.addChild(root_0, LEFT816_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }
                    }
                    break;
                case 41 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    RIGHT817=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11774); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT817_tree = (CommonTree)adaptor.create(RIGHT817);
                    adaptor.addChild(root_0, RIGHT817_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }
                    }
                    break;
                case 42 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    OUTER818=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11781); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER818_tree = (CommonTree)adaptor.create(OUTER818);
                    adaptor.addChild(root_0, OUTER818_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }
                    }
                    break;
                case 43 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    FULL819=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL819_tree = (CommonTree)adaptor.create(FULL819);
                    adaptor.addChild(root_0, FULL819_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }
                    }
                    break;
                case 44 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    JOIN820=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11795); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN820_tree = (CommonTree)adaptor.create(JOIN820);
                    adaptor.addChild(root_0, JOIN820_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }
                    }
                    break;
                case 45 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    DEFINE821=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11802); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE821_tree = (CommonTree)adaptor.create(DEFINE821);
                    adaptor.addChild(root_0, DEFINE821_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }
                    }
                    break;
                case 46 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    PARTITION822=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11809); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION822_tree = (CommonTree)adaptor.create(PARTITION822);
                    adaptor.addChild(root_0, PARTITION822_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }
                    }
                    break;
                case 47 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    MATCHES823=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11816); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES823_tree = (CommonTree)adaptor.create(MATCHES823);
                    adaptor.addChild(root_0, MATCHES823_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i1=null;
        Token i2=null;
        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        try {
            int alt284=2;
            int LA284_0 = input.LA(1);
            if ( (LA284_0==IDENT) ) {
                alt284=1;
            }
            else if ( (LA284_0==TICKED_STRING_LITERAL) ) {
                alt284=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);
                throw nvae;
            }
            switch (alt284) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11837); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11846); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token IDENT824=null;
        CommonTree t_tree=null;
        CommonTree IDENT824_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");
        try {
            int alt285=2;
            int LA285_0 = input.LA(1);
            if ( (LA285_0==IDENT) ) {
                alt285=1;
            }
            else if ( (LA285_0==TICKED_STRING_LITERAL) ) {
                alt285=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 285, 0, input);
                throw nvae;
            }
            switch (alt285) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    IDENT824=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11860); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT824_tree = (CommonTree)adaptor.create(IDENT824);
                    adaptor.addChild(root_0, IDENT824_tree);
                    }
                    }
                    break;
                case 2 :
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11868); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        EsperEPL2GrammarParser.yearPart_return yearPart825 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart826 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart827 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart828 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart829 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart830 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart831 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart832 = null;
        EsperEPL2GrammarParser.monthPart_return monthPart833 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart834 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart835 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart836 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart837 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart838 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart839 = null;
        EsperEPL2GrammarParser.weekPart_return weekPart840 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart841 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart842 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart843 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart844 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart845 = null;
        EsperEPL2GrammarParser.dayPart_return dayPart846 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart847 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart848 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart849 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart850 = null;
        EsperEPL2GrammarParser.hourPart_return hourPart851 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart852 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart853 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart854 = null;
        EsperEPL2GrammarParser.minutePart_return minutePart855 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart856 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart857 = null;
        EsperEPL2GrammarParser.secondPart_return secondPart858 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart859 = null;
        EsperEPL2GrammarParser.millisecondPart_return millisecondPart860 = null;
        RewriteRuleSubtreeStream stream_yearPart=new RewriteRuleSubtreeStream(adaptor,"rule yearPart");
        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        RewriteRuleSubtreeStream stream_weekPart=new RewriteRuleSubtreeStream(adaptor,"rule weekPart");
        RewriteRuleSubtreeStream stream_monthPart=new RewriteRuleSubtreeStream(adaptor,"rule monthPart");
        try {
            {
            int alt314=8;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt314=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt314=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt314=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt314=5;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt314=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt314=6;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt314=3;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt314=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 1, input);
                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt314=7;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt314=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt314=8;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt314=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt314=1;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt314=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt314=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt314=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 2, input);
                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt314=7;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt314=6;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt314=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt314=2;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt314=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt314=8;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt314=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt314=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 3, input);
                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt314=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt314=6;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt314=4;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt314=3;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt314=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt314=8;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt314=7;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt314=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 4, input);
                    throw nvae;
                }
                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt314=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt314=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt314=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt314=1;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt314=8;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt314=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt314=7;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt314=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 5, input);
                    throw nvae;
                }
                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt314=7;
                    }
                    break;
                case TIMEPERIOD_WEEK:
                case TIMEPERIOD_WEEKS:
                    {
                    alt314=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt314=8;
                    }
                    break;
                case TIMEPERIOD_MONTH:
                case TIMEPERIOD_MONTHS:
                    {
                    alt314=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt314=4;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt314=6;
                    }
                    break;
                case TIMEPERIOD_YEAR:
                case TIMEPERIOD_YEARS:
                    {
                    alt314=1;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt314=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 314, 6, input);
                    throw nvae;
                }
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 314, 0, input);
                throw nvae;
            }
            switch (alt314) {
                case 1 :
                    {
                    pushFollow(FOLLOW_yearPart_in_timePeriod11893);
                    yearPart825=yearPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_yearPart.add(yearPart825.getTree());
                    int alt286=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA286_1 = input.LA(2);
                            if ( ((LA286_1>=TIMEPERIOD_MONTH && LA286_1<=TIMEPERIOD_MONTHS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA286_2 = input.LA(2);
                            if ( ((LA286_2>=TIMEPERIOD_MONTH && LA286_2<=TIMEPERIOD_MONTHS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA286_3 = input.LA(2);
                            if ( ((LA286_3>=TIMEPERIOD_MONTH && LA286_3<=TIMEPERIOD_MONTHS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA286_4 = input.LA(2);
                            if ( ((LA286_4>=TIMEPERIOD_MONTH && LA286_4<=TIMEPERIOD_MONTHS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA286_5 = input.LA(2);
                            if ( ((LA286_5>=TIMEPERIOD_MONTH && LA286_5<=TIMEPERIOD_MONTHS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA286_6 = input.LA(2);
                            if ( ((LA286_6>=TIMEPERIOD_MONTH && LA286_6<=TIMEPERIOD_MONTHS)) ) {
                                alt286=1;
                            }
                            }
                            break;
                    }
                    switch (alt286) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_monthPart_in_timePeriod11895);
                            monthPart826=monthPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_monthPart.add(monthPart826.getTree());
                            }
                            break;
                    }
                    int alt287=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA287_1 = input.LA(2);
                            if ( ((LA287_1>=TIMEPERIOD_WEEK && LA287_1<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA287_2 = input.LA(2);
                            if ( ((LA287_2>=TIMEPERIOD_WEEK && LA287_2<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA287_3 = input.LA(2);
                            if ( ((LA287_3>=TIMEPERIOD_WEEK && LA287_3<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA287_4 = input.LA(2);
                            if ( ((LA287_4>=TIMEPERIOD_WEEK && LA287_4<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA287_5 = input.LA(2);
                            if ( ((LA287_5>=TIMEPERIOD_WEEK && LA287_5<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA287_6 = input.LA(2);
                            if ( ((LA287_6>=TIMEPERIOD_WEEK && LA287_6<=TIMEPERIOD_WEEKS)) ) {
                                alt287=1;
                            }
                            }
                            break;
                    }
                    switch (alt287) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod11898);
                            weekPart827=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart827.getTree());
                            }
                            break;
                    }
                    int alt288=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA288_1 = input.LA(2);
                            if ( ((LA288_1>=TIMEPERIOD_DAY && LA288_1<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA288_2 = input.LA(2);
                            if ( ((LA288_2>=TIMEPERIOD_DAY && LA288_2<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA288_3 = input.LA(2);
                            if ( ((LA288_3>=TIMEPERIOD_DAY && LA288_3<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA288_4 = input.LA(2);
                            if ( ((LA288_4>=TIMEPERIOD_DAY && LA288_4<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA288_5 = input.LA(2);
                            if ( ((LA288_5>=TIMEPERIOD_DAY && LA288_5<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA288_6 = input.LA(2);
                            if ( ((LA288_6>=TIMEPERIOD_DAY && LA288_6<=TIMEPERIOD_DAYS)) ) {
                                alt288=1;
                            }
                            }
                            break;
                    }
                    switch (alt288) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11901);
                            dayPart828=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart828.getTree());
                            }
                            break;
                    }
                    int alt289=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA289_1 = input.LA(2);
                            if ( ((LA289_1>=TIMEPERIOD_HOUR && LA289_1<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA289_2 = input.LA(2);
                            if ( ((LA289_2>=TIMEPERIOD_HOUR && LA289_2<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA289_3 = input.LA(2);
                            if ( ((LA289_3>=TIMEPERIOD_HOUR && LA289_3<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA289_4 = input.LA(2);
                            if ( ((LA289_4>=TIMEPERIOD_HOUR && LA289_4<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA289_5 = input.LA(2);
                            if ( ((LA289_5>=TIMEPERIOD_HOUR && LA289_5<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA289_6 = input.LA(2);
                            if ( ((LA289_6>=TIMEPERIOD_HOUR && LA289_6<=TIMEPERIOD_HOURS)) ) {
                                alt289=1;
                            }
                            }
                            break;
                    }
                    switch (alt289) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11904);
                            hourPart829=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart829.getTree());
                            }
                            break;
                    }
                    int alt290=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA290_1 = input.LA(2);
                            if ( (LA290_1==MIN||(LA290_1>=TIMEPERIOD_MINUTE && LA290_1<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA290_2 = input.LA(2);
                            if ( (LA290_2==MIN||(LA290_2>=TIMEPERIOD_MINUTE && LA290_2<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA290_3 = input.LA(2);
                            if ( (LA290_3==MIN||(LA290_3>=TIMEPERIOD_MINUTE && LA290_3<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA290_4 = input.LA(2);
                            if ( (LA290_4==MIN||(LA290_4>=TIMEPERIOD_MINUTE && LA290_4<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA290_5 = input.LA(2);
                            if ( (LA290_5==MIN||(LA290_5>=TIMEPERIOD_MINUTE && LA290_5<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA290_6 = input.LA(2);
                            if ( (LA290_6==MIN||(LA290_6>=TIMEPERIOD_MINUTE && LA290_6<=TIMEPERIOD_MINUTES)) ) {
                                alt290=1;
                            }
                            }
                            break;
                    }
                    switch (alt290) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11907);
                            minutePart830=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart830.getTree());
                            }
                            break;
                    }
                    int alt291=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA291_1 = input.LA(2);
                            if ( ((LA291_1>=TIMEPERIOD_SEC && LA291_1<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA291_2 = input.LA(2);
                            if ( ((LA291_2>=TIMEPERIOD_SEC && LA291_2<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA291_3 = input.LA(2);
                            if ( ((LA291_3>=TIMEPERIOD_SEC && LA291_3<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA291_4 = input.LA(2);
                            if ( ((LA291_4>=TIMEPERIOD_SEC && LA291_4<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA291_5 = input.LA(2);
                            if ( ((LA291_5>=TIMEPERIOD_SEC && LA291_5<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA291_6 = input.LA(2);
                            if ( ((LA291_6>=TIMEPERIOD_SEC && LA291_6<=TIMEPERIOD_SECONDS)) ) {
                                alt291=1;
                            }
                            }
                            break;
                    }
                    switch (alt291) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11910);
                            secondPart831=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart831.getTree());
                            }
                            break;
                    }
                    int alt292=2;
                    int LA292_0 = input.LA(1);
                    if ( (LA292_0==NUM_DOUBLE||LA292_0==IDENT||LA292_0==QUESTION||LA292_0==NUM_INT||(LA292_0>=NUM_LONG && LA292_0<=NUM_FLOAT)) ) {
                        alt292=1;
                    }
                    switch (alt292) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11913);
                            millisecondPart832=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart832.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_monthPart_in_timePeriod11919);
                    monthPart833=monthPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_monthPart.add(monthPart833.getTree());
                    int alt293=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA293_1 = input.LA(2);
                            if ( ((LA293_1>=TIMEPERIOD_WEEK && LA293_1<=TIMEPERIOD_WEEKS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA293_2 = input.LA(2);
                            if ( ((LA293_2>=TIMEPERIOD_WEEK && LA293_2<=TIMEPERIOD_WEEKS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA293_3 = input.LA(2);
                            if ( ((LA293_3>=TIMEPERIOD_WEEK && LA293_3<=TIMEPERIOD_WEEKS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA293_4 = input.LA(2);
                            if ( ((LA293_4>=TIMEPERIOD_WEEK && LA293_4<=TIMEPERIOD_WEEKS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA293_5 = input.LA(2);
                            if ( ((LA293_5>=TIMEPERIOD_WEEK && LA293_5<=TIMEPERIOD_WEEKS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA293_6 = input.LA(2);
                            if ( ((LA293_6>=TIMEPERIOD_WEEK && LA293_6<=TIMEPERIOD_WEEKS)) ) {
                                alt293=1;
                            }
                            }
                            break;
                    }
                    switch (alt293) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_weekPart_in_timePeriod11921);
                            weekPart834=weekPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_weekPart.add(weekPart834.getTree());
                            }
                            break;
                    }
                    int alt294=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA294_1 = input.LA(2);
                            if ( ((LA294_1>=TIMEPERIOD_DAY && LA294_1<=TIMEPERIOD_DAYS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA294_2 = input.LA(2);
                            if ( ((LA294_2>=TIMEPERIOD_DAY && LA294_2<=TIMEPERIOD_DAYS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA294_3 = input.LA(2);
                            if ( ((LA294_3>=TIMEPERIOD_DAY && LA294_3<=TIMEPERIOD_DAYS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA294_4 = input.LA(2);
                            if ( ((LA294_4>=TIMEPERIOD_DAY && LA294_4<=TIMEPERIOD_DAYS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA294_5 = input.LA(2);
                            if ( ((LA294_5>=TIMEPERIOD_DAY && LA294_5<=TIMEPERIOD_DAYS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA294_6 = input.LA(2);
                            if ( ((LA294_6>=TIMEPERIOD_DAY && LA294_6<=TIMEPERIOD_DAYS)) ) {
                                alt294=1;
                            }
                            }
                            break;
                    }
                    switch (alt294) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11924);
                            dayPart835=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart835.getTree());
                            }
                            break;
                    }
                    int alt295=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA295_1 = input.LA(2);
                            if ( ((LA295_1>=TIMEPERIOD_HOUR && LA295_1<=TIMEPERIOD_HOURS)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA295_2 = input.LA(2);
                            if ( ((LA295_2>=TIMEPERIOD_HOUR && LA295_2<=TIMEPERIOD_HOURS)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA295_3 = input.LA(2);
                            if ( ((LA295_3>=TIMEPERIOD_HOUR && LA295_3<=TIMEPERIOD_HOURS)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA295_4 = input.LA(2);
                            if ( ((LA295_4>=TIMEPERIOD_HOUR && LA295_4<=TIMEPERIOD_HOURS)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA295_5 = input.LA(2);
                            if ( ((LA295_5>=TIMEPERIOD_HOUR && LA295_5<=TIMEPERIOD_HOURS)) ) {
                                alt295=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA295_6 = input.LA(2);
                            if ( ((LA295_6>=TIMEPERIOD_HOUR && LA295_6<=TIMEPERIOD_HOURS)) ) {
                                alt295=1;
                            }
                            }
                            break;
                    }
                    switch (alt295) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11927);
                            hourPart836=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart836.getTree());
                            }
                            break;
                    }
                    int alt296=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA296_1 = input.LA(2);
                            if ( (LA296_1==MIN||(LA296_1>=TIMEPERIOD_MINUTE && LA296_1<=TIMEPERIOD_MINUTES)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA296_2 = input.LA(2);
                            if ( (LA296_2==MIN||(LA296_2>=TIMEPERIOD_MINUTE && LA296_2<=TIMEPERIOD_MINUTES)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA296_3 = input.LA(2);
                            if ( (LA296_3==MIN||(LA296_3>=TIMEPERIOD_MINUTE && LA296_3<=TIMEPERIOD_MINUTES)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA296_4 = input.LA(2);
                            if ( (LA296_4==MIN||(LA296_4>=TIMEPERIOD_MINUTE && LA296_4<=TIMEPERIOD_MINUTES)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA296_5 = input.LA(2);
                            if ( (LA296_5==MIN||(LA296_5>=TIMEPERIOD_MINUTE && LA296_5<=TIMEPERIOD_MINUTES)) ) {
                                alt296=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA296_6 = input.LA(2);
                            if ( (LA296_6==MIN||(LA296_6>=TIMEPERIOD_MINUTE && LA296_6<=TIMEPERIOD_MINUTES)) ) {
                                alt296=1;
                            }
                            }
                            break;
                    }
                    switch (alt296) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11930);
                            minutePart837=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart837.getTree());
                            }
                            break;
                    }
                    int alt297=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA297_1 = input.LA(2);
                            if ( ((LA297_1>=TIMEPERIOD_SEC && LA297_1<=TIMEPERIOD_SECONDS)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA297_2 = input.LA(2);
                            if ( ((LA297_2>=TIMEPERIOD_SEC && LA297_2<=TIMEPERIOD_SECONDS)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA297_3 = input.LA(2);
                            if ( ((LA297_3>=TIMEPERIOD_SEC && LA297_3<=TIMEPERIOD_SECONDS)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA297_4 = input.LA(2);
                            if ( ((LA297_4>=TIMEPERIOD_SEC && LA297_4<=TIMEPERIOD_SECONDS)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA297_5 = input.LA(2);
                            if ( ((LA297_5>=TIMEPERIOD_SEC && LA297_5<=TIMEPERIOD_SECONDS)) ) {
                                alt297=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA297_6 = input.LA(2);
                            if ( ((LA297_6>=TIMEPERIOD_SEC && LA297_6<=TIMEPERIOD_SECONDS)) ) {
                                alt297=1;
                            }
                            }
                            break;
                    }
                    switch (alt297) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11933);
                            secondPart838=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart838.getTree());
                            }
                            break;
                    }
                    int alt298=2;
                    int LA298_0 = input.LA(1);
                    if ( (LA298_0==NUM_DOUBLE||LA298_0==IDENT||LA298_0==QUESTION||LA298_0==NUM_INT||(LA298_0>=NUM_LONG && LA298_0<=NUM_FLOAT)) ) {
                        alt298=1;
                    }
                    switch (alt298) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11936);
                            millisecondPart839=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart839.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_weekPart_in_timePeriod11942);
                    weekPart840=weekPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_weekPart.add(weekPart840.getTree());
                    int alt299=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA299_1 = input.LA(2);
                            if ( ((LA299_1>=TIMEPERIOD_DAY && LA299_1<=TIMEPERIOD_DAYS)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA299_2 = input.LA(2);
                            if ( ((LA299_2>=TIMEPERIOD_DAY && LA299_2<=TIMEPERIOD_DAYS)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA299_3 = input.LA(2);
                            if ( ((LA299_3>=TIMEPERIOD_DAY && LA299_3<=TIMEPERIOD_DAYS)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA299_4 = input.LA(2);
                            if ( ((LA299_4>=TIMEPERIOD_DAY && LA299_4<=TIMEPERIOD_DAYS)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA299_5 = input.LA(2);
                            if ( ((LA299_5>=TIMEPERIOD_DAY && LA299_5<=TIMEPERIOD_DAYS)) ) {
                                alt299=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA299_6 = input.LA(2);
                            if ( ((LA299_6>=TIMEPERIOD_DAY && LA299_6<=TIMEPERIOD_DAYS)) ) {
                                alt299=1;
                            }
                            }
                            break;
                    }
                    switch (alt299) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_dayPart_in_timePeriod11944);
                            dayPart841=dayPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_dayPart.add(dayPart841.getTree());
                            }
                            break;
                    }
                    int alt300=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA300_1 = input.LA(2);
                            if ( ((LA300_1>=TIMEPERIOD_HOUR && LA300_1<=TIMEPERIOD_HOURS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA300_2 = input.LA(2);
                            if ( ((LA300_2>=TIMEPERIOD_HOUR && LA300_2<=TIMEPERIOD_HOURS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA300_3 = input.LA(2);
                            if ( ((LA300_3>=TIMEPERIOD_HOUR && LA300_3<=TIMEPERIOD_HOURS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA300_4 = input.LA(2);
                            if ( ((LA300_4>=TIMEPERIOD_HOUR && LA300_4<=TIMEPERIOD_HOURS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA300_5 = input.LA(2);
                            if ( ((LA300_5>=TIMEPERIOD_HOUR && LA300_5<=TIMEPERIOD_HOURS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA300_6 = input.LA(2);
                            if ( ((LA300_6>=TIMEPERIOD_HOUR && LA300_6<=TIMEPERIOD_HOURS)) ) {
                                alt300=1;
                            }
                            }
                            break;
                    }
                    switch (alt300) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11947);
                            hourPart842=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart842.getTree());
                            }
                            break;
                    }
                    int alt301=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA301_1 = input.LA(2);
                            if ( (LA301_1==MIN||(LA301_1>=TIMEPERIOD_MINUTE && LA301_1<=TIMEPERIOD_MINUTES)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA301_2 = input.LA(2);
                            if ( (LA301_2==MIN||(LA301_2>=TIMEPERIOD_MINUTE && LA301_2<=TIMEPERIOD_MINUTES)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA301_3 = input.LA(2);
                            if ( (LA301_3==MIN||(LA301_3>=TIMEPERIOD_MINUTE && LA301_3<=TIMEPERIOD_MINUTES)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA301_4 = input.LA(2);
                            if ( (LA301_4==MIN||(LA301_4>=TIMEPERIOD_MINUTE && LA301_4<=TIMEPERIOD_MINUTES)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA301_5 = input.LA(2);
                            if ( (LA301_5==MIN||(LA301_5>=TIMEPERIOD_MINUTE && LA301_5<=TIMEPERIOD_MINUTES)) ) {
                                alt301=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA301_6 = input.LA(2);
                            if ( (LA301_6==MIN||(LA301_6>=TIMEPERIOD_MINUTE && LA301_6<=TIMEPERIOD_MINUTES)) ) {
                                alt301=1;
                            }
                            }
                            break;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11950);
                            minutePart843=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart843.getTree());
                            }
                            break;
                    }
                    int alt302=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA302_1 = input.LA(2);
                            if ( ((LA302_1>=TIMEPERIOD_SEC && LA302_1<=TIMEPERIOD_SECONDS)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA302_2 = input.LA(2);
                            if ( ((LA302_2>=TIMEPERIOD_SEC && LA302_2<=TIMEPERIOD_SECONDS)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA302_3 = input.LA(2);
                            if ( ((LA302_3>=TIMEPERIOD_SEC && LA302_3<=TIMEPERIOD_SECONDS)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA302_4 = input.LA(2);
                            if ( ((LA302_4>=TIMEPERIOD_SEC && LA302_4<=TIMEPERIOD_SECONDS)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA302_5 = input.LA(2);
                            if ( ((LA302_5>=TIMEPERIOD_SEC && LA302_5<=TIMEPERIOD_SECONDS)) ) {
                                alt302=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA302_6 = input.LA(2);
                            if ( ((LA302_6>=TIMEPERIOD_SEC && LA302_6<=TIMEPERIOD_SECONDS)) ) {
                                alt302=1;
                            }
                            }
                            break;
                    }
                    switch (alt302) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11953);
                            secondPart844=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart844.getTree());
                            }
                            break;
                    }
                    int alt303=2;
                    int LA303_0 = input.LA(1);
                    if ( (LA303_0==NUM_DOUBLE||LA303_0==IDENT||LA303_0==QUESTION||LA303_0==NUM_INT||(LA303_0>=NUM_LONG && LA303_0<=NUM_FLOAT)) ) {
                        alt303=1;
                    }
                    switch (alt303) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11956);
                            millisecondPart845=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart845.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11962);
                    dayPart846=dayPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart846.getTree());
                    int alt304=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA304_1 = input.LA(2);
                            if ( ((LA304_1>=TIMEPERIOD_HOUR && LA304_1<=TIMEPERIOD_HOURS)) ) {
                                alt304=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA304_2 = input.LA(2);
                            if ( ((LA304_2>=TIMEPERIOD_HOUR && LA304_2<=TIMEPERIOD_HOURS)) ) {
                                alt304=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA304_3 = input.LA(2);
                            if ( ((LA304_3>=TIMEPERIOD_HOUR && LA304_3<=TIMEPERIOD_HOURS)) ) {
                                alt304=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA304_4 = input.LA(2);
                            if ( ((LA304_4>=TIMEPERIOD_HOUR && LA304_4<=TIMEPERIOD_HOURS)) ) {
                                alt304=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA304_5 = input.LA(2);
                            if ( ((LA304_5>=TIMEPERIOD_HOUR && LA304_5<=TIMEPERIOD_HOURS)) ) {
                                alt304=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA304_6 = input.LA(2);
                            if ( ((LA304_6>=TIMEPERIOD_HOUR && LA304_6<=TIMEPERIOD_HOURS)) ) {
                                alt304=1;
                            }
                            }
                            break;
                    }
                    switch (alt304) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11964);
                            hourPart847=hourPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart847.getTree());
                            }
                            break;
                    }
                    int alt305=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA305_1 = input.LA(2);
                            if ( (LA305_1==MIN||(LA305_1>=TIMEPERIOD_MINUTE && LA305_1<=TIMEPERIOD_MINUTES)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA305_2 = input.LA(2);
                            if ( (LA305_2==MIN||(LA305_2>=TIMEPERIOD_MINUTE && LA305_2<=TIMEPERIOD_MINUTES)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA305_3 = input.LA(2);
                            if ( (LA305_3==MIN||(LA305_3>=TIMEPERIOD_MINUTE && LA305_3<=TIMEPERIOD_MINUTES)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA305_4 = input.LA(2);
                            if ( (LA305_4==MIN||(LA305_4>=TIMEPERIOD_MINUTE && LA305_4<=TIMEPERIOD_MINUTES)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA305_5 = input.LA(2);
                            if ( (LA305_5==MIN||(LA305_5>=TIMEPERIOD_MINUTE && LA305_5<=TIMEPERIOD_MINUTES)) ) {
                                alt305=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA305_6 = input.LA(2);
                            if ( (LA305_6==MIN||(LA305_6>=TIMEPERIOD_MINUTE && LA305_6<=TIMEPERIOD_MINUTES)) ) {
                                alt305=1;
                            }
                            }
                            break;
                    }
                    switch (alt305) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11967);
                            minutePart848=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart848.getTree());
                            }
                            break;
                    }
                    int alt306=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA306_1 = input.LA(2);
                            if ( ((LA306_1>=TIMEPERIOD_SEC && LA306_1<=TIMEPERIOD_SECONDS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA306_2 = input.LA(2);
                            if ( ((LA306_2>=TIMEPERIOD_SEC && LA306_2<=TIMEPERIOD_SECONDS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA306_3 = input.LA(2);
                            if ( ((LA306_3>=TIMEPERIOD_SEC && LA306_3<=TIMEPERIOD_SECONDS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA306_4 = input.LA(2);
                            if ( ((LA306_4>=TIMEPERIOD_SEC && LA306_4<=TIMEPERIOD_SECONDS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA306_5 = input.LA(2);
                            if ( ((LA306_5>=TIMEPERIOD_SEC && LA306_5<=TIMEPERIOD_SECONDS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA306_6 = input.LA(2);
                            if ( ((LA306_6>=TIMEPERIOD_SEC && LA306_6<=TIMEPERIOD_SECONDS)) ) {
                                alt306=1;
                            }
                            }
                            break;
                    }
                    switch (alt306) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11970);
                            secondPart849=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart849.getTree());
                            }
                            break;
                    }
                    int alt307=2;
                    int LA307_0 = input.LA(1);
                    if ( (LA307_0==NUM_DOUBLE||LA307_0==IDENT||LA307_0==QUESTION||LA307_0==NUM_INT||(LA307_0>=NUM_LONG && LA307_0<=NUM_FLOAT)) ) {
                        alt307=1;
                    }
                    switch (alt307) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11973);
                            millisecondPart850=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart850.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11979);
                    hourPart851=hourPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart851.getTree());
                    int alt308=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA308_1 = input.LA(2);
                            if ( (LA308_1==MIN||(LA308_1>=TIMEPERIOD_MINUTE && LA308_1<=TIMEPERIOD_MINUTES)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA308_2 = input.LA(2);
                            if ( (LA308_2==MIN||(LA308_2>=TIMEPERIOD_MINUTE && LA308_2<=TIMEPERIOD_MINUTES)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA308_3 = input.LA(2);
                            if ( (LA308_3==MIN||(LA308_3>=TIMEPERIOD_MINUTE && LA308_3<=TIMEPERIOD_MINUTES)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA308_4 = input.LA(2);
                            if ( (LA308_4==MIN||(LA308_4>=TIMEPERIOD_MINUTE && LA308_4<=TIMEPERIOD_MINUTES)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA308_5 = input.LA(2);
                            if ( (LA308_5==MIN||(LA308_5>=TIMEPERIOD_MINUTE && LA308_5<=TIMEPERIOD_MINUTES)) ) {
                                alt308=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA308_6 = input.LA(2);
                            if ( (LA308_6==MIN||(LA308_6>=TIMEPERIOD_MINUTE && LA308_6<=TIMEPERIOD_MINUTES)) ) {
                                alt308=1;
                            }
                            }
                            break;
                    }
                    switch (alt308) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11981);
                            minutePart852=minutePart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart852.getTree());
                            }
                            break;
                    }
                    int alt309=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA309_1 = input.LA(2);
                            if ( ((LA309_1>=TIMEPERIOD_SEC && LA309_1<=TIMEPERIOD_SECONDS)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA309_2 = input.LA(2);
                            if ( ((LA309_2>=TIMEPERIOD_SEC && LA309_2<=TIMEPERIOD_SECONDS)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA309_3 = input.LA(2);
                            if ( ((LA309_3>=TIMEPERIOD_SEC && LA309_3<=TIMEPERIOD_SECONDS)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA309_4 = input.LA(2);
                            if ( ((LA309_4>=TIMEPERIOD_SEC && LA309_4<=TIMEPERIOD_SECONDS)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA309_5 = input.LA(2);
                            if ( ((LA309_5>=TIMEPERIOD_SEC && LA309_5<=TIMEPERIOD_SECONDS)) ) {
                                alt309=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA309_6 = input.LA(2);
                            if ( ((LA309_6>=TIMEPERIOD_SEC && LA309_6<=TIMEPERIOD_SECONDS)) ) {
                                alt309=1;
                            }
                            }
                            break;
                    }
                    switch (alt309) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11984);
                            secondPart853=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart853.getTree());
                            }
                            break;
                    }
                    int alt310=2;
                    int LA310_0 = input.LA(1);
                    if ( (LA310_0==NUM_DOUBLE||LA310_0==IDENT||LA310_0==QUESTION||LA310_0==NUM_INT||(LA310_0>=NUM_LONG && LA310_0<=NUM_FLOAT)) ) {
                        alt310=1;
                    }
                    switch (alt310) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11987);
                            millisecondPart854=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart854.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11993);
                    minutePart855=minutePart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart855.getTree());
                    int alt311=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA311_1 = input.LA(2);
                            if ( ((LA311_1>=TIMEPERIOD_SEC && LA311_1<=TIMEPERIOD_SECONDS)) ) {
                                alt311=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA311_2 = input.LA(2);
                            if ( ((LA311_2>=TIMEPERIOD_SEC && LA311_2<=TIMEPERIOD_SECONDS)) ) {
                                alt311=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA311_3 = input.LA(2);
                            if ( ((LA311_3>=TIMEPERIOD_SEC && LA311_3<=TIMEPERIOD_SECONDS)) ) {
                                alt311=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA311_4 = input.LA(2);
                            if ( ((LA311_4>=TIMEPERIOD_SEC && LA311_4<=TIMEPERIOD_SECONDS)) ) {
                                alt311=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA311_5 = input.LA(2);
                            if ( ((LA311_5>=TIMEPERIOD_SEC && LA311_5<=TIMEPERIOD_SECONDS)) ) {
                                alt311=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA311_6 = input.LA(2);
                            if ( ((LA311_6>=TIMEPERIOD_SEC && LA311_6<=TIMEPERIOD_SECONDS)) ) {
                                alt311=1;
                            }
                            }
                            break;
                    }
                    switch (alt311) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11995);
                            secondPart856=secondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart856.getTree());
                            }
                            break;
                    }
                    int alt312=2;
                    int LA312_0 = input.LA(1);
                    if ( (LA312_0==NUM_DOUBLE||LA312_0==IDENT||LA312_0==QUESTION||LA312_0==NUM_INT||(LA312_0>=NUM_LONG && LA312_0<=NUM_FLOAT)) ) {
                        alt312=1;
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11998);
                            millisecondPart857=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart857.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod12004);
                    secondPart858=secondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart858.getTree());
                    int alt313=2;
                    int LA313_0 = input.LA(1);
                    if ( (LA313_0==NUM_DOUBLE||LA313_0==IDENT||LA313_0==QUESTION||LA313_0==NUM_INT||(LA313_0>=NUM_LONG && LA313_0<=NUM_FLOAT)) ) {
                        alt313=1;
                    }
                    switch (alt313) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod12006);
                            millisecondPart859=millisecondPart();
                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart859.getTree());
                            }
                            break;
                    }
                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod12012);
                    millisecondPart860=millisecondPart();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart860.getTree());
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);
                if ( stream_yearPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_yearPart.nextTree());
                }
                stream_yearPart.reset();
                if ( stream_monthPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_monthPart.nextTree());
                }
                stream_monthPart.reset();
                if ( stream_weekPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_weekPart.nextTree());
                }
                stream_weekPart.reset();
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());
                }
                stream_dayPart.reset();
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());
                }
                stream_hourPart.reset();
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());
                }
                stream_minutePart.reset();
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());
                }
                stream_secondPart.reset();
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());
                }
                stream_millisecondPart.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class yearPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.yearPart_return yearPart() throws RecognitionException {
        EsperEPL2GrammarParser.yearPart_return retval = new EsperEPL2GrammarParser.yearPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_YEARS863=null;
        Token TIMEPERIOD_YEAR864=null;
        EsperEPL2GrammarParser.number_return number861 = null;
        EsperEPL2GrammarParser.substitution_return substitution862 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_YEARS863_tree=null;
        CommonTree TIMEPERIOD_YEAR864_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEARS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEARS");
        RewriteRuleTokenStream stream_TIMEPERIOD_YEAR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_YEAR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt315=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt315=1;
                }
                break;
            case IDENT:
                {
                alt315=2;
                }
                break;
            case QUESTION:
                {
                alt315=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 315, 0, input);
                throw nvae;
            }
            switch (alt315) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_yearPart12059);
                    number861=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number861.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_yearPart12063); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_yearPart12065);
                    substitution862=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution862.getTree());
                    }
                    break;
            }
            int alt316=2;
            int LA316_0 = input.LA(1);
            if ( (LA316_0==TIMEPERIOD_YEARS) ) {
                alt316=1;
            }
            else if ( (LA316_0==TIMEPERIOD_YEAR) ) {
                alt316=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 316, 0, input);
                throw nvae;
            }
            switch (alt316) {
                case 1 :
                    {
                    TIMEPERIOD_YEARS863=(Token)match(input,TIMEPERIOD_YEARS,FOLLOW_TIMEPERIOD_YEARS_in_yearPart12069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEARS.add(TIMEPERIOD_YEARS863);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_YEAR864=(Token)match(input,TIMEPERIOD_YEAR,FOLLOW_TIMEPERIOD_YEAR_in_yearPart12073); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_YEAR.add(TIMEPERIOD_YEAR864);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(YEAR_PART, "YEAR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class monthPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.monthPart_return monthPart() throws RecognitionException {
        EsperEPL2GrammarParser.monthPart_return retval = new EsperEPL2GrammarParser.monthPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MONTHS867=null;
        Token TIMEPERIOD_MONTH868=null;
        EsperEPL2GrammarParser.number_return number865 = null;
        EsperEPL2GrammarParser.substitution_return substitution866 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MONTHS867_tree=null;
        CommonTree TIMEPERIOD_MONTH868_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTH=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTH");
        RewriteRuleTokenStream stream_TIMEPERIOD_MONTHS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MONTHS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt317=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt317=1;
                }
                break;
            case IDENT:
                {
                alt317=2;
                }
                break;
            case QUESTION:
                {
                alt317=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 317, 0, input);
                throw nvae;
            }
            switch (alt317) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_monthPart12121);
                    number865=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number865.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_monthPart12125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_monthPart12127);
                    substitution866=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution866.getTree());
                    }
                    break;
            }
            int alt318=2;
            int LA318_0 = input.LA(1);
            if ( (LA318_0==TIMEPERIOD_MONTHS) ) {
                alt318=1;
            }
            else if ( (LA318_0==TIMEPERIOD_MONTH) ) {
                alt318=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 318, 0, input);
                throw nvae;
            }
            switch (alt318) {
                case 1 :
                    {
                    TIMEPERIOD_MONTHS867=(Token)match(input,TIMEPERIOD_MONTHS,FOLLOW_TIMEPERIOD_MONTHS_in_monthPart12131); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTHS.add(TIMEPERIOD_MONTHS867);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MONTH868=(Token)match(input,TIMEPERIOD_MONTH,FOLLOW_TIMEPERIOD_MONTH_in_monthPart12135); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MONTH.add(TIMEPERIOD_MONTH868);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MONTH_PART, "MONTH_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class weekPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.weekPart_return weekPart() throws RecognitionException {
        EsperEPL2GrammarParser.weekPart_return retval = new EsperEPL2GrammarParser.weekPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_WEEKS871=null;
        Token TIMEPERIOD_WEEK872=null;
        EsperEPL2GrammarParser.number_return number869 = null;
        EsperEPL2GrammarParser.substitution_return substitution870 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_WEEKS871_tree=null;
        CommonTree TIMEPERIOD_WEEK872_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEK=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEK");
        RewriteRuleTokenStream stream_TIMEPERIOD_WEEKS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_WEEKS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt319=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt319=1;
                }
                break;
            case IDENT:
                {
                alt319=2;
                }
                break;
            case QUESTION:
                {
                alt319=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 319, 0, input);
                throw nvae;
            }
            switch (alt319) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_weekPart12183);
                    number869=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number869.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekPart12187); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_weekPart12189);
                    substitution870=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution870.getTree());
                    }
                    break;
            }
            int alt320=2;
            int LA320_0 = input.LA(1);
            if ( (LA320_0==TIMEPERIOD_WEEKS) ) {
                alt320=1;
            }
            else if ( (LA320_0==TIMEPERIOD_WEEK) ) {
                alt320=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 320, 0, input);
                throw nvae;
            }
            switch (alt320) {
                case 1 :
                    {
                    TIMEPERIOD_WEEKS871=(Token)match(input,TIMEPERIOD_WEEKS,FOLLOW_TIMEPERIOD_WEEKS_in_weekPart12193); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEKS.add(TIMEPERIOD_WEEKS871);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_WEEK872=(Token)match(input,TIMEPERIOD_WEEK,FOLLOW_TIMEPERIOD_WEEK_in_weekPart12197); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_WEEK.add(TIMEPERIOD_WEEK872);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEK_PART, "WEEK_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_DAYS875=null;
        Token TIMEPERIOD_DAY876=null;
        EsperEPL2GrammarParser.number_return number873 = null;
        EsperEPL2GrammarParser.substitution_return substitution874 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS875_tree=null;
        CommonTree TIMEPERIOD_DAY876_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt321=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt321=1;
                }
                break;
            case IDENT:
                {
                alt321=2;
                }
                break;
            case QUESTION:
                {
                alt321=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 321, 0, input);
                throw nvae;
            }
            switch (alt321) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_dayPart12245);
                    number873=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number873.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart12249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart12251);
                    substitution874=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution874.getTree());
                    }
                    break;
            }
            int alt322=2;
            int LA322_0 = input.LA(1);
            if ( (LA322_0==TIMEPERIOD_DAYS) ) {
                alt322=1;
            }
            else if ( (LA322_0==TIMEPERIOD_DAY) ) {
                alt322=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 322, 0, input);
                throw nvae;
            }
            switch (alt322) {
                case 1 :
                    {
                    TIMEPERIOD_DAYS875=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart12255); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS875);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_DAY876=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart12259); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY876);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_HOURS879=null;
        Token TIMEPERIOD_HOUR880=null;
        EsperEPL2GrammarParser.number_return number877 = null;
        EsperEPL2GrammarParser.substitution_return substitution878 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS879_tree=null;
        CommonTree TIMEPERIOD_HOUR880_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt323=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt323=1;
                }
                break;
            case IDENT:
                {
                alt323=2;
                }
                break;
            case QUESTION:
                {
                alt323=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 323, 0, input);
                throw nvae;
            }
            switch (alt323) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_hourPart12308);
                    number877=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number877.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart12312); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart12314);
                    substitution878=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution878.getTree());
                    }
                    break;
            }
            int alt324=2;
            int LA324_0 = input.LA(1);
            if ( (LA324_0==TIMEPERIOD_HOURS) ) {
                alt324=1;
            }
            else if ( (LA324_0==TIMEPERIOD_HOUR) ) {
                alt324=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);
                throw nvae;
            }
            switch (alt324) {
                case 1 :
                    {
                    TIMEPERIOD_HOURS879=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart12318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS879);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_HOUR880=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart12322); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR880);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MINUTES883=null;
        Token TIMEPERIOD_MINUTE884=null;
        Token MIN885=null;
        EsperEPL2GrammarParser.number_return number881 = null;
        EsperEPL2GrammarParser.substitution_return substitution882 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES883_tree=null;
        CommonTree TIMEPERIOD_MINUTE884_tree=null;
        CommonTree MIN885_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt325=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt325=1;
                }
                break;
            case IDENT:
                {
                alt325=2;
                }
                break;
            case QUESTION:
                {
                alt325=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 325, 0, input);
                throw nvae;
            }
            switch (alt325) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_minutePart12371);
                    number881=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number881.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart12375); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart12377);
                    substitution882=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution882.getTree());
                    }
                    break;
            }
            int alt326=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt326=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt326=2;
                }
                break;
            case MIN:
                {
                alt326=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 326, 0, input);
                throw nvae;
            }
            switch (alt326) {
                case 1 :
                    {
                    TIMEPERIOD_MINUTES883=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart12381); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES883);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MINUTE884=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart12385); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE884);
                    }
                    break;
                case 3 :
                    {
                    MIN885=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart12389); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN885);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_SECONDS888=null;
        Token TIMEPERIOD_SECOND889=null;
        Token TIMEPERIOD_SEC890=null;
        EsperEPL2GrammarParser.number_return number886 = null;
        EsperEPL2GrammarParser.substitution_return substitution887 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS888_tree=null;
        CommonTree TIMEPERIOD_SECOND889_tree=null;
        CommonTree TIMEPERIOD_SEC890_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt327=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt327=1;
                }
                break;
            case IDENT:
                {
                alt327=2;
                }
                break;
            case QUESTION:
                {
                alt327=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 327, 0, input);
                throw nvae;
            }
            switch (alt327) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_secondPart12439);
                    number886=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number886.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart12443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart12445);
                    substitution887=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution887.getTree());
                    }
                    break;
            }
            int alt328=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt328=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt328=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt328=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);
                throw nvae;
            }
            switch (alt328) {
                case 1 :
                    {
                    TIMEPERIOD_SECONDS888=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart12449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS888);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_SECOND889=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart12453); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND889);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_SEC890=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart12457); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC890);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token i=null;
        Token TIMEPERIOD_MILLISECONDS893=null;
        Token TIMEPERIOD_MILLISECOND894=null;
        Token TIMEPERIOD_MILLISEC895=null;
        EsperEPL2GrammarParser.number_return number891 = null;
        EsperEPL2GrammarParser.substitution_return substitution892 = null;
        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS893_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND894_tree=null;
        CommonTree TIMEPERIOD_MILLISEC895_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            {
            int alt329=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt329=1;
                }
                break;
            case IDENT:
                {
                alt329=2;
                }
                break;
            case QUESTION:
                {
                alt329=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 329, 0, input);
                throw nvae;
            }
            switch (alt329) {
                case 1 :
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart12507);
                    number891=number();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number891.getTree());
                    }
                    break;
                case 2 :
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart12511); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);
                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart12513);
                    substitution892=substitution();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution892.getTree());
                    }
                    break;
            }
            int alt330=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt330=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt330=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt330=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 330, 0, input);
                throw nvae;
            }
            switch (alt330) {
                case 1 :
                    {
                    TIMEPERIOD_MILLISECONDS893=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart12517); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS893);
                    }
                    break;
                case 2 :
                    {
                    TIMEPERIOD_MILLISECOND894=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart12521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND894);
                    }
                    break;
                case 3 :
                    {
                    TIMEPERIOD_MILLISEC895=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart12525); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC895);
                    }
                    break;
            }
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (i!= null) {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);
                adaptor.addChild(root_3, stream_i.nextNode());
                adaptor.addChild(root_2, root_3);
                }
                adaptor.addChild(root_1, root_2);
                }
                adaptor.addChild(root_0, root_1);
                }
            }
            else 
            {
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());
                }
                stream_number.reset();
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());
                }
                stream_substitution.reset();
                adaptor.addChild(root_0, root_1);
                }
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;
        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        try {
            int alt331=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt331=1;
                }
                break;
            case NUM_LONG:
                {
                alt331=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt331=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt331=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 331, 0, input);
                throw nvae;
            }
            switch (alt331) {
                case 1 :
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number12580); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number12597); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number12614); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number12631); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token q=null;
        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        try {
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution12652); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant896 = null;
        EsperEPL2GrammarParser.stringconstant_return stringconstant897 = null;
        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");
        try {
            int alt332=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt332=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt332=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt332=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt332=4;
                }
                break;
            case VALUE_NULL:
                {
                alt332=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 332, 0, input);
                throw nvae;
            }
            switch (alt332) {
                case 1 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_numberconstant_in_constant12671);
                    numberconstant896=numberconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant896.getTree());
                    }
                    break;
                case 2 :
                    {
                    root_0 = (CommonTree)adaptor.nil();
                    pushFollow(FOLLOW_stringconstant_in_constant12678);
                    stringconstant897=stringconstant();
                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant897.getTree());
                    }
                    break;
                case 3 :
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant12691); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant12711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant12731); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number898 = null;
        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            {
            int alt333=3;
            int LA333_0 = input.LA(1);
            if ( (LA333_0==MINUS) ) {
                alt333=1;
            }
            else if ( (LA333_0==PLUS) ) {
                alt333=2;
            }
            switch (alt333) {
                case 1 :
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant12753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);
                    }
                    break;
                case 2 :
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant12759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);
                    }
                    break;
            }
            pushFollow(FOLLOW_number_in_numberconstant12763);
            number898=number();
            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number898.getTree());
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            root_0 = (CommonTree)adaptor.nil();
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number898!=null?((CommonTree)number898.tree):null).getType(), "-" + (number898!=null?input.toString(number898.start,number898.stop):null)));
            }
            else 
            {
                adaptor.addChild(root_0, stream_number.nextTree());
            }
            retval.tree = root_0;}
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);
        CommonTree root_0 = null;
        Token sl=null;
        Token qsl=null;
        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        try {
            int alt334=2;
            int LA334_0 = input.LA(1);
            if ( (LA334_0==STRING_LITERAL) ) {
                alt334=1;
            }
            else if ( (LA334_0==QUOTED_STRING_LITERAL) ) {
                alt334=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 334, 0, input);
                throw nvae;
            }
            switch (alt334) {
                case 1 :
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant12792); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12808); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
                    root_0 = (CommonTree)adaptor.nil();
                    {
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);
                        adaptor.addChild(root_0, root_1);
                        }
                    }
                    retval.tree = root_0;}
                    }
                    break;
            }
            retval.stop = input.LT(-1);
            if ( state.backtracking==0 ) {
            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }
          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4703);
        streamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6103);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7967);
        builtinFunc();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8805);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8873);
        eventProperty();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10183);
        propertyStreamSelector();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10606);
        lastOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10617);
        lastWeekdayOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10628);
        timePeriod();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10639);
        expressionQualifyable();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10650);
        rangeOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10662);
        frequencyOperand();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10673);
        lastOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10684);
        weekDayOperator();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10697);
        numericParameterList();
        state._fsp--;
        if (state.failed) return ;
        }
    }
    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); 
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    protected DFA191 dfa191 = new DFA191(this);
    static final String DFA191_eotS =
        "\u0ba8\uffff";
    static final String DFA191_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\12\uffff"+
        "\3\16\2\uffff\3\16\3\uffff\1\16\u0b73\uffff";
    static final String DFA191_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\12\uffff\3\6\2\uffff\3\6\3\uffff\1\6\12\uffff\1\u0122\171\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73\uffff"+
        "\1\5\73\uffff\1\u012d\73\uffff\1\5\73\uffff\1\5\73\uffff\1\5\73"+
        "\uffff\1\5\73\uffff\1\5\11\uffff\2\6\104\uffff\2\6\103\uffff\2\6"+
        "\72\uffff\2\6\112\uffff\2\6\103\uffff\2\6\103\uffff\2\6\103\uffff"+
        "\2\6\71\uffff\2\6\111\uffff\2\6\101\uffff\2\6\75\uffff\2\6\110\uffff"+
        "\2\6\72\uffff\2\6\112\uffff\2\6\151\uffff\1\0\30\uffff\1\0\53\uffff"+
        "\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff\1\0\137\uffff\1\0\30\uffff"+
        "\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff\1\0\30\uffff\1\0\54\uffff"+
        "\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\5\uffff"+
        "\1\0\55\uffff\1\0\5\uffff\1\0\140\uffff\1\0\30\uffff\1\0\73\uffff"+
        "\1\0\30\uffff\1\0\30\uffff";
    static final String DFA191_maxS =
        "\2\u0144\13\uffff\1\u0144\3\uffff\1\u0141\2\uffff\2\u0141\2\uffff"+
        "\4\u0141\1\uffff\2\u0141\12\uffff\3\u0141\2\uffff\3\u0141\3\uffff"+
        "\1\u0141\12\uffff\1\u0122\171\uffff\1\u0144\73\uffff\1\u0144\73"+
        "\uffff\1\u0144\73\uffff\1\u0144\73\uffff\1\u0144\73\uffff\1\u0144"+
        "\73\uffff\1\u0144\73\uffff\1\u0144\73\uffff\1\u0144\73\uffff\1\u0144"+
        "\73\uffff\1\u0144\73\uffff\1\u013d\73\uffff\1\u0144\73\uffff\1\u0144"+
        "\73\uffff\1\u0144\73\uffff\1\u0144\73\uffff\1\u0142\11\uffff\2\u013a"+
        "\104\uffff\2\u013a\103\uffff\2\u013a\72\uffff\2\u013a\112\uffff"+
        "\2\u013a\103\uffff\2\u013a\103\uffff\2\u013a\103\uffff\2\u013a\71"+
        "\uffff\2\u013a\111\uffff\2\u013a\101\uffff\2\u013a\75\uffff\2\u013a"+
        "\110\uffff\2\u013a\72\uffff\2\u013a\112\uffff\2\u013a\151\uffff"+
        "\1\0\30\uffff\1\0\53\uffff\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\137\uffff\1\0\30\uffff\1\0\5\uffff\1\0\30\uffff\1\0\30\uffff"+
        "\1\0\30\uffff\1\0\54\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\55\uffff\1\0\5\uffff\1\0\140\uffff"+
        "\1\0\30\uffff\1\0\73\uffff\1\0\30\uffff\1\0\30\uffff";
    static final String DFA191_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\56\uffff\2\6\1\uffff\1\6"+
        "\1\7\1\1\62\uffff\1\10\1\4\u0403\uffff\11\6\2\uffff\104\6\2\uffff"+
        "\103\6\2\uffff\72\6\2\uffff\112\6\2\uffff\103\6\2\uffff\103\6\2"+
        "\uffff\103\6\2\uffff\71\6\2\uffff\111\6\2\uffff\101\6\2\uffff\73"+
        "\6\4\uffff\110\6\2\uffff\72\6\2\uffff\112\6\2\uffff\71\6\1\11\57"+
        "\6\1\uffff\30\6\1\uffff\53\6\1\uffff\5\6\1\uffff\30\6\1\uffff\30"+
        "\6\1\uffff\30\6\1\uffff\62\6\1\uffff\23\6\1\uffff\30\6\1\uffff\5"+
        "\6\1\uffff\30\6\1\uffff\30\6\1\uffff\30\6\1\uffff\54\6\1\uffff\31"+
        "\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff\55"+
        "\6\1\uffff\5\6\1\uffff\62\6\1\uffff\31\6\1\uffff\23\6\1\uffff\30"+
        "\6\1\uffff\5\6\1\uffff\64\6\2\uffff\30\6\1\uffff\30\6";
    static final String DFA191_specialS =
        "\1\0\u00b8\uffff\1\1\73\uffff\1\2\73\uffff\1\3\73\uffff\1\4\73"+
        "\uffff\1\5\73\uffff\1\6\73\uffff\1\7\73\uffff\1\10\73\uffff\1\11"+
        "\73\uffff\1\12\73\uffff\1\13\73\uffff\1\14\73\uffff\1\15\73\uffff"+
        "\1\16\73\uffff\1\17\73\uffff\1\20\73\uffff\1\21\11\uffff\1\22\1"+
        "\23\104\uffff\1\24\1\25\103\uffff\1\26\1\27\72\uffff\1\30\1\31\112"+
        "\uffff\1\32\1\33\103\uffff\1\34\1\35\103\uffff\1\36\1\37\103\uffff"+
        "\1\40\1\41\71\uffff\1\42\1\43\111\uffff\1\44\1\45\101\uffff\1\46"+
        "\1\47\75\uffff\1\50\1\51\110\uffff\1\52\1\53\72\uffff\1\54\1\55"+
        "\112\uffff\1\56\1\57\151\uffff\1\60\30\uffff\1\61\53\uffff\1\62"+
        "\5\uffff\1\63\30\uffff\1\64\30\uffff\1\65\137\uffff\1\66\30\uffff"+
        "\1\67\5\uffff\1\70\30\uffff\1\71\30\uffff\1\72\30\uffff\1\73\54"+
        "\uffff\1\74\31\uffff\1\75\31\uffff\1\76\31\uffff\1\77\31\uffff\1"+
        "\100\5\uffff\1\101\55\uffff\1\102\5\uffff\1\103\140\uffff\1\104"+
        "\30\uffff\1\105\73\uffff\1\106\30\uffff\1\107\30\uffff}>";
    static final String[] DFA191_transitionS = {
            "\1\64\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\51\1\52\1\75\1\76\1\53\1\77\2\16"+
            "\1\56\1\57\1\60\1\100\1\uffff\1\16\1\uffff\4\16\22\uffff\3\2"+
            "\5\uffff\3\16\2\uffff\1\16\1\uffff\2\16\u0097\uffff\1\2\16\uffff"+
            "\1\16\1\15\7\uffff\1\2\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff"+
            "\1\101\1\uffff\1\2\4\uffff\1\16\2\2",
            "\1\102\4\uffff\1\102\3\uffff\1\102\3\uffff\11\102\10\uffff"+
            "\1\102\1\uffff\4\102\12\uffff\3\102\11\uffff\10\102\2\uffff"+
            "\1\102\1\uffff\5\102\2\uffff\1\102\1\uffff\4\102\32\uffff\3"+
            "\102\2\uffff\1\102\1\uffff\2\102\u0097\uffff\1\2\16\uffff\1"+
            "\102\33\uffff\1\2\4\uffff\1\102\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\166\4\uffff\1\166\2\uffff\2\166\3\uffff\11\166\1\165\1"+
            "\166\6\uffff\1\166\1\uffff\4\166\12\uffff\3\166\11\uffff\22"+
            "\166\1\uffff\1\166\1\uffff\4\166\22\uffff\3\166\5\uffff\3\166"+
            "\2\uffff\1\166\1\uffff\2\166\u0097\uffff\1\166\16\uffff\2\166"+
            "\7\uffff\2\166\1\uffff\2\166\11\uffff\1\166\2\uffff\1\166\1"+
            "\uffff\1\166\4\uffff\3\166",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u00b9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u00f5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u0131\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u016d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u01a9\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u01e5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u0221\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u025d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u0299\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u02d5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u0311\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u034d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u0389\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u03c5\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u0401\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\41\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u00a9"+
            "\uffff\1\16\1\uffff\1\u043d\12\16\2\uffff\14\16\1\uffff\1\16"+
            "\3\uffff\2\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0479",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04b0\4\uffff\1\u048e\2\uffff\1\u04be\1\u048f\3\uffff\1"+
            "\u0490\1\u0491\1\u0492\1\u0493\1\u0494\1\u0495\1\u0496\1\u0497"+
            "\1\u048d\1\uffff\1\u047c\6\uffff\1\u04b3\1\uffff\1\u04b5\1\u04b1"+
            "\1\u04b2\1\u04b4\5\uffff\1\u047b\1\u047a\3\uffff\1\u0498\1\u0499"+
            "\1\u049a\11\uffff\1\u049e\1\u049f\1\u04a0\1\u04a2\1\u04a3\1"+
            "\u04a4\1\u04a5\1\u04a6\1\u04b9\1\u04ba\1\u04a7\1\u04bb\1\u04a8"+
            "\1\u04a9\1\u04aa\1\u04ab\1\u04ac\1\u04bc\1\uffff\1\u04ad\1\uffff"+
            "\1\u04ae\1\u04a1\1\u048c\1\u04af\22\uffff\1\u0485\1\u0486\1"+
            "\u0487\5\uffff\1\u04b6\1\u04b7\1\u04b8\2\uffff\1\u049b\1\uffff"+
            "\1\u049c\1\u049d\u0097\uffff\1\u0482\16\uffff\1\u048a\1\u0489"+
            "\5\uffff\1\u04bf\1\uffff\1\u047e\1\u0488\1\uffff\1\u0483\1\u0484"+
            "\11\uffff\1\u047d\2\uffff\1\u04bd\1\uffff\1\u047f\4\uffff\1"+
            "\u048b\1\u0480\1\u0481",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04f6\4\uffff\1\u04d4\2\uffff\1\u0504\1\u04d5\3\uffff\1"+
            "\u04d6\1\u04d7\1\u04d8\1\u04d9\1\u04da\1\u04db\1\u04dc\1\u04dd"+
            "\1\u04d3\1\uffff\1\u04c2\6\uffff\1\u04f9\1\uffff\1\u04fb\1\u04f7"+
            "\1\u04f8\1\u04fa\5\uffff\1\u04c1\1\u04c0\3\uffff\1\u04de\1\u04df"+
            "\1\u04e0\11\uffff\1\u04e4\1\u04e5\1\u04e6\1\u04e8\1\u04e9\1"+
            "\u04ea\1\u04eb\1\u04ec\1\u04ff\1\u0500\1\u04ed\1\u0501\1\u04ee"+
            "\1\u04ef\1\u04f0\1\u04f1\1\u04f2\1\u0502\1\uffff\1\u04f3\1\uffff"+
            "\1\u04f4\1\u04e7\1\u04d2\1\u04f5\22\uffff\1\u04cb\1\u04cc\1"+
            "\u04cd\5\uffff\1\u04fc\1\u04fd\1\u04fe\2\uffff\1\u04e1\1\uffff"+
            "\1\u04e2\1\u04e3\u0097\uffff\1\u04c8\16\uffff\1\u04d0\1\u04cf"+
            "\7\uffff\1\u04c4\1\u04ce\1\uffff\1\u04c9\1\u04ca\11\uffff\1"+
            "\u04c3\2\uffff\1\u0503\1\uffff\1\u04c5\4\uffff\1\u04d1\1\u04c6"+
            "\1\u04c7",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u053b\4\uffff\1\u0519\2\uffff\1\u0549\1\u051a\3\uffff\1"+
            "\u051b\1\u051c\1\u051d\1\u051e\1\u051f\1\u0520\1\u0521\1\u0522"+
            "\1\u0518\1\uffff\1\u0507\6\uffff\1\u053e\1\uffff\1\u0540\1\u053c"+
            "\1\u053d\1\u053f\5\uffff\1\u0506\1\u0505\3\uffff\1\u0523\1\u0524"+
            "\1\u0525\11\uffff\1\u0529\1\u052a\1\u052b\1\u052d\1\u052e\1"+
            "\u052f\1\u0530\1\u0531\1\u0544\1\u0545\1\u0532\1\u0546\1\u0533"+
            "\1\u0534\1\u0535\1\u0536\1\u0537\1\u0547\1\uffff\1\u0538\1\uffff"+
            "\1\u0539\1\u052c\1\u0517\1\u053a\22\uffff\1\u0510\1\u0511\1"+
            "\u0512\5\uffff\1\u0541\1\u0542\1\u0543\2\uffff\1\u0526\1\uffff"+
            "\1\u0527\1\u0528\u0097\uffff\1\u050d\16\uffff\1\u0515\1\u0514"+
            "\7\uffff\1\u0509\1\u0513\1\uffff\1\u050e\1\u050f\11\uffff\1"+
            "\u0508\2\uffff\1\u0548\1\uffff\1\u050a\4\uffff\1\u0516\1\u050b"+
            "\1\u050c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u057e\4\uffff\1\u055c\2\uffff\1\u058c\1\u055d\3\uffff\1"+
            "\u055e\1\u055f\1\u0560\1\u0561\1\u0562\1\u0563\1\u0564\1\u0565"+
            "\1\u055b\1\uffff\1\u054c\6\uffff\1\u0581\1\uffff\1\u0583\1\u057f"+
            "\1\u0580\1\u0582\12\uffff\1\u0566\1\u0567\1\u0568\11\uffff\1"+
            "\u056c\1\u056d\1\u056e\1\u0570\1\u0571\1\u0572\1\u0573\1\u0574"+
            "\1\u0587\1\u0588\1\u0575\1\u0589\1\u0576\1\u0577\1\u0578\1\u0579"+
            "\1\u057a\1\u058a\1\uffff\1\u057b\1\uffff\1\u057c\1\u056f\1\u055a"+
            "\1\u057d\22\uffff\1\u0553\1\u0554\1\u0555\5\uffff\1\u0584\1"+
            "\u0585\1\u0586\2\uffff\1\u0569\1\uffff\1\u056a\1\u056b\u0097"+
            "\uffff\1\u0552\16\uffff\1\u0558\1\u0557\7\uffff\1\u054e\1\u0556"+
            "\1\uffff\1\u054a\1\u054b\11\uffff\1\u054d\2\uffff\1\u058b\1"+
            "\uffff\1\u054f\4\uffff\1\u0559\1\u0550\1\u0551",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05c3\4\uffff\1\u05a1\2\uffff\1\u05d1\1\u05a2\3\uffff\1"+
            "\u05a3\1\u05a4\1\u05a5\1\u05a6\1\u05a7\1\u05a8\1\u05a9\1\u05aa"+
            "\1\u05a0\1\uffff\1\u058f\6\uffff\1\u05c6\1\uffff\1\u05c8\1\u05c4"+
            "\1\u05c5\1\u05c7\5\uffff\1\u058e\1\u058d\3\uffff\1\u05ab\1\u05ac"+
            "\1\u05ad\11\uffff\1\u05b1\1\u05b2\1\u05b3\1\u05b5\1\u05b6\1"+
            "\u05b7\1\u05b8\1\u05b9\1\u05cc\1\u05cd\1\u05ba\1\u05ce\1\u05bb"+
            "\1\u05bc\1\u05bd\1\u05be\1\u05bf\1\u05cf\1\uffff\1\u05c0\1\uffff"+
            "\1\u05c1\1\u05b4\1\u059f\1\u05c2\22\uffff\1\u0598\1\u0599\1"+
            "\u059a\5\uffff\1\u05c9\1\u05ca\1\u05cb\2\uffff\1\u05ae\1\uffff"+
            "\1\u05af\1\u05b0\u0097\uffff\1\u0595\16\uffff\1\u059d\1\u059c"+
            "\7\uffff\1\u0591\1\u059b\1\uffff\1\u0596\1\u0597\11\uffff\1"+
            "\u0590\2\uffff\1\u05d0\1\uffff\1\u0592\4\uffff\1\u059e\1\u0593"+
            "\1\u0594",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0608\4\uffff\1\u05e6\2\uffff\1\u0616\1\u05e7\3\uffff\1"+
            "\u05e8\1\u05e9\1\u05ea\1\u05eb\1\u05ec\1\u05ed\1\u05ee\1\u05ef"+
            "\1\u05e5\1\uffff\1\u05d4\6\uffff\1\u060b\1\uffff\1\u060d\1\u0609"+
            "\1\u060a\1\u060c\5\uffff\1\u05d3\1\u05d2\3\uffff\1\u05f0\1\u05f1"+
            "\1\u05f2\11\uffff\1\u05f6\1\u05f7\1\u05f8\1\u05fa\1\u05fb\1"+
            "\u05fc\1\u05fd\1\u05fe\1\u0611\1\u0612\1\u05ff\1\u0613\1\u0600"+
            "\1\u0601\1\u0602\1\u0603\1\u0604\1\u0614\1\uffff\1\u0605\1\uffff"+
            "\1\u0606\1\u05f9\1\u05e4\1\u0607\22\uffff\1\u05dd\1\u05de\1"+
            "\u05df\5\uffff\1\u060e\1\u060f\1\u0610\2\uffff\1\u05f3\1\uffff"+
            "\1\u05f4\1\u05f5\u0097\uffff\1\u05da\16\uffff\1\u05e2\1\u05e1"+
            "\7\uffff\1\u05d6\1\u05e0\1\uffff\1\u05db\1\u05dc\11\uffff\1"+
            "\u05d5\2\uffff\1\u0615\1\uffff\1\u05d7\4\uffff\1\u05e3\1\u05d8"+
            "\1\u05d9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u064d\4\uffff\1\u062b\2\uffff\1\u065b\1\u062c\3\uffff\1"+
            "\u062d\1\u062e\1\u062f\1\u0630\1\u0631\1\u0632\1\u0633\1\u0634"+
            "\1\u062a\1\uffff\1\u0619\6\uffff\1\u0650\1\uffff\1\u0652\1\u064e"+
            "\1\u064f\1\u0651\5\uffff\1\u0618\1\u0617\3\uffff\1\u0635\1\u0636"+
            "\1\u0637\11\uffff\1\u063b\1\u063c\1\u063d\1\u063f\1\u0640\1"+
            "\u0641\1\u0642\1\u0643\1\u0656\1\u0657\1\u0644\1\u0658\1\u0645"+
            "\1\u0646\1\u0647\1\u0648\1\u0649\1\u0659\1\uffff\1\u064a\1\uffff"+
            "\1\u064b\1\u063e\1\u0629\1\u064c\22\uffff\1\u0622\1\u0623\1"+
            "\u0624\5\uffff\1\u0653\1\u0654\1\u0655\2\uffff\1\u0638\1\uffff"+
            "\1\u0639\1\u063a\u0097\uffff\1\u061f\16\uffff\1\u0627\1\u0626"+
            "\7\uffff\1\u061b\1\u0625\1\uffff\1\u0620\1\u0621\11\uffff\1"+
            "\u061a\2\uffff\1\u065a\1\uffff\1\u061c\4\uffff\1\u0628\1\u061d"+
            "\1\u061e",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0691\4\uffff\1\u066f\2\uffff\1\u069f\1\u0670\3\uffff\1"+
            "\u0671\1\u0672\1\u0673\1\u0674\1\u0675\1\u0676\1\u0677\1\u0678"+
            "\1\u066e\1\uffff\1\u065e\6\uffff\1\u0694\1\uffff\1\u0696\1\u0692"+
            "\1\u0693\1\u0695\12\uffff\1\u0679\1\u067a\1\u067b\11\uffff\1"+
            "\u067f\1\u0680\1\u0681\1\u0683\1\u0684\1\u0685\1\u0686\1\u0687"+
            "\1\u069a\1\u069b\1\u0688\1\u069c\1\u0689\1\u068a\1\u068b\1\u068c"+
            "\1\u068d\1\u069d\1\uffff\1\u068e\1\uffff\1\u068f\1\u0682\1\u066d"+
            "\1\u0690\22\uffff\1\u0667\1\u0668\1\u0669\5\uffff\1\u0697\1"+
            "\u0698\1\u0699\2\uffff\1\u067c\1\uffff\1\u067d\1\u067e\u0097"+
            "\uffff\1\u0664\16\uffff\1\u065d\1\u066b\5\uffff\1\u065c\1\uffff"+
            "\1\u0660\1\u066a\1\uffff\1\u0665\1\u0666\11\uffff\1\u065f\2"+
            "\uffff\1\u069e\1\uffff\1\u0661\4\uffff\1\u066c\1\u0662\1\u0663",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06d5\4\uffff\1\u06b3\2\uffff\1\u06e3\1\u06b4\3\uffff\1"+
            "\u06b5\1\u06b6\1\u06b7\1\u06b8\1\u06b9\1\u06ba\1\u06bb\1\u06bc"+
            "\1\u06b2\1\uffff\1\u06a4\6\uffff\1\u06d8\1\uffff\1\u06da\1\u06d6"+
            "\1\u06d7\1\u06d9\12\uffff\1\u06bd\1\u06be\1\u06bf\11\uffff\1"+
            "\u06c3\1\u06c4\1\u06c5\1\u06c7\1\u06c8\1\u06c9\1\u06ca\1\u06cb"+
            "\1\u06de\1\u06df\1\u06cc\1\u06e0\1\u06cd\1\u06ce\1\u06cf\1\u06d0"+
            "\1\u06d1\1\u06e1\1\uffff\1\u06d2\1\uffff\1\u06d3\1\u06c6\1\u06b1"+
            "\1\u06d4\22\uffff\1\u06ab\1\u06ac\1\u06ad\5\uffff\1\u06db\1"+
            "\u06dc\1\u06dd\2\uffff\1\u06c0\1\uffff\1\u06c1\1\u06c2\u0097"+
            "\uffff\1\u06aa\16\uffff\1\u06a3\1\u06af\5\uffff\1\u06a2\1\uffff"+
            "\1\u06a6\1\u06ae\1\uffff\1\u06a0\1\u06a1\11\uffff\1\u06a5\2"+
            "\uffff\1\u06e2\1\uffff\1\u06a7\4\uffff\1\u06b0\1\u06a8\1\u06a9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0718\4\uffff\1\u06f6\2\uffff\1\u0726\1\u06f7\3\uffff\1"+
            "\u06f8\1\u06f9\1\u06fa\1\u06fb\1\u06fc\1\u06fd\1\u06fe\1\u06ff"+
            "\1\u06f5\1\uffff\1\u06e4\6\uffff\1\u071b\1\uffff\1\u071d\1\u0719"+
            "\1\u071a\1\u071c\12\uffff\1\u0700\1\u0701\1\u0702\11\uffff\1"+
            "\u0706\1\u0707\1\u0708\1\u070a\1\u070b\1\u070c\1\u070d\1\u070e"+
            "\1\u0721\1\u0722\1\u070f\1\u0723\1\u0710\1\u0711\1\u0712\1\u0713"+
            "\1\u0714\1\u0724\1\uffff\1\u0715\1\uffff\1\u0716\1\u0709\1\u06f4"+
            "\1\u0717\22\uffff\1\u06ed\1\u06ee\1\u06ef\5\uffff\1\u071e\1"+
            "\u071f\1\u0720\2\uffff\1\u0703\1\uffff\1\u0704\1\u0705\u0097"+
            "\uffff\1\u06ea\16\uffff\1\u06f2\1\u06f1\7\uffff\1\u06e6\1\u06f0"+
            "\1\uffff\1\u06eb\1\u06ec\11\uffff\1\u06e5\2\uffff\1\u0725\1"+
            "\uffff\1\u06e7\4\uffff\1\u06f3\1\u06e8\1\u06e9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u075b\4\uffff\1\u0739\2\uffff\1\u0769\1\u073a\3\uffff\1"+
            "\u073b\1\u073c\1\u073d\1\u073e\1\u073f\1\u0740\1\u0741\1\u0742"+
            "\1\u0738\1\uffff\1\u0727\6\uffff\1\u075e\1\uffff\1\u0760\1\u075c"+
            "\1\u075d\1\u075f\12\uffff\1\u0743\1\u0744\1\u0745\11\uffff\1"+
            "\u0749\1\u074a\1\u074b\1\u074d\1\u074e\1\u074f\1\u0750\1\u0751"+
            "\1\u0764\1\u0765\1\u0752\1\u0766\1\u0753\1\u0754\1\u0755\1\u0756"+
            "\1\u0757\1\u0767\1\uffff\1\u0758\1\uffff\1\u0759\1\u074c\1\u0737"+
            "\1\u075a\22\uffff\1\u0730\1\u0731\1\u0732\5\uffff\1\u0761\1"+
            "\u0762\1\u0763\2\uffff\1\u0746\1\uffff\1\u0747\1\u0748\u0097"+
            "\uffff\1\u072d\16\uffff\1\u0735\1\u0734\7\uffff\1\u0729\1\u0733"+
            "\1\uffff\1\u072e\1\u072f\11\uffff\1\u0728\2\uffff\1\u0768\1"+
            "\uffff\1\u072a\4\uffff\1\u0736\1\u072b\1\u072c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u076a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07a1\4\uffff\1\u077f\2\uffff\1\u07af\1\u0780\3\uffff\1"+
            "\u0781\1\u0782\1\u0783\1\u0784\1\u0785\1\u0786\1\u0787\1\u0788"+
            "\1\u077e\1\uffff\1\u076f\6\uffff\1\u07a4\1\uffff\1\u07a6\1\u07a2"+
            "\1\u07a3\1\u07a5\12\uffff\1\u0789\1\u078a\1\u078b\11\uffff\1"+
            "\u078f\1\u0790\1\u0791\1\u0793\1\u0794\1\u0795\1\u0796\1\u0797"+
            "\1\u07aa\1\u07ab\1\u0798\1\u07ac\1\u0799\1\u079a\1\u079b\1\u079c"+
            "\1\u079d\1\u07ad\1\uffff\1\u079e\1\uffff\1\u079f\1\u0792\1\u077d"+
            "\1\u07a0\22\uffff\1\u0776\1\u0777\1\u0778\5\uffff\1\u07a7\1"+
            "\u07a8\1\u07a9\2\uffff\1\u078c\1\uffff\1\u078d\1\u078e\u0097"+
            "\uffff\1\u0775\16\uffff\1\u077b\1\u077a\7\uffff\1\u0771\1\u0779"+
            "\1\uffff\1\u076d\1\u076e\11\uffff\1\u0770\2\uffff\1\u07ae\1"+
            "\uffff\1\u0772\4\uffff\1\u077c\1\u0773\1\u0774",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07e4\4\uffff\1\u07c2\2\uffff\1\u07f2\1\u07c3\3\uffff\1"+
            "\u07c4\1\u07c5\1\u07c6\1\u07c7\1\u07c8\1\u07c9\1\u07ca\1\u07cb"+
            "\1\u07c1\1\uffff\1\u07b0\6\uffff\1\u07e7\1\uffff\1\u07e9\1\u07e5"+
            "\1\u07e6\1\u07e8\12\uffff\1\u07cc\1\u07cd\1\u07ce\11\uffff\1"+
            "\u07d2\1\u07d3\1\u07d4\1\u07d6\1\u07d7\1\u07d8\1\u07d9\1\u07da"+
            "\1\u07ed\1\u07ee\1\u07db\1\u07ef\1\u07dc\1\u07dd\1\u07de\1\u07df"+
            "\1\u07e0\1\u07f0\1\uffff\1\u07e1\1\uffff\1\u07e2\1\u07d5\1\u07c0"+
            "\1\u07e3\22\uffff\1\u07b9\1\u07ba\1\u07bb\5\uffff\1\u07ea\1"+
            "\u07eb\1\u07ec\2\uffff\1\u07cf\1\uffff\1\u07d0\1\u07d1\u0097"+
            "\uffff\1\u07b6\16\uffff\1\u07be\1\u07bd\7\uffff\1\u07b2\1\u07bc"+
            "\1\uffff\1\u07b7\1\u07b8\11\uffff\1\u07b1\2\uffff\1\u07f1\1"+
            "\uffff\1\u07b3\4\uffff\1\u07bf\1\u07b4\1\u07b5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0827\4\uffff\1\u0805\2\uffff\1\u0835\1\u0806\3\uffff\1"+
            "\u0807\1\u0808\1\u0809\1\u080a\1\u080b\1\u080c\1\u080d\1\u080e"+
            "\1\u0804\1\uffff\1\u07f5\6\uffff\1\u082a\1\uffff\1\u082c\1\u0828"+
            "\1\u0829\1\u082b\12\uffff\1\u080f\1\u0810\1\u0811\11\uffff\1"+
            "\u0815\1\u0816\1\u0817\1\u0819\1\u081a\1\u081b\1\u081c\1\u081d"+
            "\1\u0830\1\u0831\1\u081e\1\u0832\1\u081f\1\u0820\1\u0821\1\u0822"+
            "\1\u0823\1\u0833\1\uffff\1\u0824\1\uffff\1\u0825\1\u0818\1\u0803"+
            "\1\u0826\22\uffff\1\u07fc\1\u07fd\1\u07fe\5\uffff\1\u082d\1"+
            "\u082e\1\u082f\2\uffff\1\u0812\1\uffff\1\u0813\1\u0814\u0097"+
            "\uffff\1\u07fb\16\uffff\1\u0801\1\u0800\7\uffff\1\u07f7\1\u07ff"+
            "\1\uffff\1\u07f3\1\u07f4\11\uffff\1\u07f6\2\uffff\1\u0834\1"+
            "\uffff\1\u07f8\4\uffff\1\u0802\1\u07f9\1\u07fa",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u086b\4\uffff\1\u0849\2\uffff\1\u0879\1\u084a\3\uffff\1"+
            "\u084b\1\u084c\1\u084d\1\u084e\1\u084f\1\u0850\1\u0851\1\u0852"+
            "\1\u0848\1\uffff\1\u0838\6\uffff\1\u086e\1\uffff\1\u0870\1\u086c"+
            "\1\u086d\1\u086f\12\uffff\1\u0853\1\u0854\1\u0855\11\uffff\1"+
            "\u0859\1\u085a\1\u085b\1\u085d\1\u085e\1\u085f\1\u0860\1\u0861"+
            "\1\u0874\1\u0875\1\u0862\1\u0876\1\u0863\1\u0864\1\u0865\1\u0866"+
            "\1\u0867\1\u0877\1\uffff\1\u0868\1\uffff\1\u0869\1\u085c\1\u0847"+
            "\1\u086a\22\uffff\1\u0841\1\u0842\1\u0843\5\uffff\1\u0871\1"+
            "\u0872\1\u0873\2\uffff\1\u0856\1\uffff\1\u0857\1\u0858\u0097"+
            "\uffff\1\u083e\16\uffff\1\u0837\1\u0845\5\uffff\1\u0836\1\uffff"+
            "\1\u083a\1\u0844\1\uffff\1\u083f\1\u0840\11\uffff\1\u0839\2"+
            "\uffff\1\u0878\1\uffff\1\u083b\4\uffff\1\u0846\1\u083c\1\u083d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08a1\4\uffff\1\u087f\3\uffff\1\u0880\3\uffff\1\u0881\1"+
            "\u0882\1\u0883\1\u0884\1\u0885\1\u0886\1\u0887\1\u0888\1\u087e"+
            "\1\u087a\7\uffff\1\u08a4\1\uffff\1\u08a6\1\u08a2\1\u08a3\1\u08a5"+
            "\12\uffff\1\u0889\1\u088a\1\u088b\11\uffff\1\u088f\1\u0890\1"+
            "\u0891\1\u0893\1\u0894\1\u0895\1\u0896\1\u0897\2\uffff\1\u0898"+
            "\1\uffff\1\u0899\1\u089a\1\u089b\1\u089c\1\u089d\2\uffff\1\u089e"+
            "\1\uffff\1\u089f\1\u0892\1\u087d\1\u08a0\32\uffff\1\u08a7\1"+
            "\u08a8\1\u08a9\2\uffff\1\u088c\1\uffff\1\u088d\1\u088e\u00a6"+
            "\uffff\1\u087b\40\uffff\1\u087c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08bf\1\u08c0\1\u08c1\1\u08c2\1\uffff\1\u08bd\1\u08bc\1"+
            "\u08be\34\uffff\1\u08b6\u00f8\uffff\1\u08aa\1\u08b5\3\uffff"+
            "\1\u08ab\1\u08ba\1\u08ae\4\uffff\1\u08b9\1\u08bb\1\u08b7\1\u08b8"+
            "\1\u08b1\1\u08b2\1\u08b3\1\u08b4\1\u08b0\1\u08af\1\u08ac\1\u08ad",
            "\1\u08d8\1\u08d9\1\u08da\1\u08db\1\uffff\1\u08d6\1\u08d5\1"+
            "\u08d7\34\uffff\1\u08cf\u00f8\uffff\1\u08c3\1\u08ce\3\uffff"+
            "\1\u08c4\1\u08d3\1\u08c7\4\uffff\1\u08d2\1\u08d4\1\u08d0\1\u08d1"+
            "\1\u08ca\1\u08cb\1\u08cc\1\u08cd\1\u08c9\1\u08c8\1\u08c5\1\u08c6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08f1\1\u08f2\1\u08f3\1\u08f4\1\uffff\1\u08ee\1\u08ed\1"+
            "\u08f0\34\uffff\1\u08e7\u00f8\uffff\1\u08ef\1\u08e6\3\uffff"+
            "\1\u08dc\1\u08eb\1\u08df\4\uffff\1\u08ea\1\u08ec\1\u08e8\1\u08e9"+
            "\1\u08e2\1\u08e3\1\u08e4\1\u08e5\1\u08e1\1\u08e0\1\u08dd\1\u08de",
            "\1\u090a\1\u090b\1\u090c\1\u090d\1\uffff\1\u0908\1\u0907\1"+
            "\u0909\34\uffff\1\u0901\u00f8\uffff\1\u08f5\1\u0900\3\uffff"+
            "\1\u08f6\1\u0905\1\u08f9\4\uffff\1\u0904\1\u0906\1\u0902\1\u0903"+
            "\1\u08fc\1\u08fd\1\u08fe\1\u08ff\1\u08fb\1\u08fa\1\u08f7\1\u08f8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0923\1\u0924\1\u0925\1\u0926\1\uffff\1\u0921\1\u0920\1"+
            "\u0922\34\uffff\1\u091a\u00f8\uffff\1\u090e\1\u0919\3\uffff"+
            "\1\u090f\1\u091e\1\u0912\4\uffff\1\u091d\1\u091f\1\u091b\1\u091c"+
            "\1\u0915\1\u0916\1\u0917\1\u0918\1\u0914\1\u0913\1\u0910\1\u0911",
            "\1\u093c\1\u093d\1\u093e\1\u093f\1\uffff\1\u093a\1\u0939\1"+
            "\u093b\34\uffff\1\u0933\u00f8\uffff\1\u0927\1\u0932\3\uffff"+
            "\1\u0928\1\u0937\1\u092b\4\uffff\1\u0936\1\u0938\1\u0934\1\u0935"+
            "\1\u092e\1\u092f\1\u0930\1\u0931\1\u092d\1\u092c\1\u0929\1\u092a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0956\1\u0957\1\u0958\1\u0959\1\uffff\1\u0953\1\u0952\1"+
            "\u0955\34\uffff\1\u094c\u00f5\uffff\1\u0954\2\uffff\1\16\1\u094b"+
            "\3\uffff\1\u0941\1\u0950\1\u0944\4\uffff\1\u094f\1\u0951\1\u094d"+
            "\1\u094e\1\u0947\1\u0948\1\u0949\1\u094a\1\u0946\1\u0945\1\u0942"+
            "\1\u0943",
            "\1\u096f\1\u0970\1\u0971\1\u0972\1\uffff\1\u096c\1\u096b\1"+
            "\u096e\34\uffff\1\u0965\u00f5\uffff\1\u096d\2\uffff\1\16\1\u0964"+
            "\3\uffff\1\u095a\1\u0969\1\u095d\4\uffff\1\u0968\1\u096a\1\u0966"+
            "\1\u0967\1\u0960\1\u0961\1\u0962\1\u0963\1\u095f\1\u095e\1\u095b"+
            "\1\u095c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0989\1\u098a\1\u098b\1\u098c\1\uffff\1\u0986\1\u0985\1"+
            "\u0988\34\uffff\1\u097f\u00f8\uffff\1\u0987\1\u097e\3\uffff"+
            "\1\u0974\1\u0983\1\u0977\4\uffff\1\u0982\1\u0984\1\u0980\1\u0981"+
            "\1\u097a\1\u097b\1\u097c\1\u097d\1\u0979\1\u0978\1\u0975\1\u0976",
            "\1\u09a2\1\u09a3\1\u09a4\1\u09a5\1\uffff\1\u099f\1\u099e\1"+
            "\u09a1\34\uffff\1\u0998\u00f8\uffff\1\u09a0\1\u0997\3\uffff"+
            "\1\u098d\1\u099c\1\u0990\4\uffff\1\u099b\1\u099d\1\u0999\1\u099a"+
            "\1\u0993\1\u0994\1\u0995\1\u0996\1\u0992\1\u0991\1\u098e\1\u098f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09bb\1\u09bc\1\u09bd\1\u09be\1\uffff\1\u09b9\1\u09b8\1"+
            "\u09ba\34\uffff\1\u09b2\u00f8\uffff\1\u09a6\1\u09b1\3\uffff"+
            "\1\u09a7\1\u09b6\1\u09aa\4\uffff\1\u09b5\1\u09b7\1\u09b3\1\u09b4"+
            "\1\u09ad\1\u09ae\1\u09af\1\u09b0\1\u09ac\1\u09ab\1\u09a8\1\u09a9",
            "\1\u09d4\1\u09d5\1\u09d6\1\u09d7\1\uffff\1\u09d2\1\u09d1\1"+
            "\u09d3\34\uffff\1\u09cb\u00f8\uffff\1\u09bf\1\u09ca\3\uffff"+
            "\1\u09c0\1\u09cf\1\u09c3\4\uffff\1\u09ce\1\u09d0\1\u09cc\1\u09cd"+
            "\1\u09c6\1\u09c7\1\u09c8\1\u09c9\1\u09c5\1\u09c4\1\u09c1\1\u09c2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09ed\1\u09ee\1\u09ef\1\u09f0\1\uffff\1\u09eb\1\u09ea\1"+
            "\u09ec\34\uffff\1\u09e4\u00f8\uffff\1\u09d8\1\u09e3\3\uffff"+
            "\1\u09d9\1\u09e8\1\u09dc\4\uffff\1\u09e7\1\u09e9\1\u09e5\1\u09e6"+
            "\1\u09df\1\u09e0\1\u09e1\1\u09e2\1\u09de\1\u09dd\1\u09da\1\u09db",
            "\1\u0a06\1\u0a07\1\u0a08\1\u0a09\1\uffff\1\u0a04\1\u0a03\1"+
            "\u0a05\34\uffff\1\u09fd\u00f8\uffff\1\u09f1\1\u09fc\3\uffff"+
            "\1\u09f2\1\u0a01\1\u09f5\4\uffff\1\u0a00\1\u0a02\1\u09fe\1\u09ff"+
            "\1\u09f8\1\u09f9\1\u09fa\1\u09fb\1\u09f7\1\u09f6\1\u09f3\1\u09f4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a20\1\u0a21\1\u0a22\1\u0a23\1\uffff\1\u0a1c\1\u0a1b\1"+
            "\u0a1f\34\uffff\1\u0a15\u00f5\uffff\1\u0a1d\2\uffff\1\u0a1e"+
            "\1\u0a14\3\uffff\1\u0a0a\1\u0a19\1\u0a0d\4\uffff\1\u0a18\1\u0a1a"+
            "\1\u0a16\1\u0a17\1\u0a10\1\u0a11\1\u0a12\1\u0a13\1\u0a0f\1\u0a0e"+
            "\1\u0a0b\1\u0a0c",
            "\1\u0a3a\1\u0a3b\1\u0a3c\1\u0a3d\1\uffff\1\u0a36\1\u0a35\1"+
            "\u0a39\34\uffff\1\u0a2f\u00f5\uffff\1\u0a37\2\uffff\1\u0a38"+
            "\1\u0a2e\3\uffff\1\u0a24\1\u0a33\1\u0a27\4\uffff\1\u0a32\1\u0a34"+
            "\1\u0a30\1\u0a31\1\u0a2a\1\u0a2b\1\u0a2c\1\u0a2d\1\u0a29\1\u0a28"+
            "\1\u0a25\1\u0a26",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a54\1\u0a55\1\u0a56\1\u0a57\1\uffff\1\u0a50\1\u0a4f\1"+
            "\u0a53\34\uffff\1\u0a49\u00f5\uffff\1\u0a51\2\uffff\1\u0a52"+
            "\1\u0a48\3\uffff\1\u0a3e\1\u0a4d\1\u0a41\4\uffff\1\u0a4c\1\u0a4e"+
            "\1\u0a4a\1\u0a4b\1\u0a44\1\u0a45\1\u0a46\1\u0a47\1\u0a43\1\u0a42"+
            "\1\u0a3f\1\u0a40",
            "\1\u0a6e\1\u0a6f\1\u0a70\1\u0a71\1\uffff\1\u0a6a\1\u0a69\1"+
            "\u0a6d\34\uffff\1\u0a63\u00f5\uffff\1\u0a6b\2\uffff\1\u0a6c"+
            "\1\u0a62\3\uffff\1\u0a58\1\u0a67\1\u0a5b\4\uffff\1\u0a66\1\u0a68"+
            "\1\u0a64\1\u0a65\1\u0a5e\1\u0a5f\1\u0a60\1\u0a61\1\u0a5d\1\u0a5c"+
            "\1\u0a59\1\u0a5a",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a88\1\u0a89\1\u0a8a\1\u0a8b\1\uffff\1\u0a84\1\u0a83\1"+
            "\u0a87\34\uffff\1\u0a7d\u00f5\uffff\1\u0a85\2\uffff\1\u0a86"+
            "\1\u0a7c\3\uffff\1\u0a72\1\u0a81\1\u0a75\4\uffff\1\u0a80\1\u0a82"+
            "\1\u0a7e\1\u0a7f\1\u0a78\1\u0a79\1\u0a7a\1\u0a7b\1\u0a77\1\u0a76"+
            "\1\u0a73\1\u0a74",
            "\1\u0aa2\1\u0aa3\1\u0aa4\1\u0aa5\1\uffff\1\u0a9f\1\u0a9e\1"+
            "\u0aa1\34\uffff\1\u0a98\u00f5\uffff\1\u0aa0\2\uffff\1\u0a8c"+
            "\1\u0a97\3\uffff\1\u0a8d\1\u0a9c\1\u0a90\4\uffff\1\u0a9b\1\u0a9d"+
            "\1\u0a99\1\u0a9a\1\u0a93\1\u0a94\1\u0a95\1\u0a96\1\u0a92\1\u0a91"+
            "\1\u0a8e\1\u0a8f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0abc\1\u0abd\1\u0abe\1\u0abf\1\uffff\1\u0ab8\1\u0ab7\1"+
            "\u0abb\34\uffff\1\u0ab1\u00f5\uffff\1\u0ab9\2\uffff\1\u0aba"+
            "\1\u0ab0\3\uffff\1\u0aa6\1\u0ab5\1\u0aa9\4\uffff\1\u0ab4\1\u0ab6"+
            "\1\u0ab2\1\u0ab3\1\u0aac\1\u0aad\1\u0aae\1\u0aaf\1\u0aab\1\u0aaa"+
            "\1\u0aa7\1\u0aa8",
            "\1\u0ad6\1\u0ad7\1\u0ad8\1\u0ad9\1\uffff\1\u0ad3\1\u0ad2\1"+
            "\u0ad5\34\uffff\1\u0acc\u00f5\uffff\1\u0ad4\2\uffff\1\u0ac0"+
            "\1\u0acb\3\uffff\1\u0ac1\1\u0ad0\1\u0ac4\4\uffff\1\u0acf\1\u0ad1"+
            "\1\u0acd\1\u0ace\1\u0ac7\1\u0ac8\1\u0ac9\1\u0aca\1\u0ac6\1\u0ac5"+
            "\1\u0ac2\1\u0ac3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0aef\1\u0af0\1\u0af1\1\u0af2\1\uffff\1\u0aec\1\u0aeb\1"+
            "\u0aee\34\uffff\1\u0ae5\u00f5\uffff\1\u0aed\2\uffff\1\16\1\u0ae4"+
            "\3\uffff\1\u0ada\1\u0ae9\1\u0add\4\uffff\1\u0ae8\1\u0aea\1\u0ae6"+
            "\1\u0ae7\1\u0ae0\1\u0ae1\1\u0ae2\1\u0ae3\1\u0adf\1\u0ade\1\u0adb"+
            "\1\u0adc",
            "\1\u0b09\1\u0b0a\1\u0b0b\1\u0b0c\1\uffff\1\u0b06\1\u0b05\1"+
            "\u0b08\34\uffff\1\u0aff\u00f5\uffff\1\u0b07\2\uffff\1\16\1\u0afe"+
            "\3\uffff\1\u0af4\1\u0b03\1\u0af7\4\uffff\1\u0b02\1\u0b04\1\u0b00"+
            "\1\u0b01\1\u0afa\1\u0afb\1\u0afc\1\u0afd\1\u0af9\1\u0af8\1\u0af5"+
            "\1\u0af6",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b23\1\u0b24\1\u0b25\1\u0b26\1\uffff\1\u0b20\1\u0b1f\1"+
            "\u0b22\34\uffff\1\u0b19\u00f8\uffff\1\u0b21\1\u0b18\3\uffff"+
            "\1\u0b0e\1\u0b1d\1\u0b11\4\uffff\1\u0b1c\1\u0b1e\1\u0b1a\1\u0b1b"+
            "\1\u0b14\1\u0b15\1\u0b16\1\u0b17\1\u0b13\1\u0b12\1\u0b0f\1\u0b10",
            "\1\u0b3c\1\u0b3d\1\u0b3e\1\u0b3f\1\uffff\1\u0b39\1\u0b38\1"+
            "\u0b3b\34\uffff\1\u0b32\u00f8\uffff\1\u0b3a\1\u0b31\3\uffff"+
            "\1\u0b27\1\u0b36\1\u0b2a\4\uffff\1\u0b35\1\u0b37\1\u0b33\1\u0b34"+
            "\1\u0b2d\1\u0b2e\1\u0b2f\1\u0b30\1\u0b2c\1\u0b2b\1\u0b28\1\u0b29",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b57\1\u0b58\1\u0b59\1\u0b5a\1\uffff\1\u0b53\1\u0b52\1"+
            "\u0b56\3\uffff\1\u0b55\30\uffff\1\u0b4c\u00f5\uffff\1\u0b54"+
            "\2\uffff\1\16\1\u0b4b\3\uffff\1\u0b41\1\u0b50\1\u0b44\4\uffff"+
            "\1\u0b4f\1\u0b51\1\u0b4d\1\u0b4e\1\u0b47\1\u0b48\1\u0b49\1\u0b4a"+
            "\1\u0b46\1\u0b45\1\u0b42\1\u0b43",
            "\1\u0b71\1\u0b72\1\u0b73\1\u0b74\1\uffff\1\u0b6d\1\u0b6c\1"+
            "\u0b70\3\uffff\1\u0b6f\30\uffff\1\u0b66\u00f5\uffff\1\u0b6e"+
            "\2\uffff\1\16\1\u0b65\3\uffff\1\u0b5b\1\u0b6a\1\u0b5e\4\uffff"+
            "\1\u0b69\1\u0b6b\1\u0b67\1\u0b68\1\u0b61\1\u0b62\1\u0b63\1\u0b64"+
            "\1\u0b60\1\u0b5f\1\u0b5c\1\u0b5d",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0b8b\1\u0b8c\1\u0b8d\1\u0b8e\1\uffff\1\u0b89\1\u0b88\1"+
            "\u0b8a\34\uffff\1\u0b82\u00f8\uffff\1\u0b76\1\u0b81\3\uffff"+
            "\1\u0b77\1\u0b86\1\u0b7a\4\uffff\1\u0b85\1\u0b87\1\u0b83\1\u0b84"+
            "\1\u0b7d\1\u0b7e\1\u0b7f\1\u0b80\1\u0b7c\1\u0b7b\1\u0b78\1\u0b79",
            "\1\u0ba4\1\u0ba5\1\u0ba6\1\u0ba7\1\uffff\1\u0ba2\1\u0ba1\1"+
            "\u0ba3\34\uffff\1\u0b9b\u00f8\uffff\1\u0b8f\1\u0b9a\3\uffff"+
            "\1\u0b90\1\u0b9f\1\u0b93\4\uffff\1\u0b9e\1\u0ba0\1\u0b9c\1\u0b9d"+
            "\1\u0b96\1\u0b97\1\u0b98\1\u0b99\1\u0b95\1\u0b94\1\u0b91\1\u0b92",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] DFA191_eot = DFA.unpackEncodedString(DFA191_eotS);
    static final short[] DFA191_eof = DFA.unpackEncodedString(DFA191_eofS);
    static final char[] DFA191_min = DFA.unpackEncodedStringToUnsignedChars(DFA191_minS);
    static final char[] DFA191_max = DFA.unpackEncodedStringToUnsignedChars(DFA191_maxS);
    static final short[] DFA191_accept = DFA.unpackEncodedString(DFA191_acceptS);
    static final short[] DFA191_special = DFA.unpackEncodedString(DFA191_specialS);
    static final short[][] DFA191_transition;
    static {
        int numStates = DFA191_transitionS.length;
        DFA191_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA191_transition[i] = DFA.unpackEncodedString(DFA191_transitionS[i]);
        }
    }
    class DFA191 extends DFA {
        public DFA191(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 191;
            this.eot = DFA191_eot;
            this.eof = DFA191_eof;
            this.min = DFA191_min;
            this.max = DFA191_max;
            this.accept = DFA191_accept;
            this.special = DFA191_special;
            this.transition = DFA191_transition;
        }
        public String getDescription() {
            return "1281:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN (d= DOT libFunctionNoClass (d= DOT libFunctionNoClass )* )? -> {$d != null}? ^( DOT_EXPR expression ( libFunctionNoClass )+ ) -> expression | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
  case 0: 
    s = sst_0();
    if ( s>=0 ) return s;
    break;
  case 1: 
    s = sst_1();
    if ( s>=0 ) return s;
    break;
  case 2: 
    s = sst_2();
    if ( s>=0 ) return s;
    break;
  case 3: 
    s = sst_3();
    if ( s>=0 ) return s;
    break;
  case 4: 
    s = sst_4();
    if ( s>=0 ) return s;
    break;
  case 5: 
    s = sst_5();
    if ( s>=0 ) return s;
    break;
  case 6: 
    s = sst_6();
    if ( s>=0 ) return s;
    break;
  case 7: 
    s = sst_7();
    if ( s>=0 ) return s;
    break;
  case 8: 
    s = sst_8();
    if ( s>=0 ) return s;
    break;
  case 9: 
    s = sst_9();
    if ( s>=0 ) return s;
    break;
  case 10: 
    s = sst_10();
    if ( s>=0 ) return s;
    break;
  case 11: 
    s = sst_11();
    if ( s>=0 ) return s;
    break;
  case 12: 
    s = sst_12();
    if ( s>=0 ) return s;
    break;
  case 13: 
    s = sst_13();
    if ( s>=0 ) return s;
    break;
  case 14: 
    s = sst_14();
    if ( s>=0 ) return s;
    break;
  case 15: 
    s = sst_15();
    if ( s>=0 ) return s;
    break;
  case 16: 
    s = sst_16();
    if ( s>=0 ) return s;
    break;
  case 17: 
    s = sst_17();
    if ( s>=0 ) return s;
    break;
  case 18: 
    s = sst_18();
    if ( s>=0 ) return s;
    break;
  case 19: 
    s = sst_19();
    if ( s>=0 ) return s;
    break;
  case 20: 
    s = sst_20();
    if ( s>=0 ) return s;
    break;
  case 21: 
    s = sst_21();
    if ( s>=0 ) return s;
    break;
  case 22: 
    s = sst_22();
    if ( s>=0 ) return s;
    break;
  case 23: 
    s = sst_23();
    if ( s>=0 ) return s;
    break;
  case 24: 
    s = sst_24();
    if ( s>=0 ) return s;
    break;
  case 25: 
    s = sst_25();
    if ( s>=0 ) return s;
    break;
  case 26: 
    s = sst_26();
    if ( s>=0 ) return s;
    break;
  case 27: 
    s = sst_27();
    if ( s>=0 ) return s;
    break;
  case 28: 
    s = sst_28();
    if ( s>=0 ) return s;
    break;
  case 29: 
    s = sst_29();
    if ( s>=0 ) return s;
    break;
  case 30: 
    s = sst_30();
    if ( s>=0 ) return s;
    break;
  case 31: 
    s = sst_31();
    if ( s>=0 ) return s;
    break;
  case 32: 
    s = sst_32();
    if ( s>=0 ) return s;
    break;
  case 33: 
    s = sst_33();
    if ( s>=0 ) return s;
    break;
  case 34: 
    s = sst_34();
    if ( s>=0 ) return s;
    break;
  case 35: 
    s = sst_35();
    if ( s>=0 ) return s;
    break;
  case 36: 
    s = sst_36();
    if ( s>=0 ) return s;
    break;
  case 37: 
    s = sst_37();
    if ( s>=0 ) return s;
    break;
  case 38: 
    s = sst_38();
    if ( s>=0 ) return s;
    break;
  case 39: 
    s = sst_39();
    if ( s>=0 ) return s;
    break;
  case 40: 
    s = sst_40();
    if ( s>=0 ) return s;
    break;
  case 41: 
    s = sst_41();
    if ( s>=0 ) return s;
    break;
  case 42: 
    s = sst_42();
    if ( s>=0 ) return s;
    break;
  case 43: 
    s = sst_43();
    if ( s>=0 ) return s;
    break;
  case 44: 
    s = sst_44();
    if ( s>=0 ) return s;
    break;
  case 45: 
    s = sst_45();
    if ( s>=0 ) return s;
    break;
  case 46: 
    s = sst_46();
    if ( s>=0 ) return s;
    break;
  case 47: 
    s = sst_47();
    if ( s>=0 ) return s;
    break;
  case 48: 
    s = sst_48();
    if ( s>=0 ) return s;
    break;
  case 49: 
    s = sst_49();
    if ( s>=0 ) return s;
    break;
  case 50: 
    s = sst_50();
    if ( s>=0 ) return s;
    break;
  case 51: 
    s = sst_51();
    if ( s>=0 ) return s;
    break;
  case 52: 
    s = sst_52();
    if ( s>=0 ) return s;
    break;
  case 53: 
    s = sst_53();
    if ( s>=0 ) return s;
    break;
  case 54: 
    s = sst_54();
    if ( s>=0 ) return s;
    break;
  case 55: 
    s = sst_55();
    if ( s>=0 ) return s;
    break;
  case 56: 
    s = sst_56();
    if ( s>=0 ) return s;
    break;
  case 57: 
    s = sst_57();
    if ( s>=0 ) return s;
    break;
  case 58: 
    s = sst_58();
    if ( s>=0 ) return s;
    break;
  case 59: 
    s = sst_59();
    if ( s>=0 ) return s;
    break;
  case 60: 
    s = sst_60();
    if ( s>=0 ) return s;
    break;
  case 61: 
    s = sst_61();
    if ( s>=0 ) return s;
    break;
  case 62: 
    s = sst_62();
    if ( s>=0 ) return s;
    break;
  case 63: 
    s = sst_63();
    if ( s>=0 ) return s;
    break;
  case 64: 
    s = sst_64();
    if ( s>=0 ) return s;
    break;
  case 65: 
    s = sst_65();
    if ( s>=0 ) return s;
    break;
  case 66: 
    s = sst_66();
    if ( s>=0 ) return s;
    break;
  case 67: 
    s = sst_67();
    if ( s>=0 ) return s;
    break;
  case 68: 
    s = sst_68();
    if ( s>=0 ) return s;
    break;
  case 69: 
    s = sst_69();
    if ( s>=0 ) return s;
    break;
  case 70: 
    s = sst_70();
    if ( s>=0 ) return s;
    break;
  case 71: 
    s = sst_71();
    if ( s>=0 ) return s;
    break;
  }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 191, _s, input);
            error(nvae);
            throw nvae;
        }
  private int sst_0() {
    int s = -1;
                        int LA191_0 = input.LA(1);
                        int index191_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_0==MINUS) ) {s = 1;}
                        else if ( ((LA191_0>=BOOLEAN_TRUE && LA191_0<=VALUE_NULL)||LA191_0==NUM_DOUBLE||LA191_0==PLUS||(LA191_0>=STRING_LITERAL && LA191_0<=QUOTED_STRING_LITERAL)||LA191_0==NUM_INT||(LA191_0>=NUM_LONG && LA191_0<=NUM_FLOAT)) ) {s = 2;}
                        else if ( (LA191_0==QUESTION) ) {s = 12;}
                        else if ( (LA191_0==LPAREN) ) {s = 13;}
                        else if ( (LA191_0==ESCAPE||LA191_0==EVERY_EXPR||(LA191_0>=MAX && LA191_0<=MIN)||LA191_0==OUTER||(LA191_0>=JOIN && LA191_0<=FULL)||LA191_0==EVENTS||(LA191_0>=UNIDIRECTIONAL && LA191_0<=METADATASQL)||(LA191_0>=WEEKDAY && LA191_0<=LW)||LA191_0==SNAPSHOT||(LA191_0>=VARIABLE && LA191_0<=INDEX)||(LA191_0>=DEFINE && LA191_0<=MATCHES)||LA191_0==WHILE||(LA191_0>=MERGE && LA191_0<=MATCHED)||LA191_0==IDENT||LA191_0==TICKED_STRING_LITERAL) ) {s = 14;}
                        else if ( (LA191_0==COUNT) ) {s = 17;}
                        else if ( (LA191_0==SUM) ) {s = 20;}
                        else if ( (LA191_0==AVG) ) {s = 21;}
                        else if ( (LA191_0==COALESCE) ) {s = 24;}
                        else if ( (LA191_0==MEDIAN) ) {s = 25;}
                        else if ( (LA191_0==STDDEV) ) {s = 26;}
                        else if ( (LA191_0==AVEDEV) ) {s = 27;}
                        else if ( (LA191_0==FIRST) ) {s = 29;}
                        else if ( (LA191_0==LAST) ) {s = 30;}
                        else if ( (LA191_0==PREVIOUS) ) {s = 41;}
                        else if ( (LA191_0==PREVIOUSTAIL) ) {s = 42;}
                        else if ( (LA191_0==PRIOR) ) {s = 43;}
                        else if ( (LA191_0==INSTANCEOF) ) {s = 46;}
                        else if ( (LA191_0==TYPEOF) ) {s = 47;}
                        else if ( (LA191_0==CAST) ) {s = 48;}
                        else if ( (LA191_0==WINDOW) ) {s = 52;}
                        else if ( (LA191_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 61;}
                        else if ( (LA191_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 62;}
                        else if ( (LA191_0==EXISTS) ) {s = 63;}
                        else if ( (LA191_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 64;}
                        else if ( (LA191_0==LCURLY) ) {s = 65;}
                        input.seek(index191_0);
    return s;
  }
  private int sst_1() {
    int s = -1;
                        int LA191_185 = input.LA(1);
                        int index191_185 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_185==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1146;}
                        else if ( (LA191_185==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1147;}
                        else if ( (LA191_185==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1148;}
                        else if ( (LA191_185==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1149;}
                        else if ( (LA191_185==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1150;}
                        else if ( (LA191_185==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1151;}
                        else if ( (LA191_185==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1152;}
                        else if ( (LA191_185==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1153;}
                        else if ( (LA191_185==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1154;}
                        else if ( (LA191_185==STRING_LITERAL) ) {s = 1155;}
                        else if ( (LA191_185==QUOTED_STRING_LITERAL) ) {s = 1156;}
                        else if ( (LA191_185==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1157;}
                        else if ( (LA191_185==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1158;}
                        else if ( (LA191_185==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1159;}
                        else if ( (LA191_185==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1160;}
                        else if ( (LA191_185==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1161;}
                        else if ( (LA191_185==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1162;}
                        else if ( (LA191_185==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1163;}
                        else if ( (LA191_185==AT) && (synpred3_EsperEPL2Grammar())) {s = 1164;}
                        else if ( (LA191_185==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1165;}
                        else if ( (LA191_185==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1166;}
                        else if ( (LA191_185==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1167;}
                        else if ( (LA191_185==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1168;}
                        else if ( (LA191_185==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1169;}
                        else if ( (LA191_185==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1170;}
                        else if ( (LA191_185==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1171;}
                        else if ( (LA191_185==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1172;}
                        else if ( (LA191_185==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1173;}
                        else if ( (LA191_185==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1174;}
                        else if ( (LA191_185==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1175;}
                        else if ( (LA191_185==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1176;}
                        else if ( (LA191_185==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1177;}
                        else if ( (LA191_185==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1178;}
                        else if ( (LA191_185==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1179;}
                        else if ( (LA191_185==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1180;}
                        else if ( (LA191_185==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1181;}
                        else if ( (LA191_185==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1182;}
                        else if ( (LA191_185==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1183;}
                        else if ( (LA191_185==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1184;}
                        else if ( (LA191_185==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1185;}
                        else if ( (LA191_185==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1186;}
                        else if ( (LA191_185==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1187;}
                        else if ( (LA191_185==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1188;}
                        else if ( (LA191_185==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1189;}
                        else if ( (LA191_185==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1190;}
                        else if ( (LA191_185==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1191;}
                        else if ( (LA191_185==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1192;}
                        else if ( (LA191_185==LW) && (synpred3_EsperEPL2Grammar())) {s = 1193;}
                        else if ( (LA191_185==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1194;}
                        else if ( (LA191_185==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1195;}
                        else if ( (LA191_185==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1196;}
                        else if ( (LA191_185==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1197;}
                        else if ( (LA191_185==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1198;}
                        else if ( (LA191_185==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1199;}
                        else if ( (LA191_185==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1200;}
                        else if ( (LA191_185==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1201;}
                        else if ( (LA191_185==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}
                        else if ( (LA191_185==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1203;}
                        else if ( (LA191_185==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1204;}
                        else if ( (LA191_185==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1205;}
                        else if ( (LA191_185==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1206;}
                        else if ( (LA191_185==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1207;}
                        else if ( (LA191_185==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1208;}
                        else if ( (LA191_185==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1209;}
                        else if ( (LA191_185==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1210;}
                        else if ( (LA191_185==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1211;}
                        else if ( (LA191_185==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1212;}
                        else if ( (LA191_185==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1213;}
                        else if ( (LA191_185==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1214;}
                        else if ( (LA191_185==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1215;}
                        input.seek(index191_185);
    return s;
  }
  private int sst_2() {
    int s = -1;
                        int LA191_245 = input.LA(1);
                        int index191_245 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_245==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1216;}
                        else if ( (LA191_245==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1217;}
                        else if ( (LA191_245==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1218;}
                        else if ( (LA191_245==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1219;}
                        else if ( (LA191_245==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1220;}
                        else if ( (LA191_245==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1221;}
                        else if ( (LA191_245==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1222;}
                        else if ( (LA191_245==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1223;}
                        else if ( (LA191_245==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1224;}
                        else if ( (LA191_245==STRING_LITERAL) ) {s = 1225;}
                        else if ( (LA191_245==QUOTED_STRING_LITERAL) ) {s = 1226;}
                        else if ( (LA191_245==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1227;}
                        else if ( (LA191_245==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1228;}
                        else if ( (LA191_245==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1229;}
                        else if ( (LA191_245==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1230;}
                        else if ( (LA191_245==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1231;}
                        else if ( (LA191_245==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1232;}
                        else if ( (LA191_245==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1233;}
                        else if ( (LA191_245==AT) && (synpred3_EsperEPL2Grammar())) {s = 1234;}
                        else if ( (LA191_245==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1235;}
                        else if ( (LA191_245==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1236;}
                        else if ( (LA191_245==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1237;}
                        else if ( (LA191_245==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1238;}
                        else if ( (LA191_245==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1239;}
                        else if ( (LA191_245==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1240;}
                        else if ( (LA191_245==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1241;}
                        else if ( (LA191_245==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1242;}
                        else if ( (LA191_245==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1243;}
                        else if ( (LA191_245==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1244;}
                        else if ( (LA191_245==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1245;}
                        else if ( (LA191_245==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1246;}
                        else if ( (LA191_245==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1247;}
                        else if ( (LA191_245==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1248;}
                        else if ( (LA191_245==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1249;}
                        else if ( (LA191_245==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1250;}
                        else if ( (LA191_245==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1251;}
                        else if ( (LA191_245==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1252;}
                        else if ( (LA191_245==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1253;}
                        else if ( (LA191_245==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1254;}
                        else if ( (LA191_245==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1255;}
                        else if ( (LA191_245==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1256;}
                        else if ( (LA191_245==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1257;}
                        else if ( (LA191_245==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1258;}
                        else if ( (LA191_245==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1259;}
                        else if ( (LA191_245==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1260;}
                        else if ( (LA191_245==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1261;}
                        else if ( (LA191_245==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1262;}
                        else if ( (LA191_245==LW) && (synpred3_EsperEPL2Grammar())) {s = 1263;}
                        else if ( (LA191_245==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1264;}
                        else if ( (LA191_245==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1265;}
                        else if ( (LA191_245==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1266;}
                        else if ( (LA191_245==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1267;}
                        else if ( (LA191_245==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1268;}
                        else if ( (LA191_245==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1269;}
                        else if ( (LA191_245==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1270;}
                        else if ( (LA191_245==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1271;}
                        else if ( (LA191_245==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1272;}
                        else if ( (LA191_245==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1273;}
                        else if ( (LA191_245==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1274;}
                        else if ( (LA191_245==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1275;}
                        else if ( (LA191_245==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1276;}
                        else if ( (LA191_245==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1277;}
                        else if ( (LA191_245==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1278;}
                        else if ( (LA191_245==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1279;}
                        else if ( (LA191_245==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1280;}
                        else if ( (LA191_245==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1281;}
                        else if ( (LA191_245==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1282;}
                        else if ( (LA191_245==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1283;}
                        else if ( (LA191_245==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1284;}
                        input.seek(index191_245);
    return s;
  }
  private int sst_3() {
    int s = -1;
                        int LA191_305 = input.LA(1);
                        int index191_305 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_305==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1285;}
                        else if ( (LA191_305==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1286;}
                        else if ( (LA191_305==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1287;}
                        else if ( (LA191_305==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1288;}
                        else if ( (LA191_305==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1289;}
                        else if ( (LA191_305==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1290;}
                        else if ( (LA191_305==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1291;}
                        else if ( (LA191_305==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1292;}
                        else if ( (LA191_305==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1293;}
                        else if ( (LA191_305==STRING_LITERAL) ) {s = 1294;}
                        else if ( (LA191_305==QUOTED_STRING_LITERAL) ) {s = 1295;}
                        else if ( (LA191_305==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1296;}
                        else if ( (LA191_305==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1297;}
                        else if ( (LA191_305==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1298;}
                        else if ( (LA191_305==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1299;}
                        else if ( (LA191_305==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1300;}
                        else if ( (LA191_305==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1301;}
                        else if ( (LA191_305==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1302;}
                        else if ( (LA191_305==AT) && (synpred3_EsperEPL2Grammar())) {s = 1303;}
                        else if ( (LA191_305==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1304;}
                        else if ( (LA191_305==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1305;}
                        else if ( (LA191_305==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1306;}
                        else if ( (LA191_305==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1307;}
                        else if ( (LA191_305==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1308;}
                        else if ( (LA191_305==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1309;}
                        else if ( (LA191_305==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1310;}
                        else if ( (LA191_305==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1311;}
                        else if ( (LA191_305==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1312;}
                        else if ( (LA191_305==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1313;}
                        else if ( (LA191_305==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1314;}
                        else if ( (LA191_305==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1315;}
                        else if ( (LA191_305==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1316;}
                        else if ( (LA191_305==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1317;}
                        else if ( (LA191_305==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1318;}
                        else if ( (LA191_305==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1319;}
                        else if ( (LA191_305==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1320;}
                        else if ( (LA191_305==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1321;}
                        else if ( (LA191_305==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1322;}
                        else if ( (LA191_305==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1323;}
                        else if ( (LA191_305==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1324;}
                        else if ( (LA191_305==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1325;}
                        else if ( (LA191_305==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1326;}
                        else if ( (LA191_305==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}
                        else if ( (LA191_305==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1328;}
                        else if ( (LA191_305==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1329;}
                        else if ( (LA191_305==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1330;}
                        else if ( (LA191_305==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1331;}
                        else if ( (LA191_305==LW) && (synpred3_EsperEPL2Grammar())) {s = 1332;}
                        else if ( (LA191_305==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1333;}
                        else if ( (LA191_305==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1334;}
                        else if ( (LA191_305==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1335;}
                        else if ( (LA191_305==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1336;}
                        else if ( (LA191_305==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}
                        else if ( (LA191_305==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1338;}
                        else if ( (LA191_305==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1339;}
                        else if ( (LA191_305==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1340;}
                        else if ( (LA191_305==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1341;}
                        else if ( (LA191_305==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1342;}
                        else if ( (LA191_305==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1343;}
                        else if ( (LA191_305==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1344;}
                        else if ( (LA191_305==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1345;}
                        else if ( (LA191_305==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1346;}
                        else if ( (LA191_305==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1347;}
                        else if ( (LA191_305==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1348;}
                        else if ( (LA191_305==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1349;}
                        else if ( (LA191_305==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1350;}
                        else if ( (LA191_305==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1351;}
                        else if ( (LA191_305==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1352;}
                        else if ( (LA191_305==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1353;}
                        input.seek(index191_305);
    return s;
  }
  private int sst_4() {
    int s = -1;
                        int LA191_365 = input.LA(1);
                        int index191_365 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_365==STRING_LITERAL) ) {s = 1354;}
                        else if ( (LA191_365==QUOTED_STRING_LITERAL) ) {s = 1355;}
                        else if ( (LA191_365==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1356;}
                        else if ( (LA191_365==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1357;}
                        else if ( (LA191_365==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1358;}
                        else if ( (LA191_365==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1359;}
                        else if ( (LA191_365==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1360;}
                        else if ( (LA191_365==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1361;}
                        else if ( (LA191_365==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1362;}
                        else if ( (LA191_365==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1363;}
                        else if ( (LA191_365==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1364;}
                        else if ( (LA191_365==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1365;}
                        else if ( (LA191_365==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1366;}
                        else if ( (LA191_365==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1367;}
                        else if ( (LA191_365==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1368;}
                        else if ( (LA191_365==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1369;}
                        else if ( (LA191_365==AT) && (synpred3_EsperEPL2Grammar())) {s = 1370;}
                        else if ( (LA191_365==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1371;}
                        else if ( (LA191_365==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1372;}
                        else if ( (LA191_365==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1373;}
                        else if ( (LA191_365==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1374;}
                        else if ( (LA191_365==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1375;}
                        else if ( (LA191_365==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1376;}
                        else if ( (LA191_365==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1377;}
                        else if ( (LA191_365==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1378;}
                        else if ( (LA191_365==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1379;}
                        else if ( (LA191_365==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1380;}
                        else if ( (LA191_365==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1381;}
                        else if ( (LA191_365==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1382;}
                        else if ( (LA191_365==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1383;}
                        else if ( (LA191_365==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1384;}
                        else if ( (LA191_365==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1385;}
                        else if ( (LA191_365==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1386;}
                        else if ( (LA191_365==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1387;}
                        else if ( (LA191_365==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1388;}
                        else if ( (LA191_365==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1389;}
                        else if ( (LA191_365==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1390;}
                        else if ( (LA191_365==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1391;}
                        else if ( (LA191_365==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1392;}
                        else if ( (LA191_365==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1393;}
                        else if ( (LA191_365==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1394;}
                        else if ( (LA191_365==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1395;}
                        else if ( (LA191_365==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1396;}
                        else if ( (LA191_365==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1397;}
                        else if ( (LA191_365==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1398;}
                        else if ( (LA191_365==LW) && (synpred3_EsperEPL2Grammar())) {s = 1399;}
                        else if ( (LA191_365==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1400;}
                        else if ( (LA191_365==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1401;}
                        else if ( (LA191_365==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1402;}
                        else if ( (LA191_365==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1403;}
                        else if ( (LA191_365==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1404;}
                        else if ( (LA191_365==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1405;}
                        else if ( (LA191_365==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1406;}
                        else if ( (LA191_365==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1407;}
                        else if ( (LA191_365==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1408;}
                        else if ( (LA191_365==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1409;}
                        else if ( (LA191_365==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1410;}
                        else if ( (LA191_365==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1411;}
                        else if ( (LA191_365==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1412;}
                        else if ( (LA191_365==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1413;}
                        else if ( (LA191_365==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1414;}
                        else if ( (LA191_365==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1415;}
                        else if ( (LA191_365==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1416;}
                        else if ( (LA191_365==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1417;}
                        else if ( (LA191_365==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1418;}
                        else if ( (LA191_365==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1419;}
                        else if ( (LA191_365==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1420;}
                        input.seek(index191_365);
    return s;
  }
  private int sst_5() {
    int s = -1;
                        int LA191_425 = input.LA(1);
                        int index191_425 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_425==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1421;}
                        else if ( (LA191_425==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1422;}
                        else if ( (LA191_425==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1423;}
                        else if ( (LA191_425==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1424;}
                        else if ( (LA191_425==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1425;}
                        else if ( (LA191_425==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1426;}
                        else if ( (LA191_425==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1427;}
                        else if ( (LA191_425==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1428;}
                        else if ( (LA191_425==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1429;}
                        else if ( (LA191_425==STRING_LITERAL) ) {s = 1430;}
                        else if ( (LA191_425==QUOTED_STRING_LITERAL) ) {s = 1431;}
                        else if ( (LA191_425==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1432;}
                        else if ( (LA191_425==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1433;}
                        else if ( (LA191_425==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1434;}
                        else if ( (LA191_425==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1435;}
                        else if ( (LA191_425==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1436;}
                        else if ( (LA191_425==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1437;}
                        else if ( (LA191_425==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1438;}
                        else if ( (LA191_425==AT) && (synpred3_EsperEPL2Grammar())) {s = 1439;}
                        else if ( (LA191_425==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1440;}
                        else if ( (LA191_425==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1441;}
                        else if ( (LA191_425==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1442;}
                        else if ( (LA191_425==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1443;}
                        else if ( (LA191_425==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1444;}
                        else if ( (LA191_425==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1445;}
                        else if ( (LA191_425==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1446;}
                        else if ( (LA191_425==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1447;}
                        else if ( (LA191_425==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1448;}
                        else if ( (LA191_425==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1449;}
                        else if ( (LA191_425==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1450;}
                        else if ( (LA191_425==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1451;}
                        else if ( (LA191_425==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1452;}
                        else if ( (LA191_425==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1453;}
                        else if ( (LA191_425==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1454;}
                        else if ( (LA191_425==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1455;}
                        else if ( (LA191_425==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1456;}
                        else if ( (LA191_425==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1457;}
                        else if ( (LA191_425==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1458;}
                        else if ( (LA191_425==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1459;}
                        else if ( (LA191_425==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1460;}
                        else if ( (LA191_425==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1461;}
                        else if ( (LA191_425==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1462;}
                        else if ( (LA191_425==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1463;}
                        else if ( (LA191_425==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1464;}
                        else if ( (LA191_425==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1465;}
                        else if ( (LA191_425==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1466;}
                        else if ( (LA191_425==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1467;}
                        else if ( (LA191_425==LW) && (synpred3_EsperEPL2Grammar())) {s = 1468;}
                        else if ( (LA191_425==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1469;}
                        else if ( (LA191_425==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1470;}
                        else if ( (LA191_425==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1471;}
                        else if ( (LA191_425==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1472;}
                        else if ( (LA191_425==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1473;}
                        else if ( (LA191_425==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1474;}
                        else if ( (LA191_425==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1475;}
                        else if ( (LA191_425==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1476;}
                        else if ( (LA191_425==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1477;}
                        else if ( (LA191_425==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1478;}
                        else if ( (LA191_425==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1479;}
                        else if ( (LA191_425==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1480;}
                        else if ( (LA191_425==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1481;}
                        else if ( (LA191_425==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1482;}
                        else if ( (LA191_425==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1483;}
                        else if ( (LA191_425==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1484;}
                        else if ( (LA191_425==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1485;}
                        else if ( (LA191_425==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1486;}
                        else if ( (LA191_425==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1487;}
                        else if ( (LA191_425==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1488;}
                        else if ( (LA191_425==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1489;}
                        input.seek(index191_425);
    return s;
  }
  private int sst_6() {
    int s = -1;
                        int LA191_485 = input.LA(1);
                        int index191_485 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_485==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1490;}
                        else if ( (LA191_485==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1491;}
                        else if ( (LA191_485==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1492;}
                        else if ( (LA191_485==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1493;}
                        else if ( (LA191_485==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1494;}
                        else if ( (LA191_485==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1495;}
                        else if ( (LA191_485==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1496;}
                        else if ( (LA191_485==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1497;}
                        else if ( (LA191_485==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1498;}
                        else if ( (LA191_485==STRING_LITERAL) ) {s = 1499;}
                        else if ( (LA191_485==QUOTED_STRING_LITERAL) ) {s = 1500;}
                        else if ( (LA191_485==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1501;}
                        else if ( (LA191_485==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1502;}
                        else if ( (LA191_485==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1503;}
                        else if ( (LA191_485==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1504;}
                        else if ( (LA191_485==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1505;}
                        else if ( (LA191_485==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1506;}
                        else if ( (LA191_485==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1507;}
                        else if ( (LA191_485==AT) && (synpred3_EsperEPL2Grammar())) {s = 1508;}
                        else if ( (LA191_485==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1509;}
                        else if ( (LA191_485==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1510;}
                        else if ( (LA191_485==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1511;}
                        else if ( (LA191_485==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1512;}
                        else if ( (LA191_485==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1513;}
                        else if ( (LA191_485==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1514;}
                        else if ( (LA191_485==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1515;}
                        else if ( (LA191_485==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1516;}
                        else if ( (LA191_485==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1517;}
                        else if ( (LA191_485==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1518;}
                        else if ( (LA191_485==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1519;}
                        else if ( (LA191_485==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1520;}
                        else if ( (LA191_485==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1521;}
                        else if ( (LA191_485==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1522;}
                        else if ( (LA191_485==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1523;}
                        else if ( (LA191_485==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1524;}
                        else if ( (LA191_485==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1525;}
                        else if ( (LA191_485==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1526;}
                        else if ( (LA191_485==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1527;}
                        else if ( (LA191_485==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1528;}
                        else if ( (LA191_485==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1529;}
                        else if ( (LA191_485==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1530;}
                        else if ( (LA191_485==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1531;}
                        else if ( (LA191_485==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1532;}
                        else if ( (LA191_485==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1533;}
                        else if ( (LA191_485==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1534;}
                        else if ( (LA191_485==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1535;}
                        else if ( (LA191_485==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1536;}
                        else if ( (LA191_485==LW) && (synpred3_EsperEPL2Grammar())) {s = 1537;}
                        else if ( (LA191_485==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1538;}
                        else if ( (LA191_485==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1539;}
                        else if ( (LA191_485==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1540;}
                        else if ( (LA191_485==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1541;}
                        else if ( (LA191_485==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1542;}
                        else if ( (LA191_485==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1543;}
                        else if ( (LA191_485==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1544;}
                        else if ( (LA191_485==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1545;}
                        else if ( (LA191_485==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1546;}
                        else if ( (LA191_485==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1547;}
                        else if ( (LA191_485==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1548;}
                        else if ( (LA191_485==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1549;}
                        else if ( (LA191_485==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1550;}
                        else if ( (LA191_485==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1551;}
                        else if ( (LA191_485==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1552;}
                        else if ( (LA191_485==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1553;}
                        else if ( (LA191_485==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1554;}
                        else if ( (LA191_485==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1555;}
                        else if ( (LA191_485==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1556;}
                        else if ( (LA191_485==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1557;}
                        else if ( (LA191_485==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1558;}
                        input.seek(index191_485);
    return s;
  }
  private int sst_7() {
    int s = -1;
                        int LA191_545 = input.LA(1);
                        int index191_545 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_545==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}
                        else if ( (LA191_545==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1560;}
                        else if ( (LA191_545==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1561;}
                        else if ( (LA191_545==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1562;}
                        else if ( (LA191_545==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1563;}
                        else if ( (LA191_545==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1564;}
                        else if ( (LA191_545==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1565;}
                        else if ( (LA191_545==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1566;}
                        else if ( (LA191_545==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1567;}
                        else if ( (LA191_545==STRING_LITERAL) ) {s = 1568;}
                        else if ( (LA191_545==QUOTED_STRING_LITERAL) ) {s = 1569;}
                        else if ( (LA191_545==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1570;}
                        else if ( (LA191_545==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1571;}
                        else if ( (LA191_545==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1572;}
                        else if ( (LA191_545==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1573;}
                        else if ( (LA191_545==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1574;}
                        else if ( (LA191_545==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}
                        else if ( (LA191_545==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1576;}
                        else if ( (LA191_545==AT) && (synpred3_EsperEPL2Grammar())) {s = 1577;}
                        else if ( (LA191_545==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1578;}
                        else if ( (LA191_545==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1579;}
                        else if ( (LA191_545==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1580;}
                        else if ( (LA191_545==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1581;}
                        else if ( (LA191_545==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1582;}
                        else if ( (LA191_545==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1583;}
                        else if ( (LA191_545==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1584;}
                        else if ( (LA191_545==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1585;}
                        else if ( (LA191_545==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1586;}
                        else if ( (LA191_545==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1587;}
                        else if ( (LA191_545==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1588;}
                        else if ( (LA191_545==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1589;}
                        else if ( (LA191_545==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1590;}
                        else if ( (LA191_545==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1591;}
                        else if ( (LA191_545==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1592;}
                        else if ( (LA191_545==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1593;}
                        else if ( (LA191_545==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1594;}
                        else if ( (LA191_545==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1595;}
                        else if ( (LA191_545==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1596;}
                        else if ( (LA191_545==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1597;}
                        else if ( (LA191_545==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1598;}
                        else if ( (LA191_545==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1599;}
                        else if ( (LA191_545==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1600;}
                        else if ( (LA191_545==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1601;}
                        else if ( (LA191_545==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1602;}
                        else if ( (LA191_545==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1603;}
                        else if ( (LA191_545==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1604;}
                        else if ( (LA191_545==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1605;}
                        else if ( (LA191_545==LW) && (synpred3_EsperEPL2Grammar())) {s = 1606;}
                        else if ( (LA191_545==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1607;}
                        else if ( (LA191_545==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1608;}
                        else if ( (LA191_545==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1609;}
                        else if ( (LA191_545==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1610;}
                        else if ( (LA191_545==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1611;}
                        else if ( (LA191_545==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1612;}
                        else if ( (LA191_545==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1613;}
                        else if ( (LA191_545==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1614;}
                        else if ( (LA191_545==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1615;}
                        else if ( (LA191_545==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1616;}
                        else if ( (LA191_545==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1617;}
                        else if ( (LA191_545==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1618;}
                        else if ( (LA191_545==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1619;}
                        else if ( (LA191_545==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1620;}
                        else if ( (LA191_545==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1621;}
                        else if ( (LA191_545==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1622;}
                        else if ( (LA191_545==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1623;}
                        else if ( (LA191_545==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1624;}
                        else if ( (LA191_545==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1625;}
                        else if ( (LA191_545==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1626;}
                        else if ( (LA191_545==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1627;}
                        input.seek(index191_545);
    return s;
  }
  private int sst_8() {
    int s = -1;
                        int LA191_605 = input.LA(1);
                        int index191_605 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_605==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1628;}
                        else if ( (LA191_605==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1629;}
                        else if ( (LA191_605==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1630;}
                        else if ( (LA191_605==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1631;}
                        else if ( (LA191_605==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1632;}
                        else if ( (LA191_605==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1633;}
                        else if ( (LA191_605==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1634;}
                        else if ( (LA191_605==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}
                        else if ( (LA191_605==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1636;}
                        else if ( (LA191_605==STRING_LITERAL) ) {s = 1637;}
                        else if ( (LA191_605==QUOTED_STRING_LITERAL) ) {s = 1638;}
                        else if ( (LA191_605==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1639;}
                        else if ( (LA191_605==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1640;}
                        else if ( (LA191_605==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1641;}
                        else if ( (LA191_605==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1642;}
                        else if ( (LA191_605==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1643;}
                        else if ( (LA191_605==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1644;}
                        else if ( (LA191_605==AT) && (synpred3_EsperEPL2Grammar())) {s = 1645;}
                        else if ( (LA191_605==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1646;}
                        else if ( (LA191_605==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1647;}
                        else if ( (LA191_605==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1648;}
                        else if ( (LA191_605==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1649;}
                        else if ( (LA191_605==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1650;}
                        else if ( (LA191_605==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1651;}
                        else if ( (LA191_605==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1652;}
                        else if ( (LA191_605==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1653;}
                        else if ( (LA191_605==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1654;}
                        else if ( (LA191_605==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1655;}
                        else if ( (LA191_605==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1656;}
                        else if ( (LA191_605==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1657;}
                        else if ( (LA191_605==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1658;}
                        else if ( (LA191_605==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1659;}
                        else if ( (LA191_605==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1660;}
                        else if ( (LA191_605==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1661;}
                        else if ( (LA191_605==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1662;}
                        else if ( (LA191_605==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1663;}
                        else if ( (LA191_605==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1664;}
                        else if ( (LA191_605==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1665;}
                        else if ( (LA191_605==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1666;}
                        else if ( (LA191_605==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1667;}
                        else if ( (LA191_605==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}
                        else if ( (LA191_605==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1669;}
                        else if ( (LA191_605==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1670;}
                        else if ( (LA191_605==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1671;}
                        else if ( (LA191_605==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}
                        else if ( (LA191_605==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1673;}
                        else if ( (LA191_605==LW) && (synpred3_EsperEPL2Grammar())) {s = 1674;}
                        else if ( (LA191_605==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1675;}
                        else if ( (LA191_605==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1676;}
                        else if ( (LA191_605==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1677;}
                        else if ( (LA191_605==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1678;}
                        else if ( (LA191_605==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1679;}
                        else if ( (LA191_605==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1680;}
                        else if ( (LA191_605==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1681;}
                        else if ( (LA191_605==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1682;}
                        else if ( (LA191_605==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1683;}
                        else if ( (LA191_605==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1684;}
                        else if ( (LA191_605==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1685;}
                        else if ( (LA191_605==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1686;}
                        else if ( (LA191_605==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1687;}
                        else if ( (LA191_605==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1688;}
                        else if ( (LA191_605==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1689;}
                        else if ( (LA191_605==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1690;}
                        else if ( (LA191_605==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1691;}
                        else if ( (LA191_605==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1692;}
                        else if ( (LA191_605==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1693;}
                        else if ( (LA191_605==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1694;}
                        else if ( (LA191_605==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1695;}
                        input.seek(index191_605);
    return s;
  }
  private int sst_9() {
    int s = -1;
                        int LA191_665 = input.LA(1);
                        int index191_665 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_665==STRING_LITERAL) ) {s = 1696;}
                        else if ( (LA191_665==QUOTED_STRING_LITERAL) ) {s = 1697;}
                        else if ( (LA191_665==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1698;}
                        else if ( (LA191_665==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1699;}
                        else if ( (LA191_665==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}
                        else if ( (LA191_665==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1701;}
                        else if ( (LA191_665==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1702;}
                        else if ( (LA191_665==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1703;}
                        else if ( (LA191_665==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1704;}
                        else if ( (LA191_665==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1705;}
                        else if ( (LA191_665==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1706;}
                        else if ( (LA191_665==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1707;}
                        else if ( (LA191_665==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}
                        else if ( (LA191_665==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1709;}
                        else if ( (LA191_665==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1710;}
                        else if ( (LA191_665==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1711;}
                        else if ( (LA191_665==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1712;}
                        else if ( (LA191_665==AT) && (synpred3_EsperEPL2Grammar())) {s = 1713;}
                        else if ( (LA191_665==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1714;}
                        else if ( (LA191_665==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1715;}
                        else if ( (LA191_665==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1716;}
                        else if ( (LA191_665==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1717;}
                        else if ( (LA191_665==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1718;}
                        else if ( (LA191_665==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1719;}
                        else if ( (LA191_665==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1720;}
                        else if ( (LA191_665==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1721;}
                        else if ( (LA191_665==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1722;}
                        else if ( (LA191_665==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1723;}
                        else if ( (LA191_665==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1724;}
                        else if ( (LA191_665==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1725;}
                        else if ( (LA191_665==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1726;}
                        else if ( (LA191_665==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1727;}
                        else if ( (LA191_665==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1728;}
                        else if ( (LA191_665==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1729;}
                        else if ( (LA191_665==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1730;}
                        else if ( (LA191_665==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1731;}
                        else if ( (LA191_665==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1732;}
                        else if ( (LA191_665==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1733;}
                        else if ( (LA191_665==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1734;}
                        else if ( (LA191_665==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1735;}
                        else if ( (LA191_665==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1736;}
                        else if ( (LA191_665==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1737;}
                        else if ( (LA191_665==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1738;}
                        else if ( (LA191_665==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1739;}
                        else if ( (LA191_665==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1740;}
                        else if ( (LA191_665==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1741;}
                        else if ( (LA191_665==LW) && (synpred3_EsperEPL2Grammar())) {s = 1742;}
                        else if ( (LA191_665==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1743;}
                        else if ( (LA191_665==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1744;}
                        else if ( (LA191_665==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1745;}
                        else if ( (LA191_665==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1746;}
                        else if ( (LA191_665==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1747;}
                        else if ( (LA191_665==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1748;}
                        else if ( (LA191_665==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1749;}
                        else if ( (LA191_665==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1750;}
                        else if ( (LA191_665==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1751;}
                        else if ( (LA191_665==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1752;}
                        else if ( (LA191_665==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1753;}
                        else if ( (LA191_665==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1754;}
                        else if ( (LA191_665==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1755;}
                        else if ( (LA191_665==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1756;}
                        else if ( (LA191_665==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1757;}
                        else if ( (LA191_665==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1758;}
                        else if ( (LA191_665==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1759;}
                        else if ( (LA191_665==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1760;}
                        else if ( (LA191_665==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1761;}
                        else if ( (LA191_665==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1762;}
                        else if ( (LA191_665==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1763;}
                        input.seek(index191_665);
    return s;
  }
  private int sst_10() {
    int s = -1;
                        int LA191_725 = input.LA(1);
                        int index191_725 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_725==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1764;}
                        else if ( (LA191_725==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1765;}
                        else if ( (LA191_725==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1766;}
                        else if ( (LA191_725==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1767;}
                        else if ( (LA191_725==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1768;}
                        else if ( (LA191_725==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1769;}
                        else if ( (LA191_725==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1770;}
                        else if ( (LA191_725==STRING_LITERAL) ) {s = 1771;}
                        else if ( (LA191_725==QUOTED_STRING_LITERAL) ) {s = 1772;}
                        else if ( (LA191_725==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1773;}
                        else if ( (LA191_725==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1774;}
                        else if ( (LA191_725==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1775;}
                        else if ( (LA191_725==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1776;}
                        else if ( (LA191_725==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1777;}
                        else if ( (LA191_725==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1778;}
                        else if ( (LA191_725==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1779;}
                        else if ( (LA191_725==AT) && (synpred3_EsperEPL2Grammar())) {s = 1780;}
                        else if ( (LA191_725==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1781;}
                        else if ( (LA191_725==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1782;}
                        else if ( (LA191_725==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1783;}
                        else if ( (LA191_725==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1784;}
                        else if ( (LA191_725==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1785;}
                        else if ( (LA191_725==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1786;}
                        else if ( (LA191_725==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1787;}
                        else if ( (LA191_725==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1788;}
                        else if ( (LA191_725==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1789;}
                        else if ( (LA191_725==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1790;}
                        else if ( (LA191_725==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1791;}
                        else if ( (LA191_725==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1792;}
                        else if ( (LA191_725==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1793;}
                        else if ( (LA191_725==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1794;}
                        else if ( (LA191_725==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1795;}
                        else if ( (LA191_725==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1796;}
                        else if ( (LA191_725==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1797;}
                        else if ( (LA191_725==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1798;}
                        else if ( (LA191_725==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1799;}
                        else if ( (LA191_725==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1800;}
                        else if ( (LA191_725==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1801;}
                        else if ( (LA191_725==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1802;}
                        else if ( (LA191_725==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1803;}
                        else if ( (LA191_725==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1804;}
                        else if ( (LA191_725==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1805;}
                        else if ( (LA191_725==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1806;}
                        else if ( (LA191_725==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1807;}
                        else if ( (LA191_725==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1808;}
                        else if ( (LA191_725==LW) && (synpred3_EsperEPL2Grammar())) {s = 1809;}
                        else if ( (LA191_725==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1810;}
                        else if ( (LA191_725==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1811;}
                        else if ( (LA191_725==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1812;}
                        else if ( (LA191_725==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1813;}
                        else if ( (LA191_725==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1814;}
                        else if ( (LA191_725==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1815;}
                        else if ( (LA191_725==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1816;}
                        else if ( (LA191_725==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1817;}
                        else if ( (LA191_725==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1818;}
                        else if ( (LA191_725==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1819;}
                        else if ( (LA191_725==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1820;}
                        else if ( (LA191_725==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1821;}
                        else if ( (LA191_725==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1822;}
                        else if ( (LA191_725==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1823;}
                        else if ( (LA191_725==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1824;}
                        else if ( (LA191_725==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1825;}
                        else if ( (LA191_725==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1826;}
                        else if ( (LA191_725==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1827;}
                        else if ( (LA191_725==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1828;}
                        else if ( (LA191_725==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1829;}
                        else if ( (LA191_725==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1830;}
                        input.seek(index191_725);
    return s;
  }
  private int sst_11() {
    int s = -1;
                        int LA191_785 = input.LA(1);
                        int index191_785 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_785==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1831;}
                        else if ( (LA191_785==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1832;}
                        else if ( (LA191_785==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1833;}
                        else if ( (LA191_785==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1834;}
                        else if ( (LA191_785==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1835;}
                        else if ( (LA191_785==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1836;}
                        else if ( (LA191_785==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1837;}
                        else if ( (LA191_785==STRING_LITERAL) ) {s = 1838;}
                        else if ( (LA191_785==QUOTED_STRING_LITERAL) ) {s = 1839;}
                        else if ( (LA191_785==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1840;}
                        else if ( (LA191_785==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1841;}
                        else if ( (LA191_785==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1842;}
                        else if ( (LA191_785==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1843;}
                        else if ( (LA191_785==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1844;}
                        else if ( (LA191_785==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1845;}
                        else if ( (LA191_785==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1846;}
                        else if ( (LA191_785==AT) && (synpred3_EsperEPL2Grammar())) {s = 1847;}
                        else if ( (LA191_785==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1848;}
                        else if ( (LA191_785==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1849;}
                        else if ( (LA191_785==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1850;}
                        else if ( (LA191_785==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1851;}
                        else if ( (LA191_785==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1852;}
                        else if ( (LA191_785==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1853;}
                        else if ( (LA191_785==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1854;}
                        else if ( (LA191_785==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1855;}
                        else if ( (LA191_785==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1856;}
                        else if ( (LA191_785==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1857;}
                        else if ( (LA191_785==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1858;}
                        else if ( (LA191_785==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1859;}
                        else if ( (LA191_785==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1860;}
                        else if ( (LA191_785==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1861;}
                        else if ( (LA191_785==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1862;}
                        else if ( (LA191_785==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1863;}
                        else if ( (LA191_785==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1864;}
                        else if ( (LA191_785==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1865;}
                        else if ( (LA191_785==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1866;}
                        else if ( (LA191_785==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1867;}
                        else if ( (LA191_785==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1868;}
                        else if ( (LA191_785==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1869;}
                        else if ( (LA191_785==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1870;}
                        else if ( (LA191_785==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1871;}
                        else if ( (LA191_785==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1872;}
                        else if ( (LA191_785==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1873;}
                        else if ( (LA191_785==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1874;}
                        else if ( (LA191_785==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1875;}
                        else if ( (LA191_785==LW) && (synpred3_EsperEPL2Grammar())) {s = 1876;}
                        else if ( (LA191_785==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1877;}
                        else if ( (LA191_785==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1878;}
                        else if ( (LA191_785==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1879;}
                        else if ( (LA191_785==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1880;}
                        else if ( (LA191_785==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1881;}
                        else if ( (LA191_785==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1882;}
                        else if ( (LA191_785==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1883;}
                        else if ( (LA191_785==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1884;}
                        else if ( (LA191_785==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1885;}
                        else if ( (LA191_785==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1886;}
                        else if ( (LA191_785==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1887;}
                        else if ( (LA191_785==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1888;}
                        else if ( (LA191_785==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1889;}
                        else if ( (LA191_785==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1890;}
                        else if ( (LA191_785==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1891;}
                        else if ( (LA191_785==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1892;}
                        else if ( (LA191_785==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1893;}
                        else if ( (LA191_785==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1894;}
                        else if ( (LA191_785==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1895;}
                        else if ( (LA191_785==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1896;}
                        else if ( (LA191_785==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1897;}
                        input.seek(index191_785);
    return s;
  }
  private int sst_12() {
    int s = -1;
                        int LA191_845 = input.LA(1);
                        int index191_845 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_845==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}
                        else if ( ((LA191_845>=STRING_LITERAL && LA191_845<=QUOTED_STRING_LITERAL)) ) {s = 14;}
                        input.seek(index191_845);
    return s;
  }
  private int sst_13() {
    int s = -1;
                        int LA191_905 = input.LA(1);
                        int index191_905 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_905==STRING_LITERAL) ) {s = 1901;}
                        else if ( (LA191_905==QUOTED_STRING_LITERAL) ) {s = 1902;}
                        else if ( (LA191_905==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1903;}
                        else if ( (LA191_905==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1904;}
                        else if ( (LA191_905==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1905;}
                        else if ( (LA191_905==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1906;}
                        else if ( (LA191_905==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1907;}
                        else if ( (LA191_905==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1908;}
                        else if ( (LA191_905==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1909;}
                        else if ( (LA191_905==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1910;}
                        else if ( (LA191_905==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1911;}
                        else if ( (LA191_905==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1912;}
                        else if ( (LA191_905==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1913;}
                        else if ( (LA191_905==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1914;}
                        else if ( (LA191_905==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1915;}
                        else if ( (LA191_905==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1916;}
                        else if ( (LA191_905==AT) && (synpred3_EsperEPL2Grammar())) {s = 1917;}
                        else if ( (LA191_905==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1918;}
                        else if ( (LA191_905==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1919;}
                        else if ( (LA191_905==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1920;}
                        else if ( (LA191_905==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1921;}
                        else if ( (LA191_905==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1922;}
                        else if ( (LA191_905==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1923;}
                        else if ( (LA191_905==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1924;}
                        else if ( (LA191_905==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1925;}
                        else if ( (LA191_905==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1926;}
                        else if ( (LA191_905==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1927;}
                        else if ( (LA191_905==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1928;}
                        else if ( (LA191_905==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1929;}
                        else if ( (LA191_905==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1930;}
                        else if ( (LA191_905==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1931;}
                        else if ( (LA191_905==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1932;}
                        else if ( (LA191_905==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 1933;}
                        else if ( (LA191_905==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 1934;}
                        else if ( (LA191_905==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1935;}
                        else if ( (LA191_905==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1936;}
                        else if ( (LA191_905==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1937;}
                        else if ( (LA191_905==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1938;}
                        else if ( (LA191_905==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1939;}
                        else if ( (LA191_905==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1940;}
                        else if ( (LA191_905==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1941;}
                        else if ( (LA191_905==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1942;}
                        else if ( (LA191_905==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1943;}
                        else if ( (LA191_905==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1944;}
                        else if ( (LA191_905==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1945;}
                        else if ( (LA191_905==LW) && (synpred3_EsperEPL2Grammar())) {s = 1946;}
                        else if ( (LA191_905==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1947;}
                        else if ( (LA191_905==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 1948;}
                        else if ( (LA191_905==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1949;}
                        else if ( (LA191_905==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1950;}
                        else if ( (LA191_905==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1951;}
                        else if ( (LA191_905==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1952;}
                        else if ( (LA191_905==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1953;}
                        else if ( (LA191_905==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1954;}
                        else if ( (LA191_905==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1955;}
                        else if ( (LA191_905==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1956;}
                        else if ( (LA191_905==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1957;}
                        else if ( (LA191_905==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1958;}
                        else if ( (LA191_905==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1959;}
                        else if ( (LA191_905==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1960;}
                        else if ( (LA191_905==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1961;}
                        else if ( (LA191_905==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1962;}
                        else if ( (LA191_905==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1963;}
                        else if ( (LA191_905==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1964;}
                        else if ( (LA191_905==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1965;}
                        else if ( (LA191_905==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1966;}
                        else if ( (LA191_905==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1967;}
                        input.seek(index191_905);
    return s;
  }
  private int sst_14() {
    int s = -1;
                        int LA191_965 = input.LA(1);
                        int index191_965 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_965==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1968;}
                        else if ( (LA191_965==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1969;}
                        else if ( (LA191_965==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1970;}
                        else if ( (LA191_965==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1971;}
                        else if ( (LA191_965==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1972;}
                        else if ( (LA191_965==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1973;}
                        else if ( (LA191_965==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1974;}
                        else if ( (LA191_965==STRING_LITERAL) ) {s = 1975;}
                        else if ( (LA191_965==QUOTED_STRING_LITERAL) ) {s = 1976;}
                        else if ( (LA191_965==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1977;}
                        else if ( (LA191_965==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1978;}
                        else if ( (LA191_965==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}
                        else if ( (LA191_965==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1980;}
                        else if ( (LA191_965==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1981;}
                        else if ( (LA191_965==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1982;}
                        else if ( (LA191_965==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1983;}
                        else if ( (LA191_965==AT) && (synpred3_EsperEPL2Grammar())) {s = 1984;}
                        else if ( (LA191_965==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1985;}
                        else if ( (LA191_965==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1986;}
                        else if ( (LA191_965==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1987;}
                        else if ( (LA191_965==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1988;}
                        else if ( (LA191_965==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1989;}
                        else if ( (LA191_965==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1990;}
                        else if ( (LA191_965==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1991;}
                        else if ( (LA191_965==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1992;}
                        else if ( (LA191_965==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1993;}
                        else if ( (LA191_965==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1994;}
                        else if ( (LA191_965==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1995;}
                        else if ( (LA191_965==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1996;}
                        else if ( (LA191_965==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1997;}
                        else if ( (LA191_965==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1998;}
                        else if ( (LA191_965==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1999;}
                        else if ( (LA191_965==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2000;}
                        else if ( (LA191_965==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2001;}
                        else if ( (LA191_965==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2002;}
                        else if ( (LA191_965==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2003;}
                        else if ( (LA191_965==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2004;}
                        else if ( (LA191_965==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2005;}
                        else if ( (LA191_965==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2006;}
                        else if ( (LA191_965==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2007;}
                        else if ( (LA191_965==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2008;}
                        else if ( (LA191_965==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2009;}
                        else if ( (LA191_965==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2010;}
                        else if ( (LA191_965==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2011;}
                        else if ( (LA191_965==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2012;}
                        else if ( (LA191_965==LW) && (synpred3_EsperEPL2Grammar())) {s = 2013;}
                        else if ( (LA191_965==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2014;}
                        else if ( (LA191_965==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2015;}
                        else if ( (LA191_965==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2016;}
                        else if ( (LA191_965==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2017;}
                        else if ( (LA191_965==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2018;}
                        else if ( (LA191_965==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2019;}
                        else if ( (LA191_965==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2020;}
                        else if ( (LA191_965==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2021;}
                        else if ( (LA191_965==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2022;}
                        else if ( (LA191_965==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2023;}
                        else if ( (LA191_965==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2024;}
                        else if ( (LA191_965==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2025;}
                        else if ( (LA191_965==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2026;}
                        else if ( (LA191_965==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2027;}
                        else if ( (LA191_965==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2028;}
                        else if ( (LA191_965==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2029;}
                        else if ( (LA191_965==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2030;}
                        else if ( (LA191_965==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2031;}
                        else if ( (LA191_965==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2032;}
                        else if ( (LA191_965==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2033;}
                        else if ( (LA191_965==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2034;}
                        input.seek(index191_965);
    return s;
  }
  private int sst_15() {
    int s = -1;
                        int LA191_1025 = input.LA(1);
                        int index191_1025 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1025==STRING_LITERAL) ) {s = 2035;}
                        else if ( (LA191_1025==QUOTED_STRING_LITERAL) ) {s = 2036;}
                        else if ( (LA191_1025==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2037;}
                        else if ( (LA191_1025==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2038;}
                        else if ( (LA191_1025==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2039;}
                        else if ( (LA191_1025==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2040;}
                        else if ( (LA191_1025==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2041;}
                        else if ( (LA191_1025==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2042;}
                        else if ( (LA191_1025==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2043;}
                        else if ( (LA191_1025==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2044;}
                        else if ( (LA191_1025==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2045;}
                        else if ( (LA191_1025==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2046;}
                        else if ( (LA191_1025==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2047;}
                        else if ( (LA191_1025==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2048;}
                        else if ( (LA191_1025==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2049;}
                        else if ( (LA191_1025==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2050;}
                        else if ( (LA191_1025==AT) && (synpred3_EsperEPL2Grammar())) {s = 2051;}
                        else if ( (LA191_1025==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2052;}
                        else if ( (LA191_1025==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2053;}
                        else if ( (LA191_1025==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2054;}
                        else if ( (LA191_1025==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2055;}
                        else if ( (LA191_1025==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2056;}
                        else if ( (LA191_1025==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2057;}
                        else if ( (LA191_1025==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2058;}
                        else if ( (LA191_1025==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2059;}
                        else if ( (LA191_1025==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2060;}
                        else if ( (LA191_1025==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2061;}
                        else if ( (LA191_1025==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2062;}
                        else if ( (LA191_1025==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2063;}
                        else if ( (LA191_1025==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2064;}
                        else if ( (LA191_1025==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2065;}
                        else if ( (LA191_1025==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2066;}
                        else if ( (LA191_1025==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2067;}
                        else if ( (LA191_1025==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2068;}
                        else if ( (LA191_1025==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2069;}
                        else if ( (LA191_1025==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2070;}
                        else if ( (LA191_1025==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2071;}
                        else if ( (LA191_1025==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2072;}
                        else if ( (LA191_1025==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2073;}
                        else if ( (LA191_1025==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2074;}
                        else if ( (LA191_1025==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2075;}
                        else if ( (LA191_1025==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2076;}
                        else if ( (LA191_1025==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2077;}
                        else if ( (LA191_1025==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2078;}
                        else if ( (LA191_1025==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2079;}
                        else if ( (LA191_1025==LW) && (synpred3_EsperEPL2Grammar())) {s = 2080;}
                        else if ( (LA191_1025==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2081;}
                        else if ( (LA191_1025==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2082;}
                        else if ( (LA191_1025==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2083;}
                        else if ( (LA191_1025==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2084;}
                        else if ( (LA191_1025==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2085;}
                        else if ( (LA191_1025==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2086;}
                        else if ( (LA191_1025==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2087;}
                        else if ( (LA191_1025==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2088;}
                        else if ( (LA191_1025==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2089;}
                        else if ( (LA191_1025==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2090;}
                        else if ( (LA191_1025==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2091;}
                        else if ( (LA191_1025==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2092;}
                        else if ( (LA191_1025==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2093;}
                        else if ( (LA191_1025==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2094;}
                        else if ( (LA191_1025==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2095;}
                        else if ( (LA191_1025==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2096;}
                        else if ( (LA191_1025==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2097;}
                        else if ( (LA191_1025==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2098;}
                        else if ( (LA191_1025==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2099;}
                        else if ( (LA191_1025==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2100;}
                        else if ( (LA191_1025==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2101;}
                        input.seek(index191_1025);
    return s;
  }
  private int sst_16() {
    int s = -1;
                        int LA191_1085 = input.LA(1);
                        int index191_1085 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1085==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2102;}
                        else if ( (LA191_1085==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2103;}
                        else if ( (LA191_1085==CASE) && (synpred3_EsperEPL2Grammar())) {s = 2104;}
                        else if ( (LA191_1085==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2105;}
                        else if ( (LA191_1085==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2106;}
                        else if ( (LA191_1085==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 2107;}
                        else if ( (LA191_1085==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 2108;}
                        else if ( (LA191_1085==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 2109;}
                        else if ( (LA191_1085==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 2110;}
                        else if ( (LA191_1085==STRING_LITERAL) ) {s = 2111;}
                        else if ( (LA191_1085==QUOTED_STRING_LITERAL) ) {s = 2112;}
                        else if ( (LA191_1085==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 2113;}
                        else if ( (LA191_1085==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 2114;}
                        else if ( (LA191_1085==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 2115;}
                        else if ( (LA191_1085==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 2116;}
                        else if ( (LA191_1085==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 2117;}
                        else if ( (LA191_1085==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2118;}
                        else if ( (LA191_1085==AT) && (synpred3_EsperEPL2Grammar())) {s = 2119;}
                        else if ( (LA191_1085==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2120;}
                        else if ( (LA191_1085==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2121;}
                        else if ( (LA191_1085==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2122;}
                        else if ( (LA191_1085==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2123;}
                        else if ( (LA191_1085==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2124;}
                        else if ( (LA191_1085==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2125;}
                        else if ( (LA191_1085==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2126;}
                        else if ( (LA191_1085==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2127;}
                        else if ( (LA191_1085==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2128;}
                        else if ( (LA191_1085==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2129;}
                        else if ( (LA191_1085==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2130;}
                        else if ( (LA191_1085==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2131;}
                        else if ( (LA191_1085==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2132;}
                        else if ( (LA191_1085==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2133;}
                        else if ( (LA191_1085==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2134;}
                        else if ( (LA191_1085==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2135;}
                        else if ( (LA191_1085==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2136;}
                        else if ( (LA191_1085==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2137;}
                        else if ( (LA191_1085==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2138;}
                        else if ( (LA191_1085==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2139;}
                        else if ( (LA191_1085==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2140;}
                        else if ( (LA191_1085==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2141;}
                        else if ( (LA191_1085==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2142;}
                        else if ( (LA191_1085==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2143;}
                        else if ( (LA191_1085==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2144;}
                        else if ( (LA191_1085==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2145;}
                        else if ( (LA191_1085==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2146;}
                        else if ( (LA191_1085==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2147;}
                        else if ( (LA191_1085==LW) && (synpred3_EsperEPL2Grammar())) {s = 2148;}
                        else if ( (LA191_1085==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2149;}
                        else if ( (LA191_1085==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2150;}
                        else if ( (LA191_1085==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2151;}
                        else if ( (LA191_1085==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2152;}
                        else if ( (LA191_1085==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2153;}
                        else if ( (LA191_1085==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2154;}
                        else if ( (LA191_1085==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2155;}
                        else if ( (LA191_1085==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2156;}
                        else if ( (LA191_1085==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2157;}
                        else if ( (LA191_1085==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2158;}
                        else if ( (LA191_1085==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2159;}
                        else if ( (LA191_1085==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2160;}
                        else if ( (LA191_1085==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2161;}
                        else if ( (LA191_1085==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2162;}
                        else if ( (LA191_1085==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2163;}
                        else if ( (LA191_1085==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 2164;}
                        else if ( (LA191_1085==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2165;}
                        else if ( (LA191_1085==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 2166;}
                        else if ( (LA191_1085==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 2167;}
                        else if ( (LA191_1085==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 2168;}
                        else if ( (LA191_1085==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2169;}
                        input.seek(index191_1085);
    return s;
  }
  private int sst_17() {
    int s = -1;
                        int LA191_1145 = input.LA(1);
                        int index191_1145 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1145==SELECT) ) {s = 2170;}
                        else if ( (LA191_1145==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 2171;}
                        else if ( (LA191_1145==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 2172;}
                        else if ( (LA191_1145==AT) && (synpred3_EsperEPL2Grammar())) {s = 2173;}
                        else if ( (LA191_1145==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 2174;}
                        else if ( (LA191_1145==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 2175;}
                        else if ( (LA191_1145==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2176;}
                        else if ( (LA191_1145==SUM) && (synpred3_EsperEPL2Grammar())) {s = 2177;}
                        else if ( (LA191_1145==AVG) && (synpred3_EsperEPL2Grammar())) {s = 2178;}
                        else if ( (LA191_1145==MAX) && (synpred3_EsperEPL2Grammar())) {s = 2179;}
                        else if ( (LA191_1145==MIN) && (synpred3_EsperEPL2Grammar())) {s = 2180;}
                        else if ( (LA191_1145==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}
                        else if ( (LA191_1145==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 2182;}
                        else if ( (LA191_1145==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 2183;}
                        else if ( (LA191_1145==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 2184;}
                        else if ( (LA191_1145==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 2185;}
                        else if ( (LA191_1145==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 2186;}
                        else if ( (LA191_1145==LAST) && (synpred3_EsperEPL2Grammar())) {s = 2187;}
                        else if ( (LA191_1145==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 2188;}
                        else if ( (LA191_1145==MERGE) && (synpred3_EsperEPL2Grammar())) {s = 2189;}
                        else if ( (LA191_1145==MATCHED) && (synpred3_EsperEPL2Grammar())) {s = 2190;}
                        else if ( (LA191_1145==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 2191;}
                        else if ( (LA191_1145==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 2192;}
                        else if ( (LA191_1145==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 2193;}
                        else if ( (LA191_1145==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 2194;}
                        else if ( (LA191_1145==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2195;}
                        else if ( (LA191_1145==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2196;}
                        else if ( (LA191_1145==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2197;}
                        else if ( (LA191_1145==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2198;}
                        else if ( (LA191_1145==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2199;}
                        else if ( (LA191_1145==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2200;}
                        else if ( (LA191_1145==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2201;}
                        else if ( (LA191_1145==LW) && (synpred3_EsperEPL2Grammar())) {s = 2202;}
                        else if ( (LA191_1145==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2203;}
                        else if ( (LA191_1145==TYPEOF) && (synpred3_EsperEPL2Grammar())) {s = 2204;}
                        else if ( (LA191_1145==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2205;}
                        else if ( (LA191_1145==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2206;}
                        else if ( (LA191_1145==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2207;}
                        else if ( (LA191_1145==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2208;}
                        else if ( (LA191_1145==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2209;}
                        else if ( (LA191_1145==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2210;}
                        else if ( (LA191_1145==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2211;}
                        else if ( (LA191_1145==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2212;}
                        else if ( (LA191_1145==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2213;}
                        else if ( (LA191_1145==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2214;}
                        else if ( (LA191_1145==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2215;}
                        else if ( (LA191_1145==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2216;}
                        else if ( (LA191_1145==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2217;}
                        input.seek(index191_1145);
    return s;
  }
  private int sst_18() {
    int s = -1;
                        int LA191_1155 = input.LA(1);
                        int index191_1155 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1155==RPAREN) ) {s = 2218;}
                        else if ( (LA191_1155==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2219;}
                        else if ( (LA191_1155==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2220;}
                        else if ( (LA191_1155==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2221;}
                        else if ( (LA191_1155==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2222;}
                        else if ( (LA191_1155==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2223;}
                        else if ( (LA191_1155==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2224;}
                        else if ( (LA191_1155==LT) && (synpred3_EsperEPL2Grammar())) {s = 2225;}
                        else if ( (LA191_1155==GT) && (synpred3_EsperEPL2Grammar())) {s = 2226;}
                        else if ( (LA191_1155==LE) && (synpred3_EsperEPL2Grammar())) {s = 2227;}
                        else if ( (LA191_1155==GE) && (synpred3_EsperEPL2Grammar())) {s = 2228;}
                        else if ( (LA191_1155==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2229;}
                        else if ( (LA191_1155==IS) && (synpred3_EsperEPL2Grammar())) {s = 2230;}
                        else if ( (LA191_1155==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2231;}
                        else if ( (LA191_1155==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2232;}
                        else if ( (LA191_1155==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2233;}
                        else if ( (LA191_1155==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2234;}
                        else if ( (LA191_1155==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2235;}
                        else if ( (LA191_1155==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2236;}
                        else if ( (LA191_1155==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2237;}
                        else if ( (LA191_1155==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2238;}
                        else if ( (LA191_1155==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2239;}
                        else if ( (LA191_1155==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2240;}
                        else if ( (LA191_1155==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2241;}
                        else if ( (LA191_1155==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2242;}
                        input.seek(index191_1155);
    return s;
  }
  private int sst_19() {
    int s = -1;
                        int LA191_1156 = input.LA(1);
                        int index191_1156 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1156==RPAREN) ) {s = 2243;}
                        else if ( (LA191_1156==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2244;}
                        else if ( (LA191_1156==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2245;}
                        else if ( (LA191_1156==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2246;}
                        else if ( (LA191_1156==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2247;}
                        else if ( (LA191_1156==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2248;}
                        else if ( (LA191_1156==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2249;}
                        else if ( (LA191_1156==LT) && (synpred3_EsperEPL2Grammar())) {s = 2250;}
                        else if ( (LA191_1156==GT) && (synpred3_EsperEPL2Grammar())) {s = 2251;}
                        else if ( (LA191_1156==LE) && (synpred3_EsperEPL2Grammar())) {s = 2252;}
                        else if ( (LA191_1156==GE) && (synpred3_EsperEPL2Grammar())) {s = 2253;}
                        else if ( (LA191_1156==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2254;}
                        else if ( (LA191_1156==IS) && (synpred3_EsperEPL2Grammar())) {s = 2255;}
                        else if ( (LA191_1156==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2256;}
                        else if ( (LA191_1156==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2257;}
                        else if ( (LA191_1156==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2258;}
                        else if ( (LA191_1156==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2259;}
                        else if ( (LA191_1156==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2260;}
                        else if ( (LA191_1156==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2261;}
                        else if ( (LA191_1156==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2262;}
                        else if ( (LA191_1156==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2263;}
                        else if ( (LA191_1156==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2264;}
                        else if ( (LA191_1156==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2265;}
                        else if ( (LA191_1156==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2266;}
                        else if ( (LA191_1156==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2267;}
                        input.seek(index191_1156);
    return s;
  }
  private int sst_20() {
    int s = -1;
                        int LA191_1225 = input.LA(1);
                        int index191_1225 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1225==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2268;}
                        else if ( (LA191_1225==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2269;}
                        else if ( (LA191_1225==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2270;}
                        else if ( (LA191_1225==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2271;}
                        else if ( (LA191_1225==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2272;}
                        else if ( (LA191_1225==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2273;}
                        else if ( (LA191_1225==LT) && (synpred3_EsperEPL2Grammar())) {s = 2274;}
                        else if ( (LA191_1225==GT) && (synpred3_EsperEPL2Grammar())) {s = 2275;}
                        else if ( (LA191_1225==LE) && (synpred3_EsperEPL2Grammar())) {s = 2276;}
                        else if ( (LA191_1225==GE) && (synpred3_EsperEPL2Grammar())) {s = 2277;}
                        else if ( (LA191_1225==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2278;}
                        else if ( (LA191_1225==IS) && (synpred3_EsperEPL2Grammar())) {s = 2279;}
                        else if ( (LA191_1225==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2280;}
                        else if ( (LA191_1225==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2281;}
                        else if ( (LA191_1225==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2282;}
                        else if ( (LA191_1225==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2283;}
                        else if ( (LA191_1225==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2284;}
                        else if ( (LA191_1225==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2285;}
                        else if ( (LA191_1225==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2286;}
                        else if ( (LA191_1225==RPAREN) ) {s = 2287;}
                        else if ( (LA191_1225==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2288;}
                        else if ( (LA191_1225==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2289;}
                        else if ( (LA191_1225==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2290;}
                        else if ( (LA191_1225==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2291;}
                        else if ( (LA191_1225==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2292;}
                        input.seek(index191_1225);
    return s;
  }
  private int sst_21() {
    int s = -1;
                        int LA191_1226 = input.LA(1);
                        int index191_1226 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1226==RPAREN) ) {s = 2293;}
                        else if ( (LA191_1226==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2294;}
                        else if ( (LA191_1226==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2295;}
                        else if ( (LA191_1226==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2296;}
                        else if ( (LA191_1226==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2297;}
                        else if ( (LA191_1226==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2298;}
                        else if ( (LA191_1226==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2299;}
                        else if ( (LA191_1226==LT) && (synpred3_EsperEPL2Grammar())) {s = 2300;}
                        else if ( (LA191_1226==GT) && (synpred3_EsperEPL2Grammar())) {s = 2301;}
                        else if ( (LA191_1226==LE) && (synpred3_EsperEPL2Grammar())) {s = 2302;}
                        else if ( (LA191_1226==GE) && (synpred3_EsperEPL2Grammar())) {s = 2303;}
                        else if ( (LA191_1226==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2304;}
                        else if ( (LA191_1226==IS) && (synpred3_EsperEPL2Grammar())) {s = 2305;}
                        else if ( (LA191_1226==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2306;}
                        else if ( (LA191_1226==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2307;}
                        else if ( (LA191_1226==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2308;}
                        else if ( (LA191_1226==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2309;}
                        else if ( (LA191_1226==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2310;}
                        else if ( (LA191_1226==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2311;}
                        else if ( (LA191_1226==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2312;}
                        else if ( (LA191_1226==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2313;}
                        else if ( (LA191_1226==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2314;}
                        else if ( (LA191_1226==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2315;}
                        else if ( (LA191_1226==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2316;}
                        else if ( (LA191_1226==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2317;}
                        input.seek(index191_1226);
    return s;
  }
  private int sst_22() {
    int s = -1;
                        int LA191_1294 = input.LA(1);
                        int index191_1294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1294==RPAREN) ) {s = 2318;}
                        else if ( (LA191_1294==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2319;}
                        else if ( (LA191_1294==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2320;}
                        else if ( (LA191_1294==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2321;}
                        else if ( (LA191_1294==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2322;}
                        else if ( (LA191_1294==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2323;}
                        else if ( (LA191_1294==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2324;}
                        else if ( (LA191_1294==LT) && (synpred3_EsperEPL2Grammar())) {s = 2325;}
                        else if ( (LA191_1294==GT) && (synpred3_EsperEPL2Grammar())) {s = 2326;}
                        else if ( (LA191_1294==LE) && (synpred3_EsperEPL2Grammar())) {s = 2327;}
                        else if ( (LA191_1294==GE) && (synpred3_EsperEPL2Grammar())) {s = 2328;}
                        else if ( (LA191_1294==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2329;}
                        else if ( (LA191_1294==IS) && (synpred3_EsperEPL2Grammar())) {s = 2330;}
                        else if ( (LA191_1294==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2331;}
                        else if ( (LA191_1294==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2332;}
                        else if ( (LA191_1294==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2333;}
                        else if ( (LA191_1294==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2334;}
                        else if ( (LA191_1294==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2335;}
                        else if ( (LA191_1294==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2336;}
                        else if ( (LA191_1294==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2337;}
                        else if ( (LA191_1294==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2338;}
                        else if ( (LA191_1294==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2339;}
                        else if ( (LA191_1294==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2340;}
                        else if ( (LA191_1294==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2341;}
                        else if ( (LA191_1294==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2342;}
                        input.seek(index191_1294);
    return s;
  }
  private int sst_23() {
    int s = -1;
                        int LA191_1295 = input.LA(1);
                        int index191_1295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1295==RPAREN) ) {s = 2343;}
                        else if ( (LA191_1295==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2344;}
                        else if ( (LA191_1295==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2345;}
                        else if ( (LA191_1295==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2346;}
                        else if ( (LA191_1295==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2347;}
                        else if ( (LA191_1295==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2348;}
                        else if ( (LA191_1295==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2349;}
                        else if ( (LA191_1295==LT) && (synpred3_EsperEPL2Grammar())) {s = 2350;}
                        else if ( (LA191_1295==GT) && (synpred3_EsperEPL2Grammar())) {s = 2351;}
                        else if ( (LA191_1295==LE) && (synpred3_EsperEPL2Grammar())) {s = 2352;}
                        else if ( (LA191_1295==GE) && (synpred3_EsperEPL2Grammar())) {s = 2353;}
                        else if ( (LA191_1295==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2354;}
                        else if ( (LA191_1295==IS) && (synpred3_EsperEPL2Grammar())) {s = 2355;}
                        else if ( (LA191_1295==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2356;}
                        else if ( (LA191_1295==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2357;}
                        else if ( (LA191_1295==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2358;}
                        else if ( (LA191_1295==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2359;}
                        else if ( (LA191_1295==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2360;}
                        else if ( (LA191_1295==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2361;}
                        else if ( (LA191_1295==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2362;}
                        else if ( (LA191_1295==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2363;}
                        else if ( (LA191_1295==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2364;}
                        else if ( (LA191_1295==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2365;}
                        else if ( (LA191_1295==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2366;}
                        else if ( (LA191_1295==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2367;}
                        input.seek(index191_1295);
    return s;
  }
  private int sst_24() {
    int s = -1;
                        int LA191_1354 = input.LA(1);
                        int index191_1354 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1354==RPAREN) ) {s = 14;}
                        else if ( (LA191_1354==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2369;}
                        else if ( (LA191_1354==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2370;}
                        else if ( (LA191_1354==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2371;}
                        else if ( (LA191_1354==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2372;}
                        else if ( (LA191_1354==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2373;}
                        else if ( (LA191_1354==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2374;}
                        else if ( (LA191_1354==LT) && (synpred3_EsperEPL2Grammar())) {s = 2375;}
                        else if ( (LA191_1354==GT) && (synpred3_EsperEPL2Grammar())) {s = 2376;}
                        else if ( (LA191_1354==LE) && (synpred3_EsperEPL2Grammar())) {s = 2377;}
                        else if ( (LA191_1354==GE) && (synpred3_EsperEPL2Grammar())) {s = 2378;}
                        else if ( (LA191_1354==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2379;}
                        else if ( (LA191_1354==IS) && (synpred3_EsperEPL2Grammar())) {s = 2380;}
                        else if ( (LA191_1354==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2381;}
                        else if ( (LA191_1354==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2382;}
                        else if ( (LA191_1354==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2383;}
                        else if ( (LA191_1354==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2384;}
                        else if ( (LA191_1354==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2385;}
                        else if ( (LA191_1354==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2386;}
                        else if ( (LA191_1354==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2387;}
                        else if ( (LA191_1354==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2388;}
                        else if ( (LA191_1354==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2389;}
                        else if ( (LA191_1354==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2390;}
                        else if ( (LA191_1354==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2391;}
                        else if ( (LA191_1354==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2392;}
                        else if ( (LA191_1354==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2393;}
                        input.seek(index191_1354);
    return s;
  }
  private int sst_25() {
    int s = -1;
                        int LA191_1355 = input.LA(1);
                        int index191_1355 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1355==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2394;}
                        else if ( (LA191_1355==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2395;}
                        else if ( (LA191_1355==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2396;}
                        else if ( (LA191_1355==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2397;}
                        else if ( (LA191_1355==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2398;}
                        else if ( (LA191_1355==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2399;}
                        else if ( (LA191_1355==LT) && (synpred3_EsperEPL2Grammar())) {s = 2400;}
                        else if ( (LA191_1355==GT) && (synpred3_EsperEPL2Grammar())) {s = 2401;}
                        else if ( (LA191_1355==LE) && (synpred3_EsperEPL2Grammar())) {s = 2402;}
                        else if ( (LA191_1355==GE) && (synpred3_EsperEPL2Grammar())) {s = 2403;}
                        else if ( (LA191_1355==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2404;}
                        else if ( (LA191_1355==IS) && (synpred3_EsperEPL2Grammar())) {s = 2405;}
                        else if ( (LA191_1355==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2406;}
                        else if ( (LA191_1355==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2407;}
                        else if ( (LA191_1355==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2408;}
                        else if ( (LA191_1355==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2409;}
                        else if ( (LA191_1355==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2410;}
                        else if ( (LA191_1355==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2411;}
                        else if ( (LA191_1355==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2412;}
                        else if ( (LA191_1355==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2413;}
                        else if ( (LA191_1355==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2414;}
                        else if ( (LA191_1355==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2415;}
                        else if ( (LA191_1355==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2416;}
                        else if ( (LA191_1355==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2417;}
                        else if ( (LA191_1355==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2418;}
                        else if ( (LA191_1355==RPAREN) ) {s = 14;}
                        input.seek(index191_1355);
    return s;
  }
  private int sst_26() {
    int s = -1;
                        int LA191_1430 = input.LA(1);
                        int index191_1430 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1430==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2420;}
                        else if ( (LA191_1430==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2421;}
                        else if ( (LA191_1430==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2422;}
                        else if ( (LA191_1430==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2423;}
                        else if ( (LA191_1430==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2424;}
                        else if ( (LA191_1430==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2425;}
                        else if ( (LA191_1430==LT) && (synpred3_EsperEPL2Grammar())) {s = 2426;}
                        else if ( (LA191_1430==GT) && (synpred3_EsperEPL2Grammar())) {s = 2427;}
                        else if ( (LA191_1430==LE) && (synpred3_EsperEPL2Grammar())) {s = 2428;}
                        else if ( (LA191_1430==GE) && (synpred3_EsperEPL2Grammar())) {s = 2429;}
                        else if ( (LA191_1430==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2430;}
                        else if ( (LA191_1430==IS) && (synpred3_EsperEPL2Grammar())) {s = 2431;}
                        else if ( (LA191_1430==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2432;}
                        else if ( (LA191_1430==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2433;}
                        else if ( (LA191_1430==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2434;}
                        else if ( (LA191_1430==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2435;}
                        else if ( (LA191_1430==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2436;}
                        else if ( (LA191_1430==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2437;}
                        else if ( (LA191_1430==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2438;}
                        else if ( (LA191_1430==RPAREN) ) {s = 2439;}
                        else if ( (LA191_1430==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2440;}
                        else if ( (LA191_1430==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2441;}
                        else if ( (LA191_1430==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2442;}
                        else if ( (LA191_1430==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2443;}
                        else if ( (LA191_1430==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2444;}
                        input.seek(index191_1430);
    return s;
  }
  private int sst_27() {
    int s = -1;
                        int LA191_1431 = input.LA(1);
                        int index191_1431 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1431==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2445;}
                        else if ( (LA191_1431==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2446;}
                        else if ( (LA191_1431==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2447;}
                        else if ( (LA191_1431==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2448;}
                        else if ( (LA191_1431==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2449;}
                        else if ( (LA191_1431==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2450;}
                        else if ( (LA191_1431==LT) && (synpred3_EsperEPL2Grammar())) {s = 2451;}
                        else if ( (LA191_1431==GT) && (synpred3_EsperEPL2Grammar())) {s = 2452;}
                        else if ( (LA191_1431==LE) && (synpred3_EsperEPL2Grammar())) {s = 2453;}
                        else if ( (LA191_1431==GE) && (synpred3_EsperEPL2Grammar())) {s = 2454;}
                        else if ( (LA191_1431==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2455;}
                        else if ( (LA191_1431==IS) && (synpred3_EsperEPL2Grammar())) {s = 2456;}
                        else if ( (LA191_1431==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2457;}
                        else if ( (LA191_1431==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2458;}
                        else if ( (LA191_1431==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2459;}
                        else if ( (LA191_1431==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2460;}
                        else if ( (LA191_1431==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2461;}
                        else if ( (LA191_1431==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2462;}
                        else if ( (LA191_1431==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2463;}
                        else if ( (LA191_1431==RPAREN) ) {s = 2464;}
                        else if ( (LA191_1431==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2465;}
                        else if ( (LA191_1431==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2466;}
                        else if ( (LA191_1431==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2467;}
                        else if ( (LA191_1431==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2468;}
                        else if ( (LA191_1431==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2469;}
                        input.seek(index191_1431);
    return s;
  }
  private int sst_28() {
    int s = -1;
                        int LA191_1499 = input.LA(1);
                        int index191_1499 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1499==RPAREN) ) {s = 2470;}
                        else if ( (LA191_1499==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}
                        else if ( (LA191_1499==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2472;}
                        else if ( (LA191_1499==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2473;}
                        else if ( (LA191_1499==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2474;}
                        else if ( (LA191_1499==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2475;}
                        else if ( (LA191_1499==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2476;}
                        else if ( (LA191_1499==LT) && (synpred3_EsperEPL2Grammar())) {s = 2477;}
                        else if ( (LA191_1499==GT) && (synpred3_EsperEPL2Grammar())) {s = 2478;}
                        else if ( (LA191_1499==LE) && (synpred3_EsperEPL2Grammar())) {s = 2479;}
                        else if ( (LA191_1499==GE) && (synpred3_EsperEPL2Grammar())) {s = 2480;}
                        else if ( (LA191_1499==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2481;}
                        else if ( (LA191_1499==IS) && (synpred3_EsperEPL2Grammar())) {s = 2482;}
                        else if ( (LA191_1499==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2483;}
                        else if ( (LA191_1499==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2484;}
                        else if ( (LA191_1499==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2485;}
                        else if ( (LA191_1499==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2486;}
                        else if ( (LA191_1499==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2487;}
                        else if ( (LA191_1499==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2488;}
                        else if ( (LA191_1499==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2489;}
                        else if ( (LA191_1499==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2490;}
                        else if ( (LA191_1499==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2491;}
                        else if ( (LA191_1499==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2492;}
                        else if ( (LA191_1499==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2493;}
                        else if ( (LA191_1499==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2494;}
                        input.seek(index191_1499);
    return s;
  }
  private int sst_29() {
    int s = -1;
                        int LA191_1500 = input.LA(1);
                        int index191_1500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1500==RPAREN) ) {s = 2495;}
                        else if ( (LA191_1500==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2496;}
                        else if ( (LA191_1500==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2497;}
                        else if ( (LA191_1500==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2498;}
                        else if ( (LA191_1500==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2499;}
                        else if ( (LA191_1500==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2500;}
                        else if ( (LA191_1500==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2501;}
                        else if ( (LA191_1500==LT) && (synpred3_EsperEPL2Grammar())) {s = 2502;}
                        else if ( (LA191_1500==GT) && (synpred3_EsperEPL2Grammar())) {s = 2503;}
                        else if ( (LA191_1500==LE) && (synpred3_EsperEPL2Grammar())) {s = 2504;}
                        else if ( (LA191_1500==GE) && (synpred3_EsperEPL2Grammar())) {s = 2505;}
                        else if ( (LA191_1500==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2506;}
                        else if ( (LA191_1500==IS) && (synpred3_EsperEPL2Grammar())) {s = 2507;}
                        else if ( (LA191_1500==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2508;}
                        else if ( (LA191_1500==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2509;}
                        else if ( (LA191_1500==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2510;}
                        else if ( (LA191_1500==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2511;}
                        else if ( (LA191_1500==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2512;}
                        else if ( (LA191_1500==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2513;}
                        else if ( (LA191_1500==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2514;}
                        else if ( (LA191_1500==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2515;}
                        else if ( (LA191_1500==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2516;}
                        else if ( (LA191_1500==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2517;}
                        else if ( (LA191_1500==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2518;}
                        else if ( (LA191_1500==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2519;}
                        input.seek(index191_1500);
    return s;
  }
  private int sst_30() {
    int s = -1;
                        int LA191_1568 = input.LA(1);
                        int index191_1568 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1568==RPAREN) ) {s = 2520;}
                        else if ( (LA191_1568==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}
                        else if ( (LA191_1568==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2522;}
                        else if ( (LA191_1568==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2523;}
                        else if ( (LA191_1568==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2524;}
                        else if ( (LA191_1568==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2525;}
                        else if ( (LA191_1568==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2526;}
                        else if ( (LA191_1568==LT) && (synpred3_EsperEPL2Grammar())) {s = 2527;}
                        else if ( (LA191_1568==GT) && (synpred3_EsperEPL2Grammar())) {s = 2528;}
                        else if ( (LA191_1568==LE) && (synpred3_EsperEPL2Grammar())) {s = 2529;}
                        else if ( (LA191_1568==GE) && (synpred3_EsperEPL2Grammar())) {s = 2530;}
                        else if ( (LA191_1568==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2531;}
                        else if ( (LA191_1568==IS) && (synpred3_EsperEPL2Grammar())) {s = 2532;}
                        else if ( (LA191_1568==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2533;}
                        else if ( (LA191_1568==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2534;}
                        else if ( (LA191_1568==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2535;}
                        else if ( (LA191_1568==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2536;}
                        else if ( (LA191_1568==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2537;}
                        else if ( (LA191_1568==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2538;}
                        else if ( (LA191_1568==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2539;}
                        else if ( (LA191_1568==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2540;}
                        else if ( (LA191_1568==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2541;}
                        else if ( (LA191_1568==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2542;}
                        else if ( (LA191_1568==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2543;}
                        else if ( (LA191_1568==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2544;}
                        input.seek(index191_1568);
    return s;
  }
  private int sst_31() {
    int s = -1;
                        int LA191_1569 = input.LA(1);
                        int index191_1569 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1569==RPAREN) ) {s = 2545;}
                        else if ( (LA191_1569==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2546;}
                        else if ( (LA191_1569==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2547;}
                        else if ( (LA191_1569==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2548;}
                        else if ( (LA191_1569==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2549;}
                        else if ( (LA191_1569==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2550;}
                        else if ( (LA191_1569==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2551;}
                        else if ( (LA191_1569==LT) && (synpred3_EsperEPL2Grammar())) {s = 2552;}
                        else if ( (LA191_1569==GT) && (synpred3_EsperEPL2Grammar())) {s = 2553;}
                        else if ( (LA191_1569==LE) && (synpred3_EsperEPL2Grammar())) {s = 2554;}
                        else if ( (LA191_1569==GE) && (synpred3_EsperEPL2Grammar())) {s = 2555;}
                        else if ( (LA191_1569==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2556;}
                        else if ( (LA191_1569==IS) && (synpred3_EsperEPL2Grammar())) {s = 2557;}
                        else if ( (LA191_1569==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2558;}
                        else if ( (LA191_1569==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2559;}
                        else if ( (LA191_1569==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2560;}
                        else if ( (LA191_1569==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2561;}
                        else if ( (LA191_1569==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2562;}
                        else if ( (LA191_1569==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2563;}
                        else if ( (LA191_1569==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2564;}
                        else if ( (LA191_1569==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2565;}
                        else if ( (LA191_1569==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2566;}
                        else if ( (LA191_1569==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2567;}
                        else if ( (LA191_1569==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2568;}
                        else if ( (LA191_1569==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2569;}
                        input.seek(index191_1569);
    return s;
  }
  private int sst_32() {
    int s = -1;
                        int LA191_1637 = input.LA(1);
                        int index191_1637 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1637==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2570;}
                        else if ( (LA191_1637==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2571;}
                        else if ( (LA191_1637==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2572;}
                        else if ( (LA191_1637==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2573;}
                        else if ( (LA191_1637==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2574;}
                        else if ( (LA191_1637==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}
                        else if ( (LA191_1637==LT) && (synpred3_EsperEPL2Grammar())) {s = 2576;}
                        else if ( (LA191_1637==GT) && (synpred3_EsperEPL2Grammar())) {s = 2577;}
                        else if ( (LA191_1637==LE) && (synpred3_EsperEPL2Grammar())) {s = 2578;}
                        else if ( (LA191_1637==GE) && (synpred3_EsperEPL2Grammar())) {s = 2579;}
                        else if ( (LA191_1637==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2580;}
                        else if ( (LA191_1637==IS) && (synpred3_EsperEPL2Grammar())) {s = 2581;}
                        else if ( (LA191_1637==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2582;}
                        else if ( (LA191_1637==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2583;}
                        else if ( (LA191_1637==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2584;}
                        else if ( (LA191_1637==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2585;}
                        else if ( (LA191_1637==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2586;}
                        else if ( (LA191_1637==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2587;}
                        else if ( (LA191_1637==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2588;}
                        else if ( (LA191_1637==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2589;}
                        else if ( (LA191_1637==RPAREN) ) {s = 2590;}
                        else if ( (LA191_1637==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2591;}
                        else if ( (LA191_1637==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2592;}
                        else if ( (LA191_1637==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2593;}
                        else if ( (LA191_1637==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2594;}
                        else if ( (LA191_1637==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2595;}
                        input.seek(index191_1637);
    return s;
  }
  private int sst_33() {
    int s = -1;
                        int LA191_1638 = input.LA(1);
                        int index191_1638 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1638==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2596;}
                        else if ( (LA191_1638==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2597;}
                        else if ( (LA191_1638==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2598;}
                        else if ( (LA191_1638==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2599;}
                        else if ( (LA191_1638==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2600;}
                        else if ( (LA191_1638==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2601;}
                        else if ( (LA191_1638==LT) && (synpred3_EsperEPL2Grammar())) {s = 2602;}
                        else if ( (LA191_1638==GT) && (synpred3_EsperEPL2Grammar())) {s = 2603;}
                        else if ( (LA191_1638==LE) && (synpred3_EsperEPL2Grammar())) {s = 2604;}
                        else if ( (LA191_1638==GE) && (synpred3_EsperEPL2Grammar())) {s = 2605;}
                        else if ( (LA191_1638==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2606;}
                        else if ( (LA191_1638==IS) && (synpred3_EsperEPL2Grammar())) {s = 2607;}
                        else if ( (LA191_1638==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2608;}
                        else if ( (LA191_1638==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2609;}
                        else if ( (LA191_1638==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2610;}
                        else if ( (LA191_1638==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2611;}
                        else if ( (LA191_1638==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2612;}
                        else if ( (LA191_1638==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2613;}
                        else if ( (LA191_1638==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2614;}
                        else if ( (LA191_1638==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2615;}
                        else if ( (LA191_1638==RPAREN) ) {s = 2616;}
                        else if ( (LA191_1638==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2617;}
                        else if ( (LA191_1638==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2618;}
                        else if ( (LA191_1638==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2619;}
                        else if ( (LA191_1638==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2620;}
                        else if ( (LA191_1638==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2621;}
                        input.seek(index191_1638);
    return s;
  }
  private int sst_34() {
    int s = -1;
                        int LA191_1696 = input.LA(1);
                        int index191_1696 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1696==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2622;}
                        else if ( (LA191_1696==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2623;}
                        else if ( (LA191_1696==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2624;}
                        else if ( (LA191_1696==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2625;}
                        else if ( (LA191_1696==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2626;}
                        else if ( (LA191_1696==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2627;}
                        else if ( (LA191_1696==LT) && (synpred3_EsperEPL2Grammar())) {s = 2628;}
                        else if ( (LA191_1696==GT) && (synpred3_EsperEPL2Grammar())) {s = 2629;}
                        else if ( (LA191_1696==LE) && (synpred3_EsperEPL2Grammar())) {s = 2630;}
                        else if ( (LA191_1696==GE) && (synpred3_EsperEPL2Grammar())) {s = 2631;}
                        else if ( (LA191_1696==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2632;}
                        else if ( (LA191_1696==IS) && (synpred3_EsperEPL2Grammar())) {s = 2633;}
                        else if ( (LA191_1696==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2634;}
                        else if ( (LA191_1696==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2635;}
                        else if ( (LA191_1696==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2636;}
                        else if ( (LA191_1696==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2637;}
                        else if ( (LA191_1696==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2638;}
                        else if ( (LA191_1696==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2639;}
                        else if ( (LA191_1696==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2640;}
                        else if ( (LA191_1696==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2641;}
                        else if ( (LA191_1696==RPAREN) ) {s = 2642;}
                        else if ( (LA191_1696==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2643;}
                        else if ( (LA191_1696==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2644;}
                        else if ( (LA191_1696==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2645;}
                        else if ( (LA191_1696==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2646;}
                        else if ( (LA191_1696==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2647;}
                        input.seek(index191_1696);
    return s;
  }
  private int sst_35() {
    int s = -1;
                        int LA191_1697 = input.LA(1);
                        int index191_1697 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1697==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2648;}
                        else if ( (LA191_1697==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2649;}
                        else if ( (LA191_1697==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2650;}
                        else if ( (LA191_1697==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2651;}
                        else if ( (LA191_1697==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2652;}
                        else if ( (LA191_1697==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2653;}
                        else if ( (LA191_1697==LT) && (synpred3_EsperEPL2Grammar())) {s = 2654;}
                        else if ( (LA191_1697==GT) && (synpred3_EsperEPL2Grammar())) {s = 2655;}
                        else if ( (LA191_1697==LE) && (synpred3_EsperEPL2Grammar())) {s = 2656;}
                        else if ( (LA191_1697==GE) && (synpred3_EsperEPL2Grammar())) {s = 2657;}
                        else if ( (LA191_1697==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2658;}
                        else if ( (LA191_1697==IS) && (synpred3_EsperEPL2Grammar())) {s = 2659;}
                        else if ( (LA191_1697==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2660;}
                        else if ( (LA191_1697==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2661;}
                        else if ( (LA191_1697==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2662;}
                        else if ( (LA191_1697==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2663;}
                        else if ( (LA191_1697==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2664;}
                        else if ( (LA191_1697==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2665;}
                        else if ( (LA191_1697==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2666;}
                        else if ( (LA191_1697==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2667;}
                        else if ( (LA191_1697==RPAREN) ) {s = 2668;}
                        else if ( (LA191_1697==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2669;}
                        else if ( (LA191_1697==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2670;}
                        else if ( (LA191_1697==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2671;}
                        else if ( (LA191_1697==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2672;}
                        else if ( (LA191_1697==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2673;}
                        input.seek(index191_1697);
    return s;
  }
  private int sst_36() {
    int s = -1;
                        int LA191_1771 = input.LA(1);
                        int index191_1771 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1771==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2674;}
                        else if ( (LA191_1771==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2675;}
                        else if ( (LA191_1771==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2676;}
                        else if ( (LA191_1771==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2677;}
                        else if ( (LA191_1771==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2678;}
                        else if ( (LA191_1771==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}
                        else if ( (LA191_1771==LT) && (synpred3_EsperEPL2Grammar())) {s = 2680;}
                        else if ( (LA191_1771==GT) && (synpred3_EsperEPL2Grammar())) {s = 2681;}
                        else if ( (LA191_1771==LE) && (synpred3_EsperEPL2Grammar())) {s = 2682;}
                        else if ( (LA191_1771==GE) && (synpred3_EsperEPL2Grammar())) {s = 2683;}
                        else if ( (LA191_1771==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2684;}
                        else if ( (LA191_1771==IS) && (synpred3_EsperEPL2Grammar())) {s = 2685;}
                        else if ( (LA191_1771==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2686;}
                        else if ( (LA191_1771==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2687;}
                        else if ( (LA191_1771==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2688;}
                        else if ( (LA191_1771==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2689;}
                        else if ( (LA191_1771==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2690;}
                        else if ( (LA191_1771==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2691;}
                        else if ( (LA191_1771==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2692;}
                        else if ( (LA191_1771==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2693;}
                        else if ( (LA191_1771==RPAREN) ) {s = 2694;}
                        else if ( (LA191_1771==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2695;}
                        else if ( (LA191_1771==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2696;}
                        else if ( (LA191_1771==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2697;}
                        else if ( (LA191_1771==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2698;}
                        else if ( (LA191_1771==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2699;}
                        input.seek(index191_1771);
    return s;
  }
  private int sst_37() {
    int s = -1;
                        int LA191_1772 = input.LA(1);
                        int index191_1772 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1772==RPAREN) ) {s = 2700;}
                        else if ( (LA191_1772==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2701;}
                        else if ( (LA191_1772==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2702;}
                        else if ( (LA191_1772==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2703;}
                        else if ( (LA191_1772==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2704;}
                        else if ( (LA191_1772==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2705;}
                        else if ( (LA191_1772==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}
                        else if ( (LA191_1772==LT) && (synpred3_EsperEPL2Grammar())) {s = 2707;}
                        else if ( (LA191_1772==GT) && (synpred3_EsperEPL2Grammar())) {s = 2708;}
                        else if ( (LA191_1772==LE) && (synpred3_EsperEPL2Grammar())) {s = 2709;}
                        else if ( (LA191_1772==GE) && (synpred3_EsperEPL2Grammar())) {s = 2710;}
                        else if ( (LA191_1772==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2711;}
                        else if ( (LA191_1772==IS) && (synpred3_EsperEPL2Grammar())) {s = 2712;}
                        else if ( (LA191_1772==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2713;}
                        else if ( (LA191_1772==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2714;}
                        else if ( (LA191_1772==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2715;}
                        else if ( (LA191_1772==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2716;}
                        else if ( (LA191_1772==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2717;}
                        else if ( (LA191_1772==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2718;}
                        else if ( (LA191_1772==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2719;}
                        else if ( (LA191_1772==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2720;}
                        else if ( (LA191_1772==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2721;}
                        else if ( (LA191_1772==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2722;}
                        else if ( (LA191_1772==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2723;}
                        else if ( (LA191_1772==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2724;}
                        else if ( (LA191_1772==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2725;}
                        input.seek(index191_1772);
    return s;
  }
  private int sst_38() {
    int s = -1;
                        int LA191_1838 = input.LA(1);
                        int index191_1838 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1838==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2726;}
                        else if ( (LA191_1838==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2727;}
                        else if ( (LA191_1838==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2728;}
                        else if ( (LA191_1838==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2729;}
                        else if ( (LA191_1838==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2730;}
                        else if ( (LA191_1838==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2731;}
                        else if ( (LA191_1838==LT) && (synpred3_EsperEPL2Grammar())) {s = 2732;}
                        else if ( (LA191_1838==GT) && (synpred3_EsperEPL2Grammar())) {s = 2733;}
                        else if ( (LA191_1838==LE) && (synpred3_EsperEPL2Grammar())) {s = 2734;}
                        else if ( (LA191_1838==GE) && (synpred3_EsperEPL2Grammar())) {s = 2735;}
                        else if ( (LA191_1838==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2736;}
                        else if ( (LA191_1838==IS) && (synpred3_EsperEPL2Grammar())) {s = 2737;}
                        else if ( (LA191_1838==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2738;}
                        else if ( (LA191_1838==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2739;}
                        else if ( (LA191_1838==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2740;}
                        else if ( (LA191_1838==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2741;}
                        else if ( (LA191_1838==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2742;}
                        else if ( (LA191_1838==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2743;}
                        else if ( (LA191_1838==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2744;}
                        else if ( (LA191_1838==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2745;}
                        else if ( (LA191_1838==RPAREN) ) {s = 2746;}
                        else if ( (LA191_1838==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2747;}
                        else if ( (LA191_1838==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2748;}
                        else if ( (LA191_1838==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2749;}
                        else if ( (LA191_1838==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2750;}
                        else if ( (LA191_1838==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2751;}
                        input.seek(index191_1838);
    return s;
  }
  private int sst_39() {
    int s = -1;
                        int LA191_1839 = input.LA(1);
                        int index191_1839 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1839==RPAREN) ) {s = 2752;}
                        else if ( (LA191_1839==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2753;}
                        else if ( (LA191_1839==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2754;}
                        else if ( (LA191_1839==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2755;}
                        else if ( (LA191_1839==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2756;}
                        else if ( (LA191_1839==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2757;}
                        else if ( (LA191_1839==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2758;}
                        else if ( (LA191_1839==LT) && (synpred3_EsperEPL2Grammar())) {s = 2759;}
                        else if ( (LA191_1839==GT) && (synpred3_EsperEPL2Grammar())) {s = 2760;}
                        else if ( (LA191_1839==LE) && (synpred3_EsperEPL2Grammar())) {s = 2761;}
                        else if ( (LA191_1839==GE) && (synpred3_EsperEPL2Grammar())) {s = 2762;}
                        else if ( (LA191_1839==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2763;}
                        else if ( (LA191_1839==IS) && (synpred3_EsperEPL2Grammar())) {s = 2764;}
                        else if ( (LA191_1839==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2765;}
                        else if ( (LA191_1839==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2766;}
                        else if ( (LA191_1839==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2767;}
                        else if ( (LA191_1839==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2768;}
                        else if ( (LA191_1839==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2769;}
                        else if ( (LA191_1839==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2770;}
                        else if ( (LA191_1839==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2771;}
                        else if ( (LA191_1839==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2772;}
                        else if ( (LA191_1839==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2773;}
                        else if ( (LA191_1839==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2774;}
                        else if ( (LA191_1839==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2775;}
                        else if ( (LA191_1839==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2776;}
                        else if ( (LA191_1839==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2777;}
                        input.seek(index191_1839);
    return s;
  }
  private int sst_40() {
    int s = -1;
                        int LA191_1901 = input.LA(1);
                        int index191_1901 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1901==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2778;}
                        else if ( (LA191_1901==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2779;}
                        else if ( (LA191_1901==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2780;}
                        else if ( (LA191_1901==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2781;}
                        else if ( (LA191_1901==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2782;}
                        else if ( (LA191_1901==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2783;}
                        else if ( (LA191_1901==LT) && (synpred3_EsperEPL2Grammar())) {s = 2784;}
                        else if ( (LA191_1901==GT) && (synpred3_EsperEPL2Grammar())) {s = 2785;}
                        else if ( (LA191_1901==LE) && (synpred3_EsperEPL2Grammar())) {s = 2786;}
                        else if ( (LA191_1901==GE) && (synpred3_EsperEPL2Grammar())) {s = 2787;}
                        else if ( (LA191_1901==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2788;}
                        else if ( (LA191_1901==IS) && (synpred3_EsperEPL2Grammar())) {s = 2789;}
                        else if ( (LA191_1901==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2790;}
                        else if ( (LA191_1901==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2791;}
                        else if ( (LA191_1901==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2792;}
                        else if ( (LA191_1901==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2793;}
                        else if ( (LA191_1901==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2794;}
                        else if ( (LA191_1901==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2795;}
                        else if ( (LA191_1901==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2796;}
                        else if ( (LA191_1901==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2797;}
                        else if ( (LA191_1901==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2798;}
                        else if ( (LA191_1901==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2799;}
                        else if ( (LA191_1901==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2800;}
                        else if ( (LA191_1901==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2801;}
                        else if ( (LA191_1901==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2802;}
                        else if ( (LA191_1901==RPAREN) ) {s = 14;}
                        input.seek(index191_1901);
    return s;
  }
  private int sst_41() {
    int s = -1;
                        int LA191_1902 = input.LA(1);
                        int index191_1902 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1902==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2804;}
                        else if ( (LA191_1902==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2805;}
                        else if ( (LA191_1902==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2806;}
                        else if ( (LA191_1902==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2807;}
                        else if ( (LA191_1902==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2808;}
                        else if ( (LA191_1902==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2809;}
                        else if ( (LA191_1902==LT) && (synpred3_EsperEPL2Grammar())) {s = 2810;}
                        else if ( (LA191_1902==GT) && (synpred3_EsperEPL2Grammar())) {s = 2811;}
                        else if ( (LA191_1902==LE) && (synpred3_EsperEPL2Grammar())) {s = 2812;}
                        else if ( (LA191_1902==GE) && (synpred3_EsperEPL2Grammar())) {s = 2813;}
                        else if ( (LA191_1902==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2814;}
                        else if ( (LA191_1902==IS) && (synpred3_EsperEPL2Grammar())) {s = 2815;}
                        else if ( (LA191_1902==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2816;}
                        else if ( (LA191_1902==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2817;}
                        else if ( (LA191_1902==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2818;}
                        else if ( (LA191_1902==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2819;}
                        else if ( (LA191_1902==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2820;}
                        else if ( (LA191_1902==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2821;}
                        else if ( (LA191_1902==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2822;}
                        else if ( (LA191_1902==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2823;}
                        else if ( (LA191_1902==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2824;}
                        else if ( (LA191_1902==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2825;}
                        else if ( (LA191_1902==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2826;}
                        else if ( (LA191_1902==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2827;}
                        else if ( (LA191_1902==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2828;}
                        else if ( (LA191_1902==RPAREN) ) {s = 14;}
                        input.seek(index191_1902);
    return s;
  }
  private int sst_42() {
    int s = -1;
                        int LA191_1975 = input.LA(1);
                        int index191_1975 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1975==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2830;}
                        else if ( (LA191_1975==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2831;}
                        else if ( (LA191_1975==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2832;}
                        else if ( (LA191_1975==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2833;}
                        else if ( (LA191_1975==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2834;}
                        else if ( (LA191_1975==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2835;}
                        else if ( (LA191_1975==LT) && (synpred3_EsperEPL2Grammar())) {s = 2836;}
                        else if ( (LA191_1975==GT) && (synpred3_EsperEPL2Grammar())) {s = 2837;}
                        else if ( (LA191_1975==LE) && (synpred3_EsperEPL2Grammar())) {s = 2838;}
                        else if ( (LA191_1975==GE) && (synpred3_EsperEPL2Grammar())) {s = 2839;}
                        else if ( (LA191_1975==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2840;}
                        else if ( (LA191_1975==IS) && (synpred3_EsperEPL2Grammar())) {s = 2841;}
                        else if ( (LA191_1975==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2842;}
                        else if ( (LA191_1975==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2843;}
                        else if ( (LA191_1975==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2844;}
                        else if ( (LA191_1975==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2845;}
                        else if ( (LA191_1975==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2846;}
                        else if ( (LA191_1975==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2847;}
                        else if ( (LA191_1975==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2848;}
                        else if ( (LA191_1975==RPAREN) ) {s = 2849;}
                        else if ( (LA191_1975==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2850;}
                        else if ( (LA191_1975==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2851;}
                        else if ( (LA191_1975==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2852;}
                        else if ( (LA191_1975==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2853;}
                        else if ( (LA191_1975==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2854;}
                        input.seek(index191_1975);
    return s;
  }
  private int sst_43() {
    int s = -1;
                        int LA191_1976 = input.LA(1);
                        int index191_1976 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_1976==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2855;}
                        else if ( (LA191_1976==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2856;}
                        else if ( (LA191_1976==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2857;}
                        else if ( (LA191_1976==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2858;}
                        else if ( (LA191_1976==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2859;}
                        else if ( (LA191_1976==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2860;}
                        else if ( (LA191_1976==LT) && (synpred3_EsperEPL2Grammar())) {s = 2861;}
                        else if ( (LA191_1976==GT) && (synpred3_EsperEPL2Grammar())) {s = 2862;}
                        else if ( (LA191_1976==LE) && (synpred3_EsperEPL2Grammar())) {s = 2863;}
                        else if ( (LA191_1976==GE) && (synpred3_EsperEPL2Grammar())) {s = 2864;}
                        else if ( (LA191_1976==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2865;}
                        else if ( (LA191_1976==IS) && (synpred3_EsperEPL2Grammar())) {s = 2866;}
                        else if ( (LA191_1976==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2867;}
                        else if ( (LA191_1976==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2868;}
                        else if ( (LA191_1976==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2869;}
                        else if ( (LA191_1976==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2870;}
                        else if ( (LA191_1976==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2871;}
                        else if ( (LA191_1976==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2872;}
                        else if ( (LA191_1976==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2873;}
                        else if ( (LA191_1976==RPAREN) ) {s = 2874;}
                        else if ( (LA191_1976==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2875;}
                        else if ( (LA191_1976==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2876;}
                        else if ( (LA191_1976==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2877;}
                        else if ( (LA191_1976==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2878;}
                        else if ( (LA191_1976==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2879;}
                        input.seek(index191_1976);
    return s;
  }
  private int sst_44() {
    int s = -1;
                        int LA191_2035 = input.LA(1);
                        int index191_2035 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_2035==RPAREN) ) {s = 14;}
                        else if ( (LA191_2035==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2881;}
                        else if ( (LA191_2035==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2882;}
                        else if ( (LA191_2035==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2883;}
                        else if ( (LA191_2035==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2884;}
                        else if ( (LA191_2035==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2885;}
                        else if ( (LA191_2035==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2886;}
                        else if ( (LA191_2035==LT) && (synpred3_EsperEPL2Grammar())) {s = 2887;}
                        else if ( (LA191_2035==GT) && (synpred3_EsperEPL2Grammar())) {s = 2888;}
                        else if ( (LA191_2035==LE) && (synpred3_EsperEPL2Grammar())) {s = 2889;}
                        else if ( (LA191_2035==GE) && (synpred3_EsperEPL2Grammar())) {s = 2890;}
                        else if ( (LA191_2035==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2891;}
                        else if ( (LA191_2035==IS) && (synpred3_EsperEPL2Grammar())) {s = 2892;}
                        else if ( (LA191_2035==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2893;}
                        else if ( (LA191_2035==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2894;}
                        else if ( (LA191_2035==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2895;}
                        else if ( (LA191_2035==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2896;}
                        else if ( (LA191_2035==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2897;}
                        else if ( (LA191_2035==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2898;}
                        else if ( (LA191_2035==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2899;}
                        else if ( (LA191_2035==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2900;}
                        else if ( (LA191_2035==AS) && (synpred3_EsperEPL2Grammar())) {s = 2901;}
                        else if ( (LA191_2035==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2902;}
                        else if ( (LA191_2035==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2903;}
                        else if ( (LA191_2035==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2904;}
                        else if ( (LA191_2035==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2905;}
                        else if ( (LA191_2035==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2906;}
                        input.seek(index191_2035);
    return s;
  }
  private int sst_45() {
    int s = -1;
                        int LA191_2036 = input.LA(1);
                        int index191_2036 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_2036==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2907;}
                        else if ( (LA191_2036==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2908;}
                        else if ( (LA191_2036==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2909;}
                        else if ( (LA191_2036==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2910;}
                        else if ( (LA191_2036==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2911;}
                        else if ( (LA191_2036==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2912;}
                        else if ( (LA191_2036==LT) && (synpred3_EsperEPL2Grammar())) {s = 2913;}
                        else if ( (LA191_2036==GT) && (synpred3_EsperEPL2Grammar())) {s = 2914;}
                        else if ( (LA191_2036==LE) && (synpred3_EsperEPL2Grammar())) {s = 2915;}
                        else if ( (LA191_2036==GE) && (synpred3_EsperEPL2Grammar())) {s = 2916;}
                        else if ( (LA191_2036==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2917;}
                        else if ( (LA191_2036==IS) && (synpred3_EsperEPL2Grammar())) {s = 2918;}
                        else if ( (LA191_2036==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2919;}
                        else if ( (LA191_2036==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2920;}
                        else if ( (LA191_2036==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2921;}
                        else if ( (LA191_2036==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2922;}
                        else if ( (LA191_2036==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2923;}
                        else if ( (LA191_2036==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2924;}
                        else if ( (LA191_2036==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2925;}
                        else if ( (LA191_2036==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2926;}
                        else if ( (LA191_2036==AS) && (synpred3_EsperEPL2Grammar())) {s = 2927;}
                        else if ( (LA191_2036==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2928;}
                        else if ( (LA191_2036==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2929;}
                        else if ( (LA191_2036==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2930;}
                        else if ( (LA191_2036==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2931;}
                        else if ( (LA191_2036==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2932;}
                        else if ( (LA191_2036==RPAREN) ) {s = 14;}
                        input.seek(index191_2036);
    return s;
  }
  private int sst_46() {
    int s = -1;
                        int LA191_2111 = input.LA(1);
                        int index191_2111 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_2111==RPAREN) ) {s = 2934;}
                        else if ( (LA191_2111==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2935;}
                        else if ( (LA191_2111==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2936;}
                        else if ( (LA191_2111==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2937;}
                        else if ( (LA191_2111==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2938;}
                        else if ( (LA191_2111==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2939;}
                        else if ( (LA191_2111==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2940;}
                        else if ( (LA191_2111==LT) && (synpred3_EsperEPL2Grammar())) {s = 2941;}
                        else if ( (LA191_2111==GT) && (synpred3_EsperEPL2Grammar())) {s = 2942;}
                        else if ( (LA191_2111==LE) && (synpred3_EsperEPL2Grammar())) {s = 2943;}
                        else if ( (LA191_2111==GE) && (synpred3_EsperEPL2Grammar())) {s = 2944;}
                        else if ( (LA191_2111==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2945;}
                        else if ( (LA191_2111==IS) && (synpred3_EsperEPL2Grammar())) {s = 2946;}
                        else if ( (LA191_2111==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2947;}
                        else if ( (LA191_2111==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2948;}
                        else if ( (LA191_2111==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2949;}
                        else if ( (LA191_2111==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2950;}
                        else if ( (LA191_2111==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2951;}
                        else if ( (LA191_2111==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2952;}
                        else if ( (LA191_2111==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2953;}
                        else if ( (LA191_2111==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2954;}
                        else if ( (LA191_2111==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2955;}
                        else if ( (LA191_2111==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2956;}
                        else if ( (LA191_2111==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2957;}
                        else if ( (LA191_2111==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2958;}
                        input.seek(index191_2111);
    return s;
  }
  private int sst_47() {
    int s = -1;
                        int LA191_2112 = input.LA(1);
                        int index191_2112 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA191_2112==RPAREN) ) {s = 2959;}
                        else if ( (LA191_2112==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2960;}
                        else if ( (LA191_2112==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2961;}
                        else if ( (LA191_2112==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2962;}
                        else if ( (LA191_2112==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2963;}
                        else if ( (LA191_2112==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2964;}
                        else if ( (LA191_2112==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2965;}
                        else if ( (LA191_2112==LT) && (synpred3_EsperEPL2Grammar())) {s = 2966;}
                        else if ( (LA191_2112==GT) && (synpred3_EsperEPL2Grammar())) {s = 2967;}
                        else if ( (LA191_2112==LE) && (synpred3_EsperEPL2Grammar())) {s = 2968;}
                        else if ( (LA191_2112==GE) && (synpred3_EsperEPL2Grammar())) {s = 2969;}
                        else if ( (LA191_2112==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2970;}
                        else if ( (LA191_2112==IS) && (synpred3_EsperEPL2Grammar())) {s = 2971;}
                        else if ( (LA191_2112==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2972;}
                        else if ( (LA191_2112==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2973;}
                        else if ( (LA191_2112==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2974;}
                        else if ( (LA191_2112==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2975;}
                        else if ( (LA191_2112==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2976;}
                        else if ( (LA191_2112==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2977;}
                        else if ( (LA191_2112==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2978;}
                        else if ( (LA191_2112==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2979;}
                        else if ( (LA191_2112==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2980;}
                        else if ( (LA191_2112==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2981;}
                        else if ( (LA191_2112==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2982;}
                        else if ( (LA191_2112==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2983;}
                        input.seek(index191_2112);
    return s;
  }
  private int sst_48() {
    int s = -1;
                        int LA191_2218 = input.LA(1);
                        int index191_2218 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2218);
    return s;
  }
  private int sst_49() {
    int s = -1;
                        int LA191_2243 = input.LA(1);
                        int index191_2243 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2243);
    return s;
  }
  private int sst_50() {
    int s = -1;
                        int LA191_2287 = input.LA(1);
                        int index191_2287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2287);
    return s;
  }
  private int sst_51() {
    int s = -1;
                        int LA191_2293 = input.LA(1);
                        int index191_2293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2293);
    return s;
  }
  private int sst_52() {
    int s = -1;
                        int LA191_2318 = input.LA(1);
                        int index191_2318 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2318);
    return s;
  }
  private int sst_53() {
    int s = -1;
                        int LA191_2343 = input.LA(1);
                        int index191_2343 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2343);
    return s;
  }
  private int sst_54() {
    int s = -1;
                        int LA191_2439 = input.LA(1);
                        int index191_2439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2439);
    return s;
  }
  private int sst_55() {
    int s = -1;
                        int LA191_2464 = input.LA(1);
                        int index191_2464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2464);
    return s;
  }
  private int sst_56() {
    int s = -1;
                        int LA191_2470 = input.LA(1);
                        int index191_2470 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2470);
    return s;
  }
  private int sst_57() {
    int s = -1;
                        int LA191_2495 = input.LA(1);
                        int index191_2495 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2495);
    return s;
  }
  private int sst_58() {
    int s = -1;
                        int LA191_2520 = input.LA(1);
                        int index191_2520 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2520);
    return s;
  }
  private int sst_59() {
    int s = -1;
                        int LA191_2545 = input.LA(1);
                        int index191_2545 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2545);
    return s;
  }
  private int sst_60() {
    int s = -1;
                        int LA191_2590 = input.LA(1);
                        int index191_2590 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2590);
    return s;
  }
  private int sst_61() {
    int s = -1;
                        int LA191_2616 = input.LA(1);
                        int index191_2616 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2616);
    return s;
  }
  private int sst_62() {
    int s = -1;
                        int LA191_2642 = input.LA(1);
                        int index191_2642 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2642);
    return s;
  }
  private int sst_63() {
    int s = -1;
                        int LA191_2668 = input.LA(1);
                        int index191_2668 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2668);
    return s;
  }
  private int sst_64() {
    int s = -1;
                        int LA191_2694 = input.LA(1);
                        int index191_2694 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2694);
    return s;
  }
  private int sst_65() {
    int s = -1;
                        int LA191_2700 = input.LA(1);
                        int index191_2700 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2700);
    return s;
  }
  private int sst_66() {
    int s = -1;
                        int LA191_2746 = input.LA(1);
                        int index191_2746 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2746);
    return s;
  }
  private int sst_67() {
    int s = -1;
                        int LA191_2752 = input.LA(1);
                        int index191_2752 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2752);
    return s;
  }
  private int sst_68() {
    int s = -1;
                        int LA191_2849 = input.LA(1);
                        int index191_2849 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2849);
    return s;
  }
  private int sst_69() {
    int s = -1;
                        int LA191_2874 = input.LA(1);
                        int index191_2874 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2874);
    return s;
  }
  private int sst_70() {
    int s = -1;
                        int LA191_2934 = input.LA(1);
                        int index191_2934 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2934);
    return s;
  }
  private int sst_71() {
    int s = -1;
                        int LA191_2959 = input.LA(1);
                        int index191_2959 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}
                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2983;}
                        input.seek(index191_2959);
    return s;
  }
    }
    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1743 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000004000004L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1748 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1766 = new BitSet(new long[]{0x0040020008000010L,0x0000800000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000004000000L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1772 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1776 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1802 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1832 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x2900640A00040000L,0x0000000004000018L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1836 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1845 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1886 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1888 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1892 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x2900640A00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1896 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1905 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1946 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1949 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1952 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1973 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1976 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum2002 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum2004 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x2900640000040000L,0x0000000004000018L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum2006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum2043 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum2045 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x2900640200040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum2047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum2078 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum2089 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum2102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2125 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2136 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2177 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x3900640100040000L,0x0000000004000018L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2180 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2183 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x2900640000040000L,0x0000000004000018L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2185 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2225 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x3900640300040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2228 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2231 = new BitSet(new long[]{0x0040020008000010L,0x00009C0000000000L,0x0000000000000000L,0x0000000000000000L,0x2900640200040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2244 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2277 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2282 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2287 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2292 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2297 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2302 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2307 = new BitSet(new long[]{0x0000000000000002L,0x0040000000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2310 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2324 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2327 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2333 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2336 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2340 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2343 = new BitSet(new long[]{0x0104300000010002L,0x0001200000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2347 = new BitSet(new long[]{0x0104300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2353 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2356 = new BitSet(new long[]{0x0104300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2363 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2366 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2369 = new BitSet(new long[]{0x0104200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2376 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2379 = new BitSet(new long[]{0x0104000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2386 = new BitSet(new long[]{0x0130800080004000L,0x0020200000440000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2389 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2396 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2399 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2402 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100040200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2412 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2427 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2429 = new BitSet(new long[]{0x0040000008000000L,0x02008000000A0000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2434 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2438 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2441 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2444 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2455 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onMergeExpr_in_onExpr2459 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2504 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2508 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2512 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2516 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2553 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2557 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_updateExpr2560 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2564 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2570 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2576 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2578 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2581 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2583 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2591 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_onMergeExpr2628 = new BitSet(new long[]{0x0080000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_INTO_in_onMergeExpr2630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2635 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_onMergeExpr2638 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2642 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onMergeExpr2648 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_WHERE_in_onMergeExpr2655 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_onMergeExpr2657 = new BitSet(new long[]{0x0000000080030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_mergeItem_in_onMergeExpr2665 = new BitSet(new long[]{0x0000000080030002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_mergeMatched_in_mergeItem2699 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeUnmatched_in_mergeItem2703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeMatched2716 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeMatched2718 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeMatched2721 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_mergeMatched2723 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeMatchedItem_in_mergeMatched2727 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeMatchedItem2753 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_UPDATE_in_mergeMatchedItem2768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_mergeMatchedItem2770 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem2772 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_mergeMatchedItem2775 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onSetAssignment_in_mergeMatchedItem2777 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem2783 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem2785 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_mergeMatchedItem2797 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeMatchedItem2800 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_mergeMatchedItem2802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeMatchedItem2813 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_mergeUnmatched2870 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_mergeUnmatched2872 = new BitSet(new long[]{0x0000000000000000L,0x0400000000000000L});
    public static final BitSet FOLLOW_MATCHED_in_mergeUnmatched2874 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_mergeUnmatched2877 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_mergeUnmatched2879 = new BitSet(new long[]{0x0000000100001000L});
    public static final BitSet FOLLOW_mergeUnmatchedItem_in_mergeUnmatched2883 = new BitSet(new long[]{0x0000000100001002L});
    public static final BitSet FOLLOW_THEN_in_mergeUnmatchedItem2910 = new BitSet(new long[]{0x0040000000000000L,0x0000800000020000L});
    public static final BitSet FOLLOW_mergeInsert_in_mergeUnmatchedItem2913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_mergeInsert2928 = new BitSet(new long[]{0x0080000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_INTO_in_mergeInsert2931 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_mergeInsert2933 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_mergeInsert2938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_columnList_in_mergeInsert2940 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_mergeInsert2942 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_mergeInsert2946 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_selectionList_in_mergeInsert2948 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_mergeInsert2951 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_mergeInsert2953 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2999 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr3001 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr3007 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr3009 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr3012 = new BitSet(new long[]{0x0100300400010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr3016 = new BitSet(new long[]{0x0100300000010002L,0x0000200000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr3022 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr3024 = new BitSet(new long[]{0x0100300000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr3033 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3035 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr3037 = new BitSet(new long[]{0x0100200000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr3044 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr3046 = new BitSet(new long[]{0x0100000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr3053 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr3055 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr3057 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr3064 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100040200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr3066 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr3126 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3133 = new BitSet(new long[]{0x0000000000020000L,0x0000000000080000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr3136 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3140 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr3146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr3152 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3154 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr3157 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr3159 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr3166 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr3168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr3219 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr3221 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr3225 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr3227 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr3232 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr3234 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert3265 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert3270 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert3276 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr3318 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr3322 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr3327 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr3329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr3369 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3371 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr3374 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr3376 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment3401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment3403 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_onSetAssignment3405 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom3430 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3434 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_AS_in_onExprFrom3437 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom3447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr3475 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr3477 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3481 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3484 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3486 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3491 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3500 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3504 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3508 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3523 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3540 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3542 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3559 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3562 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3651 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x2900650200040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3654 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3656 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3674 = new BitSet(new long[]{0x0000000000000000L,0x0000000000800000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3680 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3682 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3686 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_createIndexColumnList_in_createIndexExpr3690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3721 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_createIndexColumnList3724 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_createIndexColumn_in_createIndexColumnList3726 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3753 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createIndexColumn3755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3784 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3791 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3793 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3835 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3838 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3840 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_createColumnListElement3868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3871 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3876 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3924 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x2900650200040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3926 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3967 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3995 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3997 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement4001 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr4026 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4030 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr4033 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4037 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr4039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr4052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr4063 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000A00000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr4065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr4068 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr4073 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr4075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4164 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_variantList4167 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_variantListElement_in_variantList4169 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_STAR_in_variantListElement4196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement4202 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr4227 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr4233 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr4237 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_insertIntoExpr4239 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr4242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr4244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr4246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList4279 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_columnList4282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_columnList4284 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause4322 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause4325 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause4329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin4343 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin4346 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4360 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList4363 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin4406 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin4410 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin4414 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin4417 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin4438 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin4452 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin4454 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin4456 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent4521 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4524 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent4527 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent4530 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4545 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4547 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4550 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4608 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4614 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4620 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4626 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_selectionList_in_selectClause4629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4660 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4663 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4666 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4692 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4713 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4716 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4720 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4776 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4780 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4783 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4787 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4818 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4822 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4826 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4830 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4839 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4842 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4844 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_AS_in_streamExpression4851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4855 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4861 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4868 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4879 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4935 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4939 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4942 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionList_in_forExpr4944 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4947 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4983 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4997 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog5003 = new BitSet(new long[]{0x0000000000000000L,0x000A000000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog5010 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog5015 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog5021 = new BitSet(new long[]{0x0000800000000000L,0x0020000000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog5027 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog5033 = new BitSet(new long[]{0x0000000000000000L,0x0004000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog5039 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog5046 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy5083 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy5085 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5087 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy5090 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy5092 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures5121 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5123 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures5126 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures5128 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem5153 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem5156 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem5161 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection5192 = new BitSet(new long[]{0x0000000000000000L,0x0010000000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection5195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern5210 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern5212 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern5214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern5216 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip5238 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5242 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5246 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5250 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5254 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip5258 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval5294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval5296 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5322 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration5327 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600000000L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration5329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat5362 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600000000L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary5387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary5393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested5405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000600000000L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested5407 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested5409 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000D0000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested5414 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested5420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested5426 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom5465 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000D0000000000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom5471 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom5477 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5483 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom5489 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine5533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5535 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5538 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5540 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5567 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5569 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5596 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5598 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5600 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5635 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5641 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5643 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5654 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5658 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5669 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5674 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5727 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5729 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5732 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5734 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5737 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5790 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5792 = new BitSet(new long[]{0x0000000000000000L,0x0200000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5797 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_MERGE_in_viewExpression5801 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5804 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5869 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5872 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5874 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5909 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5912 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5914 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5939 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5948 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5986 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit6024 = new BitSet(new long[]{0x0030800080004002L,0x0000000000440000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit6039 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit6043 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit6047 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit6051 = new BitSet(new long[]{0x0000000080004002L,0x0000000000400000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit6082 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit6108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit6119 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit6125 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit6131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit6162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit6164 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit6181 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_outputLimit6183 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit6186 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit6188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter6338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter6341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter6345 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter6347 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6393 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6399 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit6406 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100040200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit6412 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100040200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit6418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit6424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet6476 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6478 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6480 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6482 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6484 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6486 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6488 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6490 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6492 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6494 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet6497 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet6499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet6503 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause6533 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_whenClause6536 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause6538 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_whenClause6541 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause6554 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_elseClause6557 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6584 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6587 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6590 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6604 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_caseExpression6606 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6608 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6611 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6649 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6654 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6656 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6688 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6693 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6695 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6727 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001820000000000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6732 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6735 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6738 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6742 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0001820000000000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6757 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6763 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6779 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6792 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6810 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6824 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6826 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6840 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6854 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6884 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006001000000000L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6913 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6919 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6924 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006001000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6929 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0006001000000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7057 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0078000000000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression7089 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression7093 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression7097 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression7101 = new BitSet(new long[]{0x807B83E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0078000000000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression7142 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression7148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression7154 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7160 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression7162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7165 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0078000000000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression7170 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0078000000000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression7266 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004400000000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression7305 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression7311 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7314 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000108900000000L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression7336 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7339 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008800000000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression7365 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression7367 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008900000000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression7393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression7399 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression7522 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression7524 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7570 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7572 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7622 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7624 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7627 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7629 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7681 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7683 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7770 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7776 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7778 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7782 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7784 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0080000000000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7825 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100040000000000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7830 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7833 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0100040000000000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7851 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0600010000000000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7856 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7859 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7862 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7866 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0600010000000000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7881 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7901 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7906 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_unaryExpression7908 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7915 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7917 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_unaryExpression7922 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_unaryExpression7924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7961 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7984 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7989 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression8006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression8028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression8050 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression8052 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr8085 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr8091 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr8094 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_selectionList_in_subQueryExpr8097 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr8104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr8107 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr8115 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr8118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr8127 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr8151 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8156 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8158 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr8161 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr8163 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000002200000000L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr8170 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8174 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr8180 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr8187 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr8191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression8231 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x39006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_arrayExpression8234 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression8237 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_arrayExpression8239 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x1000000100000000L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression8246 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc8269 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8272 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8276 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8281 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8285 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8287 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc8293 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8296 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8300 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8305 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8309 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8311 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc8317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8320 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8332 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8337 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8341 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc8352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8363 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc8369 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8372 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8376 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8381 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8385 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc8393 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8396 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8400 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8405 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8409 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8411 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc8417 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8420 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_ALL_in_builtinFunc8424 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc8429 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc8441 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc8446 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc8451 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc8456 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8459 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8462 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8464 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8467 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8470 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8473 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8477 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc8483 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8486 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8489 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8492 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8495 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8499 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc8505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8508 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8511 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8514 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8517 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc8527 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8530 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8533 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8535 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc8541 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8544 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8547 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8549 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc8555 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8558 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc8561 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8563 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8566 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8568 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc8578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8581 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8584 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8586 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8589 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8592 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8595 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8599 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_builtinFunc8605 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8608 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8611 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8613 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8619 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8622 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_builtinFunc8625 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8628 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8633 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8637 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8645 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8648 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8651 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8653 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8659 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8663 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8666 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8681 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8683 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation8685 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8688 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_firstAggregation8690 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8694 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8719 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8721 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8723 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8726 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_lastAggregation8728 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8732 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8758 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8760 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8764 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8794 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8810 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8815 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8833 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8837 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_maxFunc8840 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8843 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_maxFunc8846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8849 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_maxFunc8852 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8878 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8883 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionWithClass_in_libFunction8895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunction8898 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_libFunctionNoClass_in_libFunction8900 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunctionWithClass8930 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_libFunctionWithClass8932 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionWithClass8936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionWithClass8938 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionWithClass8941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionWithClass8945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_funcIdent_in_libFunctionNoClass8974 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunctionNoClass8976 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunctionNoClass8979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunctionNoClass8983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent9009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent9016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent9028 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs9046 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs9051 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs9055 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs9058 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs9061 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList9075 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList9077 = new BitSet(new long[]{0x807803E80FFC4430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006C0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList9080 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression9108 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression9127 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_followedByRepeat_in_followedByExpression9130 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0xC000000000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByRepeat9183 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_FOLLOWMAX_BEGIN_in_followedByRepeat9190 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_followedByRepeat9192 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000001L});
    public static final BitSet FOLLOW_FOLLOWMAX_END_in_followedByRepeat9194 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_orExpression_in_followedByRepeat9198 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9227 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression9232 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_andExpression_in_orExpression9234 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9266 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression9271 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression9273 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression9308 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9312 = new BitSet(new long[]{0x0000000000000002L,0x0000000000200000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression9317 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression9319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression9384 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression9390 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression9396 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression9398 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression9404 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression9413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList9528 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9530 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList9533 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList9535 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000900000000L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList9539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_distinctExpressionAtom9562 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix9577 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix9583 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004600000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix9585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix9587 = new BitSet(new long[]{0x0000000000010002L,0x0080000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix9594 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix9596 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix9604 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix9606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression9668 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression9672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9687 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression9689 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression9694 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_AT_in_observerExpression9700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression9703 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression9705 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression9708 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9757 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression9759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9762 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression9764 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression9768 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression9772 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression9785 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression9788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression9790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange9811 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29007D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9818 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000108000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9823 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D8600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9826 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9846 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9848 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9948 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9957 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004400000000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9968 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9970 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9973 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9985 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression10030 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression10033 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic10063 = new BitSet(new long[]{0x803801E80FFC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic10066 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic10068 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic10070 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic10074 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic10077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic10079 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic10084 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic10086 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic10090 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10140 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList10143 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList10146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement10172 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement10188 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement10193 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement10196 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement10200 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector10246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector10248 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector10251 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector10255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression10302 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression10304 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression10313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004400000000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression10324 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0E00040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression10326 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression10329 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression10341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10396 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier10415 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier10419 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10464 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy10499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy10503 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_expression_in_expressionList10545 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionList10548 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D0600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expression_in_expressionList10551 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10579 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList10582 = new BitSet(new long[]{0xB87843E81FFC6430L,0x069C9C0000F5FFFFL,0x0000000000000000L,0x0000000000000000L,0x29006D4600040000L,0x000000000400001CL});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList10585 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime10611 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime10622 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime10633 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime10644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime10655 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime10667 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime10678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime10690 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime10702 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime10707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable10718 = new BitSet(new long[]{0x0600000000000002L,0x0000007000000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable10723 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable10727 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable10731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable10735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable10739 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10796 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10829 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10841 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0200000000000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10843 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10852 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10901 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10905 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10907 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10910 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_number_in_rangeOperand10913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator11033 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator11037 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator11039 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator11042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator11090 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator11094 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator11096 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator11099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList11146 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000D0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList11148 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008100000000L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList11151 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000D0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList11153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008100000000L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList11157 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter11179 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter11185 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter11190 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty11206 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty11209 = new BitSet(new long[]{0x803801E807FC4420L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000004L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty11211 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic11237 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000084400000000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic11246 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2000000000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic11250 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic11252 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11257 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic11271 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000600000000000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic11276 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic11282 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000800000000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic11285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000080000000000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11290 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic11304 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11427 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent11439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent11441 = new BitSet(new long[]{0x803801E807FC4422L,0x069C000000F4FA7FL,0x0000000000000000L,0x0000000000000000L,0x0000000200000000L,0x0000000000000006L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent11445 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent11484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent11493 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent11500 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent11507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent11514 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent11525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent11532 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent11539 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent11546 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent11553 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent11560 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent11567 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent11574 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent11581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent11588 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent11595 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent11602 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent11609 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MERGE_in_keywordAllowedIdent11616 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHED_in_keywordAllowedIdent11623 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent11630 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent11637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent11644 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent11651 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent11658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent11665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent11672 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent11679 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent11686 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent11693 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent11700 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent11707 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent11714 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TYPEOF_in_keywordAllowedIdent11721 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent11728 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent11735 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent11742 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent11751 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent11760 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent11767 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11774 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11781 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11788 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11802 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11809 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11816 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11837 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11860 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_yearPart_in_timePeriod11893 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod11895 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11898 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11901 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11904 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11907 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11910 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11913 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_monthPart_in_timePeriod11919 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11921 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11924 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11927 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11930 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11933 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekPart_in_timePeriod11942 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11944 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11947 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11950 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11953 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11956 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11962 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11964 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11967 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11970 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11979 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11981 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11984 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11993 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11995 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod12004 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x21000C0200040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12006 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod12012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_yearPart12059 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_IDENT_in_yearPart12063 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_substitution_in_yearPart12065 = new BitSet(new long[]{0x0000000000000000L,0x0000000003000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEARS_in_yearPart12069 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_YEAR_in_yearPart12073 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_monthPart12121 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_IDENT_in_monthPart12125 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_substitution_in_monthPart12127 = new BitSet(new long[]{0x0000000000000000L,0x000000000C000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTHS_in_monthPart12131 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MONTH_in_monthPart12135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekPart12183 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_IDENT_in_weekPart12187 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_substitution_in_weekPart12189 = new BitSet(new long[]{0x0000000000000000L,0x0000000030000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEKS_in_weekPart12193 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_WEEK_in_weekPart12197 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart12245 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart12249 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_substitution_in_dayPart12251 = new BitSet(new long[]{0x0000000000000000L,0x00000000C0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart12255 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart12259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart12308 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart12312 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart12314 = new BitSet(new long[]{0x0000000000000000L,0x0000000300000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart12318 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart12322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart12371 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart12375 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart12377 = new BitSet(new long[]{0x0000000000200000L,0x0000000C00000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart12381 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart12385 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart12389 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart12439 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart12443 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart12445 = new BitSet(new long[]{0x0000000000000000L,0x0000007000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart12449 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart12453 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart12457 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart12507 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart12511 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart12513 = new BitSet(new long[]{0x0000000000000000L,0x0000038000000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart12517 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart12521 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart12525 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number12580 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number12597 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number12614 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number12631 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution12652 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant12671 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant12678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant12691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant12711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant12731 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant12753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100040000040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant12759 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x2100040000040000L,0x0000000000000018L});
    public static final BitSet FOLLOW_number_in_numberconstant12763 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant12792 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant12808 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4703 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar6103 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7967 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8873 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar10183 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar10606 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar10617 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar10628 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar10639 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar10650 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar10662 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar10673 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar10684 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar10697 = new BitSet(new long[]{0x0000000000000002L});
}
