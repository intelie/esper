// $ANTLR 3.2 Sep 23, 2009 12:02:23 EsperEPL2Grammar.g 2010-09-01 14:56:07

  package com.espertech.esper.epl.generated;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.tree.*;

public class EsperEPL2GrammarParser extends Parser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "CREATE", "WINDOW", "IN_SET", "BETWEEN", "LIKE", "REGEXP", "ESCAPE", "OR_EXPR", "AND_EXPR", "NOT_EXPR", "EVERY_EXPR", "EVERY_DISTINCT_EXPR", "WHERE", "AS", "SUM", "AVG", "MAX", "MIN", "COALESCE", "MEDIAN", "STDDEV", "AVEDEV", "COUNT", "SELECT", "CASE", "CASE2", "ELSE", "WHEN", "THEN", "END", "FROM", "OUTER", "INNER", "JOIN", "LEFT", "RIGHT", "FULL", "ON", "IS", "BY", "GROUP", "HAVING", "DISTINCT", "ALL", "ANY", "SOME", "OUTPUT", "EVENTS", "FIRST", "LAST", "INSERT", "INTO", "ORDER", "ASC", "DESC", "RSTREAM", "ISTREAM", "IRSTREAM", "SCHEMA", "UNIDIRECTIONAL", "RETAINUNION", "RETAININTERSECTION", "PATTERN", "SQL", "METADATASQL", "PREVIOUS", "PREVIOUSTAIL", "PREVIOUSCOUNT", "PREVIOUSWINDOW", "PRIOR", "EXISTS", "WEEKDAY", "LW", "INSTANCEOF", "CAST", "CURRENT_TIMESTAMP", "DELETE", "SNAPSHOT", "SET", "VARIABLE", "UNTIL", "AT", "INDEX", "TIMEPERIOD_DAY", "TIMEPERIOD_DAYS", "TIMEPERIOD_HOUR", "TIMEPERIOD_HOURS", "TIMEPERIOD_MINUTE", "TIMEPERIOD_MINUTES", "TIMEPERIOD_SEC", "TIMEPERIOD_SECOND", "TIMEPERIOD_SECONDS", "TIMEPERIOD_MILLISEC", "TIMEPERIOD_MILLISECOND", "TIMEPERIOD_MILLISECONDS", "BOOLEAN_TRUE", "BOOLEAN_FALSE", "VALUE_NULL", "ROW_LIMIT_EXPR", "OFFSET", "UPDATE", "MATCH_RECOGNIZE", "MEASURES", "DEFINE", "PARTITION", "MATCHES", "AFTER", "FOR", "WHILE", "NUMERIC_PARAM_RANGE", "NUMERIC_PARAM_LIST", "NUMERIC_PARAM_FREQUENCY", "OBJECT_PARAM_ORDERED_EXPR", "FOLLOWED_BY_EXPR", "ARRAY_PARAM_LIST", "PATTERN_FILTER_EXPR", "PATTERN_NOT_EXPR", "PATTERN_EVERY_DISTINCT_EXPR", "EVENT_FILTER_EXPR", "EVENT_FILTER_PROPERTY_EXPR", "EVENT_FILTER_PROPERTY_EXPR_ATOM", "PROPERTY_SELECTION_ELEMENT_EXPR", "PROPERTY_SELECTION_STREAM", "PROPERTY_WILDCARD_SELECT", "EVENT_FILTER_IDENT", "EVENT_FILTER_PARAM", "EVENT_FILTER_RANGE", "EVENT_FILTER_NOT_RANGE", "EVENT_FILTER_IN", "EVENT_FILTER_NOT_IN", "EVENT_FILTER_BETWEEN", "EVENT_FILTER_NOT_BETWEEN", "CLASS_IDENT", "GUARD_EXPR", "OBSERVER_EXPR", "VIEW_EXPR", "PATTERN_INCL_EXPR", "DATABASE_JOIN_EXPR", "WHERE_EXPR", "HAVING_EXPR", "EVAL_BITWISE_EXPR", "EVAL_AND_EXPR", "EVAL_OR_EXPR", "EVAL_EQUALS_EXPR", "EVAL_NOTEQUALS_EXPR", "EVAL_EQUALS_GROUP_EXPR", "EVAL_NOTEQUALS_GROUP_EXPR", "EVAL_IDENT", "SELECTION_EXPR", "SELECTION_ELEMENT_EXPR", "SELECTION_STREAM", "STREAM_EXPR", "OUTERJOIN_EXPR", "INNERJOIN_EXPR", "LEFT_OUTERJOIN_EXPR", "RIGHT_OUTERJOIN_EXPR", "FULL_OUTERJOIN_EXPR", "GROUP_BY_EXPR", "ORDER_BY_EXPR", "ORDER_ELEMENT_EXPR", "EVENT_PROP_EXPR", "EVENT_PROP_SIMPLE", "EVENT_PROP_MAPPED", "EVENT_PROP_INDEXED", "EVENT_PROP_DYNAMIC_SIMPLE", "EVENT_PROP_DYNAMIC_INDEXED", "EVENT_PROP_DYNAMIC_MAPPED", "EVENT_LIMIT_EXPR", "TIMEPERIOD_LIMIT_EXPR", "AFTER_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR", "CRONTAB_LIMIT_EXPR_PARAM", "WHEN_LIMIT_EXPR", "INSERTINTO_EXPR", "EXPRCOL", "CONCAT", "LIB_FUNCTION", "UNARY_MINUS", "TIME_PERIOD", "ARRAY_EXPR", "DAY_PART", "HOUR_PART", "MINUTE_PART", "SECOND_PART", "MILLISECOND_PART", "NOT_IN_SET", "NOT_BETWEEN", "NOT_LIKE", "NOT_REGEXP", "DBSELECT_EXPR", "DBFROM_CLAUSE", "DBWHERE_CLAUSE", "WILDCARD_SELECT", "INSERTINTO_STREAM_NAME", "IN_RANGE", "NOT_IN_RANGE", "SUBSELECT_EXPR", "SUBSELECT_GROUP_EXPR", "EXISTS_SUBSELECT_EXPR", "IN_SUBSELECT_EXPR", "NOT_IN_SUBSELECT_EXPR", "IN_SUBSELECT_QUERY_EXPR", "LAST_OPERATOR", "WEEKDAY_OPERATOR", "SUBSTITUTION", "CAST_EXPR", "CREATE_INDEX_EXPR", "CREATE_WINDOW_EXPR", "CREATE_WINDOW_SELECT_EXPR", "ON_EXPR", "ON_STREAM", "ON_DELETE_EXPR", "ON_SELECT_EXPR", "ON_UPDATE_EXPR", "ON_SELECT_INSERT_EXPR", "ON_SELECT_INSERT_OUTPUT", "ON_EXPR_FROM", "ON_SET_EXPR", "CREATE_VARIABLE_EXPR", "METHOD_JOIN_EXPR", "MATCH_UNTIL_EXPR", "MATCH_UNTIL_RANGE_HALFOPEN", "MATCH_UNTIL_RANGE_HALFCLOSED", "MATCH_UNTIL_RANGE_CLOSED", "MATCH_UNTIL_RANGE_BOUNDED", "CREATE_COL_TYPE_LIST", "CREATE_COL_TYPE", "NUMBERSETSTAR", "ANNOTATION", "ANNOTATION_ARRAY", "ANNOTATION_VALUE", "FIRST_AGGREG", "LAST_AGGREG", "WINDOW_AGGREG", "UPDATE_EXPR", "ON_SET_EXPR_ITEM", "CREATE_SCHEMA_EXPR", "CREATE_SCHEMA_EXPR_QUAL", "CREATE_SCHEMA_EXPR_INH", "VARIANT_LIST", "INT_TYPE", "LONG_TYPE", "FLOAT_TYPE", "DOUBLE_TYPE", "STRING_TYPE", "BOOL_TYPE", "NULL_TYPE", "NUM_DOUBLE", "EPL_EXPR", "MATCHREC_PATTERN", "MATCHREC_PATTERN_ATOM", "MATCHREC_PATTERN_CONCAT", "MATCHREC_PATTERN_ALTER", "MATCHREC_PATTERN_NESTED", "MATCHREC_AFTER_SKIP", "MATCHREC_INTERVAL", "MATCHREC_DEFINE", "MATCHREC_DEFINE_ITEM", "MATCHREC_MEASURES", "MATCHREC_MEASURE_ITEM", "MATCHREC_PARTITION", "COMMA", "IDENT", "EQUALS", "DOT", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "STAR", "BOR", "PLUS", "QUESTION", "COLON", "STRING_LITERAL", "QUOTED_STRING_LITERAL", "BAND", "BXOR", "SQL_NE", "NOT_EQUAL", "LT", "GT", "LE", "GE", "LOR", "MINUS", "DIV", "MOD", "LCURLY", "RCURLY", "NUM_INT", "FOLLOWED_BY", "ESCAPECHAR", "TICKED_STRING_LITERAL", "NUM_LONG", "NUM_FLOAT", "EQUAL", "LNOT", "BNOT", "DIV_ASSIGN", "PLUS_ASSIGN", "INC", "MINUS_ASSIGN", "DEC", "STAR_ASSIGN", "MOD_ASSIGN", "SR", "SR_ASSIGN", "BSR", "BSR_ASSIGN", "SL", "SL_ASSIGN", "BXOR_ASSIGN", "BOR_ASSIGN", "BAND_ASSIGN", "LAND", "SEMI", "EMAILAT", "WS", "SL_COMMENT", "ML_COMMENT", "EscapeSequence", "UnicodeEscape", "OctalEscape", "HexDigit", "EXPONENT", "FLOAT_SUFFIX"
    };
    public static final int CRONTAB_LIMIT_EXPR=174;
    public static final int FLOAT_SUFFIX=330;
    public static final int STAR=273;
    public static final int NUMERIC_PARAM_LIST=114;
    public static final int MOD=291;
    public static final int ISTREAM=60;
    public static final int OUTERJOIN_EXPR=156;
    public static final int CREATE_COL_TYPE_LIST=229;
    public static final int BSR=312;
    public static final int EOF=-1;
    public static final int LIB_FUNCTION=180;
    public static final int TIMEPERIOD_MILLISECONDS=98;
    public static final int FULL_OUTERJOIN_EXPR=160;
    public static final int MATCHREC_PATTERN_CONCAT=255;
    public static final int INC=305;
    public static final int LNOT=301;
    public static final int RPAREN=270;
    public static final int CREATE=4;
    public static final int STRING_LITERAL=278;
    public static final int BSR_ASSIGN=313;
    public static final int CAST_EXPR=209;
    public static final int MATCHES=109;
    public static final int STREAM_EXPR=155;
    public static final int TIMEPERIOD_SECONDS=95;
    public static final int NOT_EQUAL=283;
    public static final int METADATASQL=68;
    public static final int EVENT_FILTER_PROPERTY_EXPR=123;
    public static final int LAST_AGGREG=236;
    public static final int REGEXP=9;
    public static final int FOLLOWED_BY_EXPR=117;
    public static final int FOLLOWED_BY=295;
    public static final int HOUR_PART=185;
    public static final int RBRACK=272;
    public static final int MATCHREC_PATTERN_NESTED=257;
    public static final int MATCH_UNTIL_RANGE_CLOSED=227;
    public static final int GE=287;
    public static final int METHOD_JOIN_EXPR=223;
    public static final int ASC=57;
    public static final int IN_SET=6;
    public static final int EVENT_FILTER_EXPR=122;
    public static final int PATTERN_EVERY_DISTINCT_EXPR=121;
    public static final int MINUS_ASSIGN=306;
    public static final int ELSE=30;
    public static final int EVENT_FILTER_NOT_IN=133;
    public static final int NUM_DOUBLE=251;
    public static final int INSERTINTO_STREAM_NAME=197;
    public static final int LCURLY=292;
    public static final int TIMEPERIOD_MILLISEC=96;
    public static final int UNARY_MINUS=181;
    public static final int RETAINUNION=64;
    public static final int DBWHERE_CLAUSE=195;
    public static final int MEDIAN=23;
    public static final int EVENTS=51;
    public static final int AND_EXPR=12;
    public static final int GROUP=44;
    public static final int EVENT_FILTER_NOT_RANGE=131;
    public static final int WS=322;
    public static final int EMAILAT=321;
    public static final int SUBSELECT_GROUP_EXPR=201;
    public static final int ON_SELECT_INSERT_EXPR=218;
    public static final int ESCAPECHAR=296;
    public static final int EXPRCOL=178;
    public static final int SL_COMMENT=323;
    public static final int NULL_TYPE=250;
    public static final int MATCH_UNTIL_RANGE_HALFOPEN=225;
    public static final int GT=285;
    public static final int BNOT=302;
    public static final int WHERE_EXPR=142;
    public static final int END=33;
    public static final int LAND=319;
    public static final int INNERJOIN_EXPR=157;
    public static final int NOT_REGEXP=192;
    public static final int MATCH_UNTIL_EXPR=224;
    public static final int EVENT_PROP_EXPR=164;
    public static final int LBRACK=271;
    public static final int VIEW_EXPR=139;
    public static final int ANNOTATION=232;
    public static final int LONG_TYPE=245;
    public static final int EVENT_FILTER_PROPERTY_EXPR_ATOM=124;
    public static final int MATCHREC_PATTERN=253;
    public static final int TIMEPERIOD_SEC=93;
    public static final int TICKED_STRING_LITERAL=297;
    public static final int ON_SELECT_EXPR=216;
    public static final int MINUTE_PART=186;
    public static final int PATTERN_NOT_EXPR=120;
    public static final int SQL_NE=282;
    public static final int SUM=18;
    public static final int HexDigit=328;
    public static final int UPDATE_EXPR=238;
    public static final int LPAREN=269;
    public static final int IN_SUBSELECT_EXPR=203;
    public static final int AT=85;
    public static final int AS=17;
    public static final int OR_EXPR=11;
    public static final int BOOLEAN_TRUE=99;
    public static final int THEN=32;
    public static final int MATCHREC_INTERVAL=259;
    public static final int NOT_IN_RANGE=199;
    public static final int OFFSET=103;
    public static final int AVG=19;
    public static final int LEFT=38;
    public static final int PREVIOUS=69;
    public static final int SECOND_PART=187;
    public static final int PREVIOUSWINDOW=72;
    public static final int MATCH_RECOGNIZE=105;
    public static final int IDENT=266;
    public static final int DATABASE_JOIN_EXPR=141;
    public static final int BXOR=281;
    public static final int PLUS=275;
    public static final int CASE2=29;
    public static final int TIMEPERIOD_DAY=87;
    public static final int CREATE_SCHEMA_EXPR=240;
    public static final int EXISTS=74;
    public static final int EVENT_PROP_INDEXED=167;
    public static final int CREATE_INDEX_EXPR=210;
    public static final int TIMEPERIOD_MILLISECOND=97;
    public static final int EVAL_NOTEQUALS_EXPR=148;
    public static final int MATCH_UNTIL_RANGE_HALFCLOSED=226;
    public static final int CREATE_VARIABLE_EXPR=222;
    public static final int LIKE=8;
    public static final int OUTER=35;
    public static final int MATCHREC_DEFINE=260;
    public static final int BY=43;
    public static final int ARRAY_PARAM_LIST=118;
    public static final int RIGHT_OUTERJOIN_EXPR=159;
    public static final int NUMBERSETSTAR=231;
    public static final int LAST_OPERATOR=206;
    public static final int PATTERN_FILTER_EXPR=119;
    public static final int EVAL_AND_EXPR=145;
    public static final int LEFT_OUTERJOIN_EXPR=158;
    public static final int EPL_EXPR=252;
    public static final int GROUP_BY_EXPR=161;
    public static final int SET=82;
    public static final int RIGHT=39;
    public static final int HAVING=45;
    public static final int INSTANCEOF=77;
    public static final int MIN=21;
    public static final int EVENT_PROP_SIMPLE=165;
    public static final int MINUS=289;
    public static final int SEMI=320;
    public static final int STAR_ASSIGN=308;
    public static final int PREVIOUSCOUNT=71;
    public static final int VARIANT_LIST=243;
    public static final int FIRST_AGGREG=235;
    public static final int COLON=277;
    public static final int EVAL_EQUALS_GROUP_EXPR=149;
    public static final int BAND_ASSIGN=318;
    public static final int PREVIOUSTAIL=70;
    public static final int SCHEMA=62;
    public static final int CRONTAB_LIMIT_EXPR_PARAM=175;
    public static final int NOT_IN_SET=189;
    public static final int VALUE_NULL=101;
    public static final int EVENT_PROP_DYNAMIC_SIMPLE=168;
    public static final int SL=314;
    public static final int NOT_IN_SUBSELECT_EXPR=204;
    public static final int WHEN=31;
    public static final int GUARD_EXPR=137;
    public static final int SR=310;
    public static final int RCURLY=293;
    public static final int PLUS_ASSIGN=304;
    public static final int EXISTS_SUBSELECT_EXPR=202;
    public static final int DAY_PART=184;
    public static final int EVENT_FILTER_IN=132;
    public static final int DIV=290;
    public static final int OBJECT_PARAM_ORDERED_EXPR=116;
    public static final int OctalEscape=327;
    public static final int MILLISECOND_PART=188;
    public static final int BETWEEN=7;
    public static final int PRIOR=73;
    public static final int FIRST=52;
    public static final int ROW_LIMIT_EXPR=102;
    public static final int SELECTION_EXPR=152;
    public static final int LOR=288;
    public static final int CAST=78;
    public static final int LW=76;
    public static final int WILDCARD_SELECT=196;
    public static final int EXPONENT=329;
    public static final int LT=284;
    public static final int PATTERN_INCL_EXPR=140;
    public static final int WHILE=112;
    public static final int ORDER_BY_EXPR=162;
    public static final int BOOL_TYPE=249;
    public static final int MOD_ASSIGN=309;
    public static final int ANNOTATION_ARRAY=233;
    public static final int CASE=28;
    public static final int IN_SUBSELECT_QUERY_EXPR=205;
    public static final int EQUALS=267;
    public static final int COUNT=26;
    public static final int RETAININTERSECTION=65;
    public static final int DIV_ASSIGN=303;
    public static final int WINDOW_AGGREG=237;
    public static final int SL_ASSIGN=315;
    public static final int PATTERN=66;
    public static final int SQL=67;
    public static final int MATCHREC_AFTER_SKIP=258;
    public static final int WEEKDAY=75;
    public static final int FULL=40;
    public static final int ON_UPDATE_EXPR=217;
    public static final int INSERT=54;
    public static final int ESCAPE=10;
    public static final int ARRAY_EXPR=183;
    public static final int CREATE_COL_TYPE=230;
    public static final int LAST=53;
    public static final int BOOLEAN_FALSE=100;
    public static final int EVAL_NOTEQUALS_GROUP_EXPR=150;
    public static final int SELECT=27;
    public static final int INTO=55;
    public static final int FLOAT_TYPE=246;
    public static final int COALESCE=22;
    public static final int TIMEPERIOD_SECOND=94;
    public static final int EVENT_FILTER_BETWEEN=134;
    public static final int ANNOTATION_VALUE=234;
    public static final int SUBSELECT_EXPR=200;
    public static final int NUMERIC_PARAM_RANGE=113;
    public static final int CONCAT=179;
    public static final int CLASS_IDENT=136;
    public static final int MATCHREC_PATTERN_ALTER=256;
    public static final int ON_EXPR=213;
    public static final int CREATE_WINDOW_EXPR=211;
    public static final int PROPERTY_SELECTION_STREAM=126;
    public static final int ON_DELETE_EXPR=215;
    public static final int NUM_LONG=298;
    public static final int ON=41;
    public static final int TIME_PERIOD=182;
    public static final int DOUBLE_TYPE=247;
    public static final int DELETE=80;
    public static final int INT_TYPE=244;
    public static final int MATCHREC_PARTITION=264;
    public static final int EVERY_EXPR=14;
    public static final int EVAL_BITWISE_EXPR=144;
    public static final int ORDER_ELEMENT_EXPR=163;
    public static final int TIMEPERIOD_HOURS=90;
    public static final int VARIABLE=83;
    public static final int SUBSTITUTION=208;
    public static final int UNTIL=84;
    public static final int STRING_TYPE=248;
    public static final int NUM_INT=294;
    public static final int MATCHREC_DEFINE_ITEM=261;
    public static final int ON_SET_EXPR=221;
    public static final int STDDEV=24;
    public static final int CREATE_SCHEMA_EXPR_INH=242;
    public static final int NUM_FLOAT=299;
    public static final int ON_EXPR_FROM=220;
    public static final int FROM=34;
    public static final int DISTINCT=46;
    public static final int EscapeSequence=325;
    public static final int OUTPUT=50;
    public static final int PROPERTY_SELECTION_ELEMENT_EXPR=125;
    public static final int WEEKDAY_OPERATOR=207;
    public static final int DEC=307;
    public static final int WHERE=16;
    public static final int INNER=36;
    public static final int BXOR_ASSIGN=316;
    public static final int NUMERIC_PARAM_FREQUENCY=115;
    public static final int SNAPSHOT=81;
    public static final int ORDER=56;
    public static final int AFTER_LIMIT_EXPR=173;
    public static final int EVENT_FILTER_PARAM=129;
    public static final int EVENT_PROP_DYNAMIC_MAPPED=170;
    public static final int IRSTREAM=61;
    public static final int MAX=20;
    public static final int UPDATE=104;
    public static final int FOR=111;
    public static final int ON_STREAM=214;
    public static final int DEFINE=107;
    public static final int TIMEPERIOD_DAYS=88;
    public static final int EVENT_FILTER_RANGE=130;
    public static final int ML_COMMENT=324;
    public static final int INDEX=86;
    public static final int EVENT_PROP_DYNAMIC_INDEXED=169;
    public static final int BOR_ASSIGN=317;
    public static final int COMMA=265;
    public static final int IS=42;
    public static final int PARTITION=108;
    public static final int WHEN_LIMIT_EXPR=176;
    public static final int TIMEPERIOD_LIMIT_EXPR=172;
    public static final int SOME=49;
    public static final int EQUAL=300;
    public static final int BOR=274;
    public static final int MATCHREC_MEASURE_ITEM=263;
    public static final int TIMEPERIOD_HOUR=89;
    public static final int ALL=47;
    public static final int EVENT_FILTER_NOT_BETWEEN=135;
    public static final int IN_RANGE=198;
    public static final int DOT=268;
    public static final int MATCHREC_MEASURES=262;
    public static final int CURRENT_TIMESTAMP=79;
    public static final int EVERY_DISTINCT_EXPR=15;
    public static final int PROPERTY_WILDCARD_SELECT=127;
    public static final int INSERTINTO_EXPR=177;
    public static final int UNIDIRECTIONAL=63;
    public static final int HAVING_EXPR=143;
    public static final int MATCH_UNTIL_RANGE_BOUNDED=228;
    public static final int EVAL_EQUALS_EXPR=147;
    public static final int TIMEPERIOD_MINUTES=92;
    public static final int RSTREAM=59;
    public static final int NOT_LIKE=191;
    public static final int EVENT_LIMIT_EXPR=171;
    public static final int NOT_BETWEEN=190;
    public static final int TIMEPERIOD_MINUTE=91;
    public static final int EVAL_OR_EXPR=146;
    public static final int ON_SELECT_INSERT_OUTPUT=219;
    public static final int MEASURES=106;
    public static final int AFTER=110;
    public static final int BAND=280;
    public static final int MATCHREC_PATTERN_ATOM=254;
    public static final int QUOTED_STRING_LITERAL=279;
    public static final int JOIN=37;
    public static final int ANY=48;
    public static final int NOT_EXPR=13;
    public static final int QUESTION=276;
    public static final int OBSERVER_EXPR=138;
    public static final int CREATE_SCHEMA_EXPR_QUAL=241;
    public static final int EVENT_FILTER_IDENT=128;
    public static final int EVENT_PROP_MAPPED=166;
    public static final int UnicodeEscape=326;
    public static final int AVEDEV=25;
    public static final int DBSELECT_EXPR=193;
    public static final int SELECTION_ELEMENT_EXPR=153;
    public static final int CREATE_WINDOW_SELECT_EXPR=212;
    public static final int WINDOW=5;
    public static final int ON_SET_EXPR_ITEM=239;
    public static final int DESC=58;
    public static final int SELECTION_STREAM=154;
    public static final int SR_ASSIGN=311;
    public static final int LE=286;
    public static final int DBFROM_CLAUSE=194;
    public static final int EVAL_IDENT=151;

    // delegates
    // delegators


        public EsperEPL2GrammarParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public EsperEPL2GrammarParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        
    protected TreeAdaptor adaptor = new CommonTreeAdaptor();

    public void setTreeAdaptor(TreeAdaptor adaptor) {
        this.adaptor = adaptor;
    }
    public TreeAdaptor getTreeAdaptor() {
        return adaptor;
    }

    public String[] getTokenNames() { return EsperEPL2GrammarParser.tokenNames; }
    public String getGrammarFileName() { return "EsperEPL2Grammar.g"; }


      // provide nice error messages
      private Stack<String> paraphrases = new Stack<String>();
      
      // static information initialized once
      private static Map<Integer, String> lexerTokenParaphases = new HashMap<Integer, String>();
      private static Map<Integer, String> parserTokenParaphases = new HashMap<Integer, String>();
      private static java.util.Set<String> parserKeywordSet = new java.util.HashSet<String>();
        
      public Stack getParaphrases() {
        return paraphrases;
      }

      public java.util.Set<String> getKeywords() {
      	getParserTokenParaphrases();
      	return parserKeywordSet;
      }
      
      public String removeTicks(String tickedString) {
      	return com.espertech.esper.epl.parse.ASTConstantHelper.removeTicks(tickedString);
      }
      
      public Map<Integer, String> getLexerTokenParaphrases() {
        if (lexerTokenParaphases.size() == 0) {
          	lexerTokenParaphases.put(IDENT, "an identifier");
          	lexerTokenParaphases.put(NUM_INT, "a numeric literal");
    	lexerTokenParaphases.put(FOLLOWED_BY, "an followed-by '->'");
    	lexerTokenParaphases.put(EQUALS, "an equals '='");
    	lexerTokenParaphases.put(SQL_NE, "a sql-style not equals '<>'");
    	lexerTokenParaphases.put(QUESTION, "a questionmark '?'");
    	lexerTokenParaphases.put(LPAREN, "an opening parenthesis '('");
    	lexerTokenParaphases.put(RPAREN, "a closing parenthesis ')'");
    	lexerTokenParaphases.put(LBRACK, "a left angle bracket '['");
    	lexerTokenParaphases.put(RBRACK, "a right angle bracket ']'");
    	lexerTokenParaphases.put(LCURLY, "a left curly bracket '{'");
    	lexerTokenParaphases.put(RCURLY, "a right curly bracket '}'");
    	lexerTokenParaphases.put(COLON, "a colon ':'");
    	lexerTokenParaphases.put(COMMA, "a comma ','");
    	lexerTokenParaphases.put(EQUAL, "an equals compare '=='");
    	lexerTokenParaphases.put(LNOT, "a not '!'");
    	lexerTokenParaphases.put(BNOT, "a binary not '~'");
    	lexerTokenParaphases.put(NOT_EQUAL, "a not equals '!='");
    	lexerTokenParaphases.put(DIV, "a division operator '\'");
    	lexerTokenParaphases.put(DIV_ASSIGN, "a division assign '/='");
    	lexerTokenParaphases.put(PLUS, "a plus operator '+'");
    	lexerTokenParaphases.put(PLUS_ASSIGN, "a plus assign '+='");
    	lexerTokenParaphases.put(INC, "an increment operator '++'");
    	lexerTokenParaphases.put(MINUS, "a minus '-'");
    	lexerTokenParaphases.put(MINUS_ASSIGN, "a minus assign '-='");
    	lexerTokenParaphases.put(DEC, "a decrement operator '--'");
    	lexerTokenParaphases.put(STAR, "a star '*'");
    	lexerTokenParaphases.put(STAR_ASSIGN, "a star assign '*='");
    	lexerTokenParaphases.put(MOD, "a modulo");
    	lexerTokenParaphases.put(MOD_ASSIGN, "a modulo assign");
    	lexerTokenParaphases.put(SR, "a shift right '>>'");
    	lexerTokenParaphases.put(SR_ASSIGN, "a shift right assign '>>='");
    	lexerTokenParaphases.put(BSR, "a binary shift right '>>>'");
    	lexerTokenParaphases.put(BSR_ASSIGN, "a binary shift right assign '>>>='");
    	lexerTokenParaphases.put(GE, "a greater equals '>='");
    	lexerTokenParaphases.put(GT, "a greater then '>'");
    	lexerTokenParaphases.put(SL, "a shift left '<<'");
    	lexerTokenParaphases.put(SL_ASSIGN, "a shift left assign '<<='");
    	lexerTokenParaphases.put(LE, "a less equals '<='");
    	lexerTokenParaphases.put(LT, "a lesser then '<'");
    	lexerTokenParaphases.put(BXOR, "a binary xor '^'");
    	lexerTokenParaphases.put(BXOR_ASSIGN, "a binary xor assign '^='");
    	lexerTokenParaphases.put(BOR, "a binary or '|'");
    	lexerTokenParaphases.put(BOR_ASSIGN, "a binary or assign '|='");
    	lexerTokenParaphases.put(LOR, "a logical or '||'");
    	lexerTokenParaphases.put(BAND, "a binary and '&'");
    	lexerTokenParaphases.put(BAND_ASSIGN, "a binary and assign '&='");
    	lexerTokenParaphases.put(LAND, "a logical and '&&'");
    	lexerTokenParaphases.put(SEMI, "a semicolon ';'");
    	lexerTokenParaphases.put(DOT, "a dot '.'");		
        }
        return lexerTokenParaphases;
      }
      
      public Map<Integer, String> getParserTokenParaphrases() {
        if (parserTokenParaphases.size() == 0) {
    	parserTokenParaphases.put(CREATE, "'create'");
    	parserTokenParaphases.put(WINDOW, "'window'");
    	parserTokenParaphases.put(IN_SET, "'in'");
    	parserTokenParaphases.put(BETWEEN, "'between'");
    	parserTokenParaphases.put(LIKE, "'like'");
    	parserTokenParaphases.put(REGEXP, "'regexp'");
    	parserTokenParaphases.put(ESCAPE, "'escape'");
    	parserTokenParaphases.put(OR_EXPR, "'or'");
    	parserTokenParaphases.put(AND_EXPR, "'and'");
    	parserTokenParaphases.put(NOT_EXPR, "'not'");
    	parserTokenParaphases.put(EVERY_EXPR, "'every'");
    	parserTokenParaphases.put(EVERY_DISTINCT_EXPR, "'every-distinct'");
    	parserTokenParaphases.put(WHERE, "'where'");
    	parserTokenParaphases.put(AS, "'as'");	
    	parserTokenParaphases.put(SUM, "'sum'");
    	parserTokenParaphases.put(AVG, "'avg'");
    	parserTokenParaphases.put(MAX, "'max'");
    	parserTokenParaphases.put(MIN, "'min'");
    	parserTokenParaphases.put(COALESCE, "'coalesce'");
    	parserTokenParaphases.put(MEDIAN, "'median'");
    	parserTokenParaphases.put(STDDEV, "'stddev'");
    	parserTokenParaphases.put(AVEDEV, "'avedev'");
    	parserTokenParaphases.put(COUNT, "'count'");
    	parserTokenParaphases.put(SELECT, "'select'");
    	parserTokenParaphases.put(CASE, "'case'");
    	parserTokenParaphases.put(CASE2, "'case'");
    	parserTokenParaphases.put(ELSE, "'else'");
    	parserTokenParaphases.put(WHEN, "'when'");
    	parserTokenParaphases.put(THEN, "'then'");
    	parserTokenParaphases.put(END, "'end'");
    	parserTokenParaphases.put(FROM, "'from'");
    	parserTokenParaphases.put(OUTER, "'outer'");
    	parserTokenParaphases.put(INNER, "'inner'");
    	parserTokenParaphases.put(JOIN, "'join'");
    	parserTokenParaphases.put(LEFT, "'left'");
    	parserTokenParaphases.put(RIGHT, "'right'");
    	parserTokenParaphases.put(FULL, "'full'");
    	parserTokenParaphases.put(ON, "'on'");	
    	parserTokenParaphases.put(IS, "'is'");
    	parserTokenParaphases.put(BY, "'by'");
    	parserTokenParaphases.put(GROUP, "'group'");
    	parserTokenParaphases.put(HAVING, "'having'");
    	parserTokenParaphases.put(ALL, "'all'");
    	parserTokenParaphases.put(ANY, "'any'");
    	parserTokenParaphases.put(SOME, "'some'");
    	parserTokenParaphases.put(OUTPUT, "'output'");
    	parserTokenParaphases.put(EVENTS, "'events'");
    	parserTokenParaphases.put(FIRST, "'first'");
    	parserTokenParaphases.put(LAST, "'last'");
    	parserTokenParaphases.put(INSERT, "'insert'");
    	parserTokenParaphases.put(INTO, "'into'");
    	parserTokenParaphases.put(ORDER, "'order'");
    	parserTokenParaphases.put(ASC, "'asc'");
    	parserTokenParaphases.put(DESC, "'desc'");
    	parserTokenParaphases.put(RSTREAM, "'rstream'");
    	parserTokenParaphases.put(ISTREAM, "'istream'");
    	parserTokenParaphases.put(IRSTREAM, "'irstream'");
    	parserTokenParaphases.put(SCHEMA, "'schema'");
    	parserTokenParaphases.put(UNIDIRECTIONAL, "'unidirectional'");
    	parserTokenParaphases.put(RETAINUNION, "'retain-union'");
    	parserTokenParaphases.put(RETAININTERSECTION, "'retain-intersection'");
    	parserTokenParaphases.put(PATTERN, "'pattern'");
    	parserTokenParaphases.put(SQL, "'sql'");
    	parserTokenParaphases.put(METADATASQL, "'metadatasql'");
    	parserTokenParaphases.put(PREVIOUS, "'prev'");
    	parserTokenParaphases.put(PREVIOUSTAIL, "'prevtail'");
    	parserTokenParaphases.put(PREVIOUSCOUNT, "'prevcount'");
    	parserTokenParaphases.put(PREVIOUSWINDOW, "'prevwindow'");
    	parserTokenParaphases.put(PRIOR, "'prior'");
    	parserTokenParaphases.put(EXISTS, "'exists'");
    	parserTokenParaphases.put(WEEKDAY, "'weekday'");
    	parserTokenParaphases.put(LW, "'lastweekday'");
    	parserTokenParaphases.put(INSTANCEOF, "'instanceof'");
    	parserTokenParaphases.put(CAST, "'cast'");
    	parserTokenParaphases.put(CURRENT_TIMESTAMP, "'current_timestamp'");
    	parserTokenParaphases.put(DELETE, "'delete'");
    	parserTokenParaphases.put(DISTINCT, "'distinct'");
    	parserTokenParaphases.put(SNAPSHOT, "'snapshot'");
    	parserTokenParaphases.put(SET, "'set'");
    	parserTokenParaphases.put(VARIABLE, "'variable'");
    	parserTokenParaphases.put(INDEX, "'index'");
    	parserTokenParaphases.put(UNTIL, "'until'");
    	parserTokenParaphases.put(AT, "'at'");
    	parserTokenParaphases.put(TIMEPERIOD_DAY, "'day'");
    	parserTokenParaphases.put(TIMEPERIOD_DAYS, "'days'");
    	parserTokenParaphases.put(TIMEPERIOD_HOUR, "'hour'");
    	parserTokenParaphases.put(TIMEPERIOD_HOURS, "'hours'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTE, "'minute'");
    	parserTokenParaphases.put(TIMEPERIOD_MINUTES, "'minutes'");
    	parserTokenParaphases.put(TIMEPERIOD_SEC, "'sec'");
    	parserTokenParaphases.put(TIMEPERIOD_SECOND, "'second'");
    	parserTokenParaphases.put(TIMEPERIOD_SECONDS, "'seconds'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISEC, "'msec'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECOND, "'millisecond'");
    	parserTokenParaphases.put(TIMEPERIOD_MILLISECONDS, "'milliseconds'");
    	parserTokenParaphases.put(BOOLEAN_TRUE, "'true'");
    	parserTokenParaphases.put(BOOLEAN_FALSE, "'false'");
    	parserTokenParaphases.put(VALUE_NULL, "'null'");
    	parserTokenParaphases.put(ROW_LIMIT_EXPR, "'limit'");
    	parserTokenParaphases.put(OFFSET, "'offset'");
    	parserTokenParaphases.put(UPDATE, "'update'");
    	parserTokenParaphases.put(MATCH_RECOGNIZE, "'match_recognize'");
    	parserTokenParaphases.put(MEASURES, "'measures'");
    	parserTokenParaphases.put(DEFINE, "'define'");
    	parserTokenParaphases.put(PARTITION, "'partition'");
    	parserTokenParaphases.put(MATCHES, "'matches'");
    	parserTokenParaphases.put(AFTER, "'after'");
    	parserTokenParaphases.put(FOR, "'for'");
    	parserTokenParaphases.put(WHILE, "'while'");

    	parserKeywordSet = new java.util.TreeSet<String>(parserTokenParaphases.values());
        }
        return parserTokenParaphases;
      }

      protected void mismatch(IntStream input, int ttype, BitSet follow) throws RecognitionException {
        throw new MismatchedTokenException(ttype, input);  
      }

      public void recoverFromMismatchedToken(IntStream intStream, RecognitionException recognitionException, int i, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      public Object recoverFromMismatchedSet(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) throws RecognitionException {
        throw recognitionException;
      }

      protected boolean recoverFromMismatchedElement(IntStream intStream, RecognitionException recognitionException, BitSet bitSet) {
        throw new RuntimeException("Error recovering from mismatched element: " + recognitionException.getMessage(), recognitionException);
      }
      public void displayRecognitionError(String[] tokenNames,
                                            RecognitionException e) {
        throw new RuntimeException(e);
      }


    public static class startPatternExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startPatternExpressionRule"
    // EsperEPL2Grammar.g:532:1: startPatternExpressionRule : ( annotationNoEnum )* patternExpression EOF ;
    public final EsperEPL2GrammarParser.startPatternExpressionRule_return startPatternExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startPatternExpressionRule_return retval = new EsperEPL2GrammarParser.startPatternExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF3=null;
        EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum1 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression2 = null;


        CommonTree EOF3_tree=null;

        try {
            // EsperEPL2Grammar.g:533:2: ( ( annotationNoEnum )* patternExpression EOF )
            // EsperEPL2Grammar.g:533:4: ( annotationNoEnum )* patternExpression EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:533:4: ( annotationNoEnum )*
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==EMAILAT) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    // EsperEPL2Grammar.g:533:4: annotationNoEnum
            	    {
            	    pushFollow(FOLLOW_annotationNoEnum_in_startPatternExpressionRule1628);
            	    annotationNoEnum1=annotationNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationNoEnum1.getTree());

            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);

            pushFollow(FOLLOW_patternExpression_in_startPatternExpressionRule1633);
            patternExpression2=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, patternExpression2.getTree());
            EOF3=(Token)match(input,EOF,FOLLOW_EOF_in_startPatternExpressionRule1637); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startPatternExpressionRule"

    public static class startEPLExpressionRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEPLExpressionRule"
    // EsperEPL2Grammar.g:538:1: startEPLExpressionRule : ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) ;
    public final EsperEPL2GrammarParser.startEPLExpressionRule_return startEPLExpressionRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEPLExpressionRule_return retval = new EsperEPL2GrammarParser.startEPLExpressionRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF6=null;
        EsperEPL2GrammarParser.annotationEnum_return annotationEnum4 = null;

        EsperEPL2GrammarParser.eplExpression_return eplExpression5 = null;


        CommonTree EOF6_tree=null;
        RewriteRuleTokenStream stream_EOF=new RewriteRuleTokenStream(adaptor,"token EOF");
        RewriteRuleSubtreeStream stream_annotationEnum=new RewriteRuleSubtreeStream(adaptor,"rule annotationEnum");
        RewriteRuleSubtreeStream stream_eplExpression=new RewriteRuleSubtreeStream(adaptor,"rule eplExpression");
        try {
            // EsperEPL2Grammar.g:539:2: ( ( annotationEnum )* eplExpression EOF -> ^( EPL_EXPR ( annotationEnum )* eplExpression ) )
            // EsperEPL2Grammar.g:539:4: ( annotationEnum )* eplExpression EOF
            {
            // EsperEPL2Grammar.g:539:4: ( annotationEnum )*
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( (LA2_0==EMAILAT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    // EsperEPL2Grammar.g:539:4: annotationEnum
            	    {
            	    pushFollow(FOLLOW_annotationEnum_in_startEPLExpressionRule1651);
            	    annotationEnum4=annotationEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_annotationEnum.add(annotationEnum4.getTree());

            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);

            pushFollow(FOLLOW_eplExpression_in_startEPLExpressionRule1657);
            eplExpression5=eplExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eplExpression.add(eplExpression5.getTree());
            EOF6=(Token)match(input,EOF,FOLLOW_EOF_in_startEPLExpressionRule1661); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EOF.add(EOF6);



            // AST REWRITE
            // elements: eplExpression, annotationEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 542:3: -> ^( EPL_EXPR ( annotationEnum )* eplExpression )
            {
                // EsperEPL2Grammar.g:542:6: ^( EPL_EXPR ( annotationEnum )* eplExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EPL_EXPR, "EPL_EXPR"), root_1);

                // EsperEPL2Grammar.g:542:17: ( annotationEnum )*
                while ( stream_annotationEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_annotationEnum.nextTree());

                }
                stream_annotationEnum.reset();
                adaptor.addChild(root_1, stream_eplExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEPLExpressionRule"

    public static class startEventPropertyRule_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "startEventPropertyRule"
    // EsperEPL2Grammar.g:545:1: startEventPropertyRule : eventProperty EOF ;
    public final EsperEPL2GrammarParser.startEventPropertyRule_return startEventPropertyRule() throws RecognitionException {
        EsperEPL2GrammarParser.startEventPropertyRule_return retval = new EsperEPL2GrammarParser.startEventPropertyRule_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EOF8=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty7 = null;


        CommonTree EOF8_tree=null;

        try {
            // EsperEPL2Grammar.g:546:2: ( eventProperty EOF )
            // EsperEPL2Grammar.g:546:4: eventProperty EOF
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_startEventPropertyRule1687);
            eventProperty7=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty7.getTree());
            EOF8=(Token)match(input,EOF,FOLLOW_EOF_in_startEventPropertyRule1691); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "startEventPropertyRule"

    public static class annotationNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationNoEnum"
    // EsperEPL2Grammar.g:553:1: annotationNoEnum : '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationNoEnum_return annotationNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationNoEnum_return retval = new EsperEPL2GrammarParser.annotationNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal9=null;
        Token char_literal11=null;
        Token char_literal14=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier10 = null;

        EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum12 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum13 = null;


        CommonTree char_literal9_tree=null;
        CommonTree char_literal11_tree=null;
        CommonTree char_literal14_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsNoEnum");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:554:5: ( '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? ) )
            // EsperEPL2Grammar.g:554:9: '@' classIdentifier ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            {
            char_literal9=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationNoEnum1711); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal9);

            pushFollow(FOLLOW_classIdentifier_in_annotationNoEnum1713);
            classIdentifier10=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier10.getTree());
            // EsperEPL2Grammar.g:554:29: ( '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')' )?
            int alt4=2;
            int LA4_0 = input.LA(1);

            if ( (LA4_0==LPAREN) ) {
                int LA4_1 = input.LA(2);

                if ( (LA4_1==IDENT) ) {
                    int LA4_13 = input.LA(3);

                    if ( (LA4_13==EQUALS) ) {
                        int LA4_31 = input.LA(4);

                        if ( ((LA4_31>=BOOLEAN_TRUE && LA4_31<=VALUE_NULL)||LA4_31==NUM_DOUBLE||LA4_31==PLUS||(LA4_31>=STRING_LITERAL && LA4_31<=QUOTED_STRING_LITERAL)||LA4_31==MINUS||LA4_31==LCURLY||LA4_31==NUM_INT||(LA4_31>=NUM_LONG && LA4_31<=NUM_FLOAT)||LA4_31==EMAILAT) ) {
                            alt4=1;
                        }
                    }
                }
                else if ( ((LA4_1>=BOOLEAN_TRUE && LA4_1<=VALUE_NULL)||LA4_1==NUM_DOUBLE||LA4_1==RPAREN||LA4_1==PLUS||(LA4_1>=STRING_LITERAL && LA4_1<=QUOTED_STRING_LITERAL)||LA4_1==MINUS||LA4_1==LCURLY||LA4_1==NUM_INT||(LA4_1>=NUM_LONG && LA4_1<=NUM_FLOAT)||LA4_1==EMAILAT) ) {
                    alt4=1;
                }
            }
            switch (alt4) {
                case 1 :
                    // EsperEPL2Grammar.g:554:31: '(' ( elementValuePairsNoEnum | elementValueNoEnum )? ')'
                    {
                    char_literal11=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationNoEnum1717); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal11);

                    // EsperEPL2Grammar.g:554:35: ( elementValuePairsNoEnum | elementValueNoEnum )?
                    int alt3=3;
                    int LA3_0 = input.LA(1);

                    if ( (LA3_0==IDENT) ) {
                        alt3=1;
                    }
                    else if ( ((LA3_0>=BOOLEAN_TRUE && LA3_0<=VALUE_NULL)||LA3_0==NUM_DOUBLE||LA3_0==PLUS||(LA3_0>=STRING_LITERAL && LA3_0<=QUOTED_STRING_LITERAL)||LA3_0==MINUS||LA3_0==LCURLY||LA3_0==NUM_INT||(LA3_0>=NUM_LONG && LA3_0<=NUM_FLOAT)||LA3_0==EMAILAT) ) {
                        alt3=2;
                    }
                    switch (alt3) {
                        case 1 :
                            // EsperEPL2Grammar.g:554:37: elementValuePairsNoEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1721);
                            elementValuePairsNoEnum12=elementValuePairsNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsNoEnum.add(elementValuePairsNoEnum12.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:554:63: elementValueNoEnum
                            {
                            pushFollow(FOLLOW_elementValueNoEnum_in_annotationNoEnum1725);
                            elementValueNoEnum13=elementValueNoEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum13.getTree());

                            }
                            break;

                    }

                    char_literal14=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationNoEnum1730); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal14);


                    }
                    break;

            }



            // AST REWRITE
            // elements: elementValueNoEnum, classIdentifier, elementValuePairsNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 555:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
            {
                // EsperEPL2Grammar.g:555:5: ^( ANNOTATION classIdentifier ( elementValuePairsNoEnum )? ( elementValueNoEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:555:34: ( elementValuePairsNoEnum )?
                if ( stream_elementValuePairsNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsNoEnum.nextTree());

                }
                stream_elementValuePairsNoEnum.reset();
                // EsperEPL2Grammar.g:555:59: ( elementValueNoEnum )?
                if ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationNoEnum"

    public static class annotationEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "annotationEnum"
    // EsperEPL2Grammar.g:558:1: annotationEnum : '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) ;
    public final EsperEPL2GrammarParser.annotationEnum_return annotationEnum() throws RecognitionException {
        EsperEPL2GrammarParser.annotationEnum_return retval = new EsperEPL2GrammarParser.annotationEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal15=null;
        Token char_literal17=null;
        Token char_literal20=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier16 = null;

        EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum18 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum19 = null;


        CommonTree char_literal15_tree=null;
        CommonTree char_literal17_tree=null;
        CommonTree char_literal20_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EMAILAT=new RewriteRuleTokenStream(adaptor,"token EMAILAT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_elementValuePairsEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValuePairsEnum");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:559:5: ( '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )? -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? ) )
            // EsperEPL2Grammar.g:559:9: '@' classIdentifier ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            {
            char_literal15=(Token)match(input,EMAILAT,FOLLOW_EMAILAT_in_annotationEnum1771); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EMAILAT.add(char_literal15);

            pushFollow(FOLLOW_classIdentifier_in_annotationEnum1773);
            classIdentifier16=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier16.getTree());
            // EsperEPL2Grammar.g:559:29: ( '(' ( elementValuePairsEnum | elementValueEnum )? ')' )?
            int alt6=2;
            int LA6_0 = input.LA(1);

            if ( (LA6_0==LPAREN) ) {
                alt6=1;
            }
            switch (alt6) {
                case 1 :
                    // EsperEPL2Grammar.g:559:31: '(' ( elementValuePairsEnum | elementValueEnum )? ')'
                    {
                    char_literal17=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_annotationEnum1777); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(char_literal17);

                    // EsperEPL2Grammar.g:559:35: ( elementValuePairsEnum | elementValueEnum )?
                    int alt5=3;
                    int LA5_0 = input.LA(1);

                    if ( (LA5_0==IDENT) ) {
                        int LA5_1 = input.LA(2);

                        if ( (LA5_1==EQUALS) ) {
                            alt5=1;
                        }
                        else if ( (LA5_1==DOT||LA5_1==RPAREN) ) {
                            alt5=2;
                        }
                    }
                    else if ( ((LA5_0>=BOOLEAN_TRUE && LA5_0<=VALUE_NULL)||LA5_0==NUM_DOUBLE||LA5_0==PLUS||(LA5_0>=STRING_LITERAL && LA5_0<=QUOTED_STRING_LITERAL)||LA5_0==MINUS||LA5_0==LCURLY||LA5_0==NUM_INT||(LA5_0>=TICKED_STRING_LITERAL && LA5_0<=NUM_FLOAT)||LA5_0==EMAILAT) ) {
                        alt5=2;
                    }
                    switch (alt5) {
                        case 1 :
                            // EsperEPL2Grammar.g:559:37: elementValuePairsEnum
                            {
                            pushFollow(FOLLOW_elementValuePairsEnum_in_annotationEnum1781);
                            elementValuePairsEnum18=elementValuePairsEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValuePairsEnum.add(elementValuePairsEnum18.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:559:61: elementValueEnum
                            {
                            pushFollow(FOLLOW_elementValueEnum_in_annotationEnum1785);
                            elementValueEnum19=elementValueEnum();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum19.getTree());

                            }
                            break;

                    }

                    char_literal20=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_annotationEnum1790); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(char_literal20);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, elementValuePairsEnum, elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 560:2: -> ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
            {
                // EsperEPL2Grammar.g:560:5: ^( ANNOTATION classIdentifier ( elementValuePairsEnum )? ( elementValueEnum )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION, "ANNOTATION"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:560:34: ( elementValuePairsEnum )?
                if ( stream_elementValuePairsEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValuePairsEnum.nextTree());

                }
                stream_elementValuePairsEnum.reset();
                // EsperEPL2Grammar.g:560:57: ( elementValueEnum )?
                if ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "annotationEnum"

    public static class elementValuePairsNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsNoEnum"
    // EsperEPL2Grammar.g:563:1: elementValuePairsNoEnum : elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsNoEnum_return elementValuePairsNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA22=null;
        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum21 = null;

        EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum23 = null;


        CommonTree COMMA22_tree=null;

        try {
            // EsperEPL2Grammar.g:564:5: ( elementValuePairNoEnum ( COMMA elementValuePairNoEnum )* )
            // EsperEPL2Grammar.g:564:9: elementValuePairNoEnum ( COMMA elementValuePairNoEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1831);
            elementValuePairNoEnum21=elementValuePairNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum21.getTree());
            // EsperEPL2Grammar.g:564:32: ( COMMA elementValuePairNoEnum )*
            loop7:
            do {
                int alt7=2;
                int LA7_0 = input.LA(1);

                if ( (LA7_0==COMMA) ) {
                    alt7=1;
                }


                switch (alt7) {
            	case 1 :
            	    // EsperEPL2Grammar.g:564:33: COMMA elementValuePairNoEnum
            	    {
            	    COMMA22=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsNoEnum1834); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1837);
            	    elementValuePairNoEnum23=elementValuePairNoEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairNoEnum23.getTree());

            	    }
            	    break;

            	default :
            	    break loop7;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsNoEnum"

    public static class elementValuePairsEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairsEnum"
    // EsperEPL2Grammar.g:567:1: elementValuePairsEnum : elementValuePairEnum ( COMMA elementValuePairEnum )* ;
    public final EsperEPL2GrammarParser.elementValuePairsEnum_return elementValuePairsEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairsEnum_return retval = new EsperEPL2GrammarParser.elementValuePairsEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA25=null;
        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum24 = null;

        EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum26 = null;


        CommonTree COMMA25_tree=null;

        try {
            // EsperEPL2Grammar.g:568:5: ( elementValuePairEnum ( COMMA elementValuePairEnum )* )
            // EsperEPL2Grammar.g:568:9: elementValuePairEnum ( COMMA elementValuePairEnum )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1858);
            elementValuePairEnum24=elementValuePairEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum24.getTree());
            // EsperEPL2Grammar.g:568:30: ( COMMA elementValuePairEnum )*
            loop8:
            do {
                int alt8=2;
                int LA8_0 = input.LA(1);

                if ( (LA8_0==COMMA) ) {
                    alt8=1;
                }


                switch (alt8) {
            	case 1 :
            	    // EsperEPL2Grammar.g:568:31: COMMA elementValuePairEnum
            	    {
            	    COMMA25=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValuePairsEnum1861); if (state.failed) return retval;
            	    pushFollow(FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1864);
            	    elementValuePairEnum26=elementValuePairEnum();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, elementValuePairEnum26.getTree());

            	    }
            	    break;

            	default :
            	    break loop8;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairsEnum"

    public static class elementValuePairNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairNoEnum"
    // EsperEPL2Grammar.g:571:1: elementValuePairNoEnum : i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairNoEnum_return elementValuePairNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairNoEnum_return retval = new EsperEPL2GrammarParser.elementValuePairNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal27=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum28 = null;


        CommonTree i_tree=null;
        CommonTree char_literal27_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:572:5: (i= IDENT '=' elementValueNoEnum -> ^( ANNOTATION_VALUE $i elementValueNoEnum ) )
            // EsperEPL2Grammar.g:572:9: i= IDENT '=' elementValueNoEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairNoEnum1887); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal27=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairNoEnum1889); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal27);

            pushFollow(FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1891);
            elementValueNoEnum28=elementValueNoEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum28.getTree());


            // AST REWRITE
            // elements: elementValueNoEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 573:2: -> ^( ANNOTATION_VALUE $i elementValueNoEnum )
            {
                // EsperEPL2Grammar.g:573:5: ^( ANNOTATION_VALUE $i elementValueNoEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairNoEnum"

    public static class elementValuePairEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValuePairEnum"
    // EsperEPL2Grammar.g:576:1: elementValuePairEnum : i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) ;
    public final EsperEPL2GrammarParser.elementValuePairEnum_return elementValuePairEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValuePairEnum_return retval = new EsperEPL2GrammarParser.elementValuePairEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token char_literal29=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum30 = null;


        CommonTree i_tree=null;
        CommonTree char_literal29_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:577:5: (i= IDENT '=' elementValueEnum -> ^( ANNOTATION_VALUE $i elementValueEnum ) )
            // EsperEPL2Grammar.g:577:9: i= IDENT '=' elementValueEnum
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_elementValuePairEnum1928); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            char_literal29=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_elementValuePairEnum1930); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(char_literal29);

            pushFollow(FOLLOW_elementValueEnum_in_elementValuePairEnum1932);
            elementValueEnum30=elementValueEnum();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum30.getTree());


            // AST REWRITE
            // elements: elementValueEnum, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 578:2: -> ^( ANNOTATION_VALUE $i elementValueEnum )
            {
                // EsperEPL2Grammar.g:578:5: ^( ANNOTATION_VALUE $i elementValueEnum )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_VALUE, "ANNOTATION_VALUE"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValuePairEnum"

    public static class elementValueNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueNoEnum"
    // EsperEPL2Grammar.g:581:1: elementValueNoEnum : ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant );
    public final EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueNoEnum_return retval = new EsperEPL2GrammarParser.elementValueNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum31 = null;

        EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum32 = null;

        EsperEPL2GrammarParser.constant_return constant33 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayNoEnum");
        try {
            // EsperEPL2Grammar.g:582:5: ( annotationEnum | ( elementValueArrayNoEnum ) -> elementValueArrayNoEnum | constant )
            int alt9=3;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt9=1;
                }
                break;
            case LCURLY:
                {
                alt9=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt9=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 9, 0, input);

                throw nvae;
            }

            switch (alt9) {
                case 1 :
                    // EsperEPL2Grammar.g:582:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueNoEnum1963);
                    annotationEnum31=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum31.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:583:9: ( elementValueArrayNoEnum )
                    {
                    // EsperEPL2Grammar.g:583:9: ( elementValueArrayNoEnum )
                    // EsperEPL2Grammar.g:583:10: elementValueArrayNoEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1974);
                    elementValueArrayNoEnum32=elementValueArrayNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayNoEnum.add(elementValueArrayNoEnum32.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayNoEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 583:35: -> elementValueArrayNoEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayNoEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:584:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueNoEnum1987);
                    constant33=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant33.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueNoEnum"

    public static class elementValueEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueEnum"
    // EsperEPL2Grammar.g:587:1: elementValueEnum : ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier );
    public final EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueEnum_return retval = new EsperEPL2GrammarParser.elementValueEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.annotationEnum_return annotationEnum34 = null;

        EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum35 = null;

        EsperEPL2GrammarParser.constant_return constant36 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier37 = null;


        RewriteRuleSubtreeStream stream_elementValueArrayEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueArrayEnum");
        try {
            // EsperEPL2Grammar.g:588:5: ( annotationEnum | ( elementValueArrayEnum ) -> elementValueArrayEnum | constant | classIdentifier )
            int alt10=4;
            switch ( input.LA(1) ) {
            case EMAILAT:
                {
                alt10=1;
                }
                break;
            case LCURLY:
                {
                alt10=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt10=3;
                }
                break;
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt10=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 10, 0, input);

                throw nvae;
            }

            switch (alt10) {
                case 1 :
                    // EsperEPL2Grammar.g:588:9: annotationEnum
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_annotationEnum_in_elementValueEnum2010);
                    annotationEnum34=annotationEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, annotationEnum34.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:589:9: ( elementValueArrayEnum )
                    {
                    // EsperEPL2Grammar.g:589:9: ( elementValueArrayEnum )
                    // EsperEPL2Grammar.g:589:10: elementValueArrayEnum
                    {
                    pushFollow(FOLLOW_elementValueArrayEnum_in_elementValueEnum2021);
                    elementValueArrayEnum35=elementValueArrayEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueArrayEnum.add(elementValueArrayEnum35.getTree());

                    }



                    // AST REWRITE
                    // elements: elementValueArrayEnum
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 589:33: -> elementValueArrayEnum
                    {
                        adaptor.addChild(root_0, stream_elementValueArrayEnum.nextTree());

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:590:7: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_elementValueEnum2034);
                    constant36=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant36.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:591:7: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_elementValueEnum2042);
                    classIdentifier37=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier37.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueEnum"

    public static class elementValueArrayNoEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayNoEnum"
    // EsperEPL2Grammar.g:594:1: elementValueArrayNoEnum : '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayNoEnum_return elementValueArrayNoEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayNoEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayNoEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal38=null;
        Token char_literal40=null;
        Token char_literal42=null;
        Token char_literal43=null;
        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum39 = null;

        EsperEPL2GrammarParser.elementValueNoEnum_return elementValueNoEnum41 = null;


        CommonTree char_literal38_tree=null;
        CommonTree char_literal40_tree=null;
        CommonTree char_literal42_tree=null;
        CommonTree char_literal43_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueNoEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueNoEnum");
        try {
            // EsperEPL2Grammar.g:595:5: ( '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* ) )
            // EsperEPL2Grammar.g:595:9: '{' ( elementValueNoEnum ( ',' elementValueNoEnum )* )? ( ',' )? '}'
            {
            char_literal38=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayNoEnum2062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal38);

            // EsperEPL2Grammar.g:595:13: ( elementValueNoEnum ( ',' elementValueNoEnum )* )?
            int alt12=2;
            int LA12_0 = input.LA(1);

            if ( ((LA12_0>=BOOLEAN_TRUE && LA12_0<=VALUE_NULL)||LA12_0==NUM_DOUBLE||LA12_0==PLUS||(LA12_0>=STRING_LITERAL && LA12_0<=QUOTED_STRING_LITERAL)||LA12_0==MINUS||LA12_0==LCURLY||LA12_0==NUM_INT||(LA12_0>=NUM_LONG && LA12_0<=NUM_FLOAT)||LA12_0==EMAILAT) ) {
                alt12=1;
            }
            switch (alt12) {
                case 1 :
                    // EsperEPL2Grammar.g:595:14: elementValueNoEnum ( ',' elementValueNoEnum )*
                    {
                    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2065);
                    elementValueNoEnum39=elementValueNoEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum39.getTree());
                    // EsperEPL2Grammar.g:595:33: ( ',' elementValueNoEnum )*
                    loop11:
                    do {
                        int alt11=2;
                        int LA11_0 = input.LA(1);

                        if ( (LA11_0==COMMA) ) {
                            int LA11_1 = input.LA(2);

                            if ( ((LA11_1>=BOOLEAN_TRUE && LA11_1<=VALUE_NULL)||LA11_1==NUM_DOUBLE||LA11_1==PLUS||(LA11_1>=STRING_LITERAL && LA11_1<=QUOTED_STRING_LITERAL)||LA11_1==MINUS||LA11_1==LCURLY||LA11_1==NUM_INT||(LA11_1>=NUM_LONG && LA11_1<=NUM_FLOAT)||LA11_1==EMAILAT) ) {
                                alt11=1;
                            }


                        }


                        switch (alt11) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:595:34: ',' elementValueNoEnum
                    	    {
                    	    char_literal40=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2068); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal40);

                    	    pushFollow(FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2070);
                    	    elementValueNoEnum41=elementValueNoEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueNoEnum.add(elementValueNoEnum41.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop11;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:595:61: ( ',' )?
            int alt13=2;
            int LA13_0 = input.LA(1);

            if ( (LA13_0==COMMA) ) {
                alt13=1;
            }
            switch (alt13) {
                case 1 :
                    // EsperEPL2Grammar.g:595:62: ','
                    {
                    char_literal42=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayNoEnum2077); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal42);


                    }
                    break;

            }

            char_literal43=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayNoEnum2081); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal43);



            // AST REWRITE
            // elements: elementValueNoEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 596:2: -> ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
            {
                // EsperEPL2Grammar.g:596:5: ^( ANNOTATION_ARRAY ( elementValueNoEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:596:24: ( elementValueNoEnum )*
                while ( stream_elementValueNoEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueNoEnum.nextTree());

                }
                stream_elementValueNoEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayNoEnum"

    public static class elementValueArrayEnum_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elementValueArrayEnum"
    // EsperEPL2Grammar.g:599:1: elementValueArrayEnum : '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) ;
    public final EsperEPL2GrammarParser.elementValueArrayEnum_return elementValueArrayEnum() throws RecognitionException {
        EsperEPL2GrammarParser.elementValueArrayEnum_return retval = new EsperEPL2GrammarParser.elementValueArrayEnum_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token char_literal44=null;
        Token char_literal46=null;
        Token char_literal48=null;
        Token char_literal49=null;
        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum45 = null;

        EsperEPL2GrammarParser.elementValueEnum_return elementValueEnum47 = null;


        CommonTree char_literal44_tree=null;
        CommonTree char_literal46_tree=null;
        CommonTree char_literal48_tree=null;
        CommonTree char_literal49_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_elementValueEnum=new RewriteRuleSubtreeStream(adaptor,"rule elementValueEnum");
        try {
            // EsperEPL2Grammar.g:600:5: ( '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}' -> ^( ANNOTATION_ARRAY ( elementValueEnum )* ) )
            // EsperEPL2Grammar.g:600:9: '{' ( elementValueEnum ( ',' elementValueEnum )* )? ( ',' )? '}'
            {
            char_literal44=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_elementValueArrayEnum2110); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(char_literal44);

            // EsperEPL2Grammar.g:600:13: ( elementValueEnum ( ',' elementValueEnum )* )?
            int alt15=2;
            int LA15_0 = input.LA(1);

            if ( ((LA15_0>=BOOLEAN_TRUE && LA15_0<=VALUE_NULL)||LA15_0==NUM_DOUBLE||LA15_0==IDENT||LA15_0==PLUS||(LA15_0>=STRING_LITERAL && LA15_0<=QUOTED_STRING_LITERAL)||LA15_0==MINUS||LA15_0==LCURLY||LA15_0==NUM_INT||(LA15_0>=TICKED_STRING_LITERAL && LA15_0<=NUM_FLOAT)||LA15_0==EMAILAT) ) {
                alt15=1;
            }
            switch (alt15) {
                case 1 :
                    // EsperEPL2Grammar.g:600:14: elementValueEnum ( ',' elementValueEnum )*
                    {
                    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2113);
                    elementValueEnum45=elementValueEnum();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum45.getTree());
                    // EsperEPL2Grammar.g:600:31: ( ',' elementValueEnum )*
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( (LA14_0==COMMA) ) {
                            int LA14_1 = input.LA(2);

                            if ( ((LA14_1>=BOOLEAN_TRUE && LA14_1<=VALUE_NULL)||LA14_1==NUM_DOUBLE||LA14_1==IDENT||LA14_1==PLUS||(LA14_1>=STRING_LITERAL && LA14_1<=QUOTED_STRING_LITERAL)||LA14_1==MINUS||LA14_1==LCURLY||LA14_1==NUM_INT||(LA14_1>=TICKED_STRING_LITERAL && LA14_1<=NUM_FLOAT)||LA14_1==EMAILAT) ) {
                                alt14=1;
                            }


                        }


                        switch (alt14) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:600:32: ',' elementValueEnum
                    	    {
                    	    char_literal46=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2116); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(char_literal46);

                    	    pushFollow(FOLLOW_elementValueEnum_in_elementValueArrayEnum2118);
                    	    elementValueEnum47=elementValueEnum();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_elementValueEnum.add(elementValueEnum47.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:600:57: ( ',' )?
            int alt16=2;
            int LA16_0 = input.LA(1);

            if ( (LA16_0==COMMA) ) {
                alt16=1;
            }
            switch (alt16) {
                case 1 :
                    // EsperEPL2Grammar.g:600:58: ','
                    {
                    char_literal48=(Token)match(input,COMMA,FOLLOW_COMMA_in_elementValueArrayEnum2125); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(char_literal48);


                    }
                    break;

            }

            char_literal49=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_elementValueArrayEnum2129); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(char_literal49);



            // AST REWRITE
            // elements: elementValueEnum
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 601:2: -> ^( ANNOTATION_ARRAY ( elementValueEnum )* )
            {
                // EsperEPL2Grammar.g:601:5: ^( ANNOTATION_ARRAY ( elementValueEnum )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ANNOTATION_ARRAY, "ANNOTATION_ARRAY"), root_1);

                // EsperEPL2Grammar.g:601:24: ( elementValueEnum )*
                while ( stream_elementValueEnum.hasNext() ) {
                    adaptor.addChild(root_1, stream_elementValueEnum.nextTree());

                }
                stream_elementValueEnum.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elementValueArrayEnum"

    public static class eplExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eplExpression"
    // EsperEPL2Grammar.g:607:1: eplExpression : ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )? ;
    public final EsperEPL2GrammarParser.eplExpression_return eplExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eplExpression_return retval = new EsperEPL2GrammarParser.eplExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.selectExpr_return selectExpr50 = null;

        EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr51 = null;

        EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr52 = null;

        EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr53 = null;

        EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr54 = null;

        EsperEPL2GrammarParser.onExpr_return onExpr55 = null;

        EsperEPL2GrammarParser.updateExpr_return updateExpr56 = null;

        EsperEPL2GrammarParser.forExpr_return forExpr57 = null;



        try {
            // EsperEPL2Grammar.g:608:2: ( ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )? )
            // EsperEPL2Grammar.g:608:4: ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr ) ( forExpr )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:608:4: ( selectExpr | createWindowExpr | createIndexExpr | createVariableExpr | createSchemaExpr | onExpr | updateExpr )
            int alt17=7;
            switch ( input.LA(1) ) {
            case SELECT:
            case INSERT:
                {
                alt17=1;
                }
                break;
            case CREATE:
                {
                switch ( input.LA(2) ) {
                case WINDOW:
                    {
                    alt17=2;
                    }
                    break;
                case INDEX:
                    {
                    alt17=3;
                    }
                    break;
                case VARIABLE:
                    {
                    alt17=4;
                    }
                    break;
                case SCHEMA:
                case IDENT:
                    {
                    alt17=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 17, 3, input);

                    throw nvae;
                }

                }
                break;
            case ON:
                {
                alt17=6;
                }
                break;
            case UPDATE:
                {
                alt17=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 17, 0, input);

                throw nvae;
            }

            switch (alt17) {
                case 1 :
                    // EsperEPL2Grammar.g:608:5: selectExpr
                    {
                    pushFollow(FOLLOW_selectExpr_in_eplExpression2162);
                    selectExpr50=selectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectExpr50.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:609:4: createWindowExpr
                    {
                    pushFollow(FOLLOW_createWindowExpr_in_eplExpression2167);
                    createWindowExpr51=createWindowExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createWindowExpr51.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:610:4: createIndexExpr
                    {
                    pushFollow(FOLLOW_createIndexExpr_in_eplExpression2172);
                    createIndexExpr52=createIndexExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createIndexExpr52.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:611:4: createVariableExpr
                    {
                    pushFollow(FOLLOW_createVariableExpr_in_eplExpression2177);
                    createVariableExpr53=createVariableExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createVariableExpr53.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:612:4: createSchemaExpr
                    {
                    pushFollow(FOLLOW_createSchemaExpr_in_eplExpression2182);
                    createSchemaExpr54=createSchemaExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSchemaExpr54.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:613:4: onExpr
                    {
                    pushFollow(FOLLOW_onExpr_in_eplExpression2187);
                    onExpr55=onExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, onExpr55.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:614:4: updateExpr
                    {
                    pushFollow(FOLLOW_updateExpr_in_eplExpression2192);
                    updateExpr56=updateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, updateExpr56.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:614:16: ( forExpr )?
            int alt18=2;
            int LA18_0 = input.LA(1);

            if ( (LA18_0==FOR) ) {
                alt18=1;
            }
            switch (alt18) {
                case 1 :
                    // EsperEPL2Grammar.g:614:16: forExpr
                    {
                    pushFollow(FOLLOW_forExpr_in_eplExpression2195);
                    forExpr57=forExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, forExpr57.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eplExpression"

    public static class selectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectExpr"
    // EsperEPL2Grammar.g:617:1: selectExpr : ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? ;
    public final EsperEPL2GrammarParser.selectExpr_return selectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.selectExpr_return retval = new EsperEPL2GrammarParser.selectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT58=null;
        Token SELECT60=null;
        Token FROM62=null;
        Token WHERE65=null;
        Token GROUP67=null;
        Token BY68=null;
        Token HAVING70=null;
        Token OUTPUT72=null;
        Token ORDER74=null;
        Token BY75=null;
        Token ROW_LIMIT_EXPR77=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr59 = null;

        EsperEPL2GrammarParser.selectClause_return selectClause61 = null;

        EsperEPL2GrammarParser.fromClause_return fromClause63 = null;

        EsperEPL2GrammarParser.matchRecog_return matchRecog64 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause66 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr69 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause71 = null;

        EsperEPL2GrammarParser.outputLimit_return outputLimit73 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr76 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit78 = null;


        CommonTree INSERT58_tree=null;
        CommonTree SELECT60_tree=null;
        CommonTree FROM62_tree=null;
        CommonTree WHERE65_tree=null;
        CommonTree GROUP67_tree=null;
        CommonTree BY68_tree=null;
        CommonTree HAVING70_tree=null;
        CommonTree OUTPUT72_tree=null;
        CommonTree ORDER74_tree=null;
        CommonTree BY75_tree=null;
        CommonTree ROW_LIMIT_EXPR77_tree=null;

        try {
            // EsperEPL2Grammar.g:618:2: ( ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? )
            // EsperEPL2Grammar.g:618:4: ( INSERT insertIntoExpr )? SELECT selectClause FROM fromClause ( matchRecog )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( OUTPUT outputLimit )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:618:4: ( INSERT insertIntoExpr )?
            int alt19=2;
            int LA19_0 = input.LA(1);

            if ( (LA19_0==INSERT) ) {
                alt19=1;
            }
            switch (alt19) {
                case 1 :
                    // EsperEPL2Grammar.g:618:5: INSERT insertIntoExpr
                    {
                    INSERT58=(Token)match(input,INSERT,FOLLOW_INSERT_in_selectExpr2209); if (state.failed) return retval;
                    pushFollow(FOLLOW_insertIntoExpr_in_selectExpr2212);
                    insertIntoExpr59=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, insertIntoExpr59.getTree());

                    }
                    break;

            }

            SELECT60=(Token)match(input,SELECT,FOLLOW_SELECT_in_selectExpr2218); if (state.failed) return retval;
            pushFollow(FOLLOW_selectClause_in_selectExpr2221);
            selectClause61=selectClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectClause61.getTree());
            FROM62=(Token)match(input,FROM,FOLLOW_FROM_in_selectExpr2225); if (state.failed) return retval;
            pushFollow(FOLLOW_fromClause_in_selectExpr2228);
            fromClause63=fromClause();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, fromClause63.getTree());
            // EsperEPL2Grammar.g:621:3: ( matchRecog )?
            int alt20=2;
            int LA20_0 = input.LA(1);

            if ( (LA20_0==MATCH_RECOGNIZE) ) {
                alt20=1;
            }
            switch (alt20) {
                case 1 :
                    // EsperEPL2Grammar.g:621:3: matchRecog
                    {
                    pushFollow(FOLLOW_matchRecog_in_selectExpr2232);
                    matchRecog64=matchRecog();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecog64.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:622:3: ( WHERE whereClause )?
            int alt21=2;
            int LA21_0 = input.LA(1);

            if ( (LA21_0==WHERE) ) {
                alt21=1;
            }
            switch (alt21) {
                case 1 :
                    // EsperEPL2Grammar.g:622:4: WHERE whereClause
                    {
                    WHERE65=(Token)match(input,WHERE,FOLLOW_WHERE_in_selectExpr2238); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_selectExpr2241);
                    whereClause66=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause66.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:623:3: ( GROUP BY groupByListExpr )?
            int alt22=2;
            int LA22_0 = input.LA(1);

            if ( (LA22_0==GROUP) ) {
                alt22=1;
            }
            switch (alt22) {
                case 1 :
                    // EsperEPL2Grammar.g:623:4: GROUP BY groupByListExpr
                    {
                    GROUP67=(Token)match(input,GROUP,FOLLOW_GROUP_in_selectExpr2248); if (state.failed) return retval;
                    BY68=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2251); if (state.failed) return retval;
                    pushFollow(FOLLOW_groupByListExpr_in_selectExpr2254);
                    groupByListExpr69=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, groupByListExpr69.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:624:3: ( HAVING havingClause )?
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( (LA23_0==HAVING) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    // EsperEPL2Grammar.g:624:4: HAVING havingClause
                    {
                    HAVING70=(Token)match(input,HAVING,FOLLOW_HAVING_in_selectExpr2261); if (state.failed) return retval;
                    pushFollow(FOLLOW_havingClause_in_selectExpr2264);
                    havingClause71=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, havingClause71.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:625:3: ( OUTPUT outputLimit )?
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==OUTPUT) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    // EsperEPL2Grammar.g:625:4: OUTPUT outputLimit
                    {
                    OUTPUT72=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_selectExpr2271); if (state.failed) return retval;
                    pushFollow(FOLLOW_outputLimit_in_selectExpr2274);
                    outputLimit73=outputLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outputLimit73.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:626:3: ( ORDER BY orderByListExpr )?
            int alt25=2;
            int LA25_0 = input.LA(1);

            if ( (LA25_0==ORDER) ) {
                alt25=1;
            }
            switch (alt25) {
                case 1 :
                    // EsperEPL2Grammar.g:626:4: ORDER BY orderByListExpr
                    {
                    ORDER74=(Token)match(input,ORDER,FOLLOW_ORDER_in_selectExpr2281); if (state.failed) return retval;
                    BY75=(Token)match(input,BY,FOLLOW_BY_in_selectExpr2284); if (state.failed) return retval;
                    pushFollow(FOLLOW_orderByListExpr_in_selectExpr2287);
                    orderByListExpr76=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, orderByListExpr76.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:627:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt26=2;
            int LA26_0 = input.LA(1);

            if ( (LA26_0==ROW_LIMIT_EXPR) ) {
                alt26=1;
            }
            switch (alt26) {
                case 1 :
                    // EsperEPL2Grammar.g:627:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR77=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2294); if (state.failed) return retval;
                    pushFollow(FOLLOW_rowLimit_in_selectExpr2297);
                    rowLimit78=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rowLimit78.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectExpr"

    public static class onExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExpr"
    // EsperEPL2Grammar.g:630:1: onExpr : ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) ;
    public final EsperEPL2GrammarParser.onExpr_return onExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onExpr_return retval = new EsperEPL2GrammarParser.onExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON79=null;
        EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr80 = null;

        EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr81 = null;

        EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr82 = null;

        EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr83 = null;

        EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert84 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr85 = null;

        EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr86 = null;


        CommonTree ON79_tree=null;
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleSubtreeStream stream_onStreamExpr=new RewriteRuleSubtreeStream(adaptor,"rule onStreamExpr");
        RewriteRuleSubtreeStream stream_onSelectExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectExpr");
        RewriteRuleSubtreeStream stream_onDeleteExpr=new RewriteRuleSubtreeStream(adaptor,"rule onDeleteExpr");
        RewriteRuleSubtreeStream stream_onSelectInsertExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSelectInsertExpr");
        RewriteRuleSubtreeStream stream_outputClauseInsert=new RewriteRuleSubtreeStream(adaptor,"rule outputClauseInsert");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
        RewriteRuleSubtreeStream stream_onUpdateExpr=new RewriteRuleSubtreeStream(adaptor,"rule onUpdateExpr");
        try {
            // EsperEPL2Grammar.g:631:2: ( ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr ) -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? ) )
            // EsperEPL2Grammar.g:631:4: ON onStreamExpr ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            {
            ON79=(Token)match(input,ON,FOLLOW_ON_in_onExpr2312); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON79);

            pushFollow(FOLLOW_onStreamExpr_in_onExpr2314);
            onStreamExpr80=onStreamExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onStreamExpr.add(onStreamExpr80.getTree());
            // EsperEPL2Grammar.g:632:3: ( onDeleteExpr | onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )? | onSetExpr | onUpdateExpr )
            int alt30=4;
            switch ( input.LA(1) ) {
            case DELETE:
                {
                alt30=1;
                }
                break;
            case SELECT:
            case INSERT:
                {
                alt30=2;
                }
                break;
            case SET:
                {
                alt30=3;
                }
                break;
            case UPDATE:
                {
                alt30=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 30, 0, input);

                throw nvae;
            }

            switch (alt30) {
                case 1 :
                    // EsperEPL2Grammar.g:632:4: onDeleteExpr
                    {
                    pushFollow(FOLLOW_onDeleteExpr_in_onExpr2319);
                    onDeleteExpr81=onDeleteExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onDeleteExpr.add(onDeleteExpr81.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:632:19: onSelectExpr ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    {
                    pushFollow(FOLLOW_onSelectExpr_in_onExpr2323);
                    onSelectExpr82=onSelectExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSelectExpr.add(onSelectExpr82.getTree());
                    // EsperEPL2Grammar.g:632:32: ( ( onSelectInsertExpr )+ ( outputClauseInsert )? )?
                    int alt29=2;
                    int LA29_0 = input.LA(1);

                    if ( (LA29_0==INSERT) ) {
                        alt29=1;
                    }
                    switch (alt29) {
                        case 1 :
                            // EsperEPL2Grammar.g:632:33: ( onSelectInsertExpr )+ ( outputClauseInsert )?
                            {
                            // EsperEPL2Grammar.g:632:33: ( onSelectInsertExpr )+
                            int cnt27=0;
                            loop27:
                            do {
                                int alt27=2;
                                int LA27_0 = input.LA(1);

                                if ( (LA27_0==INSERT) ) {
                                    alt27=1;
                                }


                                switch (alt27) {
                            	case 1 :
                            	    // EsperEPL2Grammar.g:632:33: onSelectInsertExpr
                            	    {
                            	    pushFollow(FOLLOW_onSelectInsertExpr_in_onExpr2326);
                            	    onSelectInsertExpr83=onSelectInsertExpr();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) stream_onSelectInsertExpr.add(onSelectInsertExpr83.getTree());

                            	    }
                            	    break;

                            	default :
                            	    if ( cnt27 >= 1 ) break loop27;
                            	    if (state.backtracking>0) {state.failed=true; return retval;}
                                        EarlyExitException eee =
                                            new EarlyExitException(27, input);
                                        throw eee;
                                }
                                cnt27++;
                            } while (true);

                            // EsperEPL2Grammar.g:632:53: ( outputClauseInsert )?
                            int alt28=2;
                            int LA28_0 = input.LA(1);

                            if ( (LA28_0==OUTPUT) ) {
                                alt28=1;
                            }
                            switch (alt28) {
                                case 1 :
                                    // EsperEPL2Grammar.g:632:53: outputClauseInsert
                                    {
                                    pushFollow(FOLLOW_outputClauseInsert_in_onExpr2329);
                                    outputClauseInsert84=outputClauseInsert();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_outputClauseInsert.add(outputClauseInsert84.getTree());

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:632:77: onSetExpr
                    {
                    pushFollow(FOLLOW_onSetExpr_in_onExpr2336);
                    onSetExpr85=onSetExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr85.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:632:89: onUpdateExpr
                    {
                    pushFollow(FOLLOW_onUpdateExpr_in_onExpr2340);
                    onUpdateExpr86=onUpdateExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onUpdateExpr.add(onUpdateExpr86.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onDeleteExpr, onSetExpr, onSelectExpr, outputClauseInsert, onUpdateExpr, onSelectInsertExpr, onStreamExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 633:3: -> ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
            {
                // EsperEPL2Grammar.g:633:6: ^( ON_EXPR onStreamExpr ( onDeleteExpr )? ( onSelectExpr )? ( onSelectInsertExpr )* ( outputClauseInsert )? ( onSetExpr )? ( onUpdateExpr )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR, "ON_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onStreamExpr.nextTree());
                // EsperEPL2Grammar.g:633:29: ( onDeleteExpr )?
                if ( stream_onDeleteExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onDeleteExpr.nextTree());

                }
                stream_onDeleteExpr.reset();
                // EsperEPL2Grammar.g:633:43: ( onSelectExpr )?
                if ( stream_onSelectExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectExpr.nextTree());

                }
                stream_onSelectExpr.reset();
                // EsperEPL2Grammar.g:633:57: ( onSelectInsertExpr )*
                while ( stream_onSelectInsertExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSelectInsertExpr.nextTree());

                }
                stream_onSelectInsertExpr.reset();
                // EsperEPL2Grammar.g:633:77: ( outputClauseInsert )?
                if ( stream_outputClauseInsert.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputClauseInsert.nextTree());

                }
                stream_outputClauseInsert.reset();
                // EsperEPL2Grammar.g:633:97: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:633:108: ( onUpdateExpr )?
                if ( stream_onUpdateExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onUpdateExpr.nextTree());

                }
                stream_onUpdateExpr.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExpr"

    public static class onStreamExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onStreamExpr"
    // EsperEPL2Grammar.g:636:1: onStreamExpr : ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) ;
    public final EsperEPL2GrammarParser.onStreamExpr_return onStreamExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onStreamExpr_return retval = new EsperEPL2GrammarParser.onStreamExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS89=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression87 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression88 = null;


        CommonTree i_tree=null;
        CommonTree AS89_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:637:2: ( ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )? -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? ) )
            // EsperEPL2Grammar.g:637:4: ( eventFilterExpression | patternInclusionExpression ) ( AS i= IDENT | i= IDENT )?
            {
            // EsperEPL2Grammar.g:637:4: ( eventFilterExpression | patternInclusionExpression )
            int alt31=2;
            int LA31_0 = input.LA(1);

            if ( (LA31_0==IDENT||LA31_0==TICKED_STRING_LITERAL) ) {
                alt31=1;
            }
            else if ( (LA31_0==PATTERN) ) {
                alt31=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 31, 0, input);

                throw nvae;
            }
            switch (alt31) {
                case 1 :
                    // EsperEPL2Grammar.g:637:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_onStreamExpr2383);
                    eventFilterExpression87=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression87.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:637:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_onStreamExpr2387);
                    patternInclusionExpression88=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression88.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:637:57: ( AS i= IDENT | i= IDENT )?
            int alt32=3;
            int LA32_0 = input.LA(1);

            if ( (LA32_0==AS) ) {
                alt32=1;
            }
            else if ( (LA32_0==IDENT) ) {
                alt32=2;
            }
            switch (alt32) {
                case 1 :
                    // EsperEPL2Grammar.g:637:58: AS i= IDENT
                    {
                    AS89=(Token)match(input,AS,FOLLOW_AS_in_onStreamExpr2391); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS89);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2395); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:637:71: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onStreamExpr2401); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: patternInclusionExpression, eventFilterExpression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 638:3: -> ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
            {
                // EsperEPL2Grammar.g:638:6: ^( ON_STREAM ( eventFilterExpression )? ( patternInclusionExpression )? ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_STREAM, "ON_STREAM"), root_1);

                // EsperEPL2Grammar.g:638:18: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:638:41: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:638:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onStreamExpr"

    public static class updateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "updateExpr"
    // EsperEPL2Grammar.g:641:1: updateExpr : UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.updateExpr_return updateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.updateExpr_return retval = new EsperEPL2GrammarParser.updateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token UPDATE90=null;
        Token ISTREAM91=null;
        Token AS93=null;
        Token SET94=null;
        Token COMMA96=null;
        Token WHERE98=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier92 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment95 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment97 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause99 = null;


        CommonTree i_tree=null;
        CommonTree UPDATE90_tree=null;
        CommonTree ISTREAM91_tree=null;
        CommonTree AS93_tree=null;
        CommonTree SET94_tree=null;
        CommonTree COMMA96_tree=null;
        CommonTree WHERE98_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:642:2: ( UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:642:4: UPDATE ISTREAM classIdentifier ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE90=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_updateExpr2432); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE90);

            ISTREAM91=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_updateExpr2434); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ISTREAM.add(ISTREAM91);

            pushFollow(FOLLOW_classIdentifier_in_updateExpr2436);
            classIdentifier92=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier92.getTree());
            // EsperEPL2Grammar.g:642:35: ( AS i= IDENT | i= IDENT )?
            int alt33=3;
            int LA33_0 = input.LA(1);

            if ( (LA33_0==AS) ) {
                alt33=1;
            }
            else if ( (LA33_0==IDENT) ) {
                alt33=2;
            }
            switch (alt33) {
                case 1 :
                    // EsperEPL2Grammar.g:642:36: AS i= IDENT
                    {
                    AS93=(Token)match(input,AS,FOLLOW_AS_in_updateExpr2439); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS93);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2443); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:642:49: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_updateExpr2449); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET94=(Token)match(input,SET,FOLLOW_SET_in_updateExpr2455); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET94);

            pushFollow(FOLLOW_onSetAssignment_in_updateExpr2457);
            onSetAssignment95=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment95.getTree());
            // EsperEPL2Grammar.g:643:23: ( COMMA onSetAssignment )*
            loop34:
            do {
                int alt34=2;
                int LA34_0 = input.LA(1);

                if ( (LA34_0==COMMA) ) {
                    alt34=1;
                }


                switch (alt34) {
            	case 1 :
            	    // EsperEPL2Grammar.g:643:24: COMMA onSetAssignment
            	    {
            	    COMMA96=(Token)match(input,COMMA,FOLLOW_COMMA_in_updateExpr2460); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA96);

            	    pushFollow(FOLLOW_onSetAssignment_in_updateExpr2462);
            	    onSetAssignment97=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment97.getTree());

            	    }
            	    break;

            	default :
            	    break loop34;
                }
            } while (true);

            // EsperEPL2Grammar.g:644:3: ( WHERE whereClause )?
            int alt35=2;
            int LA35_0 = input.LA(1);

            if ( (LA35_0==WHERE) ) {
                alt35=1;
            }
            switch (alt35) {
                case 1 :
                    // EsperEPL2Grammar.g:644:4: WHERE whereClause
                    {
                    WHERE98=(Token)match(input,WHERE,FOLLOW_WHERE_in_updateExpr2470); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE98);

                    pushFollow(FOLLOW_whereClause_in_updateExpr2472);
                    whereClause99=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause99.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, classIdentifier, i, onSetAssignment
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 645:3: -> ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:645:6: ^( UPDATE_EXPR classIdentifier ( $i)? ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UPDATE_EXPR, "UPDATE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:645:36: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:645:57: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "updateExpr"

    public static class onSelectExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectExpr"
    // EsperEPL2Grammar.g:648:1: onSelectExpr : ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) ;
    public final EsperEPL2GrammarParser.onSelectExpr_return onSelectExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectExpr_return retval = new EsperEPL2GrammarParser.onSelectExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT100=null;
        Token SELECT102=null;
        Token DISTINCT103=null;
        Token WHERE106=null;
        Token GROUP108=null;
        Token BY109=null;
        Token HAVING111=null;
        Token ORDER113=null;
        Token BY114=null;
        Token ROW_LIMIT_EXPR116=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr101 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList104 = null;

        EsperEPL2GrammarParser.onExprFrom_return onExprFrom105 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause107 = null;

        EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr110 = null;

        EsperEPL2GrammarParser.havingClause_return havingClause112 = null;

        EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr115 = null;

        EsperEPL2GrammarParser.rowLimit_return rowLimit117 = null;


        CommonTree INSERT100_tree=null;
        CommonTree SELECT102_tree=null;
        CommonTree DISTINCT103_tree=null;
        CommonTree WHERE106_tree=null;
        CommonTree GROUP108_tree=null;
        CommonTree BY109_tree=null;
        CommonTree HAVING111_tree=null;
        CommonTree ORDER113_tree=null;
        CommonTree BY114_tree=null;
        CommonTree ROW_LIMIT_EXPR116_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_GROUP=new RewriteRuleTokenStream(adaptor,"token GROUP");
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_HAVING=new RewriteRuleTokenStream(adaptor,"token HAVING");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_ORDER=new RewriteRuleTokenStream(adaptor,"token ORDER");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_ROW_LIMIT_EXPR=new RewriteRuleTokenStream(adaptor,"token ROW_LIMIT_EXPR");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_groupByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule groupByListExpr");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_orderByListExpr=new RewriteRuleSubtreeStream(adaptor,"rule orderByListExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
        RewriteRuleSubtreeStream stream_havingClause=new RewriteRuleSubtreeStream(adaptor,"rule havingClause");
        RewriteRuleSubtreeStream stream_rowLimit=new RewriteRuleSubtreeStream(adaptor,"rule rowLimit");
         paraphrases.push("on-select clause"); 
        try {
            // EsperEPL2Grammar.g:651:2: ( ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )? -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? ) )
            // EsperEPL2Grammar.g:651:4: ( INSERT insertIntoExpr )? SELECT ( DISTINCT )? selectionList ( onExprFrom )? ( WHERE whereClause )? ( GROUP BY groupByListExpr )? ( HAVING havingClause )? ( ORDER BY orderByListExpr )? ( ROW_LIMIT_EXPR rowLimit )?
            {
            // EsperEPL2Grammar.g:651:4: ( INSERT insertIntoExpr )?
            int alt36=2;
            int LA36_0 = input.LA(1);

            if ( (LA36_0==INSERT) ) {
                alt36=1;
            }
            switch (alt36) {
                case 1 :
                    // EsperEPL2Grammar.g:651:5: INSERT insertIntoExpr
                    {
                    INSERT100=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectExpr2520); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(INSERT100);

                    pushFollow(FOLLOW_insertIntoExpr_in_onSelectExpr2522);
                    insertIntoExpr101=insertIntoExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr101.getTree());

                    }
                    break;

            }

            SELECT102=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectExpr2528); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT102);

            // EsperEPL2Grammar.g:652:10: ( DISTINCT )?
            int alt37=2;
            int LA37_0 = input.LA(1);

            if ( (LA37_0==DISTINCT) ) {
                alt37=1;
            }
            switch (alt37) {
                case 1 :
                    // EsperEPL2Grammar.g:652:10: DISTINCT
                    {
                    DISTINCT103=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_onSelectExpr2530); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(DISTINCT103);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_onSelectExpr2533);
            selectionList104=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList104.getTree());
            // EsperEPL2Grammar.g:653:3: ( onExprFrom )?
            int alt38=2;
            int LA38_0 = input.LA(1);

            if ( (LA38_0==FROM) ) {
                alt38=1;
            }
            switch (alt38) {
                case 1 :
                    // EsperEPL2Grammar.g:653:3: onExprFrom
                    {
                    pushFollow(FOLLOW_onExprFrom_in_onSelectExpr2537);
                    onExprFrom105=onExprFrom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom105.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:654:3: ( WHERE whereClause )?
            int alt39=2;
            int LA39_0 = input.LA(1);

            if ( (LA39_0==WHERE) ) {
                alt39=1;
            }
            switch (alt39) {
                case 1 :
                    // EsperEPL2Grammar.g:654:4: WHERE whereClause
                    {
                    WHERE106=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectExpr2543); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE106);

                    pushFollow(FOLLOW_whereClause_in_onSelectExpr2545);
                    whereClause107=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause107.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:655:3: ( GROUP BY groupByListExpr )?
            int alt40=2;
            int LA40_0 = input.LA(1);

            if ( (LA40_0==GROUP) ) {
                alt40=1;
            }
            switch (alt40) {
                case 1 :
                    // EsperEPL2Grammar.g:655:4: GROUP BY groupByListExpr
                    {
                    GROUP108=(Token)match(input,GROUP,FOLLOW_GROUP_in_onSelectExpr2554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_GROUP.add(GROUP108);

                    BY109=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY109);

                    pushFollow(FOLLOW_groupByListExpr_in_onSelectExpr2558);
                    groupByListExpr110=groupByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_groupByListExpr.add(groupByListExpr110.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:656:3: ( HAVING havingClause )?
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( (LA41_0==HAVING) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    // EsperEPL2Grammar.g:656:4: HAVING havingClause
                    {
                    HAVING111=(Token)match(input,HAVING,FOLLOW_HAVING_in_onSelectExpr2565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_HAVING.add(HAVING111);

                    pushFollow(FOLLOW_havingClause_in_onSelectExpr2567);
                    havingClause112=havingClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_havingClause.add(havingClause112.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:657:3: ( ORDER BY orderByListExpr )?
            int alt42=2;
            int LA42_0 = input.LA(1);

            if ( (LA42_0==ORDER) ) {
                alt42=1;
            }
            switch (alt42) {
                case 1 :
                    // EsperEPL2Grammar.g:657:4: ORDER BY orderByListExpr
                    {
                    ORDER113=(Token)match(input,ORDER,FOLLOW_ORDER_in_onSelectExpr2574); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ORDER.add(ORDER113);

                    BY114=(Token)match(input,BY,FOLLOW_BY_in_onSelectExpr2576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BY.add(BY114);

                    pushFollow(FOLLOW_orderByListExpr_in_onSelectExpr2578);
                    orderByListExpr115=orderByListExpr();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_orderByListExpr.add(orderByListExpr115.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:658:3: ( ROW_LIMIT_EXPR rowLimit )?
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( (LA43_0==ROW_LIMIT_EXPR) ) {
                alt43=1;
            }
            switch (alt43) {
                case 1 :
                    // EsperEPL2Grammar.g:658:4: ROW_LIMIT_EXPR rowLimit
                    {
                    ROW_LIMIT_EXPR116=(Token)match(input,ROW_LIMIT_EXPR,FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2585); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ROW_LIMIT_EXPR.add(ROW_LIMIT_EXPR116);

                    pushFollow(FOLLOW_rowLimit_in_onSelectExpr2587);
                    rowLimit117=rowLimit();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_rowLimit.add(rowLimit117.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: havingClause, orderByListExpr, insertIntoExpr, groupByListExpr, selectionList, whereClause, onExprFrom, DISTINCT, rowLimit
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 659:3: -> ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
            {
                // EsperEPL2Grammar.g:659:6: ^( ON_SELECT_EXPR ( insertIntoExpr )? ( DISTINCT )? selectionList ( onExprFrom )? ( whereClause )? ( groupByListExpr )? ( havingClause )? ( orderByListExpr )? ( rowLimit )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_EXPR, "ON_SELECT_EXPR"), root_1);

                // EsperEPL2Grammar.g:659:23: ( insertIntoExpr )?
                if ( stream_insertIntoExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());

                }
                stream_insertIntoExpr.reset();
                // EsperEPL2Grammar.g:659:39: ( DISTINCT )?
                if ( stream_DISTINCT.hasNext() ) {
                    adaptor.addChild(root_1, stream_DISTINCT.nextNode());

                }
                stream_DISTINCT.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:659:63: ( onExprFrom )?
                if ( stream_onExprFrom.hasNext() ) {
                    adaptor.addChild(root_1, stream_onExprFrom.nextTree());

                }
                stream_onExprFrom.reset();
                // EsperEPL2Grammar.g:659:75: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();
                // EsperEPL2Grammar.g:659:88: ( groupByListExpr )?
                if ( stream_groupByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_groupByListExpr.nextTree());

                }
                stream_groupByListExpr.reset();
                // EsperEPL2Grammar.g:659:105: ( havingClause )?
                if ( stream_havingClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_havingClause.nextTree());

                }
                stream_havingClause.reset();
                // EsperEPL2Grammar.g:659:119: ( orderByListExpr )?
                if ( stream_orderByListExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListExpr.nextTree());

                }
                stream_orderByListExpr.reset();
                // EsperEPL2Grammar.g:659:136: ( rowLimit )?
                if ( stream_rowLimit.hasNext() ) {
                    adaptor.addChild(root_1, stream_rowLimit.nextTree());

                }
                stream_rowLimit.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectExpr"

    public static class onUpdateExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onUpdateExpr"
    // EsperEPL2Grammar.g:662:1: onUpdateExpr : UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onUpdateExpr_return onUpdateExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onUpdateExpr_return retval = new EsperEPL2GrammarParser.onUpdateExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token UPDATE118=null;
        Token AS119=null;
        Token SET120=null;
        Token COMMA122=null;
        Token WHERE124=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment121 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment123 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause125 = null;


        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree UPDATE118_tree=null;
        CommonTree AS119_tree=null;
        CommonTree SET120_tree=null;
        CommonTree COMMA122_tree=null;
        CommonTree WHERE124_tree=null;
        RewriteRuleTokenStream stream_UPDATE=new RewriteRuleTokenStream(adaptor,"token UPDATE");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-update clause"); 
        try {
            // EsperEPL2Grammar.g:665:2: ( UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )? -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? ) )
            // EsperEPL2Grammar.g:665:4: UPDATE n= IDENT ( AS i= IDENT | i= IDENT )? SET onSetAssignment ( COMMA onSetAssignment )* ( WHERE whereClause )?
            {
            UPDATE118=(Token)match(input,UPDATE,FOLLOW_UPDATE_in_onUpdateExpr2647); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_UPDATE.add(UPDATE118);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2654); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:666:11: ( AS i= IDENT | i= IDENT )?
            int alt44=3;
            int LA44_0 = input.LA(1);

            if ( (LA44_0==AS) ) {
                alt44=1;
            }
            else if ( (LA44_0==IDENT) ) {
                alt44=2;
            }
            switch (alt44) {
                case 1 :
                    // EsperEPL2Grammar.g:666:12: AS i= IDENT
                    {
                    AS119=(Token)match(input,AS,FOLLOW_AS_in_onUpdateExpr2657); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS119);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2661); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:666:25: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onUpdateExpr2667); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            SET120=(Token)match(input,SET,FOLLOW_SET_in_onUpdateExpr2673); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET120);

            pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2675);
            onSetAssignment121=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment121.getTree());
            // EsperEPL2Grammar.g:667:23: ( COMMA onSetAssignment )*
            loop45:
            do {
                int alt45=2;
                int LA45_0 = input.LA(1);

                if ( (LA45_0==COMMA) ) {
                    alt45=1;
                }


                switch (alt45) {
            	case 1 :
            	    // EsperEPL2Grammar.g:667:24: COMMA onSetAssignment
            	    {
            	    COMMA122=(Token)match(input,COMMA,FOLLOW_COMMA_in_onUpdateExpr2678); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA122);

            	    pushFollow(FOLLOW_onSetAssignment_in_onUpdateExpr2680);
            	    onSetAssignment123=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment123.getTree());

            	    }
            	    break;

            	default :
            	    break loop45;
                }
            } while (true);

            // EsperEPL2Grammar.g:668:3: ( WHERE whereClause )?
            int alt46=2;
            int LA46_0 = input.LA(1);

            if ( (LA46_0==WHERE) ) {
                alt46=1;
            }
            switch (alt46) {
                case 1 :
                    // EsperEPL2Grammar.g:668:4: WHERE whereClause
                    {
                    WHERE124=(Token)match(input,WHERE,FOLLOW_WHERE_in_onUpdateExpr2687); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE124);

                    pushFollow(FOLLOW_whereClause_in_onUpdateExpr2689);
                    whereClause125=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause125.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: i, whereClause, n, onSetAssignment
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 669:3: -> ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
            {
                // EsperEPL2Grammar.g:669:6: ^( ON_UPDATE_EXPR ^( ON_EXPR_FROM $n ( $i)? ) ( onSetAssignment )+ ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_UPDATE_EXPR, "ON_UPDATE_EXPR"), root_1);

                // EsperEPL2Grammar.g:669:23: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_2);

                adaptor.addChild(root_2, stream_n.nextNode());
                // EsperEPL2Grammar.g:669:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_2, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_1, root_2);
                }
                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();
                // EsperEPL2Grammar.g:669:63: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onUpdateExpr"

    public static class onSelectInsertExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSelectInsertExpr"
    // EsperEPL2Grammar.g:672:1: onSelectInsertExpr : INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onSelectInsertExpr_return onSelectInsertExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSelectInsertExpr_return retval = new EsperEPL2GrammarParser.onSelectInsertExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token INSERT126=null;
        Token SELECT128=null;
        Token WHERE130=null;
        EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr127 = null;

        EsperEPL2GrammarParser.selectionList_return selectionList129 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause131 = null;


        CommonTree INSERT126_tree=null;
        CommonTree SELECT128_tree=null;
        CommonTree WHERE130_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_insertIntoExpr=new RewriteRuleSubtreeStream(adaptor,"rule insertIntoExpr");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("on-select-insert clause"); 
        try {
            // EsperEPL2Grammar.g:675:2: ( INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )? -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? ) )
            // EsperEPL2Grammar.g:675:4: INSERT insertIntoExpr SELECT selectionList ( WHERE whereClause )?
            {
            INSERT126=(Token)match(input,INSERT,FOLLOW_INSERT_in_onSelectInsertExpr2740); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INSERT.add(INSERT126);

            pushFollow(FOLLOW_insertIntoExpr_in_onSelectInsertExpr2742);
            insertIntoExpr127=insertIntoExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_insertIntoExpr.add(insertIntoExpr127.getTree());
            SELECT128=(Token)match(input,SELECT,FOLLOW_SELECT_in_onSelectInsertExpr2746); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SELECT.add(SELECT128);

            pushFollow(FOLLOW_selectionList_in_onSelectInsertExpr2748);
            selectionList129=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList129.getTree());
            // EsperEPL2Grammar.g:677:3: ( WHERE whereClause )?
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==WHERE) ) {
                alt47=1;
            }
            switch (alt47) {
                case 1 :
                    // EsperEPL2Grammar.g:677:4: WHERE whereClause
                    {
                    WHERE130=(Token)match(input,WHERE,FOLLOW_WHERE_in_onSelectInsertExpr2753); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE130);

                    pushFollow(FOLLOW_whereClause_in_onSelectInsertExpr2755);
                    whereClause131=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause131.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: whereClause, selectionList, insertIntoExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 678:3: -> ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
            {
                // EsperEPL2Grammar.g:678:6: ^( ON_SELECT_INSERT_EXPR insertIntoExpr selectionList ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_EXPR, "ON_SELECT_INSERT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_insertIntoExpr.nextTree());
                adaptor.addChild(root_1, stream_selectionList.nextTree());
                // EsperEPL2Grammar.g:678:59: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSelectInsertExpr"

    public static class outputClauseInsert_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputClauseInsert"
    // EsperEPL2Grammar.g:681:1: outputClauseInsert : OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) ;
    public final EsperEPL2GrammarParser.outputClauseInsert_return outputClauseInsert() throws RecognitionException {
        EsperEPL2GrammarParser.outputClauseInsert_return retval = new EsperEPL2GrammarParser.outputClauseInsert_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        Token a=null;
        Token OUTPUT132=null;

        CommonTree f_tree=null;
        CommonTree a_tree=null;
        CommonTree OUTPUT132_tree=null;
        RewriteRuleTokenStream stream_OUTPUT=new RewriteRuleTokenStream(adaptor,"token OUTPUT");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");

        try {
            // EsperEPL2Grammar.g:682:2: ( OUTPUT (f= FIRST | a= ALL ) -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? ) )
            // EsperEPL2Grammar.g:682:4: OUTPUT (f= FIRST | a= ALL )
            {
            OUTPUT132=(Token)match(input,OUTPUT,FOLLOW_OUTPUT_in_outputClauseInsert2786); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_OUTPUT.add(OUTPUT132);

            // EsperEPL2Grammar.g:682:11: (f= FIRST | a= ALL )
            int alt48=2;
            int LA48_0 = input.LA(1);

            if ( (LA48_0==FIRST) ) {
                alt48=1;
            }
            else if ( (LA48_0==ALL) ) {
                alt48=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 48, 0, input);

                throw nvae;
            }
            switch (alt48) {
                case 1 :
                    // EsperEPL2Grammar.g:682:12: f= FIRST
                    {
                    f=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputClauseInsert2791); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(f);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:682:22: a= ALL
                    {
                    a=(Token)match(input,ALL,FOLLOW_ALL_in_outputClauseInsert2797); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(a);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, f
            // token labels: f, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_f=new RewriteRuleTokenStream(adaptor,"token f",f);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 683:3: -> ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
            {
                // EsperEPL2Grammar.g:683:6: ^( ON_SELECT_INSERT_OUTPUT ( $f)? ( $a)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SELECT_INSERT_OUTPUT, "ON_SELECT_INSERT_OUTPUT"), root_1);

                // EsperEPL2Grammar.g:683:32: ( $f)?
                if ( stream_f.hasNext() ) {
                    adaptor.addChild(root_1, stream_f.nextNode());

                }
                stream_f.reset();
                // EsperEPL2Grammar.g:683:36: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputClauseInsert"

    public static class onDeleteExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onDeleteExpr"
    // EsperEPL2Grammar.g:686:1: onDeleteExpr : DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) ;
    public final EsperEPL2GrammarParser.onDeleteExpr_return onDeleteExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onDeleteExpr_return retval = new EsperEPL2GrammarParser.onDeleteExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DELETE133=null;
        Token WHERE135=null;
        EsperEPL2GrammarParser.onExprFrom_return onExprFrom134 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause136 = null;


        CommonTree DELETE133_tree=null;
        CommonTree WHERE135_tree=null;
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_DELETE=new RewriteRuleTokenStream(adaptor,"token DELETE");
        RewriteRuleSubtreeStream stream_whereClause=new RewriteRuleSubtreeStream(adaptor,"rule whereClause");
        RewriteRuleSubtreeStream stream_onExprFrom=new RewriteRuleSubtreeStream(adaptor,"rule onExprFrom");
         paraphrases.push("on-delete clause"); 
        try {
            // EsperEPL2Grammar.g:689:2: ( DELETE onExprFrom ( WHERE whereClause )? -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? ) )
            // EsperEPL2Grammar.g:689:4: DELETE onExprFrom ( WHERE whereClause )?
            {
            DELETE133=(Token)match(input,DELETE,FOLLOW_DELETE_in_onDeleteExpr2839); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DELETE.add(DELETE133);

            pushFollow(FOLLOW_onExprFrom_in_onDeleteExpr2843);
            onExprFrom134=onExprFrom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onExprFrom.add(onExprFrom134.getTree());
            // EsperEPL2Grammar.g:691:3: ( WHERE whereClause )?
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==WHERE) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    // EsperEPL2Grammar.g:691:4: WHERE whereClause
                    {
                    WHERE135=(Token)match(input,WHERE,FOLLOW_WHERE_in_onDeleteExpr2848); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE135);

                    pushFollow(FOLLOW_whereClause_in_onDeleteExpr2850);
                    whereClause136=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_whereClause.add(whereClause136.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: onExprFrom, whereClause
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 692:3: -> ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
            {
                // EsperEPL2Grammar.g:692:6: ^( ON_DELETE_EXPR onExprFrom ( whereClause )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_DELETE_EXPR, "ON_DELETE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_onExprFrom.nextTree());
                // EsperEPL2Grammar.g:692:34: ( whereClause )?
                if ( stream_whereClause.hasNext() ) {
                    adaptor.addChild(root_1, stream_whereClause.nextTree());

                }
                stream_whereClause.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onDeleteExpr"

    public static class onSetExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetExpr"
    // EsperEPL2Grammar.g:695:1: onSetExpr : SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) ;
    public final EsperEPL2GrammarParser.onSetExpr_return onSetExpr() throws RecognitionException {
        EsperEPL2GrammarParser.onSetExpr_return retval = new EsperEPL2GrammarParser.onSetExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SET137=null;
        Token COMMA139=null;
        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment138 = null;

        EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment140 = null;


        CommonTree SET137_tree=null;
        CommonTree COMMA139_tree=null;
        RewriteRuleTokenStream stream_SET=new RewriteRuleTokenStream(adaptor,"token SET");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_onSetAssignment=new RewriteRuleSubtreeStream(adaptor,"rule onSetAssignment");
         paraphrases.push("on-set clause"); 
        try {
            // EsperEPL2Grammar.g:698:2: ( SET onSetAssignment ( COMMA onSetAssignment )* -> ^( ON_SET_EXPR ( onSetAssignment )+ ) )
            // EsperEPL2Grammar.g:698:4: SET onSetAssignment ( COMMA onSetAssignment )*
            {
            SET137=(Token)match(input,SET,FOLLOW_SET_in_onSetExpr2890); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SET.add(SET137);

            pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2892);
            onSetAssignment138=onSetAssignment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment138.getTree());
            // EsperEPL2Grammar.g:698:24: ( COMMA onSetAssignment )*
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( (LA50_0==COMMA) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    // EsperEPL2Grammar.g:698:25: COMMA onSetAssignment
            	    {
            	    COMMA139=(Token)match(input,COMMA,FOLLOW_COMMA_in_onSetExpr2895); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA139);

            	    pushFollow(FOLLOW_onSetAssignment_in_onSetExpr2897);
            	    onSetAssignment140=onSetAssignment();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_onSetAssignment.add(onSetAssignment140.getTree());

            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);



            // AST REWRITE
            // elements: onSetAssignment
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 699:3: -> ^( ON_SET_EXPR ( onSetAssignment )+ )
            {
                // EsperEPL2Grammar.g:699:6: ^( ON_SET_EXPR ( onSetAssignment )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR, "ON_SET_EXPR"), root_1);

                if ( !(stream_onSetAssignment.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_onSetAssignment.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetAssignment.nextTree());

                }
                stream_onSetAssignment.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetExpr"

    public static class onSetAssignment_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onSetAssignment"
    // EsperEPL2Grammar.g:702:1: onSetAssignment : eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) ;
    public final EsperEPL2GrammarParser.onSetAssignment_return onSetAssignment() throws RecognitionException {
        EsperEPL2GrammarParser.onSetAssignment_return retval = new EsperEPL2GrammarParser.onSetAssignment_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS142=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty141 = null;

        EsperEPL2GrammarParser.expression_return expression143 = null;


        CommonTree EQUALS142_tree=null;
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:703:2: ( eventProperty EQUALS expression -> ^( ON_SET_EXPR_ITEM eventProperty expression ) )
            // EsperEPL2Grammar.g:703:4: eventProperty EQUALS expression
            {
            pushFollow(FOLLOW_eventProperty_in_onSetAssignment2922);
            eventProperty141=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty141.getTree());
            EQUALS142=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_onSetAssignment2924); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS142);

            pushFollow(FOLLOW_expression_in_onSetAssignment2926);
            expression143=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression143.getTree());


            // AST REWRITE
            // elements: expression, eventProperty
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 704:3: -> ^( ON_SET_EXPR_ITEM eventProperty expression )
            {
                // EsperEPL2Grammar.g:704:6: ^( ON_SET_EXPR_ITEM eventProperty expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_SET_EXPR_ITEM, "ON_SET_EXPR_ITEM"), root_1);

                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onSetAssignment"

    public static class onExprFrom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "onExprFrom"
    // EsperEPL2Grammar.g:707:1: onExprFrom : FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) ;
    public final EsperEPL2GrammarParser.onExprFrom_return onExprFrom() throws RecognitionException {
        EsperEPL2GrammarParser.onExprFrom_return retval = new EsperEPL2GrammarParser.onExprFrom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token i=null;
        Token FROM144=null;
        Token AS145=null;

        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree FROM144_tree=null;
        CommonTree AS145_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");

        try {
            // EsperEPL2Grammar.g:708:2: ( FROM n= IDENT ( AS i= IDENT | i= IDENT )? -> ^( ON_EXPR_FROM $n ( $i)? ) )
            // EsperEPL2Grammar.g:708:4: FROM n= IDENT ( AS i= IDENT | i= IDENT )?
            {
            FROM144=(Token)match(input,FROM,FOLLOW_FROM_in_onExprFrom2951); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FROM.add(FROM144);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:708:17: ( AS i= IDENT | i= IDENT )?
            int alt51=3;
            int LA51_0 = input.LA(1);

            if ( (LA51_0==AS) ) {
                alt51=1;
            }
            else if ( (LA51_0==IDENT) ) {
                alt51=2;
            }
            switch (alt51) {
                case 1 :
                    // EsperEPL2Grammar.g:708:18: AS i= IDENT
                    {
                    AS145=(Token)match(input,AS,FOLLOW_AS_in_onExprFrom2958); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS145);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2962); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:708:31: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_onExprFrom2968); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, n
            // token labels: n, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 709:3: -> ^( ON_EXPR_FROM $n ( $i)? )
            {
                // EsperEPL2Grammar.g:709:6: ^( ON_EXPR_FROM $n ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ON_EXPR_FROM, "ON_EXPR_FROM"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:709:24: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "onExprFrom"

    public static class createWindowExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExpr"
    // EsperEPL2Grammar.g:712:1: createWindowExpr : CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ) ;
    public final EsperEPL2GrammarParser.createWindowExpr_return createWindowExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExpr_return retval = new EsperEPL2GrammarParser.createWindowExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token i1=null;
        Token CREATE146=null;
        Token WINDOW147=null;
        Token DOT148=null;
        Token DOT150=null;
        Token AS152=null;
        Token LPAREN154=null;
        Token RPAREN156=null;
        Token WHERE157=null;
        EsperEPL2GrammarParser.viewExpression_return viewExpression149 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression151 = null;

        EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter153 = null;

        EsperEPL2GrammarParser.createColumnList_return createColumnList155 = null;

        EsperEPL2GrammarParser.expression_return expression158 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree i1_tree=null;
        CommonTree CREATE146_tree=null;
        CommonTree WINDOW147_tree=null;
        CommonTree DOT148_tree=null;
        CommonTree DOT150_tree=null;
        CommonTree AS152_tree=null;
        CommonTree LPAREN154_tree=null;
        CommonTree RPAREN156_tree=null;
        CommonTree WHERE157_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_INSERT=new RewriteRuleTokenStream(adaptor,"token INSERT");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_createWindowExprModelAfter=new RewriteRuleSubtreeStream(adaptor,"rule createWindowExprModelAfter");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        try {
            // EsperEPL2Grammar.g:713:2: ( CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )? -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) ) -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ) )
            // EsperEPL2Grammar.g:713:4: CREATE WINDOW i= IDENT ( DOT viewExpression ( DOT viewExpression )* )? (ru= RETAINUNION | ri= RETAININTERSECTION )? ( AS )? ( createWindowExprModelAfter | LPAREN createColumnList RPAREN ) (i1= INSERT ( WHERE expression )? )?
            {
            CREATE146=(Token)match(input,CREATE,FOLLOW_CREATE_in_createWindowExpr2996); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE146);

            WINDOW147=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_createWindowExpr2998); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW147);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createWindowExpr3002); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:713:26: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==DOT) ) {
                alt53=1;
            }
            switch (alt53) {
                case 1 :
                    // EsperEPL2Grammar.g:713:27: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT148=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3005); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT148);

                    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3007);
                    viewExpression149=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression149.getTree());
                    // EsperEPL2Grammar.g:713:46: ( DOT viewExpression )*
                    loop52:
                    do {
                        int alt52=2;
                        int LA52_0 = input.LA(1);

                        if ( (LA52_0==DOT) ) {
                            alt52=1;
                        }


                        switch (alt52) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:713:47: DOT viewExpression
                    	    {
                    	    DOT150=(Token)match(input,DOT,FOLLOW_DOT_in_createWindowExpr3010); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT150);

                    	    pushFollow(FOLLOW_viewExpression_in_createWindowExpr3012);
                    	    viewExpression151=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression151.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop52;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:713:70: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt54=3;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==RETAINUNION) ) {
                alt54=1;
            }
            else if ( (LA54_0==RETAININTERSECTION) ) {
                alt54=2;
            }
            switch (alt54) {
                case 1 :
                    // EsperEPL2Grammar.g:713:71: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_createWindowExpr3021); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:713:86: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_createWindowExpr3025); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:713:110: ( AS )?
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==AS) ) {
                alt55=1;
            }
            switch (alt55) {
                case 1 :
                    // EsperEPL2Grammar.g:713:110: AS
                    {
                    AS152=(Token)match(input,AS,FOLLOW_AS_in_createWindowExpr3029); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS152);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:714:5: ( createWindowExprModelAfter | LPAREN createColumnList RPAREN )
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==SELECT||LA56_0==IDENT||LA56_0==TICKED_STRING_LITERAL) ) {
                alt56=1;
            }
            else if ( (LA56_0==LPAREN) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    // EsperEPL2Grammar.g:715:6: createWindowExprModelAfter
                    {
                    pushFollow(FOLLOW_createWindowExprModelAfter_in_createWindowExpr3044);
                    createWindowExprModelAfter153=createWindowExprModelAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createWindowExprModelAfter.add(createWindowExprModelAfter153.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:716:10: LPAREN createColumnList RPAREN
                    {
                    LPAREN154=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createWindowExpr3059); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN154);

                    pushFollow(FOLLOW_createColumnList_in_createWindowExpr3061);
                    createColumnList155=createColumnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList155.getTree());
                    RPAREN156=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createWindowExpr3063); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN156);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:718:5: (i1= INSERT ( WHERE expression )? )?
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==INSERT) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    // EsperEPL2Grammar.g:718:6: i1= INSERT ( WHERE expression )?
                    {
                    i1=(Token)match(input,INSERT,FOLLOW_INSERT_in_createWindowExpr3080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INSERT.add(i1);

                    // EsperEPL2Grammar.g:718:16: ( WHERE expression )?
                    int alt57=2;
                    int LA57_0 = input.LA(1);

                    if ( (LA57_0==WHERE) ) {
                        alt57=1;
                    }
                    switch (alt57) {
                        case 1 :
                            // EsperEPL2Grammar.g:718:17: WHERE expression
                            {
                            WHERE157=(Token)match(input,WHERE,FOLLOW_WHERE_in_createWindowExpr3083); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_WHERE.add(WHERE157);

                            pushFollow(FOLLOW_expression_in_createWindowExpr3085);
                            expression158=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression158.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: ri, ru, viewExpression, INSERT, expression, createColumnList, viewExpression, i, createWindowExprModelAfter, createColumnList, ru, i, createWindowExprModelAfter, ri
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 719:3: -> {i1 != null}? ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) )
            if (i1 != null) {
                // EsperEPL2Grammar.g:719:20: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? ^( INSERT ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:719:44: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:719:60: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:719:65: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:719:70: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:719:98: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();
                // EsperEPL2Grammar.g:720:5: ^( INSERT ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot(stream_INSERT.nextNode(), root_2);

                // EsperEPL2Grammar.g:720:14: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 721:3: -> ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? )
            {
                // EsperEPL2Grammar.g:721:6: ^( CREATE_WINDOW_EXPR $i ( viewExpression )* ( $ru)? ( $ri)? ( createWindowExprModelAfter )? ( createColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_EXPR, "CREATE_WINDOW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:721:30: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:721:46: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:721:51: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();
                // EsperEPL2Grammar.g:721:56: ( createWindowExprModelAfter )?
                if ( stream_createWindowExprModelAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_createWindowExprModelAfter.nextTree());

                }
                stream_createWindowExprModelAfter.reset();
                // EsperEPL2Grammar.g:721:84: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExpr"

    public static class createWindowExprModelAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createWindowExprModelAfter"
    // EsperEPL2Grammar.g:724:1: createWindowExprModelAfter : ( SELECT createSelectionList FROM )? classIdentifier ;
    public final EsperEPL2GrammarParser.createWindowExprModelAfter_return createWindowExprModelAfter() throws RecognitionException {
        EsperEPL2GrammarParser.createWindowExprModelAfter_return retval = new EsperEPL2GrammarParser.createWindowExprModelAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SELECT159=null;
        Token FROM161=null;
        EsperEPL2GrammarParser.createSelectionList_return createSelectionList160 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier162 = null;


        CommonTree SELECT159_tree=null;
        CommonTree FROM161_tree=null;

        try {
            // EsperEPL2Grammar.g:725:2: ( ( SELECT createSelectionList FROM )? classIdentifier )
            // EsperEPL2Grammar.g:725:4: ( SELECT createSelectionList FROM )? classIdentifier
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:725:4: ( SELECT createSelectionList FROM )?
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( (LA59_0==SELECT) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    // EsperEPL2Grammar.g:725:5: SELECT createSelectionList FROM
                    {
                    SELECT159=(Token)match(input,SELECT,FOLLOW_SELECT_in_createWindowExprModelAfter3172); if (state.failed) return retval;
                    pushFollow(FOLLOW_createSelectionList_in_createWindowExprModelAfter3175);
                    createSelectionList160=createSelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, createSelectionList160.getTree());
                    FROM161=(Token)match(input,FROM,FOLLOW_FROM_in_createWindowExprModelAfter3177); if (state.failed) return retval;

                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_createWindowExprModelAfter3182);
            classIdentifier162=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier162.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createWindowExprModelAfter"

    public static class createIndexExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createIndexExpr"
    // EsperEPL2Grammar.g:728:1: createIndexExpr : CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN -> ^( CREATE_INDEX_EXPR $n $w columnList ) ;
    public final EsperEPL2GrammarParser.createIndexExpr_return createIndexExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createIndexExpr_return retval = new EsperEPL2GrammarParser.createIndexExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token w=null;
        Token CREATE163=null;
        Token INDEX164=null;
        Token ON165=null;
        Token LPAREN166=null;
        Token RPAREN168=null;
        EsperEPL2GrammarParser.columnList_return columnList167 = null;


        CommonTree n_tree=null;
        CommonTree w_tree=null;
        CommonTree CREATE163_tree=null;
        CommonTree INDEX164_tree=null;
        CommonTree ON165_tree=null;
        CommonTree LPAREN166_tree=null;
        CommonTree RPAREN168_tree=null;
        RewriteRuleTokenStream stream_INDEX=new RewriteRuleTokenStream(adaptor,"token INDEX");
        RewriteRuleTokenStream stream_ON=new RewriteRuleTokenStream(adaptor,"token ON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:729:2: ( CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN -> ^( CREATE_INDEX_EXPR $n $w columnList ) )
            // EsperEPL2Grammar.g:729:4: CREATE INDEX n= IDENT ON w= IDENT LPAREN columnList RPAREN
            {
            CREATE163=(Token)match(input,CREATE,FOLLOW_CREATE_in_createIndexExpr3195); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE163);

            INDEX164=(Token)match(input,INDEX,FOLLOW_INDEX_in_createIndexExpr3197); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INDEX.add(INDEX164);

            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3201); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            ON165=(Token)match(input,ON,FOLLOW_ON_in_createIndexExpr3203); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_ON.add(ON165);

            w=(Token)match(input,IDENT,FOLLOW_IDENT_in_createIndexExpr3207); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(w);

            LPAREN166=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createIndexExpr3209); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN166);

            pushFollow(FOLLOW_columnList_in_createIndexExpr3211);
            columnList167=columnList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_columnList.add(columnList167.getTree());
            RPAREN168=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createIndexExpr3213); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN168);



            // AST REWRITE
            // elements: w, columnList, n
            // token labels: w, n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_w=new RewriteRuleTokenStream(adaptor,"token w",w);
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 730:3: -> ^( CREATE_INDEX_EXPR $n $w columnList )
            {
                // EsperEPL2Grammar.g:730:6: ^( CREATE_INDEX_EXPR $n $w columnList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_INDEX_EXPR, "CREATE_INDEX_EXPR"), root_1);

                adaptor.addChild(root_1, stream_n.nextNode());
                adaptor.addChild(root_1, stream_w.nextNode());
                adaptor.addChild(root_1, stream_columnList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createIndexExpr"

    public static class createVariableExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createVariableExpr"
    // EsperEPL2Grammar.g:733:1: createVariableExpr : CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) ;
    public final EsperEPL2GrammarParser.createVariableExpr_return createVariableExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createVariableExpr_return retval = new EsperEPL2GrammarParser.createVariableExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token n=null;
        Token CREATE169=null;
        Token VARIABLE170=null;
        Token EQUALS172=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier171 = null;

        EsperEPL2GrammarParser.expression_return expression173 = null;


        CommonTree n_tree=null;
        CommonTree CREATE169_tree=null;
        CommonTree VARIABLE170_tree=null;
        CommonTree EQUALS172_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_VARIABLE=new RewriteRuleTokenStream(adaptor,"token VARIABLE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:734:2: ( CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )? -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? ) )
            // EsperEPL2Grammar.g:734:4: CREATE VARIABLE classIdentifier n= IDENT ( EQUALS expression )?
            {
            CREATE169=(Token)match(input,CREATE,FOLLOW_CREATE_in_createVariableExpr3240); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE169);

            VARIABLE170=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_createVariableExpr3242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_VARIABLE.add(VARIABLE170);

            pushFollow(FOLLOW_classIdentifier_in_createVariableExpr3244);
            classIdentifier171=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier171.getTree());
            n=(Token)match(input,IDENT,FOLLOW_IDENT_in_createVariableExpr3248); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(n);

            // EsperEPL2Grammar.g:734:44: ( EQUALS expression )?
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==EQUALS) ) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    // EsperEPL2Grammar.g:734:45: EQUALS expression
                    {
                    EQUALS172=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_createVariableExpr3251); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS172);

                    pushFollow(FOLLOW_expression_in_createVariableExpr3253);
                    expression173=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression173.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, n, classIdentifier
            // token labels: n
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_n=new RewriteRuleTokenStream(adaptor,"token n",n);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 735:3: -> ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
            {
                // EsperEPL2Grammar.g:735:6: ^( CREATE_VARIABLE_EXPR classIdentifier $n ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_VARIABLE_EXPR, "CREATE_VARIABLE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                adaptor.addChild(root_1, stream_n.nextNode());
                // EsperEPL2Grammar.g:735:48: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createVariableExpr"

    public static class createColumnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createColumnList"
    // EsperEPL2Grammar.g:738:1: createColumnList : createColumnListElement ( COMMA createColumnListElement )* -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ ) ;
    public final EsperEPL2GrammarParser.createColumnList_return createColumnList() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnList_return retval = new EsperEPL2GrammarParser.createColumnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA175=null;
        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement174 = null;

        EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement176 = null;


        CommonTree COMMA175_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createColumnListElement=new RewriteRuleSubtreeStream(adaptor,"rule createColumnListElement");
         paraphrases.push("column list"); 
        try {
            // EsperEPL2Grammar.g:741:2: ( createColumnListElement ( COMMA createColumnListElement )* -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ ) )
            // EsperEPL2Grammar.g:741:4: createColumnListElement ( COMMA createColumnListElement )*
            {
            pushFollow(FOLLOW_createColumnListElement_in_createColumnList3295);
            createColumnListElement174=createColumnListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement174.getTree());
            // EsperEPL2Grammar.g:741:28: ( COMMA createColumnListElement )*
            loop61:
            do {
                int alt61=2;
                int LA61_0 = input.LA(1);

                if ( (LA61_0==COMMA) ) {
                    alt61=1;
                }


                switch (alt61) {
            	case 1 :
            	    // EsperEPL2Grammar.g:741:29: COMMA createColumnListElement
            	    {
            	    COMMA175=(Token)match(input,COMMA,FOLLOW_COMMA_in_createColumnList3298); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA175);

            	    pushFollow(FOLLOW_createColumnListElement_in_createColumnList3300);
            	    createColumnListElement176=createColumnListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createColumnListElement.add(createColumnListElement176.getTree());

            	    }
            	    break;

            	default :
            	    break loop61;
                }
            } while (true);



            // AST REWRITE
            // elements: createColumnListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 742:3: -> ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ )
            {
                // EsperEPL2Grammar.g:742:6: ^( CREATE_COL_TYPE_LIST ( createColumnListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE_LIST, "CREATE_COL_TYPE_LIST"), root_1);

                if ( !(stream_createColumnListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createColumnListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnListElement.nextTree());

                }
                stream_createColumnListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createColumnList"

    public static class createColumnListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createColumnListElement"
    // EsperEPL2Grammar.g:745:1: createColumnListElement : name= IDENT ( classIdentifier (b= LBRACK RBRACK )? ) -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? ) ;
    public final EsperEPL2GrammarParser.createColumnListElement_return createColumnListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createColumnListElement_return retval = new EsperEPL2GrammarParser.createColumnListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token name=null;
        Token b=null;
        Token RBRACK178=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier177 = null;


        CommonTree name_tree=null;
        CommonTree b_tree=null;
        CommonTree RBRACK178_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
        try {
            // EsperEPL2Grammar.g:746:2: (name= IDENT ( classIdentifier (b= LBRACK RBRACK )? ) -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? ) )
            // EsperEPL2Grammar.g:746:7: name= IDENT ( classIdentifier (b= LBRACK RBRACK )? )
            {
            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createColumnListElement3330); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            // EsperEPL2Grammar.g:746:18: ( classIdentifier (b= LBRACK RBRACK )? )
            // EsperEPL2Grammar.g:746:19: classIdentifier (b= LBRACK RBRACK )?
            {
            pushFollow(FOLLOW_classIdentifier_in_createColumnListElement3333);
            classIdentifier177=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier177.getTree());
            // EsperEPL2Grammar.g:746:35: (b= LBRACK RBRACK )?
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( (LA62_0==LBRACK) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    // EsperEPL2Grammar.g:746:36: b= LBRACK RBRACK
                    {
                    b=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_createColumnListElement3338); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(b);

                    RBRACK178=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_createColumnListElement3340); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK178);


                    }
                    break;

            }


            }



            // AST REWRITE
            // elements: name, classIdentifier, b
            // token labels: b, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_b=new RewriteRuleTokenStream(adaptor,"token b",b);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 747:3: -> ^( CREATE_COL_TYPE $name classIdentifier ( $b)? )
            {
                // EsperEPL2Grammar.g:747:6: ^( CREATE_COL_TYPE $name classIdentifier ( $b)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_COL_TYPE, "CREATE_COL_TYPE"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:747:46: ( $b)?
                if ( stream_b.hasNext() ) {
                    adaptor.addChild(root_1, stream_b.nextNode());

                }
                stream_b.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createColumnListElement"

    public static class createSelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionList"
    // EsperEPL2Grammar.g:750:1: createSelectionList : createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) ;
    public final EsperEPL2GrammarParser.createSelectionList_return createSelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionList_return retval = new EsperEPL2GrammarParser.createSelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA180=null;
        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement179 = null;

        EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement181 = null;


        CommonTree COMMA180_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_createSelectionListElement=new RewriteRuleSubtreeStream(adaptor,"rule createSelectionListElement");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:753:2: ( createSelectionListElement ( COMMA createSelectionListElement )* -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ ) )
            // EsperEPL2Grammar.g:753:4: createSelectionListElement ( COMMA createSelectionListElement )*
            {
            pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3384);
            createSelectionListElement179=createSelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement179.getTree());
            // EsperEPL2Grammar.g:753:31: ( COMMA createSelectionListElement )*
            loop63:
            do {
                int alt63=2;
                int LA63_0 = input.LA(1);

                if ( (LA63_0==COMMA) ) {
                    alt63=1;
                }


                switch (alt63) {
            	case 1 :
            	    // EsperEPL2Grammar.g:753:32: COMMA createSelectionListElement
            	    {
            	    COMMA180=(Token)match(input,COMMA,FOLLOW_COMMA_in_createSelectionList3387); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA180);

            	    pushFollow(FOLLOW_createSelectionListElement_in_createSelectionList3389);
            	    createSelectionListElement181=createSelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_createSelectionListElement.add(createSelectionListElement181.getTree());

            	    }
            	    break;

            	default :
            	    break loop63;
                }
            } while (true);



            // AST REWRITE
            // elements: createSelectionListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 754:3: -> ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
            {
                // EsperEPL2Grammar.g:754:6: ^( CREATE_WINDOW_SELECT_EXPR ( createSelectionListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_WINDOW_SELECT_EXPR, "CREATE_WINDOW_SELECT_EXPR"), root_1);

                if ( !(stream_createSelectionListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_createSelectionListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_createSelectionListElement.nextTree());

                }
                stream_createSelectionListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionList"

    public static class createSelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSelectionListElement"
    // EsperEPL2Grammar.g:757:1: createSelectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) );
    public final EsperEPL2GrammarParser.createSelectionListElement_return createSelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.createSelectionListElement_return retval = new EsperEPL2GrammarParser.createSelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token AS183=null;
        Token AS185=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty182 = null;

        EsperEPL2GrammarParser.constant_return constant184 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree AS183_tree=null;
        CommonTree AS185_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_constant=new RewriteRuleSubtreeStream(adaptor,"rule constant");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:758:2: (s= STAR -> WILDCARD_SELECT[$s] | eventProperty ( AS i= IDENT )? -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? ) | constant AS i= IDENT -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? ) )
            int alt65=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt65=1;
                }
                break;
            case WINDOW:
            case ESCAPE:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PRIOR:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt65=2;
                }
                break;
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case NUM_DOUBLE:
            case PLUS:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt65=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 65, 0, input);

                throw nvae;
            }

            switch (alt65) {
                case 1 :
                    // EsperEPL2Grammar.g:758:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_createSelectionListElement3418); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 759:3: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:760:4: eventProperty ( AS i= IDENT )?
                    {
                    pushFollow(FOLLOW_eventProperty_in_createSelectionListElement3430);
                    eventProperty182=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty182.getTree());
                    // EsperEPL2Grammar.g:760:18: ( AS i= IDENT )?
                    int alt64=2;
                    int LA64_0 = input.LA(1);

                    if ( (LA64_0==AS) ) {
                        alt64=1;
                    }
                    switch (alt64) {
                        case 1 :
                            // EsperEPL2Grammar.g:760:19: AS i= IDENT
                            {
                            AS183=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3433); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS183);

                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3437); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: i, eventProperty
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 761:3: -> ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                    {
                        // EsperEPL2Grammar.g:761:6: ^( SELECTION_ELEMENT_EXPR eventProperty ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());
                        // EsperEPL2Grammar.g:761:45: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:762:4: constant AS i= IDENT
                    {
                    pushFollow(FOLLOW_constant_in_createSelectionListElement3458);
                    constant184=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_constant.add(constant184.getTree());
                    AS185=(Token)match(input,AS,FOLLOW_AS_in_createSelectionListElement3460); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS185);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSelectionListElement3464); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);



                    // AST REWRITE
                    // elements: constant, i
                    // token labels: i
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 763:3: -> ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                    {
                        // EsperEPL2Grammar.g:763:6: ^( SELECTION_ELEMENT_EXPR constant ( $i)? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_constant.nextTree());
                        // EsperEPL2Grammar.g:763:40: ( $i)?
                        if ( stream_i.hasNext() ) {
                            adaptor.addChild(root_1, stream_i.nextNode());

                        }
                        stream_i.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSelectionListElement"

    public static class createSchemaExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "createSchemaExpr"
    // EsperEPL2Grammar.g:766:1: createSchemaExpr : CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? ) -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) ) -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) ) -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? ) ;
    public final EsperEPL2GrammarParser.createSchemaExpr_return createSchemaExpr() throws RecognitionException {
        EsperEPL2GrammarParser.createSchemaExpr_return retval = new EsperEPL2GrammarParser.createSchemaExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token keyword=null;
        Token name=null;
        Token inherits=null;
        Token CREATE186=null;
        Token SCHEMA187=null;
        Token AS188=null;
        Token LPAREN190=null;
        Token RPAREN192=null;
        EsperEPL2GrammarParser.variantList_return variantList189 = null;

        EsperEPL2GrammarParser.createColumnList_return createColumnList191 = null;

        EsperEPL2GrammarParser.columnList_return columnList193 = null;


        CommonTree keyword_tree=null;
        CommonTree name_tree=null;
        CommonTree inherits_tree=null;
        CommonTree CREATE186_tree=null;
        CommonTree SCHEMA187_tree=null;
        CommonTree AS188_tree=null;
        CommonTree LPAREN190_tree=null;
        CommonTree RPAREN192_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_CREATE=new RewriteRuleTokenStream(adaptor,"token CREATE");
        RewriteRuleTokenStream stream_SCHEMA=new RewriteRuleTokenStream(adaptor,"token SCHEMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_createColumnList=new RewriteRuleSubtreeStream(adaptor,"rule createColumnList");
        RewriteRuleSubtreeStream stream_variantList=new RewriteRuleSubtreeStream(adaptor,"rule variantList");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
        try {
            // EsperEPL2Grammar.g:767:2: ( CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? ) -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) ) -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) ) -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? ) )
            // EsperEPL2Grammar.g:767:4: CREATE (keyword= IDENT )? SCHEMA name= IDENT ( AS )? ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? )
            {
            CREATE186=(Token)match(input,CREATE,FOLLOW_CREATE_in_createSchemaExpr3489); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_CREATE.add(CREATE186);

            // EsperEPL2Grammar.g:767:18: (keyword= IDENT )?
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==IDENT) ) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    // EsperEPL2Grammar.g:767:18: keyword= IDENT
                    {
                    keyword=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3493); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(keyword);


                    }
                    break;

            }

            SCHEMA187=(Token)match(input,SCHEMA,FOLLOW_SCHEMA_in_createSchemaExpr3496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SCHEMA.add(SCHEMA187);

            name=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(name);

            // EsperEPL2Grammar.g:767:44: ( AS )?
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==AS) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    // EsperEPL2Grammar.g:767:44: AS
                    {
                    AS188=(Token)match(input,AS,FOLLOW_AS_in_createSchemaExpr3502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS188);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:768:5: ( variantList | LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )? )
            int alt70=2;
            int LA70_0 = input.LA(1);

            if ( (LA70_0==IDENT||LA70_0==STAR||LA70_0==TICKED_STRING_LITERAL) ) {
                alt70=1;
            }
            else if ( (LA70_0==LPAREN) ) {
                alt70=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 70, 0, input);

                throw nvae;
            }
            switch (alt70) {
                case 1 :
                    // EsperEPL2Grammar.g:769:4: variantList
                    {
                    pushFollow(FOLLOW_variantList_in_createSchemaExpr3515);
                    variantList189=variantList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_variantList.add(variantList189.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:770:10: LPAREN ( createColumnList )? RPAREN (inherits= IDENT columnList )?
                    {
                    LPAREN190=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_createSchemaExpr3526); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN190);

                    // EsperEPL2Grammar.g:770:17: ( createColumnList )?
                    int alt68=2;
                    int LA68_0 = input.LA(1);

                    if ( (LA68_0==IDENT) ) {
                        alt68=1;
                    }
                    switch (alt68) {
                        case 1 :
                            // EsperEPL2Grammar.g:770:17: createColumnList
                            {
                            pushFollow(FOLLOW_createColumnList_in_createSchemaExpr3528);
                            createColumnList191=createColumnList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_createColumnList.add(createColumnList191.getTree());

                            }
                            break;

                    }

                    RPAREN192=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_createSchemaExpr3531); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN192);

                    // EsperEPL2Grammar.g:770:42: (inherits= IDENT columnList )?
                    int alt69=2;
                    int LA69_0 = input.LA(1);

                    if ( (LA69_0==IDENT) ) {
                        alt69=1;
                    }
                    switch (alt69) {
                        case 1 :
                            // EsperEPL2Grammar.g:770:43: inherits= IDENT columnList
                            {
                            inherits=(Token)match(input,IDENT,FOLLOW_IDENT_in_createSchemaExpr3536); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(inherits);

                            pushFollow(FOLLOW_columnList_in_createSchemaExpr3538);
                            columnList193=columnList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_columnList.add(columnList193.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: createColumnList, columnList, variantList, name, createColumnList, keyword, variantList, inherits, name, name
            // token labels: inherits, keyword, name
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_inherits=new RewriteRuleTokenStream(adaptor,"token inherits",inherits);
            RewriteRuleTokenStream stream_keyword=new RewriteRuleTokenStream(adaptor,"token keyword",keyword);
            RewriteRuleTokenStream stream_name=new RewriteRuleTokenStream(adaptor,"token name",name);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 772:3: -> {$inherits != null}? ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) )
            if (inherits != null) {
                // EsperEPL2Grammar.g:772:27: ^( CREATE_SCHEMA_EXPR $name ( createColumnList )? ^( CREATE_SCHEMA_EXPR_INH $inherits columnList ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                // EsperEPL2Grammar.g:772:54: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();
                // EsperEPL2Grammar.g:772:72: ^( CREATE_SCHEMA_EXPR_INH $inherits columnList )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_INH, "CREATE_SCHEMA_EXPR_INH"), root_2);

                adaptor.addChild(root_2, stream_inherits.nextNode());
                adaptor.addChild(root_2, stream_columnList.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 773:3: -> {$keyword != null}? ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) )
            if (keyword != null) {
                // EsperEPL2Grammar.g:773:26: ^( CREATE_SCHEMA_EXPR $name variantList ^( CREATE_SCHEMA_EXPR_QUAL $keyword) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                adaptor.addChild(root_1, stream_variantList.nextTree());
                // EsperEPL2Grammar.g:773:65: ^( CREATE_SCHEMA_EXPR_QUAL $keyword)
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR_QUAL, "CREATE_SCHEMA_EXPR_QUAL"), root_2);

                adaptor.addChild(root_2, stream_keyword.nextNode());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 774:3: -> ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? )
            {
                // EsperEPL2Grammar.g:774:6: ^( CREATE_SCHEMA_EXPR $name ( variantList )? ( createColumnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CREATE_SCHEMA_EXPR, "CREATE_SCHEMA_EXPR"), root_1);

                adaptor.addChild(root_1, stream_name.nextNode());
                // EsperEPL2Grammar.g:774:33: ( variantList )?
                if ( stream_variantList.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantList.nextTree());

                }
                stream_variantList.reset();
                // EsperEPL2Grammar.g:774:46: ( createColumnList )?
                if ( stream_createColumnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_createColumnList.nextTree());

                }
                stream_createColumnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "createSchemaExpr"

    public static class variantList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variantList"
    // EsperEPL2Grammar.g:777:1: variantList : variantListElement ( COMMA variantListElement )* -> ^( VARIANT_LIST ( variantListElement )+ ) ;
    public final EsperEPL2GrammarParser.variantList_return variantList() throws RecognitionException {
        EsperEPL2GrammarParser.variantList_return retval = new EsperEPL2GrammarParser.variantList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA195=null;
        EsperEPL2GrammarParser.variantListElement_return variantListElement194 = null;

        EsperEPL2GrammarParser.variantListElement_return variantListElement196 = null;


        CommonTree COMMA195_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_variantListElement=new RewriteRuleSubtreeStream(adaptor,"rule variantListElement");
        try {
            // EsperEPL2Grammar.g:778:2: ( variantListElement ( COMMA variantListElement )* -> ^( VARIANT_LIST ( variantListElement )+ ) )
            // EsperEPL2Grammar.g:778:4: variantListElement ( COMMA variantListElement )*
            {
            pushFollow(FOLLOW_variantListElement_in_variantList3627);
            variantListElement194=variantListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement194.getTree());
            // EsperEPL2Grammar.g:778:23: ( COMMA variantListElement )*
            loop71:
            do {
                int alt71=2;
                int LA71_0 = input.LA(1);

                if ( (LA71_0==COMMA) ) {
                    alt71=1;
                }


                switch (alt71) {
            	case 1 :
            	    // EsperEPL2Grammar.g:778:24: COMMA variantListElement
            	    {
            	    COMMA195=(Token)match(input,COMMA,FOLLOW_COMMA_in_variantList3630); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA195);

            	    pushFollow(FOLLOW_variantListElement_in_variantList3632);
            	    variantListElement196=variantListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_variantListElement.add(variantListElement196.getTree());

            	    }
            	    break;

            	default :
            	    break loop71;
                }
            } while (true);



            // AST REWRITE
            // elements: variantListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 779:3: -> ^( VARIANT_LIST ( variantListElement )+ )
            {
                // EsperEPL2Grammar.g:779:6: ^( VARIANT_LIST ( variantListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VARIANT_LIST, "VARIANT_LIST"), root_1);

                if ( !(stream_variantListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_variantListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_variantListElement.nextTree());

                }
                stream_variantListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantList"

    public static class variantListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "variantListElement"
    // EsperEPL2Grammar.g:782:1: variantListElement : ( STAR | classIdentifier );
    public final EsperEPL2GrammarParser.variantListElement_return variantListElement() throws RecognitionException {
        EsperEPL2GrammarParser.variantListElement_return retval = new EsperEPL2GrammarParser.variantListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR197=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier198 = null;


        CommonTree STAR197_tree=null;

        try {
            // EsperEPL2Grammar.g:783:2: ( STAR | classIdentifier )
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==STAR) ) {
                alt72=1;
            }
            else if ( (LA72_0==IDENT||LA72_0==TICKED_STRING_LITERAL) ) {
                alt72=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 72, 0, input);

                throw nvae;
            }
            switch (alt72) {
                case 1 :
                    // EsperEPL2Grammar.g:783:7: STAR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STAR197=(Token)match(input,STAR,FOLLOW_STAR_in_variantListElement3659); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STAR197_tree = (CommonTree)adaptor.create(STAR197);
                    root_0 = (CommonTree)adaptor.becomeRoot(STAR197_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:784:4: classIdentifier
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_classIdentifier_in_variantListElement3665);
                    classIdentifier198=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier198.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "variantListElement"

    public static class insertIntoExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "insertIntoExpr"
    // EsperEPL2Grammar.g:787:1: insertIntoExpr : (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) ;
    public final EsperEPL2GrammarParser.insertIntoExpr_return insertIntoExpr() throws RecognitionException {
        EsperEPL2GrammarParser.insertIntoExpr_return retval = new EsperEPL2GrammarParser.insertIntoExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token INTO199=null;
        Token LPAREN200=null;
        Token RPAREN202=null;
        EsperEPL2GrammarParser.columnList_return columnList201 = null;


        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree INTO199_tree=null;
        CommonTree LPAREN200_tree=null;
        CommonTree RPAREN202_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_INTO=new RewriteRuleTokenStream(adaptor,"token INTO");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_columnList=new RewriteRuleSubtreeStream(adaptor,"rule columnList");
         paraphrases.push("insert-into clause"); 
        try {
            // EsperEPL2Grammar.g:790:2: ( (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )? -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? ) )
            // EsperEPL2Grammar.g:790:4: (s= ISTREAM | s= RSTREAM )? INTO i= IDENT ( LPAREN columnList RPAREN )?
            {
            // EsperEPL2Grammar.g:790:4: (s= ISTREAM | s= RSTREAM )?
            int alt73=3;
            int LA73_0 = input.LA(1);

            if ( (LA73_0==ISTREAM) ) {
                alt73=1;
            }
            else if ( (LA73_0==RSTREAM) ) {
                alt73=2;
            }
            switch (alt73) {
                case 1 :
                    // EsperEPL2Grammar.g:790:5: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_insertIntoExpr3690); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:790:17: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_insertIntoExpr3696); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;

            }

            INTO199=(Token)match(input,INTO,FOLLOW_INTO_in_insertIntoExpr3700); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_INTO.add(INTO199);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_insertIntoExpr3704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:790:42: ( LPAREN columnList RPAREN )?
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LPAREN) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    // EsperEPL2Grammar.g:790:43: LPAREN columnList RPAREN
                    {
                    LPAREN200=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_insertIntoExpr3707); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN200);

                    pushFollow(FOLLOW_columnList_in_insertIntoExpr3709);
                    columnList201=columnList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_columnList.add(columnList201.getTree());
                    RPAREN202=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_insertIntoExpr3711); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN202);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s, columnList
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 791:3: -> ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
            {
                // EsperEPL2Grammar.g:791:6: ^( INSERTINTO_EXPR ( $s)? $i ( columnList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INSERTINTO_EXPR, "INSERTINTO_EXPR"), root_1);

                // EsperEPL2Grammar.g:791:24: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:791:31: ( columnList )?
                if ( stream_columnList.hasNext() ) {
                    adaptor.addChild(root_1, stream_columnList.nextTree());

                }
                stream_columnList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "insertIntoExpr"

    public static class columnList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "columnList"
    // EsperEPL2Grammar.g:794:1: columnList : IDENT ( COMMA IDENT )* -> ^( EXPRCOL ( IDENT )* ) ;
    public final EsperEPL2GrammarParser.columnList_return columnList() throws RecognitionException {
        EsperEPL2GrammarParser.columnList_return retval = new EsperEPL2GrammarParser.columnList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT203=null;
        Token COMMA204=null;
        Token IDENT205=null;

        CommonTree IDENT203_tree=null;
        CommonTree COMMA204_tree=null;
        CommonTree IDENT205_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");

        try {
            // EsperEPL2Grammar.g:795:2: ( IDENT ( COMMA IDENT )* -> ^( EXPRCOL ( IDENT )* ) )
            // EsperEPL2Grammar.g:795:5: IDENT ( COMMA IDENT )*
            {
            IDENT203=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3745); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(IDENT203);

            // EsperEPL2Grammar.g:795:11: ( COMMA IDENT )*
            loop75:
            do {
                int alt75=2;
                int LA75_0 = input.LA(1);

                if ( (LA75_0==COMMA) ) {
                    alt75=1;
                }


                switch (alt75) {
            	case 1 :
            	    // EsperEPL2Grammar.g:795:12: COMMA IDENT
            	    {
            	    COMMA204=(Token)match(input,COMMA,FOLLOW_COMMA_in_columnList3748); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA204);

            	    IDENT205=(Token)match(input,IDENT,FOLLOW_IDENT_in_columnList3750); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_IDENT.add(IDENT205);


            	    }
            	    break;

            	default :
            	    break loop75;
                }
            } while (true);



            // AST REWRITE
            // elements: IDENT
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 796:3: -> ^( EXPRCOL ( IDENT )* )
            {
                // EsperEPL2Grammar.g:796:6: ^( EXPRCOL ( IDENT )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXPRCOL, "EXPRCOL"), root_1);

                // EsperEPL2Grammar.g:796:16: ( IDENT )*
                while ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "columnList"

    public static class fromClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "fromClause"
    // EsperEPL2Grammar.g:799:1: fromClause : streamExpression ( regularJoin | outerJoinList ) ;
    public final EsperEPL2GrammarParser.fromClause_return fromClause() throws RecognitionException {
        EsperEPL2GrammarParser.fromClause_return retval = new EsperEPL2GrammarParser.fromClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.streamExpression_return streamExpression206 = null;

        EsperEPL2GrammarParser.regularJoin_return regularJoin207 = null;

        EsperEPL2GrammarParser.outerJoinList_return outerJoinList208 = null;



         paraphrases.push("from clause"); 
        try {
            // EsperEPL2Grammar.g:802:2: ( streamExpression ( regularJoin | outerJoinList ) )
            // EsperEPL2Grammar.g:802:4: streamExpression ( regularJoin | outerJoinList )
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_streamExpression_in_fromClause3788);
            streamExpression206=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression206.getTree());
            // EsperEPL2Grammar.g:802:21: ( regularJoin | outerJoinList )
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( (LA76_0==EOF||LA76_0==WHERE||(LA76_0>=GROUP && LA76_0<=HAVING)||LA76_0==OUTPUT||LA76_0==ORDER||LA76_0==ROW_LIMIT_EXPR||LA76_0==MATCH_RECOGNIZE||LA76_0==FOR||LA76_0==COMMA) ) {
                alt76=1;
            }
            else if ( ((LA76_0>=INNER && LA76_0<=FULL)) ) {
                alt76=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 76, 0, input);

                throw nvae;
            }
            switch (alt76) {
                case 1 :
                    // EsperEPL2Grammar.g:802:22: regularJoin
                    {
                    pushFollow(FOLLOW_regularJoin_in_fromClause3791);
                    regularJoin207=regularJoin();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, regularJoin207.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:802:36: outerJoinList
                    {
                    pushFollow(FOLLOW_outerJoinList_in_fromClause3795);
                    outerJoinList208=outerJoinList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinList208.getTree());

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "fromClause"

    public static class regularJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "regularJoin"
    // EsperEPL2Grammar.g:805:1: regularJoin : ( COMMA streamExpression )* ;
    public final EsperEPL2GrammarParser.regularJoin_return regularJoin() throws RecognitionException {
        EsperEPL2GrammarParser.regularJoin_return retval = new EsperEPL2GrammarParser.regularJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA209=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression210 = null;


        CommonTree COMMA209_tree=null;

        try {
            // EsperEPL2Grammar.g:806:2: ( ( COMMA streamExpression )* )
            // EsperEPL2Grammar.g:806:4: ( COMMA streamExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:806:4: ( COMMA streamExpression )*
            loop77:
            do {
                int alt77=2;
                int LA77_0 = input.LA(1);

                if ( (LA77_0==COMMA) ) {
                    alt77=1;
                }


                switch (alt77) {
            	case 1 :
            	    // EsperEPL2Grammar.g:806:5: COMMA streamExpression
            	    {
            	    COMMA209=(Token)match(input,COMMA,FOLLOW_COMMA_in_regularJoin3809); if (state.failed) return retval;
            	    pushFollow(FOLLOW_streamExpression_in_regularJoin3812);
            	    streamExpression210=streamExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamExpression210.getTree());

            	    }
            	    break;

            	default :
            	    break loop77;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "regularJoin"

    public static class outerJoinList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinList"
    // EsperEPL2Grammar.g:809:1: outerJoinList : outerJoin ( outerJoin )* ;
    public final EsperEPL2GrammarParser.outerJoinList_return outerJoinList() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinList_return retval = new EsperEPL2GrammarParser.outerJoinList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin211 = null;

        EsperEPL2GrammarParser.outerJoin_return outerJoin212 = null;



        try {
            // EsperEPL2Grammar.g:810:2: ( outerJoin ( outerJoin )* )
            // EsperEPL2Grammar.g:810:4: outerJoin ( outerJoin )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_outerJoin_in_outerJoinList3826);
            outerJoin211=outerJoin();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin211.getTree());
            // EsperEPL2Grammar.g:810:14: ( outerJoin )*
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0>=INNER && LA78_0<=FULL)) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    // EsperEPL2Grammar.g:810:15: outerJoin
            	    {
            	    pushFollow(FOLLOW_outerJoin_in_outerJoinList3829);
            	    outerJoin212=outerJoin();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoin212.getTree());

            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinList"

    public static class outerJoin_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoin"
    // EsperEPL2Grammar.g:813:1: outerJoin : ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) ;
    public final EsperEPL2GrammarParser.outerJoin_return outerJoin() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoin_return retval = new EsperEPL2GrammarParser.outerJoin_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token tl=null;
        Token tr=null;
        Token tf=null;
        Token i=null;
        Token OUTER213=null;
        Token JOIN214=null;
        EsperEPL2GrammarParser.streamExpression_return streamExpression215 = null;

        EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent216 = null;


        CommonTree tl_tree=null;
        CommonTree tr_tree=null;
        CommonTree tf_tree=null;
        CommonTree i_tree=null;
        CommonTree OUTER213_tree=null;
        CommonTree JOIN214_tree=null;
        RewriteRuleTokenStream stream_OUTER=new RewriteRuleTokenStream(adaptor,"token OUTER");
        RewriteRuleTokenStream stream_RIGHT=new RewriteRuleTokenStream(adaptor,"token RIGHT");
        RewriteRuleTokenStream stream_FULL=new RewriteRuleTokenStream(adaptor,"token FULL");
        RewriteRuleTokenStream stream_INNER=new RewriteRuleTokenStream(adaptor,"token INNER");
        RewriteRuleTokenStream stream_LEFT=new RewriteRuleTokenStream(adaptor,"token LEFT");
        RewriteRuleTokenStream stream_JOIN=new RewriteRuleTokenStream(adaptor,"token JOIN");
        RewriteRuleSubtreeStream stream_streamExpression=new RewriteRuleSubtreeStream(adaptor,"rule streamExpression");
        RewriteRuleSubtreeStream stream_outerJoinIdent=new RewriteRuleSubtreeStream(adaptor,"rule outerJoinIdent");
         paraphrases.push("outer join"); 
        try {
            // EsperEPL2Grammar.g:816:2: ( ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent ) -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent ) -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent ) -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent ) )
            // EsperEPL2Grammar.g:816:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) ) JOIN streamExpression outerJoinIdent
            {
            // EsperEPL2Grammar.g:816:4: ( ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )? | (i= INNER ) )
            int alt81=2;
            int LA81_0 = input.LA(1);

            if ( ((LA81_0>=JOIN && LA81_0<=FULL)) ) {
                alt81=1;
            }
            else if ( (LA81_0==INNER) ) {
                alt81=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 81, 0, input);

                throw nvae;
            }
            switch (alt81) {
                case 1 :
                    // EsperEPL2Grammar.g:817:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    {
                    // EsperEPL2Grammar.g:817:14: ( (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER )?
                    int alt80=2;
                    int LA80_0 = input.LA(1);

                    if ( ((LA80_0>=LEFT && LA80_0<=FULL)) ) {
                        alt80=1;
                    }
                    switch (alt80) {
                        case 1 :
                            // EsperEPL2Grammar.g:817:15: (tl= LEFT | tr= RIGHT | tf= FULL ) OUTER
                            {
                            // EsperEPL2Grammar.g:817:15: (tl= LEFT | tr= RIGHT | tf= FULL )
                            int alt79=3;
                            switch ( input.LA(1) ) {
                            case LEFT:
                                {
                                alt79=1;
                                }
                                break;
                            case RIGHT:
                                {
                                alt79=2;
                                }
                                break;
                            case FULL:
                                {
                                alt79=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 79, 0, input);

                                throw nvae;
                            }

                            switch (alt79) {
                                case 1 :
                                    // EsperEPL2Grammar.g:817:16: tl= LEFT
                                    {
                                    tl=(Token)match(input,LEFT,FOLLOW_LEFT_in_outerJoin3872); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LEFT.add(tl);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:817:24: tr= RIGHT
                                    {
                                    tr=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_outerJoin3876); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RIGHT.add(tr);


                                    }
                                    break;
                                case 3 :
                                    // EsperEPL2Grammar.g:817:33: tf= FULL
                                    {
                                    tf=(Token)match(input,FULL,FOLLOW_FULL_in_outerJoin3880); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_FULL.add(tf);


                                    }
                                    break;

                            }

                            OUTER213=(Token)match(input,OUTER,FOLLOW_OUTER_in_outerJoin3883); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OUTER.add(OUTER213);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:818:14: (i= INNER )
                    {
                    // EsperEPL2Grammar.g:818:14: (i= INNER )
                    // EsperEPL2Grammar.g:818:15: i= INNER
                    {
                    i=(Token)match(input,INNER,FOLLOW_INNER_in_outerJoin3904); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_INNER.add(i);


                    }


                    }
                    break;

            }

            JOIN214=(Token)match(input,JOIN,FOLLOW_JOIN_in_outerJoin3918); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_JOIN.add(JOIN214);

            pushFollow(FOLLOW_streamExpression_in_outerJoin3920);
            streamExpression215=streamExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_streamExpression.add(streamExpression215.getTree());
            pushFollow(FOLLOW_outerJoinIdent_in_outerJoin3922);
            outerJoinIdent216=outerJoinIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_outerJoinIdent.add(outerJoinIdent216.getTree());


            // AST REWRITE
            // elements: outerJoinIdent, streamExpression, outerJoinIdent, streamExpression, outerJoinIdent, streamExpression, outerJoinIdent, streamExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 820:3: -> {$i != null}? streamExpression ^( INNERJOIN_EXPR outerJoinIdent )
            if (i != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:820:37: ^( INNERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(INNERJOIN_EXPR, "INNERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 821:3: -> {$tl != null}? streamExpression ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
            if (tl != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:821:38: ^( LEFT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LEFT_OUTERJOIN_EXPR, "LEFT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 822:3: -> {$tr != null}? streamExpression ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
            if (tr != null) {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:822:38: ^( RIGHT_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(RIGHT_OUTERJOIN_EXPR, "RIGHT_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 823:3: -> streamExpression ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
            {
                adaptor.addChild(root_0, stream_streamExpression.nextTree());
                // EsperEPL2Grammar.g:823:23: ^( FULL_OUTERJOIN_EXPR outerJoinIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FULL_OUTERJOIN_EXPR, "FULL_OUTERJOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outerJoinIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoin"

    public static class outerJoinIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdent"
    // EsperEPL2Grammar.g:826:1: outerJoinIdent : ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* ;
    public final EsperEPL2GrammarParser.outerJoinIdent_return outerJoinIdent() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdent_return retval = new EsperEPL2GrammarParser.outerJoinIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ON217=null;
        Token AND_EXPR219=null;
        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair218 = null;

        EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair220 = null;


        CommonTree ON217_tree=null;
        CommonTree AND_EXPR219_tree=null;

        try {
            // EsperEPL2Grammar.g:827:2: ( ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )* )
            // EsperEPL2Grammar.g:827:4: ON outerJoinIdentPair ( AND_EXPR outerJoinIdentPair )*
            {
            root_0 = (CommonTree)adaptor.nil();

            ON217=(Token)match(input,ON,FOLLOW_ON_in_outerJoinIdent3987); if (state.failed) return retval;
            pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3990);
            outerJoinIdentPair218=outerJoinIdentPair();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair218.getTree());
            // EsperEPL2Grammar.g:827:27: ( AND_EXPR outerJoinIdentPair )*
            loop82:
            do {
                int alt82=2;
                int LA82_0 = input.LA(1);

                if ( (LA82_0==AND_EXPR) ) {
                    alt82=1;
                }


                switch (alt82) {
            	case 1 :
            	    // EsperEPL2Grammar.g:827:28: AND_EXPR outerJoinIdentPair
            	    {
            	    AND_EXPR219=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_outerJoinIdent3993); if (state.failed) return retval;
            	    pushFollow(FOLLOW_outerJoinIdentPair_in_outerJoinIdent3996);
            	    outerJoinIdentPair220=outerJoinIdentPair();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, outerJoinIdentPair220.getTree());

            	    }
            	    break;

            	default :
            	    break loop82;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdent"

    public static class outerJoinIdentPair_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outerJoinIdentPair"
    // EsperEPL2Grammar.g:830:1: outerJoinIdentPair : eventProperty EQUALS eventProperty ;
    public final EsperEPL2GrammarParser.outerJoinIdentPair_return outerJoinIdentPair() throws RecognitionException {
        EsperEPL2GrammarParser.outerJoinIdentPair_return retval = new EsperEPL2GrammarParser.outerJoinIdentPair_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EQUALS222=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty221 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty223 = null;


        CommonTree EQUALS222_tree=null;

        try {
            // EsperEPL2Grammar.g:831:2: ( eventProperty EQUALS eventProperty )
            // EsperEPL2Grammar.g:831:4: eventProperty EQUALS eventProperty
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4011);
            eventProperty221=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty221.getTree());
            EQUALS222=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_outerJoinIdentPair4013); if (state.failed) return retval;
            pushFollow(FOLLOW_eventProperty_in_outerJoinIdentPair4016);
            eventProperty223=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty223.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outerJoinIdentPair"

    public static class whereClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whereClause"
    // EsperEPL2Grammar.g:834:1: whereClause : evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.whereClause_return whereClause() throws RecognitionException {
        EsperEPL2GrammarParser.whereClause_return retval = new EsperEPL2GrammarParser.whereClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression224 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("where clause"); 
        try {
            // EsperEPL2Grammar.g:837:2: ( evalOrExpression -> ^( WHERE_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:837:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_whereClause4038);
            evalOrExpression224=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression224.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 838:3: -> ^( WHERE_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:838:6: ^( WHERE_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whereClause"

    public static class selectClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectClause"
    // EsperEPL2Grammar.g:841:1: selectClause : (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) ;
    public final EsperEPL2GrammarParser.selectClause_return selectClause() throws RecognitionException {
        EsperEPL2GrammarParser.selectClause_return retval = new EsperEPL2GrammarParser.selectClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token d=null;
        EsperEPL2GrammarParser.selectionList_return selectionList225 = null;


        CommonTree s_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_IRSTREAM=new RewriteRuleTokenStream(adaptor,"token IRSTREAM");
        RewriteRuleTokenStream stream_ISTREAM=new RewriteRuleTokenStream(adaptor,"token ISTREAM");
        RewriteRuleTokenStream stream_DISTINCT=new RewriteRuleTokenStream(adaptor,"token DISTINCT");
        RewriteRuleTokenStream stream_RSTREAM=new RewriteRuleTokenStream(adaptor,"token RSTREAM");
        RewriteRuleSubtreeStream stream_selectionList=new RewriteRuleSubtreeStream(adaptor,"rule selectionList");
         paraphrases.push("select clause"); 
        try {
            // EsperEPL2Grammar.g:844:2: ( (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList ) )
            // EsperEPL2Grammar.g:844:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )? (d= DISTINCT )? selectionList
            {
            // EsperEPL2Grammar.g:844:4: (s= RSTREAM | s= ISTREAM | s= IRSTREAM )?
            int alt83=4;
            switch ( input.LA(1) ) {
                case RSTREAM:
                    {
                    alt83=1;
                    }
                    break;
                case ISTREAM:
                    {
                    alt83=2;
                    }
                    break;
                case IRSTREAM:
                    {
                    alt83=3;
                    }
                    break;
            }

            switch (alt83) {
                case 1 :
                    // EsperEPL2Grammar.g:844:5: s= RSTREAM
                    {
                    s=(Token)match(input,RSTREAM,FOLLOW_RSTREAM_in_selectClause4074); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RSTREAM.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:844:17: s= ISTREAM
                    {
                    s=(Token)match(input,ISTREAM,FOLLOW_ISTREAM_in_selectClause4080); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ISTREAM.add(s);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:844:29: s= IRSTREAM
                    {
                    s=(Token)match(input,IRSTREAM,FOLLOW_IRSTREAM_in_selectClause4086); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IRSTREAM.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:844:43: (d= DISTINCT )?
            int alt84=2;
            int LA84_0 = input.LA(1);

            if ( (LA84_0==DISTINCT) ) {
                alt84=1;
            }
            switch (alt84) {
                case 1 :
                    // EsperEPL2Grammar.g:844:43: d= DISTINCT
                    {
                    d=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_selectClause4092); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DISTINCT.add(d);


                    }
                    break;

            }

            pushFollow(FOLLOW_selectionList_in_selectClause4095);
            selectionList225=selectionList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_selectionList.add(selectionList225.getTree());


            // AST REWRITE
            // elements: selectionList, d, s
            // token labels: d, s
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 845:3: -> ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
            {
                // EsperEPL2Grammar.g:845:6: ^( SELECTION_EXPR ( $s)? ( $d)? selectionList )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_EXPR, "SELECTION_EXPR"), root_1);

                // EsperEPL2Grammar.g:845:23: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:845:27: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();
                adaptor.addChild(root_1, stream_selectionList.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectClause"

    public static class selectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionList"
    // EsperEPL2Grammar.g:848:1: selectionList : selectionListElement ( COMMA selectionListElement )* ;
    public final EsperEPL2GrammarParser.selectionList_return selectionList() throws RecognitionException {
        EsperEPL2GrammarParser.selectionList_return retval = new EsperEPL2GrammarParser.selectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA227=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement226 = null;

        EsperEPL2GrammarParser.selectionListElement_return selectionListElement228 = null;


        CommonTree COMMA227_tree=null;

        try {
            // EsperEPL2Grammar.g:849:2: ( selectionListElement ( COMMA selectionListElement )* )
            // EsperEPL2Grammar.g:849:4: selectionListElement ( COMMA selectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_selectionListElement_in_selectionList4126);
            selectionListElement226=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement226.getTree());
            // EsperEPL2Grammar.g:849:25: ( COMMA selectionListElement )*
            loop85:
            do {
                int alt85=2;
                int LA85_0 = input.LA(1);

                if ( (LA85_0==COMMA) ) {
                    alt85=1;
                }


                switch (alt85) {
            	case 1 :
            	    // EsperEPL2Grammar.g:849:26: COMMA selectionListElement
            	    {
            	    COMMA227=(Token)match(input,COMMA,FOLLOW_COMMA_in_selectionList4129); if (state.failed) return retval;
            	    pushFollow(FOLLOW_selectionListElement_in_selectionList4132);
            	    selectionListElement228=selectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement228.getTree());

            	    }
            	    break;

            	default :
            	    break loop85;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionList"

    public static class selectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "selectionListElement"
    // EsperEPL2Grammar.g:852:1: selectionListElement : (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.selectionListElement_return selectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.selectionListElement_return retval = new EsperEPL2GrammarParser.selectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS231=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.streamSelector_return streamSelector229 = null;

        EsperEPL2GrammarParser.expression_return expression230 = null;


        CommonTree s_tree=null;
        CommonTree AS231_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:854:2: (s= STAR -> WILDCARD_SELECT[$s] | ( streamSelector )=> streamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression ) -> ^( SELECTION_ELEMENT_EXPR expression ) )
            int alt87=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt87=1;
                }
                break;
            case IDENT:
                {
                int LA87_2 = input.LA(2);

                if ( (LA87_2==DOT) ) {
                    int LA87_66 = input.LA(3);

                    if ( (LA87_66==STAR) && (synpred1_EsperEPL2Grammar())) {
                        alt87=2;
                    }
                    else if ( (LA87_66==WINDOW||LA87_66==ESCAPE||LA87_66==EVERY_EXPR||(LA87_66>=SUM && LA87_66<=COUNT)||LA87_66==OUTER||(LA87_66>=JOIN && LA87_66<=FULL)||(LA87_66>=EVENTS && LA87_66<=LAST)||(LA87_66>=UNIDIRECTIONAL && LA87_66<=PREVIOUSTAIL)||LA87_66==PRIOR||(LA87_66>=WEEKDAY && LA87_66<=CAST)||LA87_66==SNAPSHOT||(LA87_66>=VARIABLE && LA87_66<=INDEX)||(LA87_66>=DEFINE && LA87_66<=MATCHES)||LA87_66==WHILE||LA87_66==IDENT||LA87_66==TICKED_STRING_LITERAL) ) {
                        alt87=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 87, 66, input);

                        throw nvae;
                    }
                }
                else if ( (LA87_2==EOF||(LA87_2>=IN_SET && LA87_2<=REGEXP)||(LA87_2>=OR_EXPR && LA87_2<=NOT_EXPR)||(LA87_2>=WHERE && LA87_2<=AS)||LA87_2==FROM||LA87_2==IS||(LA87_2>=GROUP && LA87_2<=HAVING)||LA87_2==OUTPUT||LA87_2==INSERT||LA87_2==ORDER||LA87_2==ROW_LIMIT_EXPR||LA87_2==FOR||LA87_2==COMMA||LA87_2==EQUALS||LA87_2==LPAREN||LA87_2==LBRACK||(LA87_2>=STAR && LA87_2<=QUESTION)||(LA87_2>=BAND && LA87_2<=MOD)||LA87_2==ESCAPECHAR) ) {
                    alt87=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 87, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt87=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 87, 0, input);

                throw nvae;
            }

            switch (alt87) {
                case 1 :
                    // EsperEPL2Grammar.g:854:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_selectionListElement4158); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 854:14: -> WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:855:4: ( streamSelector )=> streamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_streamSelector_in_selectionListElement4174);
                    streamSelector229=streamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, streamSelector229.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:856:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_selectionListElement4179);
                    expression230=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression230.getTree());
                    // EsperEPL2Grammar.g:856:15: ( AS i= keywordAllowedIdent )?
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( (LA86_0==AS) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            // EsperEPL2Grammar.g:856:16: AS i= keywordAllowedIdent
                            {
                            AS231=(Token)match(input,AS,FOLLOW_AS_in_selectionListElement4182); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS231);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_selectionListElement4186);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 857:3: -> {identifier != null}? ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:857:28: ^( SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 858:3: -> {identifier == null}? ^( SELECTION_ELEMENT_EXPR expression )
                    if (identifier == null) {
                        // EsperEPL2Grammar.g:858:28: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 859:3: -> ^( SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:859:6: ^( SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_ELEMENT_EXPR, "SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "selectionListElement"

    public static class streamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamSelector"
    // EsperEPL2Grammar.g:862:1: streamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.streamSelector_return streamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.streamSelector_return retval = new EsperEPL2GrammarParser.streamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT232=null;
        Token STAR233=null;
        Token AS234=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT232_tree=null;
        CommonTree STAR233_tree=null;
        CommonTree AS234_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:863:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:863:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4242); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT232=(Token)match(input,DOT,FOLLOW_DOT_in_streamSelector4244); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT232);

            STAR233=(Token)match(input,STAR,FOLLOW_STAR_in_streamSelector4246); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR233);

            // EsperEPL2Grammar.g:863:21: ( AS i= IDENT )?
            int alt88=2;
            int LA88_0 = input.LA(1);

            if ( (LA88_0==AS) ) {
                alt88=1;
            }
            switch (alt88) {
                case 1 :
                    // EsperEPL2Grammar.g:863:22: AS i= IDENT
                    {
                    AS234=(Token)match(input,AS,FOLLOW_AS_in_streamSelector4249); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS234);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamSelector4253); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: s, i
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 864:3: -> ^( SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:864:6: ^( SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SELECTION_STREAM, "SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:864:28: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamSelector"

    public static class streamExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "streamExpression"
    // EsperEPL2Grammar.g:868:1: streamExpression : ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.streamExpression_return streamExpression() throws RecognitionException {
        EsperEPL2GrammarParser.streamExpression_return retval = new EsperEPL2GrammarParser.streamExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token u=null;
        Token ru=null;
        Token ri=null;
        Token DOT239=null;
        Token DOT241=null;
        Token AS243=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression235 = null;

        EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression236 = null;

        EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression237 = null;

        EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression238 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression240 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression242 = null;


        CommonTree i_tree=null;
        CommonTree u_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT239_tree=null;
        CommonTree DOT241_tree=null;
        CommonTree AS243_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_UNIDIRECTIONAL=new RewriteRuleTokenStream(adaptor,"token UNIDIRECTIONAL");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_databaseJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule databaseJoinExpression");
        RewriteRuleSubtreeStream stream_methodJoinExpression=new RewriteRuleSubtreeStream(adaptor,"rule methodJoinExpression");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
        RewriteRuleSubtreeStream stream_patternInclusionExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternInclusionExpression");
        try {
            // EsperEPL2Grammar.g:869:2: ( ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:869:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression ) ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (u= UNIDIRECTIONAL )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            // EsperEPL2Grammar.g:869:4: ( eventFilterExpression | patternInclusionExpression | databaseJoinExpression | methodJoinExpression )
            int alt89=4;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                int LA89_1 = input.LA(2);

                if ( (LA89_1==EOF||(LA89_1>=WHERE && LA89_1<=AS)||(LA89_1>=INNER && LA89_1<=ON)||(LA89_1>=GROUP && LA89_1<=HAVING)||LA89_1==OUTPUT||LA89_1==ORDER||(LA89_1>=UNIDIRECTIONAL && LA89_1<=RETAININTERSECTION)||LA89_1==ROW_LIMIT_EXPR||LA89_1==MATCH_RECOGNIZE||LA89_1==FOR||(LA89_1>=COMMA && LA89_1<=LPAREN)||LA89_1==LBRACK) ) {
                    alt89=1;
                }
                else if ( (LA89_1==COLON) ) {
                    alt89=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 89, 1, input);

                    throw nvae;
                }
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt89=1;
                }
                break;
            case PATTERN:
                {
                alt89=2;
                }
                break;
            case SQL:
                {
                alt89=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 89, 0, input);

                throw nvae;
            }

            switch (alt89) {
                case 1 :
                    // EsperEPL2Grammar.g:869:5: eventFilterExpression
                    {
                    pushFollow(FOLLOW_eventFilterExpression_in_streamExpression4284);
                    eventFilterExpression235=eventFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression235.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:869:29: patternInclusionExpression
                    {
                    pushFollow(FOLLOW_patternInclusionExpression_in_streamExpression4288);
                    patternInclusionExpression236=patternInclusionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternInclusionExpression.add(patternInclusionExpression236.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:869:58: databaseJoinExpression
                    {
                    pushFollow(FOLLOW_databaseJoinExpression_in_streamExpression4292);
                    databaseJoinExpression237=databaseJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_databaseJoinExpression.add(databaseJoinExpression237.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:869:83: methodJoinExpression
                    {
                    pushFollow(FOLLOW_methodJoinExpression_in_streamExpression4296);
                    methodJoinExpression238=methodJoinExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_methodJoinExpression.add(methodJoinExpression238.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:870:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt91=2;
            int LA91_0 = input.LA(1);

            if ( (LA91_0==DOT) ) {
                alt91=1;
            }
            switch (alt91) {
                case 1 :
                    // EsperEPL2Grammar.g:870:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT239=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4303); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT239);

                    pushFollow(FOLLOW_viewExpression_in_streamExpression4305);
                    viewExpression240=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression240.getTree());
                    // EsperEPL2Grammar.g:870:23: ( DOT viewExpression )*
                    loop90:
                    do {
                        int alt90=2;
                        int LA90_0 = input.LA(1);

                        if ( (LA90_0==DOT) ) {
                            alt90=1;
                        }


                        switch (alt90) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:870:24: DOT viewExpression
                    	    {
                    	    DOT241=(Token)match(input,DOT,FOLLOW_DOT_in_streamExpression4308); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT241);

                    	    pushFollow(FOLLOW_viewExpression_in_streamExpression4310);
                    	    viewExpression242=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression242.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop90;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:870:47: ( AS i= IDENT | i= IDENT )?
            int alt92=3;
            int LA92_0 = input.LA(1);

            if ( (LA92_0==AS) ) {
                alt92=1;
            }
            else if ( (LA92_0==IDENT) ) {
                alt92=2;
            }
            switch (alt92) {
                case 1 :
                    // EsperEPL2Grammar.g:870:48: AS i= IDENT
                    {
                    AS243=(Token)match(input,AS,FOLLOW_AS_in_streamExpression4317); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS243);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4321); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:870:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_streamExpression4327); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:870:71: (u= UNIDIRECTIONAL )?
            int alt93=2;
            int LA93_0 = input.LA(1);

            if ( (LA93_0==UNIDIRECTIONAL) ) {
                alt93=1;
            }
            switch (alt93) {
                case 1 :
                    // EsperEPL2Grammar.g:870:72: u= UNIDIRECTIONAL
                    {
                    u=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_streamExpression4334); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNIDIRECTIONAL.add(u);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:870:91: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt94=3;
            int LA94_0 = input.LA(1);

            if ( (LA94_0==RETAINUNION) ) {
                alt94=1;
            }
            else if ( (LA94_0==RETAININTERSECTION) ) {
                alt94=2;
            }
            switch (alt94) {
                case 1 :
                    // EsperEPL2Grammar.g:870:92: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_streamExpression4341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:870:107: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_streamExpression4345); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: methodJoinExpression, patternInclusionExpression, eventFilterExpression, ri, ru, databaseJoinExpression, viewExpression, u, i
            // token labels: u, ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_u=new RewriteRuleTokenStream(adaptor,"token u",u);
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 871:3: -> ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:871:6: ^( STREAM_EXPR ( eventFilterExpression )? ( patternInclusionExpression )? ( databaseJoinExpression )? ( methodJoinExpression )? ( viewExpression )* ( $i)? ( $u)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                // EsperEPL2Grammar.g:871:20: ( eventFilterExpression )?
                if ( stream_eventFilterExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());

                }
                stream_eventFilterExpression.reset();
                // EsperEPL2Grammar.g:871:43: ( patternInclusionExpression )?
                if ( stream_patternInclusionExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternInclusionExpression.nextTree());

                }
                stream_patternInclusionExpression.reset();
                // EsperEPL2Grammar.g:871:71: ( databaseJoinExpression )?
                if ( stream_databaseJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_databaseJoinExpression.nextTree());

                }
                stream_databaseJoinExpression.reset();
                // EsperEPL2Grammar.g:871:95: ( methodJoinExpression )?
                if ( stream_methodJoinExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_methodJoinExpression.nextTree());

                }
                stream_methodJoinExpression.reset();
                // EsperEPL2Grammar.g:872:3: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:872:19: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:872:23: ( $u)?
                if ( stream_u.hasNext() ) {
                    adaptor.addChild(root_1, stream_u.nextNode());

                }
                stream_u.reset();
                // EsperEPL2Grammar.g:872:27: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:872:32: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "streamExpression"

    public static class forExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "forExpr"
    // EsperEPL2Grammar.g:875:1: forExpr : FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )? -> ^( FOR $i ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.forExpr_return forExpr() throws RecognitionException {
        EsperEPL2GrammarParser.forExpr_return retval = new EsperEPL2GrammarParser.forExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token FOR244=null;
        Token LPAREN245=null;
        Token RPAREN247=null;
        EsperEPL2GrammarParser.expressionList_return expressionList246 = null;


        CommonTree i_tree=null;
        CommonTree FOR244_tree=null;
        CommonTree LPAREN245_tree=null;
        CommonTree RPAREN247_tree=null;
        RewriteRuleTokenStream stream_FOR=new RewriteRuleTokenStream(adaptor,"token FOR");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        try {
            // EsperEPL2Grammar.g:876:2: ( FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )? -> ^( FOR $i ( expressionList )? ) )
            // EsperEPL2Grammar.g:876:4: FOR i= IDENT ( LPAREN ( expressionList )? RPAREN )?
            {
            FOR244=(Token)match(input,FOR,FOLLOW_FOR_in_forExpr4401); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FOR.add(FOR244);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_forExpr4405); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:876:16: ( LPAREN ( expressionList )? RPAREN )?
            int alt96=2;
            int LA96_0 = input.LA(1);

            if ( (LA96_0==LPAREN) ) {
                alt96=1;
            }
            switch (alt96) {
                case 1 :
                    // EsperEPL2Grammar.g:876:17: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN245=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_forExpr4408); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN245);

                    // EsperEPL2Grammar.g:876:24: ( expressionList )?
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==WINDOW||LA95_0==ESCAPE||(LA95_0>=NOT_EXPR && LA95_0<=EVERY_EXPR)||(LA95_0>=SUM && LA95_0<=COUNT)||LA95_0==CASE||LA95_0==OUTER||(LA95_0>=JOIN && LA95_0<=FULL)||(LA95_0>=EVENTS && LA95_0<=LAST)||(LA95_0>=UNIDIRECTIONAL && LA95_0<=CURRENT_TIMESTAMP)||LA95_0==SNAPSHOT||(LA95_0>=VARIABLE && LA95_0<=INDEX)||(LA95_0>=BOOLEAN_TRUE && LA95_0<=VALUE_NULL)||(LA95_0>=DEFINE && LA95_0<=MATCHES)||LA95_0==WHILE||LA95_0==NUM_DOUBLE||LA95_0==IDENT||LA95_0==LPAREN||(LA95_0>=PLUS && LA95_0<=QUESTION)||(LA95_0>=STRING_LITERAL && LA95_0<=QUOTED_STRING_LITERAL)||LA95_0==MINUS||LA95_0==LCURLY||LA95_0==NUM_INT||(LA95_0>=TICKED_STRING_LITERAL && LA95_0<=NUM_FLOAT)) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            // EsperEPL2Grammar.g:876:24: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_forExpr4410);
                            expressionList246=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList246.getTree());

                            }
                            break;

                    }

                    RPAREN247=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_forExpr4413); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN247);


                    }
                    break;

            }



            // AST REWRITE
            // elements: FOR, i, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 877:3: -> ^( FOR $i ( expressionList )? )
            {
                // EsperEPL2Grammar.g:877:6: ^( FOR $i ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_FOR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:877:15: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "forExpr"

    public static class matchRecog_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecog"
    // EsperEPL2Grammar.g:889:1: matchRecog : MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) ;
    public final EsperEPL2GrammarParser.matchRecog_return matchRecog() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecog_return retval = new EsperEPL2GrammarParser.matchRecog_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MATCH_RECOGNIZE248=null;
        Token LPAREN249=null;
        Token RPAREN257=null;
        EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy250 = null;

        EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures251 = null;

        EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection252 = null;

        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip253 = null;

        EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern254 = null;

        EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval255 = null;

        EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine256 = null;


        CommonTree MATCH_RECOGNIZE248_tree=null;
        CommonTree LPAREN249_tree=null;
        CommonTree RPAREN257_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_MATCH_RECOGNIZE=new RewriteRuleTokenStream(adaptor,"token MATCH_RECOGNIZE");
        RewriteRuleSubtreeStream stream_matchRecogPattern=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPattern");
        RewriteRuleSubtreeStream stream_matchRecogMatchesInterval=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesInterval");
        RewriteRuleSubtreeStream stream_matchRecogMatchesAfterSkip=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesAfterSkip");
        RewriteRuleSubtreeStream stream_matchRecogMeasures=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasures");
        RewriteRuleSubtreeStream stream_matchRecogPartitionBy=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPartitionBy");
        RewriteRuleSubtreeStream stream_matchRecogMatchesSelection=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMatchesSelection");
        RewriteRuleSubtreeStream stream_matchRecogDefine=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefine");
        try {
            // EsperEPL2Grammar.g:890:2: ( MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine ) )
            // EsperEPL2Grammar.g:890:4: MATCH_RECOGNIZE LPAREN ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine RPAREN
            {
            MATCH_RECOGNIZE248=(Token)match(input,MATCH_RECOGNIZE,FOLLOW_MATCH_RECOGNIZE_in_matchRecog4449); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MATCH_RECOGNIZE.add(MATCH_RECOGNIZE248);

            LPAREN249=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecog4463); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN249);

            // EsperEPL2Grammar.g:892:4: ( matchRecogPartitionBy )?
            int alt97=2;
            int LA97_0 = input.LA(1);

            if ( (LA97_0==PARTITION) ) {
                alt97=1;
            }
            switch (alt97) {
                case 1 :
                    // EsperEPL2Grammar.g:892:4: matchRecogPartitionBy
                    {
                    pushFollow(FOLLOW_matchRecogPartitionBy_in_matchRecog4469);
                    matchRecogPartitionBy250=matchRecogPartitionBy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogPartitionBy.add(matchRecogPartitionBy250.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogMeasures_in_matchRecog4476);
            matchRecogMeasures251=matchRecogMeasures();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasures.add(matchRecogMeasures251.getTree());
            // EsperEPL2Grammar.g:894:4: ( matchRecogMatchesSelection )?
            int alt98=2;
            int LA98_0 = input.LA(1);

            if ( (LA98_0==ALL) ) {
                alt98=1;
            }
            switch (alt98) {
                case 1 :
                    // EsperEPL2Grammar.g:894:4: matchRecogMatchesSelection
                    {
                    pushFollow(FOLLOW_matchRecogMatchesSelection_in_matchRecog4481);
                    matchRecogMatchesSelection252=matchRecogMatchesSelection();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesSelection.add(matchRecogMatchesSelection252.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:895:4: ( matchRecogMatchesAfterSkip )?
            int alt99=2;
            int LA99_0 = input.LA(1);

            if ( (LA99_0==AFTER) ) {
                alt99=1;
            }
            switch (alt99) {
                case 1 :
                    // EsperEPL2Grammar.g:895:4: matchRecogMatchesAfterSkip
                    {
                    pushFollow(FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4487);
                    matchRecogMatchesAfterSkip253=matchRecogMatchesAfterSkip();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesAfterSkip.add(matchRecogMatchesAfterSkip253.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogPattern_in_matchRecog4493);
            matchRecogPattern254=matchRecogPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPattern.add(matchRecogPattern254.getTree());
            // EsperEPL2Grammar.g:897:4: ( matchRecogMatchesInterval )?
            int alt100=2;
            int LA100_0 = input.LA(1);

            if ( (LA100_0==IDENT) ) {
                alt100=1;
            }
            switch (alt100) {
                case 1 :
                    // EsperEPL2Grammar.g:897:4: matchRecogMatchesInterval
                    {
                    pushFollow(FOLLOW_matchRecogMatchesInterval_in_matchRecog4499);
                    matchRecogMatchesInterval255=matchRecogMatchesInterval();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchRecogMatchesInterval.add(matchRecogMatchesInterval255.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_matchRecogDefine_in_matchRecog4505);
            matchRecogDefine256=matchRecogDefine();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefine.add(matchRecogDefine256.getTree());
            RPAREN257=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecog4512); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN257);



            // AST REWRITE
            // elements: matchRecogPartitionBy, matchRecogMeasures, matchRecogMatchesInterval, matchRecogDefine, matchRecogPattern, matchRecogMatchesAfterSkip, matchRecogMatchesSelection, MATCH_RECOGNIZE
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 900:3: -> ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
            {
                // EsperEPL2Grammar.g:900:6: ^( MATCH_RECOGNIZE ( matchRecogPartitionBy )? matchRecogMeasures ( matchRecogMatchesSelection )? ( matchRecogMatchesAfterSkip )? matchRecogPattern ( matchRecogMatchesInterval )? matchRecogDefine )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_MATCH_RECOGNIZE.nextNode(), root_1);

                // EsperEPL2Grammar.g:900:24: ( matchRecogPartitionBy )?
                if ( stream_matchRecogPartitionBy.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPartitionBy.nextTree());

                }
                stream_matchRecogPartitionBy.reset();
                adaptor.addChild(root_1, stream_matchRecogMeasures.nextTree());
                // EsperEPL2Grammar.g:900:66: ( matchRecogMatchesSelection )?
                if ( stream_matchRecogMatchesSelection.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesSelection.nextTree());

                }
                stream_matchRecogMatchesSelection.reset();
                // EsperEPL2Grammar.g:900:94: ( matchRecogMatchesAfterSkip )?
                if ( stream_matchRecogMatchesAfterSkip.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesAfterSkip.nextTree());

                }
                stream_matchRecogMatchesAfterSkip.reset();
                adaptor.addChild(root_1, stream_matchRecogPattern.nextTree());
                // EsperEPL2Grammar.g:900:140: ( matchRecogMatchesInterval )?
                if ( stream_matchRecogMatchesInterval.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMatchesInterval.nextTree());

                }
                stream_matchRecogMatchesInterval.reset();
                adaptor.addChild(root_1, stream_matchRecogDefine.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecog"

    public static class matchRecogPartitionBy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPartitionBy"
    // EsperEPL2Grammar.g:903:1: matchRecogPartitionBy : PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPartitionBy_return matchRecogPartitionBy() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPartitionBy_return retval = new EsperEPL2GrammarParser.matchRecogPartitionBy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PARTITION258=null;
        Token BY259=null;
        Token COMMA261=null;
        EsperEPL2GrammarParser.expression_return expression260 = null;

        EsperEPL2GrammarParser.expression_return expression262 = null;


        CommonTree PARTITION258_tree=null;
        CommonTree BY259_tree=null;
        CommonTree COMMA261_tree=null;
        RewriteRuleTokenStream stream_BY=new RewriteRuleTokenStream(adaptor,"token BY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_PARTITION=new RewriteRuleTokenStream(adaptor,"token PARTITION");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:904:2: ( PARTITION BY expression ( COMMA expression )* -> ^( MATCHREC_PARTITION ( expression )+ ) )
            // EsperEPL2Grammar.g:904:4: PARTITION BY expression ( COMMA expression )*
            {
            PARTITION258=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_matchRecogPartitionBy4549); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PARTITION.add(PARTITION258);

            BY259=(Token)match(input,BY,FOLLOW_BY_in_matchRecogPartitionBy4551); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_BY.add(BY259);

            pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4553);
            expression260=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression260.getTree());
            // EsperEPL2Grammar.g:904:28: ( COMMA expression )*
            loop101:
            do {
                int alt101=2;
                int LA101_0 = input.LA(1);

                if ( (LA101_0==COMMA) ) {
                    alt101=1;
                }


                switch (alt101) {
            	case 1 :
            	    // EsperEPL2Grammar.g:904:29: COMMA expression
            	    {
            	    COMMA261=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogPartitionBy4556); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA261);

            	    pushFollow(FOLLOW_expression_in_matchRecogPartitionBy4558);
            	    expression262=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression262.getTree());

            	    }
            	    break;

            	default :
            	    break loop101;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 905:3: -> ^( MATCHREC_PARTITION ( expression )+ )
            {
                // EsperEPL2Grammar.g:905:6: ^( MATCHREC_PARTITION ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PARTITION, "MATCHREC_PARTITION"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPartitionBy"

    public static class matchRecogMeasures_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasures"
    // EsperEPL2Grammar.g:908:1: matchRecogMeasures : MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasures_return matchRecogMeasures() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasures_return retval = new EsperEPL2GrammarParser.matchRecogMeasures_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MEASURES263=null;
        Token COMMA265=null;
        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem264 = null;

        EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem266 = null;


        CommonTree MEASURES263_tree=null;
        CommonTree COMMA265_tree=null;
        RewriteRuleTokenStream stream_MEASURES=new RewriteRuleTokenStream(adaptor,"token MEASURES");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogMeasureItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogMeasureItem");
        try {
            // EsperEPL2Grammar.g:909:2: ( MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )* -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* ) )
            // EsperEPL2Grammar.g:909:4: MEASURES matchRecogMeasureItem ( COMMA matchRecogMeasureItem )*
            {
            MEASURES263=(Token)match(input,MEASURES,FOLLOW_MEASURES_in_matchRecogMeasures4587); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_MEASURES.add(MEASURES263);

            pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4589);
            matchRecogMeasureItem264=matchRecogMeasureItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem264.getTree());
            // EsperEPL2Grammar.g:909:35: ( COMMA matchRecogMeasureItem )*
            loop102:
            do {
                int alt102=2;
                int LA102_0 = input.LA(1);

                if ( (LA102_0==COMMA) ) {
                    alt102=1;
                }


                switch (alt102) {
            	case 1 :
            	    // EsperEPL2Grammar.g:909:36: COMMA matchRecogMeasureItem
            	    {
            	    COMMA265=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogMeasures4592); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA265);

            	    pushFollow(FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4594);
            	    matchRecogMeasureItem266=matchRecogMeasureItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogMeasureItem.add(matchRecogMeasureItem266.getTree());

            	    }
            	    break;

            	default :
            	    break loop102;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogMeasureItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 910:3: -> ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
            {
                // EsperEPL2Grammar.g:910:6: ^( MATCHREC_MEASURES ( matchRecogMeasureItem )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURES, "MATCHREC_MEASURES"), root_1);

                // EsperEPL2Grammar.g:910:26: ( matchRecogMeasureItem )*
                while ( stream_matchRecogMeasureItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogMeasureItem.nextTree());

                }
                stream_matchRecogMeasureItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasures"

    public static class matchRecogMeasureItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMeasureItem"
    // EsperEPL2Grammar.g:913:1: matchRecogMeasureItem : expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) ;
    public final EsperEPL2GrammarParser.matchRecogMeasureItem_return matchRecogMeasureItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMeasureItem_return retval = new EsperEPL2GrammarParser.matchRecogMeasureItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS268=null;
        EsperEPL2GrammarParser.expression_return expression267 = null;


        CommonTree i_tree=null;
        CommonTree AS268_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:914:2: ( expression ( AS (i= IDENT )? )? -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? ) )
            // EsperEPL2Grammar.g:914:4: expression ( AS (i= IDENT )? )?
            {
            pushFollow(FOLLOW_expression_in_matchRecogMeasureItem4619);
            expression267=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression267.getTree());
            // EsperEPL2Grammar.g:914:15: ( AS (i= IDENT )? )?
            int alt104=2;
            int LA104_0 = input.LA(1);

            if ( (LA104_0==AS) ) {
                alt104=1;
            }
            switch (alt104) {
                case 1 :
                    // EsperEPL2Grammar.g:914:16: AS (i= IDENT )?
                    {
                    AS268=(Token)match(input,AS,FOLLOW_AS_in_matchRecogMeasureItem4622); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS268);

                    // EsperEPL2Grammar.g:914:19: (i= IDENT )?
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==IDENT) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            // EsperEPL2Grammar.g:914:20: i= IDENT
                            {
                            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMeasureItem4627); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 915:3: -> ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
            {
                // EsperEPL2Grammar.g:915:6: ^( MATCHREC_MEASURE_ITEM expression ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_MEASURE_ITEM, "MATCHREC_MEASURE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:915:41: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMeasureItem"

    public static class matchRecogMatchesSelection_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesSelection"
    // EsperEPL2Grammar.g:918:1: matchRecogMatchesSelection : ALL MATCHES ;
    public final EsperEPL2GrammarParser.matchRecogMatchesSelection_return matchRecogMatchesSelection() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesSelection_return retval = new EsperEPL2GrammarParser.matchRecogMatchesSelection_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL269=null;
        Token MATCHES270=null;

        CommonTree ALL269_tree=null;
        CommonTree MATCHES270_tree=null;

        try {
            // EsperEPL2Grammar.g:919:2: ( ALL MATCHES )
            // EsperEPL2Grammar.g:919:4: ALL MATCHES
            {
            root_0 = (CommonTree)adaptor.nil();

            ALL269=(Token)match(input,ALL,FOLLOW_ALL_in_matchRecogMatchesSelection4658); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            ALL269_tree = (CommonTree)adaptor.create(ALL269);
            root_0 = (CommonTree)adaptor.becomeRoot(ALL269_tree, root_0);
            }
            MATCHES270=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_matchRecogMatchesSelection4661); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesSelection"

    public static class matchRecogPattern_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPattern"
    // EsperEPL2Grammar.g:922:1: matchRecogPattern : PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) ;
    public final EsperEPL2GrammarParser.matchRecogPattern_return matchRecogPattern() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPattern_return retval = new EsperEPL2GrammarParser.matchRecogPattern_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN271=null;
        Token LPAREN272=null;
        Token RPAREN274=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration273 = null;


        CommonTree PATTERN271_tree=null;
        CommonTree LPAREN272_tree=null;
        CommonTree RPAREN274_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:923:2: ( PATTERN LPAREN matchRecogPatternAlteration RPAREN -> ^( MATCHREC_PATTERN matchRecogPatternAlteration ) )
            // EsperEPL2Grammar.g:923:4: PATTERN LPAREN matchRecogPatternAlteration RPAREN
            {
            PATTERN271=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_matchRecogPattern4676); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN271);

            LPAREN272=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPattern4678); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN272);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4680);
            matchRecogPatternAlteration273=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration273.getTree());
            RPAREN274=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPattern4682); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN274);



            // AST REWRITE
            // elements: matchRecogPatternAlteration
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 924:3: -> ^( MATCHREC_PATTERN matchRecogPatternAlteration )
            {
                // EsperEPL2Grammar.g:924:6: ^( MATCHREC_PATTERN matchRecogPatternAlteration )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN, "MATCHREC_PATTERN"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPattern"

    public static class matchRecogMatchesAfterSkip_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesAfterSkip"
    // EsperEPL2Grammar.g:927:1: matchRecogMatchesAfterSkip : AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return matchRecogMatchesAfterSkip() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return retval = new EsperEPL2GrammarParser.matchRecogMatchesAfterSkip_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AFTER275=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i1 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i2 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i3 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i4 = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return i5 = null;


        CommonTree AFTER275_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
        try {
            // EsperEPL2Grammar.g:928:2: ( AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5) )
            // EsperEPL2Grammar.g:928:4: AFTER i1= keywordAllowedIdent i2= keywordAllowedIdent i3= keywordAllowedIdent i4= keywordAllowedIdent i5= keywordAllowedIdent
            {
            AFTER275=(Token)match(input,AFTER,FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4704); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(AFTER275);

            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4708);
            i1=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i1.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4712);
            i2=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i2.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4716);
            i3=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i3.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4720);
            i4=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i4.getTree());
            pushFollow(FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4724);
            i5=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i5.getTree());


            // AST REWRITE
            // elements: i2, i4, i3, i1, i5
            // token labels: 
            // rule labels: retval, i5, i4, i3, i2, i1
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_i5=new RewriteRuleSubtreeStream(adaptor,"rule i5",i5!=null?i5.tree:null);
            RewriteRuleSubtreeStream stream_i4=new RewriteRuleSubtreeStream(adaptor,"rule i4",i4!=null?i4.tree:null);
            RewriteRuleSubtreeStream stream_i3=new RewriteRuleSubtreeStream(adaptor,"rule i3",i3!=null?i3.tree:null);
            RewriteRuleSubtreeStream stream_i2=new RewriteRuleSubtreeStream(adaptor,"rule i2",i2!=null?i2.tree:null);
            RewriteRuleSubtreeStream stream_i1=new RewriteRuleSubtreeStream(adaptor,"rule i1",i1!=null?i1.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 929:3: -> ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
            {
                // EsperEPL2Grammar.g:929:6: ^( MATCHREC_AFTER_SKIP $i1 $i2 $i3 $i4 $i5)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_AFTER_SKIP, "MATCHREC_AFTER_SKIP"), root_1);

                adaptor.addChild(root_1, stream_i1.nextTree());
                adaptor.addChild(root_1, stream_i2.nextTree());
                adaptor.addChild(root_1, stream_i3.nextTree());
                adaptor.addChild(root_1, stream_i4.nextTree());
                adaptor.addChild(root_1, stream_i5.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesAfterSkip"

    public static class matchRecogMatchesInterval_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogMatchesInterval"
    // EsperEPL2Grammar.g:932:1: matchRecogMatchesInterval : i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) ;
    public final EsperEPL2GrammarParser.matchRecogMatchesInterval_return matchRecogMatchesInterval() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogMatchesInterval_return retval = new EsperEPL2GrammarParser.matchRecogMatchesInterval_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod276 = null;


        CommonTree i_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        try {
            // EsperEPL2Grammar.g:933:2: (i= IDENT timePeriod -> ^( MATCHREC_INTERVAL $i timePeriod ) )
            // EsperEPL2Grammar.g:933:4: i= IDENT timePeriod
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogMatchesInterval4760); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            pushFollow(FOLLOW_timePeriod_in_matchRecogMatchesInterval4762);
            timePeriod276=timePeriod();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod276.getTree());


            // AST REWRITE
            // elements: timePeriod, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 934:3: -> ^( MATCHREC_INTERVAL $i timePeriod )
            {
                // EsperEPL2Grammar.g:934:6: ^( MATCHREC_INTERVAL $i timePeriod )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_INTERVAL, "MATCHREC_INTERVAL"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_timePeriod.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogMatchesInterval"

    public static class matchRecogPatternAlteration_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAlteration"
    // EsperEPL2Grammar.g:937:1: matchRecogPatternAlteration : matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat ;
    public final EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return retval = new EsperEPL2GrammarParser.matchRecogPatternAlteration_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat277 = null;

        EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat278 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_BOR=new RewriteRuleTokenStream(adaptor,"token BOR");
        RewriteRuleSubtreeStream stream_matchRecogPatternConcat=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternConcat");
        try {
            // EsperEPL2Grammar.g:938:2: ( matchRecogPatternConcat (o= BOR matchRecogPatternConcat )* -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ ) -> matchRecogPatternConcat )
            // EsperEPL2Grammar.g:938:4: matchRecogPatternConcat (o= BOR matchRecogPatternConcat )*
            {
            pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4788);
            matchRecogPatternConcat277=matchRecogPatternConcat();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat277.getTree());
            // EsperEPL2Grammar.g:938:28: (o= BOR matchRecogPatternConcat )*
            loop105:
            do {
                int alt105=2;
                int LA105_0 = input.LA(1);

                if ( (LA105_0==BOR) ) {
                    alt105=1;
                }


                switch (alt105) {
            	case 1 :
            	    // EsperEPL2Grammar.g:938:29: o= BOR matchRecogPatternConcat
            	    {
            	    o=(Token)match(input,BOR,FOLLOW_BOR_in_matchRecogPatternAlteration4793); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_BOR.add(o);

            	    pushFollow(FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4795);
            	    matchRecogPatternConcat278=matchRecogPatternConcat();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternConcat.add(matchRecogPatternConcat278.getTree());

            	    }
            	    break;

            	default :
            	    break loop105;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternConcat, matchRecogPatternConcat
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 939:3: -> {$o != null}? ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:939:20: ^( MATCHREC_PATTERN_ALTER ( matchRecogPatternConcat )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ALTER, "MATCHREC_PATTERN_ALTER"), root_1);

                if ( !(stream_matchRecogPatternConcat.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternConcat.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternConcat.nextTree());

                }
                stream_matchRecogPatternConcat.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 940:3: -> matchRecogPatternConcat
            {
                adaptor.addChild(root_0, stream_matchRecogPatternConcat.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAlteration"

    public static class matchRecogPatternConcat_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternConcat"
    // EsperEPL2Grammar.g:943:1: matchRecogPatternConcat : ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternConcat_return matchRecogPatternConcat() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternConcat_return retval = new EsperEPL2GrammarParser.matchRecogPatternConcat_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary279 = null;


        RewriteRuleSubtreeStream stream_matchRecogPatternUnary=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternUnary");
        try {
            // EsperEPL2Grammar.g:944:2: ( ( matchRecogPatternUnary )+ -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ ) )
            // EsperEPL2Grammar.g:944:4: ( matchRecogPatternUnary )+
            {
            // EsperEPL2Grammar.g:944:4: ( matchRecogPatternUnary )+
            int cnt106=0;
            loop106:
            do {
                int alt106=2;
                int LA106_0 = input.LA(1);

                if ( (LA106_0==IDENT||LA106_0==LPAREN) ) {
                    alt106=1;
                }


                switch (alt106) {
            	case 1 :
            	    // EsperEPL2Grammar.g:944:4: matchRecogPatternUnary
            	    {
            	    pushFollow(FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4828);
            	    matchRecogPatternUnary279=matchRecogPatternUnary();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogPatternUnary.add(matchRecogPatternUnary279.getTree());

            	    }
            	    break;

            	default :
            	    if ( cnt106 >= 1 ) break loop106;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(106, input);
                        throw eee;
                }
                cnt106++;
            } while (true);



            // AST REWRITE
            // elements: matchRecogPatternUnary
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 945:3: -> ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
            {
                // EsperEPL2Grammar.g:945:6: ^( MATCHREC_PATTERN_CONCAT ( matchRecogPatternUnary )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_CONCAT, "MATCHREC_PATTERN_CONCAT"), root_1);

                if ( !(stream_matchRecogPatternUnary.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogPatternUnary.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogPatternUnary.nextTree());

                }
                stream_matchRecogPatternUnary.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternConcat"

    public static class matchRecogPatternUnary_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternUnary"
    // EsperEPL2Grammar.g:948:1: matchRecogPatternUnary : ( matchRecogPatternNested | matchRecogPatternAtom );
    public final EsperEPL2GrammarParser.matchRecogPatternUnary_return matchRecogPatternUnary() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternUnary_return retval = new EsperEPL2GrammarParser.matchRecogPatternUnary_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested280 = null;

        EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom281 = null;



        try {
            // EsperEPL2Grammar.g:949:2: ( matchRecogPatternNested | matchRecogPatternAtom )
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( (LA107_0==LPAREN) ) {
                alt107=1;
            }
            else if ( (LA107_0==IDENT) ) {
                alt107=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 107, 0, input);

                throw nvae;
            }
            switch (alt107) {
                case 1 :
                    // EsperEPL2Grammar.g:949:5: matchRecogPatternNested
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4853);
                    matchRecogPatternNested280=matchRecogPatternNested();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternNested280.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:950:5: matchRecogPatternAtom
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4859);
                    matchRecogPatternAtom281=matchRecogPatternAtom();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, matchRecogPatternAtom281.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternUnary"

    public static class matchRecogPatternNested_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternNested"
    // EsperEPL2Grammar.g:953:1: matchRecogPatternNested : LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternNested_return matchRecogPatternNested() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternNested_return retval = new EsperEPL2GrammarParser.matchRecogPatternNested_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token p=null;
        Token q=null;
        Token LPAREN282=null;
        Token RPAREN284=null;
        EsperEPL2GrammarParser.matchRecogPatternAlteration_return matchRecogPatternAlteration283 = null;


        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree LPAREN282_tree=null;
        CommonTree RPAREN284_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_matchRecogPatternAlteration=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogPatternAlteration");
        try {
            // EsperEPL2Grammar.g:954:2: ( LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )? -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? ) )
            // EsperEPL2Grammar.g:954:5: LPAREN matchRecogPatternAlteration RPAREN (s= STAR | p= PLUS | q= QUESTION )?
            {
            LPAREN282=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_matchRecogPatternNested4871); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN282);

            pushFollow(FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4873);
            matchRecogPatternAlteration283=matchRecogPatternAlteration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogPatternAlteration.add(matchRecogPatternAlteration283.getTree());
            RPAREN284=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_matchRecogPatternNested4875); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN284);

            // EsperEPL2Grammar.g:954:47: (s= STAR | p= PLUS | q= QUESTION )?
            int alt108=4;
            switch ( input.LA(1) ) {
                case STAR:
                    {
                    alt108=1;
                    }
                    break;
                case PLUS:
                    {
                    alt108=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt108=3;
                    }
                    break;
            }

            switch (alt108) {
                case 1 :
                    // EsperEPL2Grammar.g:954:48: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternNested4880); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:954:57: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternNested4886); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:954:66: q= QUESTION
                    {
                    q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternNested4892); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q);


                    }
                    break;

            }



            // AST REWRITE
            // elements: q, s, p, matchRecogPatternAlteration
            // token labels: s, q, p
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 955:3: -> ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
            {
                // EsperEPL2Grammar.g:955:6: ^( MATCHREC_PATTERN_NESTED matchRecogPatternAlteration ( $s)? ( $p)? ( $q)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_NESTED, "MATCHREC_PATTERN_NESTED"), root_1);

                adaptor.addChild(root_1, stream_matchRecogPatternAlteration.nextTree());
                // EsperEPL2Grammar.g:955:60: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:955:64: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:955:68: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternNested"

    public static class matchRecogPatternAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogPatternAtom"
    // EsperEPL2Grammar.g:958:1: matchRecogPatternAtom : i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) ;
    public final EsperEPL2GrammarParser.matchRecogPatternAtom_return matchRecogPatternAtom() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogPatternAtom_return retval = new EsperEPL2GrammarParser.matchRecogPatternAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token p=null;
        Token q=null;
        Token reluctant=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree p_tree=null;
        CommonTree q_tree=null;
        CommonTree reluctant_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:959:2: (i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )? -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? ) )
            // EsperEPL2Grammar.g:959:4: i= IDENT ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogPatternAtom4931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            // EsperEPL2Grammar.g:959:12: ( (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )? )?
            int alt111=2;
            int LA111_0 = input.LA(1);

            if ( (LA111_0==STAR||(LA111_0>=PLUS && LA111_0<=QUESTION)) ) {
                alt111=1;
            }
            switch (alt111) {
                case 1 :
                    // EsperEPL2Grammar.g:959:13: (s= STAR | p= PLUS | q= QUESTION ) (reluctant= QUESTION )?
                    {
                    // EsperEPL2Grammar.g:959:13: (s= STAR | p= PLUS | q= QUESTION )
                    int alt109=3;
                    switch ( input.LA(1) ) {
                    case STAR:
                        {
                        alt109=1;
                        }
                        break;
                    case PLUS:
                        {
                        alt109=2;
                        }
                        break;
                    case QUESTION:
                        {
                        alt109=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 109, 0, input);

                        throw nvae;
                    }

                    switch (alt109) {
                        case 1 :
                            // EsperEPL2Grammar.g:959:14: s= STAR
                            {
                            s=(Token)match(input,STAR,FOLLOW_STAR_in_matchRecogPatternAtom4937); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STAR.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:959:23: p= PLUS
                            {
                            p=(Token)match(input,PLUS,FOLLOW_PLUS_in_matchRecogPatternAtom4943); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_PLUS.add(p);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:959:32: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4949); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:959:44: (reluctant= QUESTION )?
                    int alt110=2;
                    int LA110_0 = input.LA(1);

                    if ( (LA110_0==QUESTION) ) {
                        alt110=1;
                    }
                    switch (alt110) {
                        case 1 :
                            // EsperEPL2Grammar.g:959:45: reluctant= QUESTION
                            {
                            reluctant=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_matchRecogPatternAtom4955); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(reluctant);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: p, reluctant, q, s, i
            // token labels: s, reluctant, q, p, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_reluctant=new RewriteRuleTokenStream(adaptor,"token reluctant",reluctant);
            RewriteRuleTokenStream stream_q=new RewriteRuleTokenStream(adaptor,"token q",q);
            RewriteRuleTokenStream stream_p=new RewriteRuleTokenStream(adaptor,"token p",p);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 960:3: -> ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
            {
                // EsperEPL2Grammar.g:960:6: ^( MATCHREC_PATTERN_ATOM $i ( $s)? ( $p)? ( $q)? ( $reluctant)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_PATTERN_ATOM, "MATCHREC_PATTERN_ATOM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                // EsperEPL2Grammar.g:960:33: ( $s)?
                if ( stream_s.hasNext() ) {
                    adaptor.addChild(root_1, stream_s.nextNode());

                }
                stream_s.reset();
                // EsperEPL2Grammar.g:960:37: ( $p)?
                if ( stream_p.hasNext() ) {
                    adaptor.addChild(root_1, stream_p.nextNode());

                }
                stream_p.reset();
                // EsperEPL2Grammar.g:960:41: ( $q)?
                if ( stream_q.hasNext() ) {
                    adaptor.addChild(root_1, stream_q.nextNode());

                }
                stream_q.reset();
                // EsperEPL2Grammar.g:960:45: ( $reluctant)?
                if ( stream_reluctant.hasNext() ) {
                    adaptor.addChild(root_1, stream_reluctant.nextNode());

                }
                stream_reluctant.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogPatternAtom"

    public static class matchRecogDefine_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefine"
    // EsperEPL2Grammar.g:963:1: matchRecogDefine : DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) ;
    public final EsperEPL2GrammarParser.matchRecogDefine_return matchRecogDefine() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefine_return retval = new EsperEPL2GrammarParser.matchRecogDefine_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DEFINE285=null;
        Token COMMA287=null;
        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem286 = null;

        EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem288 = null;


        CommonTree DEFINE285_tree=null;
        CommonTree COMMA287_tree=null;
        RewriteRuleTokenStream stream_DEFINE=new RewriteRuleTokenStream(adaptor,"token DEFINE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_matchRecogDefineItem=new RewriteRuleSubtreeStream(adaptor,"rule matchRecogDefineItem");
        try {
            // EsperEPL2Grammar.g:964:2: ( DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )* -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ ) )
            // EsperEPL2Grammar.g:964:4: DEFINE matchRecogDefineItem ( COMMA matchRecogDefineItem )*
            {
            DEFINE285=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_matchRecogDefine4999); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DEFINE.add(DEFINE285);

            pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5001);
            matchRecogDefineItem286=matchRecogDefineItem();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem286.getTree());
            // EsperEPL2Grammar.g:964:32: ( COMMA matchRecogDefineItem )*
            loop112:
            do {
                int alt112=2;
                int LA112_0 = input.LA(1);

                if ( (LA112_0==COMMA) ) {
                    alt112=1;
                }


                switch (alt112) {
            	case 1 :
            	    // EsperEPL2Grammar.g:964:33: COMMA matchRecogDefineItem
            	    {
            	    COMMA287=(Token)match(input,COMMA,FOLLOW_COMMA_in_matchRecogDefine5004); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA287);

            	    pushFollow(FOLLOW_matchRecogDefineItem_in_matchRecogDefine5006);
            	    matchRecogDefineItem288=matchRecogDefineItem();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchRecogDefineItem.add(matchRecogDefineItem288.getTree());

            	    }
            	    break;

            	default :
            	    break loop112;
                }
            } while (true);



            // AST REWRITE
            // elements: matchRecogDefineItem
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 965:3: -> ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
            {
                // EsperEPL2Grammar.g:965:6: ^( MATCHREC_DEFINE ( matchRecogDefineItem )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE, "MATCHREC_DEFINE"), root_1);

                if ( !(stream_matchRecogDefineItem.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchRecogDefineItem.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchRecogDefineItem.nextTree());

                }
                stream_matchRecogDefineItem.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefine"

    public static class matchRecogDefineItem_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchRecogDefineItem"
    // EsperEPL2Grammar.g:968:1: matchRecogDefineItem : i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) ;
    public final EsperEPL2GrammarParser.matchRecogDefineItem_return matchRecogDefineItem() throws RecognitionException {
        EsperEPL2GrammarParser.matchRecogDefineItem_return retval = new EsperEPL2GrammarParser.matchRecogDefineItem_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token AS289=null;
        EsperEPL2GrammarParser.expression_return expression290 = null;


        CommonTree i_tree=null;
        CommonTree AS289_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:969:2: (i= IDENT AS expression -> ^( MATCHREC_DEFINE_ITEM $i expression ) )
            // EsperEPL2Grammar.g:969:4: i= IDENT AS expression
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_matchRecogDefineItem5033); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            AS289=(Token)match(input,AS,FOLLOW_AS_in_matchRecogDefineItem5035); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AS.add(AS289);

            pushFollow(FOLLOW_expression_in_matchRecogDefineItem5037);
            expression290=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression290.getTree());


            // AST REWRITE
            // elements: expression, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 970:3: -> ^( MATCHREC_DEFINE_ITEM $i expression )
            {
                // EsperEPL2Grammar.g:970:6: ^( MATCHREC_DEFINE_ITEM $i expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCHREC_DEFINE_ITEM, "MATCHREC_DEFINE_ITEM"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchRecogDefineItem"

    public static class patternInclusionExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternInclusionExpression"
    // EsperEPL2Grammar.g:973:1: patternInclusionExpression : PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) ;
    public final EsperEPL2GrammarParser.patternInclusionExpression_return patternInclusionExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternInclusionExpression_return retval = new EsperEPL2GrammarParser.patternInclusionExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PATTERN291=null;
        Token LBRACK292=null;
        Token RBRACK294=null;
        EsperEPL2GrammarParser.patternExpression_return patternExpression293 = null;


        CommonTree PATTERN291_tree=null;
        CommonTree LBRACK292_tree=null;
        CommonTree RBRACK294_tree=null;
        RewriteRuleTokenStream stream_PATTERN=new RewriteRuleTokenStream(adaptor,"token PATTERN");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:974:2: ( PATTERN LBRACK patternExpression RBRACK -> ^( PATTERN_INCL_EXPR patternExpression ) )
            // EsperEPL2Grammar.g:974:4: PATTERN LBRACK patternExpression RBRACK
            {
            PATTERN291=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_patternInclusionExpression5062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_PATTERN.add(PATTERN291);

            LBRACK292=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_patternInclusionExpression5064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK292);

            pushFollow(FOLLOW_patternExpression_in_patternInclusionExpression5066);
            patternExpression293=patternExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression293.getTree());
            RBRACK294=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_patternInclusionExpression5068); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK294);



            // AST REWRITE
            // elements: patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 975:3: -> ^( PATTERN_INCL_EXPR patternExpression )
            {
                // EsperEPL2Grammar.g:975:6: ^( PATTERN_INCL_EXPR patternExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_INCL_EXPR, "PATTERN_INCL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_patternExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternInclusionExpression"

    public static class databaseJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "databaseJoinExpression"
    // EsperEPL2Grammar.g:978:1: databaseJoinExpression : SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) ;
    public final EsperEPL2GrammarParser.databaseJoinExpression_return databaseJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.databaseJoinExpression_return retval = new EsperEPL2GrammarParser.databaseJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token s=null;
        Token s2=null;
        Token SQL295=null;
        Token COLON296=null;
        Token LBRACK297=null;
        Token METADATASQL298=null;
        Token RBRACK299=null;

        CommonTree i_tree=null;
        CommonTree s_tree=null;
        CommonTree s2_tree=null;
        CommonTree SQL295_tree=null;
        CommonTree COLON296_tree=null;
        CommonTree LBRACK297_tree=null;
        CommonTree METADATASQL298_tree=null;
        CommonTree RBRACK299_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_SQL=new RewriteRuleTokenStream(adaptor,"token SQL");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_METADATASQL=new RewriteRuleTokenStream(adaptor,"token METADATASQL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

         paraphrases.push("relational data join"); 
        try {
            // EsperEPL2Grammar.g:981:2: ( SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? ) )
            // EsperEPL2Grammar.g:981:4: SQL COLON i= IDENT LBRACK (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )? RBRACK
            {
            SQL295=(Token)match(input,SQL,FOLLOW_SQL_in_databaseJoinExpression5101); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_SQL.add(SQL295);

            COLON296=(Token)match(input,COLON,FOLLOW_COLON_in_databaseJoinExpression5103); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON296);

            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_databaseJoinExpression5107); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            LBRACK297=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_databaseJoinExpression5109); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK297);

            // EsperEPL2Grammar.g:981:29: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( (LA113_0==STRING_LITERAL) ) {
                alt113=1;
            }
            else if ( (LA113_0==QUOTED_STRING_LITERAL) ) {
                alt113=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 113, 0, input);

                throw nvae;
            }
            switch (alt113) {
                case 1 :
                    // EsperEPL2Grammar.g:981:30: s= STRING_LITERAL
                    {
                    s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5114); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:981:49: s= QUOTED_STRING_LITERAL
                    {
                    s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5120); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:981:74: ( METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL ) )?
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( (LA115_0==METADATASQL) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    // EsperEPL2Grammar.g:981:75: METADATASQL (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    {
                    METADATASQL298=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_databaseJoinExpression5124); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_METADATASQL.add(METADATASQL298);

                    // EsperEPL2Grammar.g:981:87: (s2= STRING_LITERAL | s2= QUOTED_STRING_LITERAL )
                    int alt114=2;
                    int LA114_0 = input.LA(1);

                    if ( (LA114_0==STRING_LITERAL) ) {
                        alt114=1;
                    }
                    else if ( (LA114_0==QUOTED_STRING_LITERAL) ) {
                        alt114=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 114, 0, input);

                        throw nvae;
                    }
                    switch (alt114) {
                        case 1 :
                            // EsperEPL2Grammar.g:981:88: s2= STRING_LITERAL
                            {
                            s2=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_databaseJoinExpression5129); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s2);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:981:108: s2= QUOTED_STRING_LITERAL
                            {
                            s2=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5135); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s2);


                            }
                            break;

                    }


                    }
                    break;

            }

            RBRACK299=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_databaseJoinExpression5140); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK299);



            // AST REWRITE
            // elements: s2, s, i
            // token labels: s2, s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s2=new RewriteRuleTokenStream(adaptor,"token s2",s2);
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 982:3: -> ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
            {
                // EsperEPL2Grammar.g:982:6: ^( DATABASE_JOIN_EXPR $i $s ( $s2)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DATABASE_JOIN_EXPR, "DATABASE_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:982:33: ( $s2)?
                if ( stream_s2.hasNext() ) {
                    adaptor.addChild(root_1, stream_s2.nextNode());

                }
                stream_s2.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "databaseJoinExpression"

    public static class methodJoinExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "methodJoinExpression"
    // EsperEPL2Grammar.g:985:1: methodJoinExpression : i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.methodJoinExpression_return methodJoinExpression() throws RecognitionException {
        EsperEPL2GrammarParser.methodJoinExpression_return retval = new EsperEPL2GrammarParser.methodJoinExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token COLON300=null;
        Token LPAREN302=null;
        Token RPAREN304=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier301 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList303 = null;


        CommonTree i_tree=null;
        CommonTree COLON300_tree=null;
        CommonTree LPAREN302_tree=null;
        CommonTree RPAREN304_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("method invocation join"); 
        try {
            // EsperEPL2Grammar.g:988:6: (i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )? -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? ) )
            // EsperEPL2Grammar.g:988:11: i= IDENT COLON classIdentifier ( LPAREN ( expressionList )? RPAREN )?
            {
            i=(Token)match(input,IDENT,FOLLOW_IDENT_in_methodJoinExpression5191); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(i);

            COLON300=(Token)match(input,COLON,FOLLOW_COLON_in_methodJoinExpression5193); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON300);

            pushFollow(FOLLOW_classIdentifier_in_methodJoinExpression5195);
            classIdentifier301=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier301.getTree());
            // EsperEPL2Grammar.g:988:41: ( LPAREN ( expressionList )? RPAREN )?
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==LPAREN) ) {
                alt117=1;
            }
            switch (alt117) {
                case 1 :
                    // EsperEPL2Grammar.g:988:42: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN302=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_methodJoinExpression5198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN302);

                    // EsperEPL2Grammar.g:988:49: ( expressionList )?
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==WINDOW||LA116_0==ESCAPE||(LA116_0>=NOT_EXPR && LA116_0<=EVERY_EXPR)||(LA116_0>=SUM && LA116_0<=COUNT)||LA116_0==CASE||LA116_0==OUTER||(LA116_0>=JOIN && LA116_0<=FULL)||(LA116_0>=EVENTS && LA116_0<=LAST)||(LA116_0>=UNIDIRECTIONAL && LA116_0<=CURRENT_TIMESTAMP)||LA116_0==SNAPSHOT||(LA116_0>=VARIABLE && LA116_0<=INDEX)||(LA116_0>=BOOLEAN_TRUE && LA116_0<=VALUE_NULL)||(LA116_0>=DEFINE && LA116_0<=MATCHES)||LA116_0==WHILE||LA116_0==NUM_DOUBLE||LA116_0==IDENT||LA116_0==LPAREN||(LA116_0>=PLUS && LA116_0<=QUESTION)||(LA116_0>=STRING_LITERAL && LA116_0<=QUOTED_STRING_LITERAL)||LA116_0==MINUS||LA116_0==LCURLY||LA116_0==NUM_INT||(LA116_0>=TICKED_STRING_LITERAL && LA116_0<=NUM_FLOAT)) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            // EsperEPL2Grammar.g:988:49: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_methodJoinExpression5200);
                            expressionList303=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList303.getTree());

                            }
                            break;

                    }

                    RPAREN304=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_methodJoinExpression5203); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN304);


                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, i, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 989:10: -> ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
            {
                // EsperEPL2Grammar.g:989:13: ^( METHOD_JOIN_EXPR $i classIdentifier ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(METHOD_JOIN_EXPR, "METHOD_JOIN_EXPR"), root_1);

                adaptor.addChild(root_1, stream_i.nextNode());
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:989:51: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "methodJoinExpression"

    public static class viewExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "viewExpression"
    // EsperEPL2Grammar.g:992:1: viewExpression : ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.viewExpression_return viewExpression() throws RecognitionException {
        EsperEPL2GrammarParser.viewExpression_return retval = new EsperEPL2GrammarParser.viewExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token COLON305=null;
        Token LPAREN306=null;
        Token RPAREN308=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList307 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree COLON305_tree=null;
        CommonTree LPAREN306_tree=null;
        CommonTree RPAREN308_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
         paraphrases.push("view specifications"); 
        try {
            // EsperEPL2Grammar.g:995:2: (ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:995:4: ns= IDENT COLON nm= IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5256); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON305=(Token)match(input,COLON,FOLLOW_COLON_in_viewExpression5258); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON305);

            nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_viewExpression5262); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(nm);

            LPAREN306=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_viewExpression5264); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN306);

            // EsperEPL2Grammar.g:995:35: ( expressionWithTimeList )?
            int alt118=2;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==WINDOW||LA118_0==ESCAPE||(LA118_0>=NOT_EXPR && LA118_0<=EVERY_EXPR)||(LA118_0>=SUM && LA118_0<=COUNT)||LA118_0==CASE||LA118_0==OUTER||(LA118_0>=JOIN && LA118_0<=FULL)||(LA118_0>=EVENTS && LA118_0<=LAST)||(LA118_0>=UNIDIRECTIONAL && LA118_0<=CURRENT_TIMESTAMP)||LA118_0==SNAPSHOT||(LA118_0>=VARIABLE && LA118_0<=INDEX)||(LA118_0>=BOOLEAN_TRUE && LA118_0<=VALUE_NULL)||(LA118_0>=DEFINE && LA118_0<=MATCHES)||LA118_0==WHILE||LA118_0==NUM_DOUBLE||LA118_0==IDENT||LA118_0==LPAREN||LA118_0==LBRACK||LA118_0==STAR||(LA118_0>=PLUS && LA118_0<=QUESTION)||(LA118_0>=STRING_LITERAL && LA118_0<=QUOTED_STRING_LITERAL)||LA118_0==MINUS||LA118_0==LCURLY||LA118_0==NUM_INT||(LA118_0>=TICKED_STRING_LITERAL && LA118_0<=NUM_FLOAT)) ) {
                alt118=1;
            }
            switch (alt118) {
                case 1 :
                    // EsperEPL2Grammar.g:995:35: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_viewExpression5266);
                    expressionWithTimeList307=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList307.getTree());

                    }
                    break;

            }

            RPAREN308=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_viewExpression5269); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN308);



            // AST REWRITE
            // elements: ns, nm, expressionWithTimeList
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 996:3: -> ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:996:6: ^( VIEW_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(VIEW_EXPR, "VIEW_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:996:26: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "viewExpression"

    public static class groupByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "groupByListExpr"
    // EsperEPL2Grammar.g:999:1: groupByListExpr : expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) ;
    public final EsperEPL2GrammarParser.groupByListExpr_return groupByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.groupByListExpr_return retval = new EsperEPL2GrammarParser.groupByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA310=null;
        EsperEPL2GrammarParser.expression_return expression309 = null;

        EsperEPL2GrammarParser.expression_return expression311 = null;


        CommonTree COMMA310_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         paraphrases.push("group-by clause"); 
        try {
            // EsperEPL2Grammar.g:1002:2: ( expression ( COMMA expression )* -> ^( GROUP_BY_EXPR ( expression )+ ) )
            // EsperEPL2Grammar.g:1002:4: expression ( COMMA expression )*
            {
            pushFollow(FOLLOW_expression_in_groupByListExpr5308);
            expression309=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression309.getTree());
            // EsperEPL2Grammar.g:1002:15: ( COMMA expression )*
            loop119:
            do {
                int alt119=2;
                int LA119_0 = input.LA(1);

                if ( (LA119_0==COMMA) ) {
                    alt119=1;
                }


                switch (alt119) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1002:16: COMMA expression
            	    {
            	    COMMA310=(Token)match(input,COMMA,FOLLOW_COMMA_in_groupByListExpr5311); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA310);

            	    pushFollow(FOLLOW_expression_in_groupByListExpr5313);
            	    expression311=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_expression.add(expression311.getTree());

            	    }
            	    break;

            	default :
            	    break loop119;
                }
            } while (true);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1003:3: -> ^( GROUP_BY_EXPR ( expression )+ )
            {
                // EsperEPL2Grammar.g:1003:6: ^( GROUP_BY_EXPR ( expression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GROUP_BY_EXPR, "GROUP_BY_EXPR"), root_1);

                if ( !(stream_expression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "groupByListExpr"

    public static class orderByListExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListExpr"
    // EsperEPL2Grammar.g:1006:1: orderByListExpr : orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) ;
    public final EsperEPL2GrammarParser.orderByListExpr_return orderByListExpr() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListExpr_return retval = new EsperEPL2GrammarParser.orderByListExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA313=null;
        EsperEPL2GrammarParser.orderByListElement_return orderByListElement312 = null;

        EsperEPL2GrammarParser.orderByListElement_return orderByListElement314 = null;


        CommonTree COMMA313_tree=null;
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_orderByListElement=new RewriteRuleSubtreeStream(adaptor,"rule orderByListElement");
         paraphrases.push("order by clause"); 
        try {
            // EsperEPL2Grammar.g:1009:2: ( orderByListElement ( COMMA orderByListElement )* -> ^( ORDER_BY_EXPR ( orderByListElement )+ ) )
            // EsperEPL2Grammar.g:1009:4: orderByListElement ( COMMA orderByListElement )*
            {
            pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5348);
            orderByListElement312=orderByListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement312.getTree());
            // EsperEPL2Grammar.g:1009:23: ( COMMA orderByListElement )*
            loop120:
            do {
                int alt120=2;
                int LA120_0 = input.LA(1);

                if ( (LA120_0==COMMA) ) {
                    alt120=1;
                }


                switch (alt120) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1009:24: COMMA orderByListElement
            	    {
            	    COMMA313=(Token)match(input,COMMA,FOLLOW_COMMA_in_orderByListExpr5351); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA313);

            	    pushFollow(FOLLOW_orderByListElement_in_orderByListExpr5353);
            	    orderByListElement314=orderByListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orderByListElement.add(orderByListElement314.getTree());

            	    }
            	    break;

            	default :
            	    break loop120;
                }
            } while (true);



            // AST REWRITE
            // elements: orderByListElement
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1010:3: -> ^( ORDER_BY_EXPR ( orderByListElement )+ )
            {
                // EsperEPL2Grammar.g:1010:6: ^( ORDER_BY_EXPR ( orderByListElement )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_BY_EXPR, "ORDER_BY_EXPR"), root_1);

                if ( !(stream_orderByListElement.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orderByListElement.hasNext() ) {
                    adaptor.addChild(root_1, stream_orderByListElement.nextTree());

                }
                stream_orderByListElement.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListExpr"

    public static class orderByListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orderByListElement"
    // EsperEPL2Grammar.g:1013:1: orderByListElement : expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) ;
    public final EsperEPL2GrammarParser.orderByListElement_return orderByListElement() throws RecognitionException {
        EsperEPL2GrammarParser.orderByListElement_return retval = new EsperEPL2GrammarParser.orderByListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token d=null;
        EsperEPL2GrammarParser.expression_return expression315 = null;


        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1014:2: ( expression (d= ASC | d= DESC )? -> ^( ORDER_ELEMENT_EXPR expression ( $d)? ) )
            // EsperEPL2Grammar.g:1014:4: expression (d= ASC | d= DESC )?
            {
            pushFollow(FOLLOW_expression_in_orderByListElement5378);
            expression315=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression315.getTree());
            // EsperEPL2Grammar.g:1014:15: (d= ASC | d= DESC )?
            int alt121=3;
            int LA121_0 = input.LA(1);

            if ( (LA121_0==ASC) ) {
                alt121=1;
            }
            else if ( (LA121_0==DESC) ) {
                alt121=2;
            }
            switch (alt121) {
                case 1 :
                    // EsperEPL2Grammar.g:1014:16: d= ASC
                    {
                    d=(Token)match(input,ASC,FOLLOW_ASC_in_orderByListElement5383); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(d);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1014:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_orderByListElement5387); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;

            }



            // AST REWRITE
            // elements: expression, d
            // token labels: d
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1015:3: -> ^( ORDER_ELEMENT_EXPR expression ( $d)? )
            {
                // EsperEPL2Grammar.g:1015:6: ^( ORDER_ELEMENT_EXPR expression ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ORDER_ELEMENT_EXPR, "ORDER_ELEMENT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1015:38: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orderByListElement"

    public static class havingClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "havingClause"
    // EsperEPL2Grammar.g:1018:1: havingClause : evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) ;
    public final EsperEPL2GrammarParser.havingClause_return havingClause() throws RecognitionException {
        EsperEPL2GrammarParser.havingClause_return retval = new EsperEPL2GrammarParser.havingClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression316 = null;


        RewriteRuleSubtreeStream stream_evalOrExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalOrExpression");
         paraphrases.push("having clause"); 
        try {
            // EsperEPL2Grammar.g:1021:2: ( evalOrExpression -> ^( HAVING_EXPR evalOrExpression ) )
            // EsperEPL2Grammar.g:1021:4: evalOrExpression
            {
            pushFollow(FOLLOW_evalOrExpression_in_havingClause5425);
            evalOrExpression316=evalOrExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalOrExpression.add(evalOrExpression316.getTree());


            // AST REWRITE
            // elements: evalOrExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1022:3: -> ^( HAVING_EXPR evalOrExpression )
            {
                // EsperEPL2Grammar.g:1022:6: ^( HAVING_EXPR evalOrExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HAVING_EXPR, "HAVING_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalOrExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "havingClause"

    public static class outputLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimit"
    // EsperEPL2Grammar.g:1025:1: outputLimit : ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) ;
    public final EsperEPL2GrammarParser.outputLimit_return outputLimit() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimit_return retval = new EsperEPL2GrammarParser.outputLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token k=null;
        Token ev=null;
        Token i=null;
        Token e=null;
        Token at=null;
        Token wh=null;
        Token THEN322=null;
        EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter317 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod318 = null;

        EsperEPL2GrammarParser.number_return number319 = null;

        EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet320 = null;

        EsperEPL2GrammarParser.expression_return expression321 = null;

        EsperEPL2GrammarParser.onSetExpr_return onSetExpr323 = null;


        CommonTree k_tree=null;
        CommonTree ev_tree=null;
        CommonTree i_tree=null;
        CommonTree e_tree=null;
        CommonTree at_tree=null;
        CommonTree wh_tree=null;
        CommonTree THEN322_tree=null;
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_THEN=new RewriteRuleTokenStream(adaptor,"token THEN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_SNAPSHOT=new RewriteRuleTokenStream(adaptor,"token SNAPSHOT");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleTokenStream stream_WHEN=new RewriteRuleTokenStream(adaptor,"token WHEN");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_crontabLimitParameterSet=new RewriteRuleSubtreeStream(adaptor,"rule crontabLimitParameterSet");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_outputLimitAfter=new RewriteRuleSubtreeStream(adaptor,"rule outputLimitAfter");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_onSetExpr=new RewriteRuleSubtreeStream(adaptor,"rule onSetExpr");
         paraphrases.push("output rate clause"); 
        try {
            // EsperEPL2Grammar.g:1028:2: ( ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | ) -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? ) -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? ) -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? ) -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? ) -> ^( AFTER_LIMIT_EXPR outputLimitAfter ) )
            // EsperEPL2Grammar.g:1028:9: ( outputLimitAfter )? (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )? ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            {
            // EsperEPL2Grammar.g:1028:9: ( outputLimitAfter )?
            int alt122=2;
            int LA122_0 = input.LA(1);

            if ( (LA122_0==AFTER) ) {
                alt122=1;
            }
            switch (alt122) {
                case 1 :
                    // EsperEPL2Grammar.g:1028:9: outputLimitAfter
                    {
                    pushFollow(FOLLOW_outputLimitAfter_in_outputLimit5463);
                    outputLimitAfter317=outputLimitAfter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_outputLimitAfter.add(outputLimitAfter317.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1029:10: (k= ALL | k= FIRST | k= LAST | k= SNAPSHOT )?
            int alt123=5;
            switch ( input.LA(1) ) {
                case ALL:
                    {
                    alt123=1;
                    }
                    break;
                case FIRST:
                    {
                    alt123=2;
                    }
                    break;
                case LAST:
                    {
                    alt123=3;
                    }
                    break;
                case SNAPSHOT:
                    {
                    alt123=4;
                    }
                    break;
            }

            switch (alt123) {
                case 1 :
                    // EsperEPL2Grammar.g:1029:11: k= ALL
                    {
                    k=(Token)match(input,ALL,FOLLOW_ALL_in_outputLimit5478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ALL.add(k);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1029:17: k= FIRST
                    {
                    k=(Token)match(input,FIRST,FOLLOW_FIRST_in_outputLimit5482); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FIRST.add(k);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1029:25: k= LAST
                    {
                    k=(Token)match(input,LAST,FOLLOW_LAST_in_outputLimit5486); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LAST.add(k);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1029:32: k= SNAPSHOT
                    {
                    k=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_outputLimit5490); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SNAPSHOT.add(k);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1030:10: ( (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) ) | (at= AT crontabLimitParameterSet ) | (wh= WHEN expression ( THEN onSetExpr )? ) | )
            int alt127=4;
            switch ( input.LA(1) ) {
            case EVERY_EXPR:
                {
                alt127=1;
                }
                break;
            case AT:
                {
                alt127=2;
                }
                break;
            case WHEN:
                {
                alt127=3;
                }
                break;
            case EOF:
            case ORDER:
            case ROW_LIMIT_EXPR:
            case FOR:
                {
                alt127=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 127, 0, input);

                throw nvae;
            }

            switch (alt127) {
                case 1 :
                    // EsperEPL2Grammar.g:1031:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    {
                    // EsperEPL2Grammar.g:1031:12: (ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) ) )
                    // EsperEPL2Grammar.g:1031:14: ev= EVERY_EXPR ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    {
                    ev=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_outputLimit5521); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVERY_EXPR.add(ev);

                    // EsperEPL2Grammar.g:1032:7: ( ( timePeriod )=> timePeriod | ( number | i= IDENT ) (e= EVENTS ) )
                    int alt125=2;
                    int LA125_0 = input.LA(1);

                    if ( (LA125_0==NUM_INT) ) {
                        int LA125_1 = input.LA(2);

                        if ( (LA125_1==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_1==EVENTS) ) {
                            alt125=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 1, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_LONG) ) {
                        int LA125_2 = input.LA(2);

                        if ( (LA125_2==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_2==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_FLOAT) ) {
                        int LA125_3 = input.LA(2);

                        if ( (LA125_3==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_3==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==NUM_DOUBLE) ) {
                        int LA125_4 = input.LA(2);

                        if ( (LA125_4==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_4==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==IDENT) ) {
                        int LA125_5 = input.LA(2);

                        if ( (LA125_5==TIMEPERIOD_SECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_SECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_SEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_DAYS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_DAY) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MILLISECONDS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MILLISECOND) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MILLISEC) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==EVENTS) ) {
                            alt125=2;
                        }
                        else if ( (LA125_5==TIMEPERIOD_HOURS) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_HOUR) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MINUTES) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==TIMEPERIOD_MINUTE) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else if ( (LA125_5==MIN) && (synpred2_EsperEPL2Grammar())) {
                            alt125=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 125, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA125_0==QUESTION) && (synpred2_EsperEPL2Grammar())) {
                        alt125=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 125, 0, input);

                        throw nvae;
                    }
                    switch (alt125) {
                        case 1 :
                            // EsperEPL2Grammar.g:1033:9: ( timePeriod )=> timePeriod
                            {
                            pushFollow(FOLLOW_timePeriod_in_outputLimit5547);
                            timePeriod318=timePeriod();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod318.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1034:9: ( number | i= IDENT ) (e= EVENTS )
                            {
                            // EsperEPL2Grammar.g:1034:9: ( number | i= IDENT )
                            int alt124=2;
                            int LA124_0 = input.LA(1);

                            if ( (LA124_0==NUM_DOUBLE||LA124_0==NUM_INT||(LA124_0>=NUM_LONG && LA124_0<=NUM_FLOAT)) ) {
                                alt124=1;
                            }
                            else if ( (LA124_0==IDENT) ) {
                                alt124=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 124, 0, input);

                                throw nvae;
                            }
                            switch (alt124) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1034:10: number
                                    {
                                    pushFollow(FOLLOW_number_in_outputLimit5558);
                                    number319=number();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_number.add(number319.getTree());

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1034:19: i= IDENT
                                    {
                                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_outputLimit5564); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1034:28: (e= EVENTS )
                            // EsperEPL2Grammar.g:1034:29: e= EVENTS
                            {
                            e=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimit5570); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVENTS.add(e);


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1038:5: (at= AT crontabLimitParameterSet )
                    {
                    // EsperEPL2Grammar.g:1038:5: (at= AT crontabLimitParameterSet )
                    // EsperEPL2Grammar.g:1038:7: at= AT crontabLimitParameterSet
                    {
                    at=(Token)match(input,AT,FOLLOW_AT_in_outputLimit5601); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(at);

                    pushFollow(FOLLOW_crontabLimitParameterSet_in_outputLimit5603);
                    crontabLimitParameterSet320=crontabLimitParameterSet();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_crontabLimitParameterSet.add(crontabLimitParameterSet320.getTree());

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1040:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    {
                    // EsperEPL2Grammar.g:1040:5: (wh= WHEN expression ( THEN onSetExpr )? )
                    // EsperEPL2Grammar.g:1040:7: wh= WHEN expression ( THEN onSetExpr )?
                    {
                    wh=(Token)match(input,WHEN,FOLLOW_WHEN_in_outputLimit5620); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHEN.add(wh);

                    pushFollow(FOLLOW_expression_in_outputLimit5622);
                    expression321=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression321.getTree());
                    // EsperEPL2Grammar.g:1040:26: ( THEN onSetExpr )?
                    int alt126=2;
                    int LA126_0 = input.LA(1);

                    if ( (LA126_0==THEN) ) {
                        alt126=1;
                    }
                    switch (alt126) {
                        case 1 :
                            // EsperEPL2Grammar.g:1040:27: THEN onSetExpr
                            {
                            THEN322=(Token)match(input,THEN,FOLLOW_THEN_in_outputLimit5625); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_THEN.add(THEN322);

                            pushFollow(FOLLOW_onSetExpr_in_outputLimit5627);
                            onSetExpr323=onSetExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_onSetExpr.add(onSetExpr323.getTree());

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1042:10: 
                    {
                    }
                    break;

            }



            // AST REWRITE
            // elements: k, outputLimitAfter, i, outputLimitAfter, k, timePeriod, k, crontabLimitParameterSet, outputLimitAfter, k, outputLimitAfter, number, outputLimitAfter, onSetExpr, expression
            // token labels: k, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_k=new RewriteRuleTokenStream(adaptor,"token k",k);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1043:6: -> {$ev != null && $e != null}? ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
            if (ev != null && e != null) {
                // EsperEPL2Grammar.g:1043:38: ^( EVENT_LIMIT_EXPR ( $k)? ( number )? ( $i)? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_LIMIT_EXPR, "EVENT_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1043:57: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                // EsperEPL2Grammar.g:1043:61: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1043:69: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1043:73: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1044:6: -> {$ev != null}? ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
            if (ev != null) {
                // EsperEPL2Grammar.g:1044:24: ^( TIMEPERIOD_LIMIT_EXPR ( $k)? timePeriod ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIMEPERIOD_LIMIT_EXPR, "TIMEPERIOD_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1044:48: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_timePeriod.nextTree());
                // EsperEPL2Grammar.g:1044:63: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1045:6: -> {$at != null}? ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
            if (at != null) {
                // EsperEPL2Grammar.g:1045:24: ^( CRONTAB_LIMIT_EXPR ( $k)? crontabLimitParameterSet ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR, "CRONTAB_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1045:45: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_crontabLimitParameterSet.nextTree());
                // EsperEPL2Grammar.g:1045:74: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1046:6: -> {$wh != null}? ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
            if (wh != null) {
                // EsperEPL2Grammar.g:1046:24: ^( WHEN_LIMIT_EXPR ( $k)? expression ( onSetExpr )? ( outputLimitAfter )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHEN_LIMIT_EXPR, "WHEN_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1046:42: ( $k)?
                if ( stream_k.hasNext() ) {
                    adaptor.addChild(root_1, stream_k.nextNode());

                }
                stream_k.reset();
                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1046:57: ( onSetExpr )?
                if ( stream_onSetExpr.hasNext() ) {
                    adaptor.addChild(root_1, stream_onSetExpr.nextTree());

                }
                stream_onSetExpr.reset();
                // EsperEPL2Grammar.g:1046:68: ( outputLimitAfter )?
                if ( stream_outputLimitAfter.hasNext() ) {
                    adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                }
                stream_outputLimitAfter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1047:6: -> ^( AFTER_LIMIT_EXPR outputLimitAfter )
            {
                // EsperEPL2Grammar.g:1047:9: ^( AFTER_LIMIT_EXPR outputLimitAfter )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(AFTER_LIMIT_EXPR, "AFTER_LIMIT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_outputLimitAfter.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimit"

    public static class outputLimitAfter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "outputLimitAfter"
    // EsperEPL2Grammar.g:1050:1: outputLimitAfter : a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) ;
    public final EsperEPL2GrammarParser.outputLimitAfter_return outputLimitAfter() throws RecognitionException {
        EsperEPL2GrammarParser.outputLimitAfter_return retval = new EsperEPL2GrammarParser.outputLimitAfter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token EVENTS326=null;
        EsperEPL2GrammarParser.timePeriod_return timePeriod324 = null;

        EsperEPL2GrammarParser.number_return number325 = null;


        CommonTree a_tree=null;
        CommonTree EVENTS326_tree=null;
        RewriteRuleTokenStream stream_AFTER=new RewriteRuleTokenStream(adaptor,"token AFTER");
        RewriteRuleTokenStream stream_EVENTS=new RewriteRuleTokenStream(adaptor,"token EVENTS");
        RewriteRuleSubtreeStream stream_timePeriod=new RewriteRuleSubtreeStream(adaptor,"rule timePeriod");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1051:2: (a= AFTER ( timePeriod | number EVENTS ) -> ^( AFTER ( timePeriod )? ( number )? ) )
            // EsperEPL2Grammar.g:1051:6: a= AFTER ( timePeriod | number EVENTS )
            {
            a=(Token)match(input,AFTER,FOLLOW_AFTER_in_outputLimitAfter5777); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_AFTER.add(a);

            // EsperEPL2Grammar.g:1051:14: ( timePeriod | number EVENTS )
            int alt128=2;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA128_1 = input.LA(2);

                if ( (LA128_1==MIN||(LA128_1>=TIMEPERIOD_DAY && LA128_1<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else if ( (LA128_1==EVENTS) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA128_2 = input.LA(2);

                if ( (LA128_2==MIN||(LA128_2>=TIMEPERIOD_DAY && LA128_2<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else if ( (LA128_2==EVENTS) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA128_3 = input.LA(2);

                if ( (LA128_3==MIN||(LA128_3>=TIMEPERIOD_DAY && LA128_3<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else if ( (LA128_3==EVENTS) ) {
                    alt128=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA128_4 = input.LA(2);

                if ( (LA128_4==EVENTS) ) {
                    alt128=2;
                }
                else if ( (LA128_4==MIN||(LA128_4>=TIMEPERIOD_DAY && LA128_4<=TIMEPERIOD_MILLISECONDS)) ) {
                    alt128=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 128, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt128=1;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 128, 0, input);

                throw nvae;
            }

            switch (alt128) {
                case 1 :
                    // EsperEPL2Grammar.g:1051:15: timePeriod
                    {
                    pushFollow(FOLLOW_timePeriod_in_outputLimitAfter5780);
                    timePeriod324=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_timePeriod.add(timePeriod324.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1051:28: number EVENTS
                    {
                    pushFollow(FOLLOW_number_in_outputLimitAfter5784);
                    number325=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number325.getTree());
                    EVENTS326=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_outputLimitAfter5786); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EVENTS.add(EVENTS326);


                    }
                    break;

            }



            // AST REWRITE
            // elements: timePeriod, AFTER, number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1052:6: -> ^( AFTER ( timePeriod )? ( number )? )
            {
                // EsperEPL2Grammar.g:1052:9: ^( AFTER ( timePeriod )? ( number )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AFTER.nextNode(), root_1);

                // EsperEPL2Grammar.g:1052:17: ( timePeriod )?
                if ( stream_timePeriod.hasNext() ) {
                    adaptor.addChild(root_1, stream_timePeriod.nextTree());

                }
                stream_timePeriod.reset();
                // EsperEPL2Grammar.g:1052:29: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "outputLimitAfter"

    public static class rowLimit_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rowLimit"
    // EsperEPL2Grammar.g:1055:1: rowLimit : (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) ;
    public final EsperEPL2GrammarParser.rowLimit_return rowLimit() throws RecognitionException {
        EsperEPL2GrammarParser.rowLimit_return retval = new EsperEPL2GrammarParser.rowLimit_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token c=null;
        Token o=null;
        Token i2=null;
        EsperEPL2GrammarParser.numberconstant_return n1 = null;

        EsperEPL2GrammarParser.numberconstant_return n2 = null;


        CommonTree i1_tree=null;
        CommonTree c_tree=null;
        CommonTree o_tree=null;
        CommonTree i2_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_OFFSET=new RewriteRuleTokenStream(adaptor,"token OFFSET");
        RewriteRuleSubtreeStream stream_numberconstant=new RewriteRuleSubtreeStream(adaptor,"rule numberconstant");
         paraphrases.push("row limit clause"); 
        try {
            // EsperEPL2Grammar.g:1058:2: ( (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )? -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? ) )
            // EsperEPL2Grammar.g:1058:6: (n1= numberconstant | i1= IDENT ) ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            {
            // EsperEPL2Grammar.g:1058:6: (n1= numberconstant | i1= IDENT )
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==NUM_DOUBLE||LA129_0==PLUS||LA129_0==MINUS||LA129_0==NUM_INT||(LA129_0>=NUM_LONG && LA129_0<=NUM_FLOAT)) ) {
                alt129=1;
            }
            else if ( (LA129_0==IDENT) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    // EsperEPL2Grammar.g:1058:7: n1= numberconstant
                    {
                    pushFollow(FOLLOW_numberconstant_in_rowLimit5832);
                    n1=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_numberconstant.add(n1.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1058:27: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5838); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1058:37: ( (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT ) )?
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==OFFSET||LA132_0==COMMA) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    // EsperEPL2Grammar.g:1058:38: (c= COMMA | o= OFFSET ) (n2= numberconstant | i2= IDENT )
                    {
                    // EsperEPL2Grammar.g:1058:38: (c= COMMA | o= OFFSET )
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==COMMA) ) {
                        alt130=1;
                    }
                    else if ( (LA130_0==OFFSET) ) {
                        alt130=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 130, 0, input);

                        throw nvae;
                    }
                    switch (alt130) {
                        case 1 :
                            // EsperEPL2Grammar.g:1058:39: c= COMMA
                            {
                            c=(Token)match(input,COMMA,FOLLOW_COMMA_in_rowLimit5845); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COMMA.add(c);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1058:49: o= OFFSET
                            {
                            o=(Token)match(input,OFFSET,FOLLOW_OFFSET_in_rowLimit5851); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_OFFSET.add(o);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1058:59: (n2= numberconstant | i2= IDENT )
                    int alt131=2;
                    int LA131_0 = input.LA(1);

                    if ( (LA131_0==NUM_DOUBLE||LA131_0==PLUS||LA131_0==MINUS||LA131_0==NUM_INT||(LA131_0>=NUM_LONG && LA131_0<=NUM_FLOAT)) ) {
                        alt131=1;
                    }
                    else if ( (LA131_0==IDENT) ) {
                        alt131=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 131, 0, input);

                        throw nvae;
                    }
                    switch (alt131) {
                        case 1 :
                            // EsperEPL2Grammar.g:1058:60: n2= numberconstant
                            {
                            pushFollow(FOLLOW_numberconstant_in_rowLimit5857);
                            n2=numberconstant();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_numberconstant.add(n2.getTree());

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1058:80: i2= IDENT
                            {
                            i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rowLimit5863); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IDENT.add(i2);


                            }
                            break;

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: i2, c, o, i1, n1, n2
            // token labels: c, o, i2, i1
            // rule labels: n1, retval, n2
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_c=new RewriteRuleTokenStream(adaptor,"token c",c);
            RewriteRuleTokenStream stream_o=new RewriteRuleTokenStream(adaptor,"token o",o);
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_n1=new RewriteRuleSubtreeStream(adaptor,"rule n1",n1!=null?n1.tree:null);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);
            RewriteRuleSubtreeStream stream_n2=new RewriteRuleSubtreeStream(adaptor,"rule n2",n2!=null?n2.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1059:6: -> ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
            {
                // EsperEPL2Grammar.g:1059:9: ^( ROW_LIMIT_EXPR ( $n1)? ( $i1)? ( $n2)? ( $i2)? ( $o)? ( $c)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ROW_LIMIT_EXPR, "ROW_LIMIT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1059:26: ( $n1)?
                if ( stream_n1.hasNext() ) {
                    adaptor.addChild(root_1, stream_n1.nextTree());

                }
                stream_n1.reset();
                // EsperEPL2Grammar.g:1059:31: ( $i1)?
                if ( stream_i1.hasNext() ) {
                    adaptor.addChild(root_1, stream_i1.nextNode());

                }
                stream_i1.reset();
                // EsperEPL2Grammar.g:1059:36: ( $n2)?
                if ( stream_n2.hasNext() ) {
                    adaptor.addChild(root_1, stream_n2.nextTree());

                }
                stream_n2.reset();
                // EsperEPL2Grammar.g:1059:41: ( $i2)?
                if ( stream_i2.hasNext() ) {
                    adaptor.addChild(root_1, stream_i2.nextNode());

                }
                stream_i2.reset();
                // EsperEPL2Grammar.g:1059:46: ( $o)?
                if ( stream_o.hasNext() ) {
                    adaptor.addChild(root_1, stream_o.nextNode());

                }
                stream_o.reset();
                // EsperEPL2Grammar.g:1059:50: ( $c)?
                if ( stream_c.hasNext() ) {
                    adaptor.addChild(root_1, stream_c.nextNode());

                }
                stream_c.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rowLimit"

    public static class crontabLimitParameterSet_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "crontabLimitParameterSet"
    // EsperEPL2Grammar.g:1062:1: crontabLimitParameterSet : LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) ;
    public final EsperEPL2GrammarParser.crontabLimitParameterSet_return crontabLimitParameterSet() throws RecognitionException {
        EsperEPL2GrammarParser.crontabLimitParameterSet_return retval = new EsperEPL2GrammarParser.crontabLimitParameterSet_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN327=null;
        Token COMMA329=null;
        Token COMMA331=null;
        Token COMMA333=null;
        Token COMMA335=null;
        Token COMMA337=null;
        Token RPAREN339=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime328 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime330 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime332 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime334 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime336 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime338 = null;


        CommonTree LPAREN327_tree=null;
        CommonTree COMMA329_tree=null;
        CommonTree COMMA331_tree=null;
        CommonTree COMMA333_tree=null;
        CommonTree COMMA335_tree=null;
        CommonTree COMMA337_tree=null;
        CommonTree RPAREN339_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTime=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTime");
        try {
            // EsperEPL2Grammar.g:1063:2: ( LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* ) )
            // EsperEPL2Grammar.g:1063:4: LPAREN expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime COMMA expressionWithTime ( COMMA expressionWithTime )? RPAREN
            {
            LPAREN327=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_crontabLimitParameterSet5915); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN327);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5917);
            expressionWithTime328=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime328.getTree());
            COMMA329=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5919); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA329);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5921);
            expressionWithTime330=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime330.getTree());
            COMMA331=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5923); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA331);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5925);
            expressionWithTime332=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime332.getTree());
            COMMA333=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5927); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA333);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5929);
            expressionWithTime334=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime334.getTree());
            COMMA335=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5931); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COMMA.add(COMMA335);

            pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5933);
            expressionWithTime336=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime336.getTree());
            // EsperEPL2Grammar.g:1063:130: ( COMMA expressionWithTime )?
            int alt133=2;
            int LA133_0 = input.LA(1);

            if ( (LA133_0==COMMA) ) {
                alt133=1;
            }
            switch (alt133) {
                case 1 :
                    // EsperEPL2Grammar.g:1063:131: COMMA expressionWithTime
                    {
                    COMMA337=(Token)match(input,COMMA,FOLLOW_COMMA_in_crontabLimitParameterSet5936); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA337);

                    pushFollow(FOLLOW_expressionWithTime_in_crontabLimitParameterSet5938);
                    expressionWithTime338=expressionWithTime();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTime.add(expressionWithTime338.getTree());

                    }
                    break;

            }

            RPAREN339=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_crontabLimitParameterSet5942); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN339);



            // AST REWRITE
            // elements: expressionWithTime
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1064:3: -> ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
            {
                // EsperEPL2Grammar.g:1064:6: ^( CRONTAB_LIMIT_EXPR_PARAM ( expressionWithTime )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CRONTAB_LIMIT_EXPR_PARAM, "CRONTAB_LIMIT_EXPR_PARAM"), root_1);

                // EsperEPL2Grammar.g:1064:33: ( expressionWithTime )*
                while ( stream_expressionWithTime.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTime.nextTree());

                }
                stream_expressionWithTime.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "crontabLimitParameterSet"

    public static class whenClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "whenClause"
    // EsperEPL2Grammar.g:1067:1: whenClause : ( WHEN expression THEN expression ) ;
    public final EsperEPL2GrammarParser.whenClause_return whenClause() throws RecognitionException {
        EsperEPL2GrammarParser.whenClause_return retval = new EsperEPL2GrammarParser.whenClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WHEN340=null;
        Token THEN342=null;
        EsperEPL2GrammarParser.expression_return expression341 = null;

        EsperEPL2GrammarParser.expression_return expression343 = null;


        CommonTree WHEN340_tree=null;
        CommonTree THEN342_tree=null;

        try {
            // EsperEPL2Grammar.g:1068:2: ( ( WHEN expression THEN expression ) )
            // EsperEPL2Grammar.g:1068:4: ( WHEN expression THEN expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1068:4: ( WHEN expression THEN expression )
            // EsperEPL2Grammar.g:1068:5: WHEN expression THEN expression
            {
            WHEN340=(Token)match(input,WHEN,FOLLOW_WHEN_in_whenClause5972); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5975);
            expression341=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression341.getTree());
            THEN342=(Token)match(input,THEN,FOLLOW_THEN_in_whenClause5977); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_whenClause5980);
            expression343=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression343.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "whenClause"

    public static class elseClause_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "elseClause"
    // EsperEPL2Grammar.g:1071:1: elseClause : ( ELSE expression ) ;
    public final EsperEPL2GrammarParser.elseClause_return elseClause() throws RecognitionException {
        EsperEPL2GrammarParser.elseClause_return retval = new EsperEPL2GrammarParser.elseClause_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ELSE344=null;
        EsperEPL2GrammarParser.expression_return expression345 = null;


        CommonTree ELSE344_tree=null;

        try {
            // EsperEPL2Grammar.g:1072:2: ( ( ELSE expression ) )
            // EsperEPL2Grammar.g:1072:4: ( ELSE expression )
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1072:4: ( ELSE expression )
            // EsperEPL2Grammar.g:1072:5: ELSE expression
            {
            ELSE344=(Token)match(input,ELSE,FOLLOW_ELSE_in_elseClause5993); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_elseClause5996);
            expression345=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression345.getTree());

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "elseClause"

    public static class expression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expression"
    // EsperEPL2Grammar.g:1076:1: expression : caseExpression ;
    public final EsperEPL2GrammarParser.expression_return expression() throws RecognitionException {
        EsperEPL2GrammarParser.expression_return retval = new EsperEPL2GrammarParser.expression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.caseExpression_return caseExpression346 = null;



        try {
            // EsperEPL2Grammar.g:1077:2: ( caseExpression )
            // EsperEPL2Grammar.g:1077:4: caseExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_caseExpression_in_expression6009);
            caseExpression346=caseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, caseExpression346.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expression"

    public static class caseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "caseExpression"
    // EsperEPL2Grammar.g:1080:1: caseExpression : ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression );
    public final EsperEPL2GrammarParser.caseExpression_return caseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.caseExpression_return retval = new EsperEPL2GrammarParser.caseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token CASE347=null;
        Token END350=null;
        Token CASE351=null;
        Token END355=null;
        EsperEPL2GrammarParser.whenClause_return whenClause348 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause349 = null;

        EsperEPL2GrammarParser.expression_return expression352 = null;

        EsperEPL2GrammarParser.whenClause_return whenClause353 = null;

        EsperEPL2GrammarParser.elseClause_return elseClause354 = null;

        EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression356 = null;


        CommonTree CASE347_tree=null;
        CommonTree END350_tree=null;
        CommonTree CASE351_tree=null;
        CommonTree END355_tree=null;
        RewriteRuleTokenStream stream_END=new RewriteRuleTokenStream(adaptor,"token END");
        RewriteRuleTokenStream stream_CASE=new RewriteRuleTokenStream(adaptor,"token CASE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_whenClause=new RewriteRuleSubtreeStream(adaptor,"rule whenClause");
        RewriteRuleSubtreeStream stream_elseClause=new RewriteRuleSubtreeStream(adaptor,"rule elseClause");
        try {
            // EsperEPL2Grammar.g:1081:2: ( CASE ( whenClause )+ ( elseClause )? END | CASE expression ( whenClause )+ ( elseClause )? END -> ^( CASE2 expression ( whenClause )+ ( elseClause )? ) | evalOrExpression )
            int alt138=3;
            int LA138_0 = input.LA(1);

            if ( (LA138_0==CASE) ) {
                int LA138_1 = input.LA(2);

                if ( (LA138_1==WHEN) ) {
                    alt138=1;
                }
                else if ( (LA138_1==WINDOW||LA138_1==ESCAPE||(LA138_1>=NOT_EXPR && LA138_1<=EVERY_EXPR)||(LA138_1>=SUM && LA138_1<=COUNT)||LA138_1==CASE||LA138_1==OUTER||(LA138_1>=JOIN && LA138_1<=FULL)||(LA138_1>=EVENTS && LA138_1<=LAST)||(LA138_1>=UNIDIRECTIONAL && LA138_1<=CURRENT_TIMESTAMP)||LA138_1==SNAPSHOT||(LA138_1>=VARIABLE && LA138_1<=INDEX)||(LA138_1>=BOOLEAN_TRUE && LA138_1<=VALUE_NULL)||(LA138_1>=DEFINE && LA138_1<=MATCHES)||LA138_1==WHILE||LA138_1==NUM_DOUBLE||LA138_1==IDENT||LA138_1==LPAREN||(LA138_1>=PLUS && LA138_1<=QUESTION)||(LA138_1>=STRING_LITERAL && LA138_1<=QUOTED_STRING_LITERAL)||LA138_1==MINUS||LA138_1==LCURLY||LA138_1==NUM_INT||(LA138_1>=TICKED_STRING_LITERAL && LA138_1<=NUM_FLOAT)) ) {
                    alt138=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 138, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA138_0==WINDOW||LA138_0==ESCAPE||(LA138_0>=NOT_EXPR && LA138_0<=EVERY_EXPR)||(LA138_0>=SUM && LA138_0<=COUNT)||LA138_0==OUTER||(LA138_0>=JOIN && LA138_0<=FULL)||(LA138_0>=EVENTS && LA138_0<=LAST)||(LA138_0>=UNIDIRECTIONAL && LA138_0<=CURRENT_TIMESTAMP)||LA138_0==SNAPSHOT||(LA138_0>=VARIABLE && LA138_0<=INDEX)||(LA138_0>=BOOLEAN_TRUE && LA138_0<=VALUE_NULL)||(LA138_0>=DEFINE && LA138_0<=MATCHES)||LA138_0==WHILE||LA138_0==NUM_DOUBLE||LA138_0==IDENT||LA138_0==LPAREN||(LA138_0>=PLUS && LA138_0<=QUESTION)||(LA138_0>=STRING_LITERAL && LA138_0<=QUOTED_STRING_LITERAL)||LA138_0==MINUS||LA138_0==LCURLY||LA138_0==NUM_INT||(LA138_0>=TICKED_STRING_LITERAL && LA138_0<=NUM_FLOAT)) ) {
                alt138=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 138, 0, input);

                throw nvae;
            }
            switch (alt138) {
                case 1 :
                    // EsperEPL2Grammar.g:1081:4: CASE ( whenClause )+ ( elseClause )? END
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE347=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6023); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CASE347_tree = (CommonTree)adaptor.create(CASE347);
                    root_0 = (CommonTree)adaptor.becomeRoot(CASE347_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1081:52: ( whenClause )+
                    int cnt134=0;
                    loop134:
                    do {
                        int alt134=2;
                        int LA134_0 = input.LA(1);

                        if ( (LA134_0==WHEN) ) {
                            alt134=1;
                        }


                        switch (alt134) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1081:52: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6026);
                    	    whenClause348=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, whenClause348.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt134 >= 1 ) break loop134;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(134, input);
                                throw eee;
                        }
                        cnt134++;
                    } while (true);

                    // EsperEPL2Grammar.g:1081:64: ( elseClause )?
                    int alt135=2;
                    int LA135_0 = input.LA(1);

                    if ( (LA135_0==ELSE) ) {
                        alt135=1;
                    }
                    switch (alt135) {
                        case 1 :
                            // EsperEPL2Grammar.g:1081:64: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6029);
                            elseClause349=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, elseClause349.getTree());

                            }
                            break;

                    }

                    END350=(Token)match(input,END,FOLLOW_END_in_caseExpression6032); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1082:4: CASE expression ( whenClause )+ ( elseClause )? END
                    {
                    if ( state.backtracking==0 ) {
                       paraphrases.push("case expression"); 
                    }
                    CASE351=(Token)match(input,CASE,FOLLOW_CASE_in_caseExpression6043); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_CASE.add(CASE351);

                    pushFollow(FOLLOW_expression_in_caseExpression6045);
                    expression352=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression352.getTree());
                    // EsperEPL2Grammar.g:1082:62: ( whenClause )+
                    int cnt136=0;
                    loop136:
                    do {
                        int alt136=2;
                        int LA136_0 = input.LA(1);

                        if ( (LA136_0==WHEN) ) {
                            alt136=1;
                        }


                        switch (alt136) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1082:62: whenClause
                    	    {
                    	    pushFollow(FOLLOW_whenClause_in_caseExpression6047);
                    	    whenClause353=whenClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_whenClause.add(whenClause353.getTree());

                    	    }
                    	    break;

                    	default :
                    	    if ( cnt136 >= 1 ) break loop136;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(136, input);
                                throw eee;
                        }
                        cnt136++;
                    } while (true);

                    // EsperEPL2Grammar.g:1082:74: ( elseClause )?
                    int alt137=2;
                    int LA137_0 = input.LA(1);

                    if ( (LA137_0==ELSE) ) {
                        alt137=1;
                    }
                    switch (alt137) {
                        case 1 :
                            // EsperEPL2Grammar.g:1082:74: elseClause
                            {
                            pushFollow(FOLLOW_elseClause_in_caseExpression6050);
                            elseClause354=elseClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_elseClause.add(elseClause354.getTree());

                            }
                            break;

                    }

                    END355=(Token)match(input,END,FOLLOW_END_in_caseExpression6053); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_END.add(END355);

                    if ( state.backtracking==0 ) {
                       paraphrases.pop(); 
                    }


                    // AST REWRITE
                    // elements: whenClause, expression, elseClause
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1083:4: -> ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                    {
                        // EsperEPL2Grammar.g:1083:7: ^( CASE2 expression ( whenClause )+ ( elseClause )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CASE2, "CASE2"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        if ( !(stream_whenClause.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_whenClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_whenClause.nextTree());

                        }
                        stream_whenClause.reset();
                        // EsperEPL2Grammar.g:1083:38: ( elseClause )?
                        if ( stream_elseClause.hasNext() ) {
                            adaptor.addChild(root_1, stream_elseClause.nextTree());

                        }
                        stream_elseClause.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1084:4: evalOrExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalOrExpression_in_caseExpression6077);
                    evalOrExpression356=evalOrExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalOrExpression356.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "caseExpression"

    public static class evalOrExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalOrExpression"
    // EsperEPL2Grammar.g:1087:1: evalOrExpression : evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression ;
    public final EsperEPL2GrammarParser.evalOrExpression_return evalOrExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalOrExpression_return retval = new EsperEPL2GrammarParser.evalOrExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression357 = null;

        EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression358 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_evalAndExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalAndExpression");
        try {
            // EsperEPL2Grammar.g:1088:2: ( evalAndExpression (op= OR_EXPR evalAndExpression )* -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* ) -> evalAndExpression )
            // EsperEPL2Grammar.g:1088:4: evalAndExpression (op= OR_EXPR evalAndExpression )*
            {
            pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6088);
            evalAndExpression357=evalAndExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression357.getTree());
            // EsperEPL2Grammar.g:1088:22: (op= OR_EXPR evalAndExpression )*
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==OR_EXPR) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1088:23: op= OR_EXPR evalAndExpression
            	    {
            	    op=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_evalOrExpression6093); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(op);

            	    pushFollow(FOLLOW_evalAndExpression_in_evalOrExpression6095);
            	    evalAndExpression358=evalAndExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_evalAndExpression.add(evalAndExpression358.getTree());

            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);



            // AST REWRITE
            // elements: evalAndExpression, evalAndExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1089:3: -> {$op != null}? ^( EVAL_OR_EXPR ( evalAndExpression )* )
            if (op != null) {
                // EsperEPL2Grammar.g:1089:21: ^( EVAL_OR_EXPR ( evalAndExpression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_OR_EXPR, "EVAL_OR_EXPR"), root_1);

                // EsperEPL2Grammar.g:1089:36: ( evalAndExpression )*
                while ( stream_evalAndExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalAndExpression.nextTree());

                }
                stream_evalAndExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1090:3: -> evalAndExpression
            {
                adaptor.addChild(root_0, stream_evalAndExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalOrExpression"

    public static class evalAndExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalAndExpression"
    // EsperEPL2Grammar.g:1093:1: evalAndExpression : bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression ;
    public final EsperEPL2GrammarParser.evalAndExpression_return evalAndExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalAndExpression_return retval = new EsperEPL2GrammarParser.evalAndExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token op=null;
        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression359 = null;

        EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression360 = null;


        CommonTree op_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_bitWiseExpression=new RewriteRuleSubtreeStream(adaptor,"rule bitWiseExpression");
        try {
            // EsperEPL2Grammar.g:1094:2: ( bitWiseExpression (op= AND_EXPR bitWiseExpression )* -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ ) -> bitWiseExpression )
            // EsperEPL2Grammar.g:1094:4: bitWiseExpression (op= AND_EXPR bitWiseExpression )*
            {
            pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6127);
            bitWiseExpression359=bitWiseExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression359.getTree());
            // EsperEPL2Grammar.g:1094:22: (op= AND_EXPR bitWiseExpression )*
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==AND_EXPR) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1094:23: op= AND_EXPR bitWiseExpression
            	    {
            	    op=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_evalAndExpression6132); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(op);

            	    pushFollow(FOLLOW_bitWiseExpression_in_evalAndExpression6134);
            	    bitWiseExpression360=bitWiseExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_bitWiseExpression.add(bitWiseExpression360.getTree());

            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);



            // AST REWRITE
            // elements: bitWiseExpression, bitWiseExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1095:3: -> {$op != null}? ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
            if (op != null) {
                // EsperEPL2Grammar.g:1095:21: ^( EVAL_AND_EXPR ( bitWiseExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_AND_EXPR, "EVAL_AND_EXPR"), root_1);

                if ( !(stream_bitWiseExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_bitWiseExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_bitWiseExpression.nextTree());

                }
                stream_bitWiseExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1096:3: -> bitWiseExpression
            {
                adaptor.addChild(root_0, stream_bitWiseExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalAndExpression"

    public static class bitWiseExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "bitWiseExpression"
    // EsperEPL2Grammar.g:1099:1: bitWiseExpression : negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* ;
    public final EsperEPL2GrammarParser.bitWiseExpression_return bitWiseExpression() throws RecognitionException {
        EsperEPL2GrammarParser.bitWiseExpression_return retval = new EsperEPL2GrammarParser.bitWiseExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token BAND362=null;
        Token BOR363=null;
        Token BXOR364=null;
        EsperEPL2GrammarParser.negatedExpression_return negatedExpression361 = null;

        EsperEPL2GrammarParser.negatedExpression_return negatedExpression365 = null;


        CommonTree BAND362_tree=null;
        CommonTree BOR363_tree=null;
        CommonTree BXOR364_tree=null;

        try {
            // EsperEPL2Grammar.g:1100:2: ( negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )* )
            // EsperEPL2Grammar.g:1100:4: negatedExpression ( ( BAND | BOR | BXOR ) negatedExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6166);
            negatedExpression361=negatedExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression361.getTree());
            // EsperEPL2Grammar.g:1100:22: ( ( BAND | BOR | BXOR ) negatedExpression )*
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==BOR||(LA142_0>=BAND && LA142_0<=BXOR)) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1100:24: ( BAND | BOR | BXOR ) negatedExpression
            	    {
            	    // EsperEPL2Grammar.g:1100:24: ( BAND | BOR | BXOR )
            	    int alt141=3;
            	    switch ( input.LA(1) ) {
            	    case BAND:
            	        {
            	        alt141=1;
            	        }
            	        break;
            	    case BOR:
            	        {
            	        alt141=2;
            	        }
            	        break;
            	    case BXOR:
            	        {
            	        alt141=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 141, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt141) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1100:25: BAND
            	            {
            	            BAND362=(Token)match(input,BAND,FOLLOW_BAND_in_bitWiseExpression6171); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BAND362_tree = (CommonTree)adaptor.create(BAND362);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BAND362_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1100:31: BOR
            	            {
            	            BOR363=(Token)match(input,BOR,FOLLOW_BOR_in_bitWiseExpression6174); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BOR363_tree = (CommonTree)adaptor.create(BOR363);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BOR363_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1100:36: BXOR
            	            {
            	            BXOR364=(Token)match(input,BXOR,FOLLOW_BXOR_in_bitWiseExpression6177); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            BXOR364_tree = (CommonTree)adaptor.create(BXOR364);
            	            root_0 = (CommonTree)adaptor.becomeRoot(BXOR364_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_negatedExpression_in_bitWiseExpression6181);
            	    negatedExpression365=negatedExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, negatedExpression365.getTree());

            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "bitWiseExpression"

    public static class negatedExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "negatedExpression"
    // EsperEPL2Grammar.g:1103:1: negatedExpression : ( evalEqualsExpression | NOT_EXPR evalEqualsExpression );
    public final EsperEPL2GrammarParser.negatedExpression_return negatedExpression() throws RecognitionException {
        EsperEPL2GrammarParser.negatedExpression_return retval = new EsperEPL2GrammarParser.negatedExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token NOT_EXPR367=null;
        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression366 = null;

        EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression368 = null;


        CommonTree NOT_EXPR367_tree=null;

        try {
            // EsperEPL2Grammar.g:1104:2: ( evalEqualsExpression | NOT_EXPR evalEqualsExpression )
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==WINDOW||LA143_0==ESCAPE||LA143_0==EVERY_EXPR||(LA143_0>=SUM && LA143_0<=COUNT)||LA143_0==OUTER||(LA143_0>=JOIN && LA143_0<=FULL)||(LA143_0>=EVENTS && LA143_0<=LAST)||(LA143_0>=UNIDIRECTIONAL && LA143_0<=CURRENT_TIMESTAMP)||LA143_0==SNAPSHOT||(LA143_0>=VARIABLE && LA143_0<=INDEX)||(LA143_0>=BOOLEAN_TRUE && LA143_0<=VALUE_NULL)||(LA143_0>=DEFINE && LA143_0<=MATCHES)||LA143_0==WHILE||LA143_0==NUM_DOUBLE||LA143_0==IDENT||LA143_0==LPAREN||(LA143_0>=PLUS && LA143_0<=QUESTION)||(LA143_0>=STRING_LITERAL && LA143_0<=QUOTED_STRING_LITERAL)||LA143_0==MINUS||LA143_0==LCURLY||LA143_0==NUM_INT||(LA143_0>=TICKED_STRING_LITERAL && LA143_0<=NUM_FLOAT)) ) {
                alt143=1;
            }
            else if ( (LA143_0==NOT_EXPR) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    // EsperEPL2Grammar.g:1104:4: evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6196);
                    evalEqualsExpression366=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression366.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1105:4: NOT_EXPR evalEqualsExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    NOT_EXPR367=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_negatedExpression6202); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NOT_EXPR367_tree = (CommonTree)adaptor.create(NOT_EXPR367);
                    root_0 = (CommonTree)adaptor.becomeRoot(NOT_EXPR367_tree, root_0);
                    }
                    pushFollow(FOLLOW_evalEqualsExpression_in_negatedExpression6205);
                    evalEqualsExpression368=evalEqualsExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, evalEqualsExpression368.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "negatedExpression"

    public static class evalEqualsExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalEqualsExpression"
    // EsperEPL2Grammar.g:1108:1: evalEqualsExpression : evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ ;
    public final EsperEPL2GrammarParser.evalEqualsExpression_return evalEqualsExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalEqualsExpression_return retval = new EsperEPL2GrammarParser.evalEqualsExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token eq=null;
        Token is=null;
        Token isnot=null;
        Token sqlne=null;
        Token ne=null;
        Token a=null;
        Token NOT_EXPR370=null;
        Token LPAREN372=null;
        Token RPAREN374=null;
        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression369 = null;

        EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression371 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList373 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression375 = null;


        CommonTree eq_tree=null;
        CommonTree is_tree=null;
        CommonTree isnot_tree=null;
        CommonTree sqlne_tree=null;
        CommonTree ne_tree=null;
        CommonTree a_tree=null;
        CommonTree NOT_EXPR370_tree=null;
        CommonTree LPAREN372_tree=null;
        CommonTree RPAREN374_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_SQL_NE=new RewriteRuleTokenStream(adaptor,"token SQL_NE");
        RewriteRuleTokenStream stream_NOT_EQUAL=new RewriteRuleTokenStream(adaptor,"token NOT_EQUAL");
        RewriteRuleTokenStream stream_IS=new RewriteRuleTokenStream(adaptor,"token IS");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_evalRelationalExpression=new RewriteRuleSubtreeStream(adaptor,"rule evalRelationalExpression");
        try {
            // EsperEPL2Grammar.g:1109:2: ( evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ ) -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? ) -> ( evalRelationalExpression )+ )
            // EsperEPL2Grammar.g:1109:4: evalRelationalExpression ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            {
            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6218);
            evalRelationalExpression369=evalRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression369.getTree());
            // EsperEPL2Grammar.g:1109:29: ( (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
            loop149:
            do {
                int alt149=2;
                int LA149_0 = input.LA(1);

                if ( (LA149_0==IS||LA149_0==EQUALS||(LA149_0>=SQL_NE && LA149_0<=NOT_EQUAL)) ) {
                    alt149=1;
                }


                switch (alt149) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1110:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL ) ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    {
            	    // EsperEPL2Grammar.g:1110:6: (eq= EQUALS | is= IS | isnot= IS NOT_EXPR | sqlne= SQL_NE | ne= NOT_EQUAL )
            	    int alt144=5;
            	    switch ( input.LA(1) ) {
            	    case EQUALS:
            	        {
            	        alt144=1;
            	        }
            	        break;
            	    case IS:
            	        {
            	        int LA144_2 = input.LA(2);

            	        if ( (LA144_2==NOT_EXPR) ) {
            	            alt144=3;
            	        }
            	        else if ( (LA144_2==WINDOW||LA144_2==ESCAPE||LA144_2==EVERY_EXPR||(LA144_2>=SUM && LA144_2<=COUNT)||LA144_2==OUTER||(LA144_2>=JOIN && LA144_2<=FULL)||(LA144_2>=ALL && LA144_2<=SOME)||(LA144_2>=EVENTS && LA144_2<=LAST)||(LA144_2>=UNIDIRECTIONAL && LA144_2<=CURRENT_TIMESTAMP)||LA144_2==SNAPSHOT||(LA144_2>=VARIABLE && LA144_2<=INDEX)||(LA144_2>=BOOLEAN_TRUE && LA144_2<=VALUE_NULL)||(LA144_2>=DEFINE && LA144_2<=MATCHES)||LA144_2==WHILE||LA144_2==NUM_DOUBLE||LA144_2==IDENT||LA144_2==LPAREN||(LA144_2>=PLUS && LA144_2<=QUESTION)||(LA144_2>=STRING_LITERAL && LA144_2<=QUOTED_STRING_LITERAL)||LA144_2==MINUS||LA144_2==LCURLY||LA144_2==NUM_INT||(LA144_2>=TICKED_STRING_LITERAL && LA144_2<=NUM_FLOAT)) ) {
            	            alt144=2;
            	        }
            	        else {
            	            if (state.backtracking>0) {state.failed=true; return retval;}
            	            NoViableAltException nvae =
            	                new NoViableAltException("", 144, 2, input);

            	            throw nvae;
            	        }
            	        }
            	        break;
            	    case SQL_NE:
            	        {
            	        alt144=4;
            	        }
            	        break;
            	    case NOT_EQUAL:
            	        {
            	        alt144=5;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 144, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt144) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1110:7: eq= EQUALS
            	            {
            	            eq=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_evalEqualsExpression6231); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_EQUALS.add(eq);


            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1111:15: is= IS
            	            {
            	            is=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6249); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(is);


            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1112:11: isnot= IS NOT_EXPR
            	            {
            	            isnot=(Token)match(input,IS,FOLLOW_IS_in_evalEqualsExpression6263); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_IS.add(isnot);

            	            NOT_EXPR370=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalEqualsExpression6265); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EXPR.add(NOT_EXPR370);


            	            }
            	            break;
            	        case 4 :
            	            // EsperEPL2Grammar.g:1113:11: sqlne= SQL_NE
            	            {
            	            sqlne=(Token)match(input,SQL_NE,FOLLOW_SQL_NE_in_evalEqualsExpression6279); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_SQL_NE.add(sqlne);


            	            }
            	            break;
            	        case 5 :
            	            // EsperEPL2Grammar.g:1114:11: ne= NOT_EQUAL
            	            {
            	            ne=(Token)match(input,NOT_EQUAL,FOLLOW_NOT_EQUAL_in_evalEqualsExpression6293); if (state.failed) return retval; 
            	            if ( state.backtracking==0 ) stream_NOT_EQUAL.add(ne);


            	            }
            	            break;

            	    }

            	    // EsperEPL2Grammar.g:1116:9: ( evalRelationalExpression | (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
            	    int alt148=2;
            	    int LA148_0 = input.LA(1);

            	    if ( (LA148_0==WINDOW||LA148_0==ESCAPE||LA148_0==EVERY_EXPR||(LA148_0>=SUM && LA148_0<=COUNT)||LA148_0==OUTER||(LA148_0>=JOIN && LA148_0<=FULL)||(LA148_0>=EVENTS && LA148_0<=LAST)||(LA148_0>=UNIDIRECTIONAL && LA148_0<=CURRENT_TIMESTAMP)||LA148_0==SNAPSHOT||(LA148_0>=VARIABLE && LA148_0<=INDEX)||(LA148_0>=BOOLEAN_TRUE && LA148_0<=VALUE_NULL)||(LA148_0>=DEFINE && LA148_0<=MATCHES)||LA148_0==WHILE||LA148_0==NUM_DOUBLE||LA148_0==IDENT||LA148_0==LPAREN||(LA148_0>=PLUS && LA148_0<=QUESTION)||(LA148_0>=STRING_LITERAL && LA148_0<=QUOTED_STRING_LITERAL)||LA148_0==MINUS||LA148_0==LCURLY||LA148_0==NUM_INT||(LA148_0>=TICKED_STRING_LITERAL && LA148_0<=NUM_FLOAT)) ) {
            	        alt148=1;
            	    }
            	    else if ( ((LA148_0>=ALL && LA148_0<=SOME)) ) {
            	        alt148=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 148, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt148) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1117:10: evalRelationalExpression
            	            {
            	            pushFollow(FOLLOW_evalRelationalExpression_in_evalEqualsExpression6323);
            	            evalRelationalExpression371=evalRelationalExpression();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_evalRelationalExpression.add(evalRelationalExpression371.getTree());

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1118:13: (a= ANY | a= SOME | a= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            {
            	            // EsperEPL2Grammar.g:1118:13: (a= ANY | a= SOME | a= ALL )
            	            int alt145=3;
            	            switch ( input.LA(1) ) {
            	            case ANY:
            	                {
            	                alt145=1;
            	                }
            	                break;
            	            case SOME:
            	                {
            	                alt145=2;
            	                }
            	                break;
            	            case ALL:
            	                {
            	                alt145=3;
            	                }
            	                break;
            	            default:
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 145, 0, input);

            	                throw nvae;
            	            }

            	            switch (alt145) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1118:14: a= ANY
            	                    {
            	                    a=(Token)match(input,ANY,FOLLOW_ANY_in_evalEqualsExpression6340); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ANY.add(a);


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1118:22: a= SOME
            	                    {
            	                    a=(Token)match(input,SOME,FOLLOW_SOME_in_evalEqualsExpression6346); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_SOME.add(a);


            	                    }
            	                    break;
            	                case 3 :
            	                    // EsperEPL2Grammar.g:1118:31: a= ALL
            	                    {
            	                    a=(Token)match(input,ALL,FOLLOW_ALL_in_evalEqualsExpression6352); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_ALL.add(a);


            	                    }
            	                    break;

            	            }

            	            // EsperEPL2Grammar.g:1118:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
            	            int alt147=2;
            	            int LA147_0 = input.LA(1);

            	            if ( (LA147_0==LPAREN) ) {
            	                int LA147_1 = input.LA(2);

            	                if ( (LA147_1==SELECT) ) {
            	                    alt147=2;
            	                }
            	                else if ( (LA147_1==WINDOW||LA147_1==ESCAPE||(LA147_1>=NOT_EXPR && LA147_1<=EVERY_EXPR)||(LA147_1>=SUM && LA147_1<=COUNT)||LA147_1==CASE||LA147_1==OUTER||(LA147_1>=JOIN && LA147_1<=FULL)||(LA147_1>=EVENTS && LA147_1<=LAST)||(LA147_1>=UNIDIRECTIONAL && LA147_1<=CURRENT_TIMESTAMP)||LA147_1==SNAPSHOT||(LA147_1>=VARIABLE && LA147_1<=INDEX)||(LA147_1>=BOOLEAN_TRUE && LA147_1<=VALUE_NULL)||(LA147_1>=DEFINE && LA147_1<=MATCHES)||LA147_1==WHILE||LA147_1==NUM_DOUBLE||LA147_1==IDENT||(LA147_1>=LPAREN && LA147_1<=RPAREN)||(LA147_1>=PLUS && LA147_1<=QUESTION)||(LA147_1>=STRING_LITERAL && LA147_1<=QUOTED_STRING_LITERAL)||LA147_1==MINUS||LA147_1==LCURLY||LA147_1==NUM_INT||(LA147_1>=TICKED_STRING_LITERAL && LA147_1<=NUM_FLOAT)) ) {
            	                    alt147=1;
            	                }
            	                else {
            	                    if (state.backtracking>0) {state.failed=true; return retval;}
            	                    NoViableAltException nvae =
            	                        new NoViableAltException("", 147, 1, input);

            	                    throw nvae;
            	                }
            	            }
            	            else {
            	                if (state.backtracking>0) {state.failed=true; return retval;}
            	                NoViableAltException nvae =
            	                    new NoViableAltException("", 147, 0, input);

            	                throw nvae;
            	            }
            	            switch (alt147) {
            	                case 1 :
            	                    // EsperEPL2Grammar.g:1118:40: ( LPAREN ( expressionList )? RPAREN )
            	                    {
            	                    // EsperEPL2Grammar.g:1118:40: ( LPAREN ( expressionList )? RPAREN )
            	                    // EsperEPL2Grammar.g:1118:41: LPAREN ( expressionList )? RPAREN
            	                    {
            	                    LPAREN372=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalEqualsExpression6358); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN372);

            	                    // EsperEPL2Grammar.g:1118:48: ( expressionList )?
            	                    int alt146=2;
            	                    int LA146_0 = input.LA(1);

            	                    if ( (LA146_0==WINDOW||LA146_0==ESCAPE||(LA146_0>=NOT_EXPR && LA146_0<=EVERY_EXPR)||(LA146_0>=SUM && LA146_0<=COUNT)||LA146_0==CASE||LA146_0==OUTER||(LA146_0>=JOIN && LA146_0<=FULL)||(LA146_0>=EVENTS && LA146_0<=LAST)||(LA146_0>=UNIDIRECTIONAL && LA146_0<=CURRENT_TIMESTAMP)||LA146_0==SNAPSHOT||(LA146_0>=VARIABLE && LA146_0<=INDEX)||(LA146_0>=BOOLEAN_TRUE && LA146_0<=VALUE_NULL)||(LA146_0>=DEFINE && LA146_0<=MATCHES)||LA146_0==WHILE||LA146_0==NUM_DOUBLE||LA146_0==IDENT||LA146_0==LPAREN||(LA146_0>=PLUS && LA146_0<=QUESTION)||(LA146_0>=STRING_LITERAL && LA146_0<=QUOTED_STRING_LITERAL)||LA146_0==MINUS||LA146_0==LCURLY||LA146_0==NUM_INT||(LA146_0>=TICKED_STRING_LITERAL && LA146_0<=NUM_FLOAT)) ) {
            	                        alt146=1;
            	                    }
            	                    switch (alt146) {
            	                        case 1 :
            	                            // EsperEPL2Grammar.g:1118:48: expressionList
            	                            {
            	                            pushFollow(FOLLOW_expressionList_in_evalEqualsExpression6360);
            	                            expressionList373=expressionList();

            	                            state._fsp--;
            	                            if (state.failed) return retval;
            	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList373.getTree());

            	                            }
            	                            break;

            	                    }

            	                    RPAREN374=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalEqualsExpression6363); if (state.failed) return retval; 
            	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN374);


            	                    }


            	                    }
            	                    break;
            	                case 2 :
            	                    // EsperEPL2Grammar.g:1118:74: subSelectGroupExpression
            	                    {
            	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6368);
            	                    subSelectGroupExpression375=subSelectGroupExpression();

            	                    state._fsp--;
            	                    if (state.failed) return retval;
            	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression375.getTree());

            	                    }
            	                    break;

            	            }


            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop149;
                }
            } while (true);



            // AST REWRITE
            // elements: evalRelationalExpression, evalRelationalExpression, expressionList, a, evalRelationalExpression, evalRelationalExpression, expressionList, a, evalRelationalExpression, subSelectGroupExpression, subSelectGroupExpression
            // token labels: a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1121:6: -> {$a == null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1121:55: ^( EVAL_EQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_EXPR, "EVAL_EQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1122:6: -> {$a != null && ($eq != null || $is != null)}? ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (eq != null || is != null)) {
                // EsperEPL2Grammar.g:1122:55: ^( EVAL_EQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_EQUALS_GROUP_EXPR, "EVAL_EQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1122:108: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1122:124: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1123:6: -> {$a == null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
            if (a == null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1123:76: ^( EVAL_NOTEQUALS_EXPR ( evalRelationalExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_EXPR, "EVAL_NOTEQUALS_EXPR"), root_1);

                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1124:6: -> {$a != null && ($isnot != null || $sqlne != null || $ne != null)}? ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
            if (a != null && (isnot != null || sqlne != null || ne != null)) {
                // EsperEPL2Grammar.g:1124:76: ^( EVAL_NOTEQUALS_GROUP_EXPR evalRelationalExpression $a ( expressionList )? ( subSelectGroupExpression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVAL_NOTEQUALS_GROUP_EXPR, "EVAL_NOTEQUALS_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_evalRelationalExpression.nextTree());
                adaptor.addChild(root_1, stream_a.nextNode());
                // EsperEPL2Grammar.g:1124:132: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();
                // EsperEPL2Grammar.g:1124:148: ( subSelectGroupExpression )?
                if ( stream_subSelectGroupExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                }
                stream_subSelectGroupExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1125:6: -> ( evalRelationalExpression )+
            {
                if ( !(stream_evalRelationalExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_evalRelationalExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_evalRelationalExpression.nextTree());

                }
                stream_evalRelationalExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalEqualsExpression"

    public static class evalRelationalExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "evalRelationalExpression"
    // EsperEPL2Grammar.g:1128:1: evalRelationalExpression : concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) ;
    public final EsperEPL2GrammarParser.evalRelationalExpression_return evalRelationalExpression() throws RecognitionException {
        EsperEPL2GrammarParser.evalRelationalExpression_return retval = new EsperEPL2GrammarParser.evalRelationalExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token r=null;
        Token g=null;
        Token n=null;
        Token i=null;
        Token l=null;
        Token col=null;
        Token LPAREN378=null;
        Token RPAREN380=null;
        Token COMMA384=null;
        Token IN_SET386=null;
        Token BETWEEN388=null;
        Token LIKE390=null;
        Token ESCAPE392=null;
        Token REGEXP394=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr376 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr377 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList379 = null;

        EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression381 = null;

        EsperEPL2GrammarParser.expression_return expression382 = null;

        EsperEPL2GrammarParser.expression_return expression383 = null;

        EsperEPL2GrammarParser.expression_return expression385 = null;

        EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery387 = null;

        EsperEPL2GrammarParser.betweenList_return betweenList389 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr391 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant393 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr395 = null;


        CommonTree r_tree=null;
        CommonTree g_tree=null;
        CommonTree n_tree=null;
        CommonTree i_tree=null;
        CommonTree l_tree=null;
        CommonTree col_tree=null;
        CommonTree LPAREN378_tree=null;
        CommonTree RPAREN380_tree=null;
        CommonTree COMMA384_tree=null;
        CommonTree IN_SET386_tree=null;
        CommonTree BETWEEN388_tree=null;
        CommonTree LIKE390_tree=null;
        CommonTree ESCAPE392_tree=null;
        CommonTree REGEXP394_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_GE=new RewriteRuleTokenStream(adaptor,"token GE");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LT=new RewriteRuleTokenStream(adaptor,"token LT");
        RewriteRuleTokenStream stream_ANY=new RewriteRuleTokenStream(adaptor,"token ANY");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_ESCAPE=new RewriteRuleTokenStream(adaptor,"token ESCAPE");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_IN_SET=new RewriteRuleTokenStream(adaptor,"token IN_SET");
        RewriteRuleTokenStream stream_SOME=new RewriteRuleTokenStream(adaptor,"token SOME");
        RewriteRuleTokenStream stream_ALL=new RewriteRuleTokenStream(adaptor,"token ALL");
        RewriteRuleTokenStream stream_REGEXP=new RewriteRuleTokenStream(adaptor,"token REGEXP");
        RewriteRuleTokenStream stream_GT=new RewriteRuleTokenStream(adaptor,"token GT");
        RewriteRuleTokenStream stream_BETWEEN=new RewriteRuleTokenStream(adaptor,"token BETWEEN");
        RewriteRuleTokenStream stream_LE=new RewriteRuleTokenStream(adaptor,"token LE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_LIKE=new RewriteRuleTokenStream(adaptor,"token LIKE");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_inSubSelectQuery=new RewriteRuleSubtreeStream(adaptor,"rule inSubSelectQuery");
        RewriteRuleSubtreeStream stream_concatenationExpr=new RewriteRuleSubtreeStream(adaptor,"rule concatenationExpr");
        RewriteRuleSubtreeStream stream_subSelectGroupExpression=new RewriteRuleSubtreeStream(adaptor,"rule subSelectGroupExpression");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_stringconstant=new RewriteRuleSubtreeStream(adaptor,"rule stringconstant");
        RewriteRuleSubtreeStream stream_betweenList=new RewriteRuleSubtreeStream(adaptor,"rule betweenList");
        try {
            // EsperEPL2Grammar.g:1129:2: ( concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) ) )
            // EsperEPL2Grammar.g:1129:4: concatenationExpr ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            {
            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6496);
            concatenationExpr376=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr376.getTree());
            // EsperEPL2Grammar.g:1130:3: ( ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ ) | (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) ) )
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==EOF||(LA163_0>=OR_EXPR && LA163_0<=AND_EXPR)||(LA163_0>=WHERE && LA163_0<=AS)||(LA163_0>=ELSE && LA163_0<=FROM)||LA163_0==IS||(LA163_0>=GROUP && LA163_0<=HAVING)||LA163_0==ALL||LA163_0==OUTPUT||LA163_0==INSERT||(LA163_0>=ORDER && LA163_0<=DESC)||LA163_0==PATTERN||(LA163_0>=TIMEPERIOD_SEC && LA163_0<=TIMEPERIOD_SECONDS)||LA163_0==ROW_LIMIT_EXPR||LA163_0==MEASURES||(LA163_0>=AFTER && LA163_0<=FOR)||LA163_0==COMMA||LA163_0==EQUALS||LA163_0==RPAREN||LA163_0==RBRACK||LA163_0==BOR||LA163_0==COLON||(LA163_0>=BAND && LA163_0<=GE)||LA163_0==RCURLY) ) {
                alt163=1;
            }
            else if ( ((LA163_0>=IN_SET && LA163_0<=REGEXP)||LA163_0==NOT_EXPR) ) {
                alt163=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 163, 0, input);

                throw nvae;
            }
            switch (alt163) {
                case 1 :
                    // EsperEPL2Grammar.g:1131:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    {
                    // EsperEPL2Grammar.g:1131:4: ( ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )* -> {$g == null && $r != null}? ^( ( concatenationExpr )+ ) -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? ) -> ( concatenationExpr )+ )
                    // EsperEPL2Grammar.g:1132:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    {
                    // EsperEPL2Grammar.g:1132:6: ( (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) ) )*
                    loop155:
                    do {
                        int alt155=2;
                        int LA155_0 = input.LA(1);

                        if ( ((LA155_0>=LT && LA155_0<=GE)) ) {
                            alt155=1;
                        }


                        switch (alt155) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1133:8: (r= LT | r= GT | r= LE | r= GE ) ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    {
                    	    // EsperEPL2Grammar.g:1133:8: (r= LT | r= GT | r= LE | r= GE )
                    	    int alt150=4;
                    	    switch ( input.LA(1) ) {
                    	    case LT:
                    	        {
                    	        alt150=1;
                    	        }
                    	        break;
                    	    case GT:
                    	        {
                    	        alt150=2;
                    	        }
                    	        break;
                    	    case LE:
                    	        {
                    	        alt150=3;
                    	        }
                    	        break;
                    	    case GE:
                    	        {
                    	        alt150=4;
                    	        }
                    	        break;
                    	    default:
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 150, 0, input);

                    	        throw nvae;
                    	    }

                    	    switch (alt150) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1133:9: r= LT
                    	            {
                    	            r=(Token)match(input,LT,FOLLOW_LT_in_evalRelationalExpression6528); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LT.add(r);


                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1133:14: r= GT
                    	            {
                    	            r=(Token)match(input,GT,FOLLOW_GT_in_evalRelationalExpression6532); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GT.add(r);


                    	            }
                    	            break;
                    	        case 3 :
                    	            // EsperEPL2Grammar.g:1133:19: r= LE
                    	            {
                    	            r=(Token)match(input,LE,FOLLOW_LE_in_evalRelationalExpression6536); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_LE.add(r);


                    	            }
                    	            break;
                    	        case 4 :
                    	            // EsperEPL2Grammar.g:1133:24: r= GE
                    	            {
                    	            r=(Token)match(input,GE,FOLLOW_GE_in_evalRelationalExpression6540); if (state.failed) return retval; 
                    	            if ( state.backtracking==0 ) stream_GE.add(r);


                    	            }
                    	            break;

                    	    }

                    	    // EsperEPL2Grammar.g:1134:9: ( concatenationExpr | (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression ) )
                    	    int alt154=2;
                    	    int LA154_0 = input.LA(1);

                    	    if ( (LA154_0==WINDOW||LA154_0==ESCAPE||LA154_0==EVERY_EXPR||(LA154_0>=SUM && LA154_0<=COUNT)||LA154_0==OUTER||(LA154_0>=JOIN && LA154_0<=FULL)||(LA154_0>=EVENTS && LA154_0<=LAST)||(LA154_0>=UNIDIRECTIONAL && LA154_0<=CURRENT_TIMESTAMP)||LA154_0==SNAPSHOT||(LA154_0>=VARIABLE && LA154_0<=INDEX)||(LA154_0>=BOOLEAN_TRUE && LA154_0<=VALUE_NULL)||(LA154_0>=DEFINE && LA154_0<=MATCHES)||LA154_0==WHILE||LA154_0==NUM_DOUBLE||LA154_0==IDENT||LA154_0==LPAREN||(LA154_0>=PLUS && LA154_0<=QUESTION)||(LA154_0>=STRING_LITERAL && LA154_0<=QUOTED_STRING_LITERAL)||LA154_0==MINUS||LA154_0==LCURLY||LA154_0==NUM_INT||(LA154_0>=TICKED_STRING_LITERAL && LA154_0<=NUM_FLOAT)) ) {
                    	        alt154=1;
                    	    }
                    	    else if ( ((LA154_0>=ALL && LA154_0<=SOME)) ) {
                    	        alt154=2;
                    	    }
                    	    else {
                    	        if (state.backtracking>0) {state.failed=true; return retval;}
                    	        NoViableAltException nvae =
                    	            new NoViableAltException("", 154, 0, input);

                    	        throw nvae;
                    	    }
                    	    switch (alt154) {
                    	        case 1 :
                    	            // EsperEPL2Grammar.g:1135:11: concatenationExpr
                    	            {
                    	            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression6564);
                    	            concatenationExpr377=concatenationExpr();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr377.getTree());

                    	            }
                    	            break;
                    	        case 2 :
                    	            // EsperEPL2Grammar.g:1136:13: (g= ANY | g= SOME | g= ALL ) ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            {
                    	            // EsperEPL2Grammar.g:1136:13: (g= ANY | g= SOME | g= ALL )
                    	            int alt151=3;
                    	            switch ( input.LA(1) ) {
                    	            case ANY:
                    	                {
                    	                alt151=1;
                    	                }
                    	                break;
                    	            case SOME:
                    	                {
                    	                alt151=2;
                    	                }
                    	                break;
                    	            case ALL:
                    	                {
                    	                alt151=3;
                    	                }
                    	                break;
                    	            default:
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 151, 0, input);

                    	                throw nvae;
                    	            }

                    	            switch (alt151) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1136:14: g= ANY
                    	                    {
                    	                    g=(Token)match(input,ANY,FOLLOW_ANY_in_evalRelationalExpression6581); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ANY.add(g);


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1136:22: g= SOME
                    	                    {
                    	                    g=(Token)match(input,SOME,FOLLOW_SOME_in_evalRelationalExpression6587); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_SOME.add(g);


                    	                    }
                    	                    break;
                    	                case 3 :
                    	                    // EsperEPL2Grammar.g:1136:31: g= ALL
                    	                    {
                    	                    g=(Token)match(input,ALL,FOLLOW_ALL_in_evalRelationalExpression6593); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_ALL.add(g);


                    	                    }
                    	                    break;

                    	            }

                    	            // EsperEPL2Grammar.g:1136:38: ( ( LPAREN ( expressionList )? RPAREN ) | subSelectGroupExpression )
                    	            int alt153=2;
                    	            int LA153_0 = input.LA(1);

                    	            if ( (LA153_0==LPAREN) ) {
                    	                int LA153_1 = input.LA(2);

                    	                if ( (LA153_1==SELECT) ) {
                    	                    alt153=2;
                    	                }
                    	                else if ( (LA153_1==WINDOW||LA153_1==ESCAPE||(LA153_1>=NOT_EXPR && LA153_1<=EVERY_EXPR)||(LA153_1>=SUM && LA153_1<=COUNT)||LA153_1==CASE||LA153_1==OUTER||(LA153_1>=JOIN && LA153_1<=FULL)||(LA153_1>=EVENTS && LA153_1<=LAST)||(LA153_1>=UNIDIRECTIONAL && LA153_1<=CURRENT_TIMESTAMP)||LA153_1==SNAPSHOT||(LA153_1>=VARIABLE && LA153_1<=INDEX)||(LA153_1>=BOOLEAN_TRUE && LA153_1<=VALUE_NULL)||(LA153_1>=DEFINE && LA153_1<=MATCHES)||LA153_1==WHILE||LA153_1==NUM_DOUBLE||LA153_1==IDENT||(LA153_1>=LPAREN && LA153_1<=RPAREN)||(LA153_1>=PLUS && LA153_1<=QUESTION)||(LA153_1>=STRING_LITERAL && LA153_1<=QUOTED_STRING_LITERAL)||LA153_1==MINUS||LA153_1==LCURLY||LA153_1==NUM_INT||(LA153_1>=TICKED_STRING_LITERAL && LA153_1<=NUM_FLOAT)) ) {
                    	                    alt153=1;
                    	                }
                    	                else {
                    	                    if (state.backtracking>0) {state.failed=true; return retval;}
                    	                    NoViableAltException nvae =
                    	                        new NoViableAltException("", 153, 1, input);

                    	                    throw nvae;
                    	                }
                    	            }
                    	            else {
                    	                if (state.backtracking>0) {state.failed=true; return retval;}
                    	                NoViableAltException nvae =
                    	                    new NoViableAltException("", 153, 0, input);

                    	                throw nvae;
                    	            }
                    	            switch (alt153) {
                    	                case 1 :
                    	                    // EsperEPL2Grammar.g:1136:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    {
                    	                    // EsperEPL2Grammar.g:1136:40: ( LPAREN ( expressionList )? RPAREN )
                    	                    // EsperEPL2Grammar.g:1136:41: LPAREN ( expressionList )? RPAREN
                    	                    {
                    	                    LPAREN378=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6599); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN378);

                    	                    // EsperEPL2Grammar.g:1136:48: ( expressionList )?
                    	                    int alt152=2;
                    	                    int LA152_0 = input.LA(1);

                    	                    if ( (LA152_0==WINDOW||LA152_0==ESCAPE||(LA152_0>=NOT_EXPR && LA152_0<=EVERY_EXPR)||(LA152_0>=SUM && LA152_0<=COUNT)||LA152_0==CASE||LA152_0==OUTER||(LA152_0>=JOIN && LA152_0<=FULL)||(LA152_0>=EVENTS && LA152_0<=LAST)||(LA152_0>=UNIDIRECTIONAL && LA152_0<=CURRENT_TIMESTAMP)||LA152_0==SNAPSHOT||(LA152_0>=VARIABLE && LA152_0<=INDEX)||(LA152_0>=BOOLEAN_TRUE && LA152_0<=VALUE_NULL)||(LA152_0>=DEFINE && LA152_0<=MATCHES)||LA152_0==WHILE||LA152_0==NUM_DOUBLE||LA152_0==IDENT||LA152_0==LPAREN||(LA152_0>=PLUS && LA152_0<=QUESTION)||(LA152_0>=STRING_LITERAL && LA152_0<=QUOTED_STRING_LITERAL)||LA152_0==MINUS||LA152_0==LCURLY||LA152_0==NUM_INT||(LA152_0>=TICKED_STRING_LITERAL && LA152_0<=NUM_FLOAT)) ) {
                    	                        alt152=1;
                    	                    }
                    	                    switch (alt152) {
                    	                        case 1 :
                    	                            // EsperEPL2Grammar.g:1136:48: expressionList
                    	                            {
                    	                            pushFollow(FOLLOW_expressionList_in_evalRelationalExpression6601);
                    	                            expressionList379=expressionList();

                    	                            state._fsp--;
                    	                            if (state.failed) return retval;
                    	                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList379.getTree());

                    	                            }
                    	                            break;

                    	                    }

                    	                    RPAREN380=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6604); if (state.failed) return retval; 
                    	                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN380);


                    	                    }


                    	                    }
                    	                    break;
                    	                case 2 :
                    	                    // EsperEPL2Grammar.g:1136:74: subSelectGroupExpression
                    	                    {
                    	                    pushFollow(FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6609);
                    	                    subSelectGroupExpression381=subSelectGroupExpression();

                    	                    state._fsp--;
                    	                    if (state.failed) return retval;
                    	                    if ( state.backtracking==0 ) stream_subSelectGroupExpression.add(subSelectGroupExpression381.getTree());

                    	                    }
                    	                    break;

                    	            }


                    	            }
                    	            break;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop155;
                        }
                    } while (true);



                    // AST REWRITE
                    // elements: expressionList, concatenationExpr, subSelectGroupExpression, concatenationExpr, g, concatenationExpr
                    // token labels: g
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleTokenStream stream_g=new RewriteRuleTokenStream(adaptor,"token g",g);
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1140:6: -> {$g == null && $r != null}? ^( ( concatenationExpr )+ )
                    if (g == null && r != null) {
                        // EsperEPL2Grammar.g:1140:37: ^( ( concatenationExpr )+ )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1141:6: -> {$g != null && $r != null}? ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                    if (g != null && r != null) {
                        // EsperEPL2Grammar.g:1141:37: ^( concatenationExpr $g ( expressionList )? ( subSelectGroupExpression )? )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot(adaptor.create(r), root_1);

                        adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                        adaptor.addChild(root_1, stream_g.nextNode());
                        // EsperEPL2Grammar.g:1141:81: ( expressionList )?
                        if ( stream_expressionList.hasNext() ) {
                            adaptor.addChild(root_1, stream_expressionList.nextTree());

                        }
                        stream_expressionList.reset();
                        // EsperEPL2Grammar.g:1141:97: ( subSelectGroupExpression )?
                        if ( stream_subSelectGroupExpression.hasNext() ) {
                            adaptor.addChild(root_1, stream_subSelectGroupExpression.nextTree());

                        }
                        stream_subSelectGroupExpression.reset();

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1142:6: -> ( concatenationExpr )+
                    {
                        if ( !(stream_concatenationExpr.hasNext()) ) {
                            throw new RewriteEarlyExitException();
                        }
                        while ( stream_concatenationExpr.hasNext() ) {
                            adaptor.addChild(root_0, stream_concatenationExpr.nextTree());

                        }
                        stream_concatenationExpr.reset();

                    }

                    retval.tree = root_0;}
                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1144:6: (n= NOT_EXPR )? ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    {
                    // EsperEPL2Grammar.g:1144:6: (n= NOT_EXPR )?
                    int alt156=2;
                    int LA156_0 = input.LA(1);

                    if ( (LA156_0==NOT_EXPR) ) {
                        alt156=1;
                    }
                    switch (alt156) {
                        case 1 :
                            // EsperEPL2Grammar.g:1144:7: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_evalRelationalExpression6705); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1145:4: ( (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) ) -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r) -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r) -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r) -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r) | IN_SET inSubSelectQuery -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery ) | BETWEEN betweenList -> {$n == null}? ^( BETWEEN concatenationExpr betweenList ) -> ^( NOT_BETWEEN concatenationExpr betweenList ) | LIKE concatenationExpr ( ESCAPE stringconstant )? -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? ) -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? ) | REGEXP concatenationExpr -> {$n == null}? ^( REGEXP ( concatenationExpr )+ ) -> ^( NOT_REGEXP ( concatenationExpr )+ ) )
                    int alt162=5;
                    switch ( input.LA(1) ) {
                    case IN_SET:
                        {
                        int LA162_1 = input.LA(2);

                        if ( (LA162_1==LPAREN) ) {
                            int LA162_5 = input.LA(3);

                            if ( (LA162_5==SELECT) ) {
                                alt162=2;
                            }
                            else if ( (LA162_5==WINDOW||LA162_5==ESCAPE||(LA162_5>=NOT_EXPR && LA162_5<=EVERY_EXPR)||(LA162_5>=SUM && LA162_5<=COUNT)||LA162_5==CASE||LA162_5==OUTER||(LA162_5>=JOIN && LA162_5<=FULL)||(LA162_5>=EVENTS && LA162_5<=LAST)||(LA162_5>=UNIDIRECTIONAL && LA162_5<=CURRENT_TIMESTAMP)||LA162_5==SNAPSHOT||(LA162_5>=VARIABLE && LA162_5<=INDEX)||(LA162_5>=BOOLEAN_TRUE && LA162_5<=VALUE_NULL)||(LA162_5>=DEFINE && LA162_5<=MATCHES)||LA162_5==WHILE||LA162_5==NUM_DOUBLE||LA162_5==IDENT||LA162_5==LPAREN||(LA162_5>=PLUS && LA162_5<=QUESTION)||(LA162_5>=STRING_LITERAL && LA162_5<=QUOTED_STRING_LITERAL)||LA162_5==MINUS||LA162_5==LCURLY||LA162_5==NUM_INT||(LA162_5>=TICKED_STRING_LITERAL && LA162_5<=NUM_FLOAT)) ) {
                                alt162=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 162, 5, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA162_1==LBRACK) ) {
                            alt162=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 162, 1, input);

                            throw nvae;
                        }
                        }
                        break;
                    case BETWEEN:
                        {
                        alt162=3;
                        }
                        break;
                    case LIKE:
                        {
                        alt162=4;
                        }
                        break;
                    case REGEXP:
                        {
                        alt162=5;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 162, 0, input);

                        throw nvae;
                    }

                    switch (alt162) {
                        case 1 :
                            // EsperEPL2Grammar.g:1148:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            {
                            // EsperEPL2Grammar.g:1148:5: (i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK ) )
                            // EsperEPL2Grammar.g:1148:6: i= IN_SET (l= LPAREN | l= LBRACK ) expression ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) ) (r= RPAREN | r= RBRACK )
                            {
                            i=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6732); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(i);

                            // EsperEPL2Grammar.g:1149:8: (l= LPAREN | l= LBRACK )
                            int alt157=2;
                            int LA157_0 = input.LA(1);

                            if ( (LA157_0==LPAREN) ) {
                                alt157=1;
                            }
                            else if ( (LA157_0==LBRACK) ) {
                                alt157=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 157, 0, input);

                                throw nvae;
                            }
                            switch (alt157) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1149:9: l= LPAREN
                                    {
                                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_evalRelationalExpression6744); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LPAREN.add(l);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1149:20: l= LBRACK
                                    {
                                    l=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_evalRelationalExpression6750); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_LBRACK.add(l);


                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_evalRelationalExpression6753);
                            expression382=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expression.add(expression382.getTree());
                            // EsperEPL2Grammar.g:1150:7: ( (col= COLON ( expression ) ) | ( ( COMMA expression )* ) )
                            int alt159=2;
                            int LA159_0 = input.LA(1);

                            if ( (LA159_0==COLON) ) {
                                alt159=1;
                            }
                            else if ( (LA159_0==COMMA||LA159_0==RPAREN||LA159_0==RBRACK) ) {
                                alt159=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 159, 0, input);

                                throw nvae;
                            }
                            switch (alt159) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1151:8: (col= COLON ( expression ) )
                                    {
                                    // EsperEPL2Grammar.g:1151:8: (col= COLON ( expression ) )
                                    // EsperEPL2Grammar.g:1151:10: col= COLON ( expression )
                                    {
                                    col=(Token)match(input,COLON,FOLLOW_COLON_in_evalRelationalExpression6775); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_COLON.add(col);

                                    // EsperEPL2Grammar.g:1151:20: ( expression )
                                    // EsperEPL2Grammar.g:1151:21: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_evalRelationalExpression6778);
                                    expression383=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression383.getTree());

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1153:8: ( ( COMMA expression )* )
                                    {
                                    // EsperEPL2Grammar.g:1153:8: ( ( COMMA expression )* )
                                    // EsperEPL2Grammar.g:1153:10: ( COMMA expression )*
                                    {
                                    // EsperEPL2Grammar.g:1153:10: ( COMMA expression )*
                                    loop158:
                                    do {
                                        int alt158=2;
                                        int LA158_0 = input.LA(1);

                                        if ( (LA158_0==COMMA) ) {
                                            alt158=1;
                                        }


                                        switch (alt158) {
                                    	case 1 :
                                    	    // EsperEPL2Grammar.g:1153:11: COMMA expression
                                    	    {
                                    	    COMMA384=(Token)match(input,COMMA,FOLLOW_COMMA_in_evalRelationalExpression6804); if (state.failed) return retval; 
                                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA384);

                                    	    pushFollow(FOLLOW_expression_in_evalRelationalExpression6806);
                                    	    expression385=expression();

                                    	    state._fsp--;
                                    	    if (state.failed) return retval;
                                    	    if ( state.backtracking==0 ) stream_expression.add(expression385.getTree());

                                    	    }
                                    	    break;

                                    	default :
                                    	    break loop158;
                                        }
                                    } while (true);


                                    }


                                    }
                                    break;

                            }

                            // EsperEPL2Grammar.g:1155:8: (r= RPAREN | r= RBRACK )
                            int alt160=2;
                            int LA160_0 = input.LA(1);

                            if ( (LA160_0==RPAREN) ) {
                                alt160=1;
                            }
                            else if ( (LA160_0==RBRACK) ) {
                                alt160=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 160, 0, input);

                                throw nvae;
                            }
                            switch (alt160) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1155:9: r= RPAREN
                                    {
                                    r=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_evalRelationalExpression6832); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RPAREN.add(r);


                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1155:20: r= RBRACK
                                    {
                                    r=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_evalRelationalExpression6838); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_RBRACK.add(r);


                                    }
                                    break;

                            }


                            }



                            // AST REWRITE
                            // elements: r, l, expression, concatenationExpr, r, concatenationExpr, expression, IN_SET, concatenationExpr, r, l, l, r, expression, concatenationExpr, expression, l
                            // token labels: r, l
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleTokenStream stream_r=new RewriteRuleTokenStream(adaptor,"token r",r);
                            RewriteRuleTokenStream stream_l=new RewriteRuleTokenStream(adaptor,"token l",l);
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1157:9: -> {$col == null && $n == null}? ^( IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n == null) {
                                // EsperEPL2Grammar.g:1157:42: ^( IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_IN_SET.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1158:9: -> {$col == null && $n != null}? ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                            if (col == null && n != null) {
                                // EsperEPL2Grammar.g:1158:42: ^( NOT_IN_SET concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SET, "NOT_IN_SET"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1159:9: -> {$col != null && $n == null}? ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                            if (col != null && n == null) {
                                // EsperEPL2Grammar.g:1159:42: ^( IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_RANGE, "IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1160:9: -> ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                            {
                                // EsperEPL2Grammar.g:1160:12: ^( NOT_IN_RANGE concatenationExpr $l ( expression )+ $r)
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_RANGE, "NOT_IN_RANGE"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_l.nextNode());
                                if ( !(stream_expression.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_expression.hasNext() ) {
                                    adaptor.addChild(root_1, stream_expression.nextTree());

                                }
                                stream_expression.reset();
                                adaptor.addChild(root_1, stream_r.nextNode());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1161:7: IN_SET inSubSelectQuery
                            {
                            IN_SET386=(Token)match(input,IN_SET,FOLLOW_IN_SET_in_evalRelationalExpression6961); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_IN_SET.add(IN_SET386);

                            pushFollow(FOLLOW_inSubSelectQuery_in_evalRelationalExpression6963);
                            inSubSelectQuery387=inSubSelectQuery();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_inSubSelectQuery.add(inSubSelectQuery387.getTree());


                            // AST REWRITE
                            // elements: inSubSelectQuery, inSubSelectQuery, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1162:9: -> {$n == null}? ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1162:26: ^( IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_EXPR, "IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1163:9: -> ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                            {
                                // EsperEPL2Grammar.g:1163:12: ^( NOT_IN_SUBSELECT_EXPR concatenationExpr inSubSelectQuery )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_IN_SUBSELECT_EXPR, "NOT_IN_SUBSELECT_EXPR"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_inSubSelectQuery.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1164:7: BETWEEN betweenList
                            {
                            BETWEEN388=(Token)match(input,BETWEEN,FOLLOW_BETWEEN_in_evalRelationalExpression7009); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_BETWEEN.add(BETWEEN388);

                            pushFollow(FOLLOW_betweenList_in_evalRelationalExpression7011);
                            betweenList389=betweenList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_betweenList.add(betweenList389.getTree());


                            // AST REWRITE
                            // elements: concatenationExpr, betweenList, concatenationExpr, BETWEEN, betweenList
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1165:9: -> {$n == null}? ^( BETWEEN concatenationExpr betweenList )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1165:26: ^( BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_BETWEEN.nextNode(), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1166:9: -> ^( NOT_BETWEEN concatenationExpr betweenList )
                            {
                                // EsperEPL2Grammar.g:1166:12: ^( NOT_BETWEEN concatenationExpr betweenList )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_BETWEEN, "NOT_BETWEEN"), root_1);

                                adaptor.addChild(root_1, stream_concatenationExpr.nextTree());
                                adaptor.addChild(root_1, stream_betweenList.nextTree());

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 4 :
                            // EsperEPL2Grammar.g:1167:7: LIKE concatenationExpr ( ESCAPE stringconstant )?
                            {
                            LIKE390=(Token)match(input,LIKE,FOLLOW_LIKE_in_evalRelationalExpression7061); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_LIKE.add(LIKE390);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7063);
                            concatenationExpr391=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr391.getTree());
                            // EsperEPL2Grammar.g:1167:30: ( ESCAPE stringconstant )?
                            int alt161=2;
                            int LA161_0 = input.LA(1);

                            if ( (LA161_0==ESCAPE) ) {
                                alt161=1;
                            }
                            switch (alt161) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1167:31: ESCAPE stringconstant
                                    {
                                    ESCAPE392=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_evalRelationalExpression7066); if (state.failed) return retval; 
                                    if ( state.backtracking==0 ) stream_ESCAPE.add(ESCAPE392);

                                    pushFollow(FOLLOW_stringconstant_in_evalRelationalExpression7068);
                                    stringconstant393=stringconstant();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_stringconstant.add(stringconstant393.getTree());

                                    }
                                    break;

                            }



                            // AST REWRITE
                            // elements: LIKE, stringconstant, concatenationExpr, concatenationExpr, stringconstant
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1168:9: -> {$n == null}? ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1168:26: ^( LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_LIKE.nextNode(), root_1);

                                // EsperEPL2Grammar.g:1168:33: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1168:52: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1169:9: -> ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                            {
                                // EsperEPL2Grammar.g:1169:12: ^( NOT_LIKE ( concatenationExpr )* ( stringconstant )? )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_LIKE, "NOT_LIKE"), root_1);

                                // EsperEPL2Grammar.g:1169:23: ( concatenationExpr )*
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();
                                // EsperEPL2Grammar.g:1169:42: ( stringconstant )?
                                if ( stream_stringconstant.hasNext() ) {
                                    adaptor.addChild(root_1, stream_stringconstant.nextTree());

                                }
                                stream_stringconstant.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;
                        case 5 :
                            // EsperEPL2Grammar.g:1170:7: REGEXP concatenationExpr
                            {
                            REGEXP394=(Token)match(input,REGEXP,FOLLOW_REGEXP_in_evalRelationalExpression7120); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_REGEXP.add(REGEXP394);

                            pushFollow(FOLLOW_concatenationExpr_in_evalRelationalExpression7122);
                            concatenationExpr395=concatenationExpr();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_concatenationExpr.add(concatenationExpr395.getTree());


                            // AST REWRITE
                            // elements: REGEXP, concatenationExpr, concatenationExpr
                            // token labels: 
                            // rule labels: retval
                            // token list labels: 
                            // rule list labels: 
                            // wildcard labels: 
                            if ( state.backtracking==0 ) {
                            retval.tree = root_0;
                            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                            root_0 = (CommonTree)adaptor.nil();
                            // 1171:9: -> {$n == null}? ^( REGEXP ( concatenationExpr )+ )
                            if (n == null) {
                                // EsperEPL2Grammar.g:1171:26: ^( REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot(stream_REGEXP.nextNode(), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }
                            else // 1172:9: -> ^( NOT_REGEXP ( concatenationExpr )+ )
                            {
                                // EsperEPL2Grammar.g:1172:12: ^( NOT_REGEXP ( concatenationExpr )+ )
                                {
                                CommonTree root_1 = (CommonTree)adaptor.nil();
                                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NOT_REGEXP, "NOT_REGEXP"), root_1);

                                if ( !(stream_concatenationExpr.hasNext()) ) {
                                    throw new RewriteEarlyExitException();
                                }
                                while ( stream_concatenationExpr.hasNext() ) {
                                    adaptor.addChild(root_1, stream_concatenationExpr.nextTree());

                                }
                                stream_concatenationExpr.reset();

                                adaptor.addChild(root_0, root_1);
                                }

                            }

                            retval.tree = root_0;}
                            }
                            break;

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "evalRelationalExpression"

    public static class inSubSelectQuery_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "inSubSelectQuery"
    // EsperEPL2Grammar.g:1177:1: inSubSelectQuery : subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.inSubSelectQuery_return inSubSelectQuery() throws RecognitionException {
        EsperEPL2GrammarParser.inSubSelectQuery_return retval = new EsperEPL2GrammarParser.inSubSelectQuery_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr396 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1178:2: ( subQueryExpr -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1178:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_inSubSelectQuery7184);
            subQueryExpr396=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr396.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1179:4: -> ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1179:7: ^( IN_SUBSELECT_QUERY_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IN_SUBSELECT_QUERY_EXPR, "IN_SUBSELECT_QUERY_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "inSubSelectQuery"

    public static class concatenationExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "concatenationExpr"
    // EsperEPL2Grammar.g:1182:1: concatenationExpr : additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression ;
    public final EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr() throws RecognitionException {
        EsperEPL2GrammarParser.concatenationExpr_return retval = new EsperEPL2GrammarParser.concatenationExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c=null;
        Token LOR399=null;
        EsperEPL2GrammarParser.additiveExpression_return additiveExpression397 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression398 = null;

        EsperEPL2GrammarParser.additiveExpression_return additiveExpression400 = null;


        CommonTree c_tree=null;
        CommonTree LOR399_tree=null;
        RewriteRuleTokenStream stream_LOR=new RewriteRuleTokenStream(adaptor,"token LOR");
        RewriteRuleSubtreeStream stream_additiveExpression=new RewriteRuleSubtreeStream(adaptor,"rule additiveExpression");
        try {
            // EsperEPL2Grammar.g:1183:2: ( additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )? -> {$c != null}? ^( CONCAT ( additiveExpression )+ ) -> additiveExpression )
            // EsperEPL2Grammar.g:1183:4: additiveExpression (c= LOR additiveExpression ( LOR additiveExpression )* )?
            {
            pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7209);
            additiveExpression397=additiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression397.getTree());
            // EsperEPL2Grammar.g:1183:23: (c= LOR additiveExpression ( LOR additiveExpression )* )?
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==LOR) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    // EsperEPL2Grammar.g:1183:25: c= LOR additiveExpression ( LOR additiveExpression )*
                    {
                    c=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7215); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LOR.add(c);

                    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7217);
                    additiveExpression398=additiveExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression398.getTree());
                    // EsperEPL2Grammar.g:1183:50: ( LOR additiveExpression )*
                    loop164:
                    do {
                        int alt164=2;
                        int LA164_0 = input.LA(1);

                        if ( (LA164_0==LOR) ) {
                            alt164=1;
                        }


                        switch (alt164) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1183:52: LOR additiveExpression
                    	    {
                    	    LOR399=(Token)match(input,LOR,FOLLOW_LOR_in_concatenationExpr7221); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_LOR.add(LOR399);

                    	    pushFollow(FOLLOW_additiveExpression_in_concatenationExpr7223);
                    	    additiveExpression400=additiveExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_additiveExpression.add(additiveExpression400.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop164;
                        }
                    } while (true);


                    }
                    break;

            }



            // AST REWRITE
            // elements: additiveExpression, additiveExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1184:6: -> {$c != null}? ^( CONCAT ( additiveExpression )+ )
            if (c != null) {
                // EsperEPL2Grammar.g:1184:23: ^( CONCAT ( additiveExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CONCAT, "CONCAT"), root_1);

                if ( !(stream_additiveExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_additiveExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_additiveExpression.nextTree());

                }
                stream_additiveExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1185:6: -> additiveExpression
            {
                adaptor.addChild(root_0, stream_additiveExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "concatenationExpr"

    public static class additiveExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "additiveExpression"
    // EsperEPL2Grammar.g:1188:1: additiveExpression : multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* ;
    public final EsperEPL2GrammarParser.additiveExpression_return additiveExpression() throws RecognitionException {
        EsperEPL2GrammarParser.additiveExpression_return retval = new EsperEPL2GrammarParser.additiveExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token PLUS402=null;
        Token MINUS403=null;
        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression401 = null;

        EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression404 = null;


        CommonTree PLUS402_tree=null;
        CommonTree MINUS403_tree=null;

        try {
            // EsperEPL2Grammar.g:1189:2: ( multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )* )
            // EsperEPL2Grammar.g:1189:4: multiplyExpression ( ( PLUS | MINUS ) multiplyExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7264);
            multiplyExpression401=multiplyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression401.getTree());
            // EsperEPL2Grammar.g:1189:23: ( ( PLUS | MINUS ) multiplyExpression )*
            loop167:
            do {
                int alt167=2;
                int LA167_0 = input.LA(1);

                if ( (LA167_0==PLUS||LA167_0==MINUS) ) {
                    alt167=1;
                }


                switch (alt167) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1189:25: ( PLUS | MINUS ) multiplyExpression
            	    {
            	    // EsperEPL2Grammar.g:1189:25: ( PLUS | MINUS )
            	    int alt166=2;
            	    int LA166_0 = input.LA(1);

            	    if ( (LA166_0==PLUS) ) {
            	        alt166=1;
            	    }
            	    else if ( (LA166_0==MINUS) ) {
            	        alt166=2;
            	    }
            	    else {
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 166, 0, input);

            	        throw nvae;
            	    }
            	    switch (alt166) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1189:26: PLUS
            	            {
            	            PLUS402=(Token)match(input,PLUS,FOLLOW_PLUS_in_additiveExpression7269); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            PLUS402_tree = (CommonTree)adaptor.create(PLUS402);
            	            root_0 = (CommonTree)adaptor.becomeRoot(PLUS402_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1189:32: MINUS
            	            {
            	            MINUS403=(Token)match(input,MINUS,FOLLOW_MINUS_in_additiveExpression7272); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MINUS403_tree = (CommonTree)adaptor.create(MINUS403);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MINUS403_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_multiplyExpression_in_additiveExpression7276);
            	    multiplyExpression404=multiplyExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, multiplyExpression404.getTree());

            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "additiveExpression"

    public static class multiplyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "multiplyExpression"
    // EsperEPL2Grammar.g:1192:1: multiplyExpression : unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* ;
    public final EsperEPL2GrammarParser.multiplyExpression_return multiplyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.multiplyExpression_return retval = new EsperEPL2GrammarParser.multiplyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR406=null;
        Token DIV407=null;
        Token MOD408=null;
        EsperEPL2GrammarParser.unaryExpression_return unaryExpression405 = null;

        EsperEPL2GrammarParser.unaryExpression_return unaryExpression409 = null;


        CommonTree STAR406_tree=null;
        CommonTree DIV407_tree=null;
        CommonTree MOD408_tree=null;

        try {
            // EsperEPL2Grammar.g:1193:2: ( unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )* )
            // EsperEPL2Grammar.g:1193:4: unaryExpression ( ( STAR | DIV | MOD ) unaryExpression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7290);
            unaryExpression405=unaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression405.getTree());
            // EsperEPL2Grammar.g:1193:20: ( ( STAR | DIV | MOD ) unaryExpression )*
            loop169:
            do {
                int alt169=2;
                int LA169_0 = input.LA(1);

                if ( (LA169_0==STAR||(LA169_0>=DIV && LA169_0<=MOD)) ) {
                    alt169=1;
                }


                switch (alt169) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1193:22: ( STAR | DIV | MOD ) unaryExpression
            	    {
            	    // EsperEPL2Grammar.g:1193:22: ( STAR | DIV | MOD )
            	    int alt168=3;
            	    switch ( input.LA(1) ) {
            	    case STAR:
            	        {
            	        alt168=1;
            	        }
            	        break;
            	    case DIV:
            	        {
            	        alt168=2;
            	        }
            	        break;
            	    case MOD:
            	        {
            	        alt168=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 168, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt168) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1193:23: STAR
            	            {
            	            STAR406=(Token)match(input,STAR,FOLLOW_STAR_in_multiplyExpression7295); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            STAR406_tree = (CommonTree)adaptor.create(STAR406);
            	            root_0 = (CommonTree)adaptor.becomeRoot(STAR406_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 2 :
            	            // EsperEPL2Grammar.g:1193:29: DIV
            	            {
            	            DIV407=(Token)match(input,DIV,FOLLOW_DIV_in_multiplyExpression7298); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            DIV407_tree = (CommonTree)adaptor.create(DIV407);
            	            root_0 = (CommonTree)adaptor.becomeRoot(DIV407_tree, root_0);
            	            }

            	            }
            	            break;
            	        case 3 :
            	            // EsperEPL2Grammar.g:1193:34: MOD
            	            {
            	            MOD408=(Token)match(input,MOD,FOLLOW_MOD_in_multiplyExpression7301); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	            MOD408_tree = (CommonTree)adaptor.create(MOD408);
            	            root_0 = (CommonTree)adaptor.becomeRoot(MOD408_tree, root_0);
            	            }

            	            }
            	            break;

            	    }

            	    pushFollow(FOLLOW_unaryExpression_in_multiplyExpression7305);
            	    unaryExpression409=unaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, unaryExpression409.getTree());

            	    }
            	    break;

            	default :
            	    break loop169;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "multiplyExpression"

    public static class unaryExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "unaryExpression"
    // EsperEPL2Grammar.g:1196:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );
    public final EsperEPL2GrammarParser.unaryExpression_return unaryExpression() throws RecognitionException {
        EsperEPL2GrammarParser.unaryExpression_return retval = new EsperEPL2GrammarParser.unaryExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MINUS410=null;
        Token LPAREN414=null;
        Token RPAREN416=null;
        EsperEPL2GrammarParser.eventProperty_return eventProperty411 = null;

        EsperEPL2GrammarParser.constant_return constant412 = null;

        EsperEPL2GrammarParser.substitution_return substitution413 = null;

        EsperEPL2GrammarParser.expression_return expression415 = null;

        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction417 = null;

        EsperEPL2GrammarParser.builtinFunc_return builtinFunc418 = null;

        EsperEPL2GrammarParser.arrayExpression_return arrayExpression419 = null;

        EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression420 = null;

        EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression421 = null;


        CommonTree MINUS410_tree=null;
        CommonTree LPAREN414_tree=null;
        CommonTree RPAREN416_tree=null;
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1197:2: ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression )
            int alt170=9;
            alt170 = dfa170.predict(input);
            switch (alt170) {
                case 1 :
                    // EsperEPL2Grammar.g:1197:4: MINUS eventProperty
                    {
                    MINUS410=(Token)match(input,MINUS,FOLLOW_MINUS_in_unaryExpression7320); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(MINUS410);

                    pushFollow(FOLLOW_eventProperty_in_unaryExpression7322);
                    eventProperty411=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty411.getTree());


                    // AST REWRITE
                    // elements: eventProperty
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1197:24: -> ^( UNARY_MINUS eventProperty )
                    {
                        // EsperEPL2Grammar.g:1197:27: ^( UNARY_MINUS eventProperty )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(UNARY_MINUS, "UNARY_MINUS"), root_1);

                        adaptor.addChild(root_1, stream_eventProperty.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1198:4: constant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_constant_in_unaryExpression7335);
                    constant412=constant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, constant412.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1199:4: substitution
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_substitution_in_unaryExpression7340);
                    substitution413=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, substitution413.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1200:4: LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LPAREN414=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_unaryExpression7345); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_unaryExpression7348);
                    expression415=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression415.getTree());
                    RPAREN416=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_unaryExpression7350); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1201:4: eventPropertyOrLibFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7356);
                    eventPropertyOrLibFunction417=eventPropertyOrLibFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventPropertyOrLibFunction417.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1202:4: ( builtinFunc )=> ( builtinFunc )
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    // EsperEPL2Grammar.g:1202:21: ( builtinFunc )
                    // EsperEPL2Grammar.g:1202:22: builtinFunc
                    {
                    pushFollow(FOLLOW_builtinFunc_in_unaryExpression7368);
                    builtinFunc418=builtinFunc();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, builtinFunc418.getTree());

                    }


                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1203:4: arrayExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_arrayExpression_in_unaryExpression7374);
                    arrayExpression419=arrayExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, arrayExpression419.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1204:4: subSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_subSelectExpression_in_unaryExpression7379);
                    subSelectExpression420=subSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectExpression420.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1205:4: existsSubSelectExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_existsSubSelectExpression_in_unaryExpression7384);
                    existsSubSelectExpression421=existsSubSelectExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, existsSubSelectExpression421.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "unaryExpression"

    public static class subSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectExpression"
    // EsperEPL2Grammar.g:1208:1: subSelectExpression : subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectExpression_return subSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectExpression_return retval = new EsperEPL2GrammarParser.subSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr422 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1209:2: ( subQueryExpr -> ^( SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1209:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectExpression7401);
            subQueryExpr422=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr422.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1210:3: -> ^( SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1210:6: ^( SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_EXPR, "SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectExpression"

    public static class subSelectGroupExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectGroupExpression"
    // EsperEPL2Grammar.g:1213:1: subSelectGroupExpression : subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.subSelectGroupExpression_return subSelectGroupExpression() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectGroupExpression_return retval = new EsperEPL2GrammarParser.subSelectGroupExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr423 = null;


        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1214:2: ( subQueryExpr -> ^( SUBSELECT_GROUP_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1214:4: subQueryExpr
            {
            pushFollow(FOLLOW_subQueryExpr_in_subSelectGroupExpression7423);
            subQueryExpr423=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr423.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1215:3: -> ^( SUBSELECT_GROUP_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1215:6: ^( SUBSELECT_GROUP_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SUBSELECT_GROUP_EXPR, "SUBSELECT_GROUP_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectGroupExpression"

    public static class existsSubSelectExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "existsSubSelectExpression"
    // EsperEPL2Grammar.g:1218:1: existsSubSelectExpression : EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) ;
    public final EsperEPL2GrammarParser.existsSubSelectExpression_return existsSubSelectExpression() throws RecognitionException {
        EsperEPL2GrammarParser.existsSubSelectExpression_return retval = new EsperEPL2GrammarParser.existsSubSelectExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token EXISTS424=null;
        EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr425 = null;


        CommonTree EXISTS424_tree=null;
        RewriteRuleTokenStream stream_EXISTS=new RewriteRuleTokenStream(adaptor,"token EXISTS");
        RewriteRuleSubtreeStream stream_subQueryExpr=new RewriteRuleSubtreeStream(adaptor,"rule subQueryExpr");
        try {
            // EsperEPL2Grammar.g:1219:2: ( EXISTS subQueryExpr -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr ) )
            // EsperEPL2Grammar.g:1219:4: EXISTS subQueryExpr
            {
            EXISTS424=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_existsSubSelectExpression7445); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_EXISTS.add(EXISTS424);

            pushFollow(FOLLOW_subQueryExpr_in_existsSubSelectExpression7447);
            subQueryExpr425=subQueryExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_subQueryExpr.add(subQueryExpr425.getTree());


            // AST REWRITE
            // elements: subQueryExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1220:3: -> ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
            {
                // EsperEPL2Grammar.g:1220:6: ^( EXISTS_SUBSELECT_EXPR subQueryExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EXISTS_SUBSELECT_EXPR, "EXISTS_SUBSELECT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_subQueryExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "existsSubSelectExpression"

    public static class subQueryExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subQueryExpr"
    // EsperEPL2Grammar.g:1223:1: subQueryExpr : LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN ;
    public final EsperEPL2GrammarParser.subQueryExpr_return subQueryExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subQueryExpr_return retval = new EsperEPL2GrammarParser.subQueryExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN426=null;
        Token SELECT427=null;
        Token DISTINCT428=null;
        Token FROM430=null;
        Token WHERE432=null;
        Token RPAREN434=null;
        EsperEPL2GrammarParser.selectionListElement_return selectionListElement429 = null;

        EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr431 = null;

        EsperEPL2GrammarParser.whereClause_return whereClause433 = null;


        CommonTree LPAREN426_tree=null;
        CommonTree SELECT427_tree=null;
        CommonTree DISTINCT428_tree=null;
        CommonTree FROM430_tree=null;
        CommonTree WHERE432_tree=null;
        CommonTree RPAREN434_tree=null;

         paraphrases.push("subquery"); 
        try {
            // EsperEPL2Grammar.g:1226:2: ( LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN )
            // EsperEPL2Grammar.g:1226:4: LPAREN SELECT ( DISTINCT )? selectionListElement FROM subSelectFilterExpr ( WHERE whereClause )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN426=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_subQueryExpr7480); if (state.failed) return retval;
            SELECT427=(Token)match(input,SELECT,FOLLOW_SELECT_in_subQueryExpr7486); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1227:11: ( DISTINCT )?
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==DISTINCT) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    // EsperEPL2Grammar.g:1227:11: DISTINCT
                    {
                    DISTINCT428=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_subQueryExpr7489); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT428_tree = (CommonTree)adaptor.create(DISTINCT428);
                    adaptor.addChild(root_0, DISTINCT428_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_selectionListElement_in_subQueryExpr7492);
            selectionListElement429=selectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, selectionListElement429.getTree());
            FROM430=(Token)match(input,FROM,FOLLOW_FROM_in_subQueryExpr7499); if (state.failed) return retval;
            pushFollow(FOLLOW_subSelectFilterExpr_in_subQueryExpr7502);
            subSelectFilterExpr431=subSelectFilterExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, subSelectFilterExpr431.getTree());
            // EsperEPL2Grammar.g:1229:6: ( WHERE whereClause )?
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==WHERE) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    // EsperEPL2Grammar.g:1229:7: WHERE whereClause
                    {
                    WHERE432=(Token)match(input,WHERE,FOLLOW_WHERE_in_subQueryExpr7510); if (state.failed) return retval;
                    pushFollow(FOLLOW_whereClause_in_subQueryExpr7513);
                    whereClause433=whereClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, whereClause433.getTree());

                    }
                    break;

            }

            RPAREN434=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_subQueryExpr7522); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subQueryExpr"

    public static class subSelectFilterExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "subSelectFilterExpr"
    // EsperEPL2Grammar.g:1233:1: subSelectFilterExpr : eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) ;
    public final EsperEPL2GrammarParser.subSelectFilterExpr_return subSelectFilterExpr() throws RecognitionException {
        EsperEPL2GrammarParser.subSelectFilterExpr_return retval = new EsperEPL2GrammarParser.subSelectFilterExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token ru=null;
        Token ri=null;
        Token DOT436=null;
        Token DOT438=null;
        Token AS440=null;
        EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression435 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression437 = null;

        EsperEPL2GrammarParser.viewExpression_return viewExpression439 = null;


        CommonTree i_tree=null;
        CommonTree ru_tree=null;
        CommonTree ri_tree=null;
        CommonTree DOT436_tree=null;
        CommonTree DOT438_tree=null;
        CommonTree AS440_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RETAINUNION=new RewriteRuleTokenStream(adaptor,"token RETAINUNION");
        RewriteRuleTokenStream stream_RETAININTERSECTION=new RewriteRuleTokenStream(adaptor,"token RETAININTERSECTION");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_viewExpression=new RewriteRuleSubtreeStream(adaptor,"rule viewExpression");
        RewriteRuleSubtreeStream stream_eventFilterExpression=new RewriteRuleSubtreeStream(adaptor,"rule eventFilterExpression");
         paraphrases.push("subquery filter specification"); 
        try {
            // EsperEPL2Grammar.g:1236:2: ( eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )? -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? ) )
            // EsperEPL2Grammar.g:1236:4: eventFilterExpression ( DOT viewExpression ( DOT viewExpression )* )? ( AS i= IDENT | i= IDENT )? (ru= RETAINUNION | ri= RETAININTERSECTION )?
            {
            pushFollow(FOLLOW_eventFilterExpression_in_subSelectFilterExpr7546);
            eventFilterExpression435=eventFilterExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventFilterExpression.add(eventFilterExpression435.getTree());
            // EsperEPL2Grammar.g:1237:3: ( DOT viewExpression ( DOT viewExpression )* )?
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==DOT) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    // EsperEPL2Grammar.g:1237:4: DOT viewExpression ( DOT viewExpression )*
                    {
                    DOT436=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7551); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT436);

                    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7553);
                    viewExpression437=viewExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression437.getTree());
                    // EsperEPL2Grammar.g:1237:23: ( DOT viewExpression )*
                    loop173:
                    do {
                        int alt173=2;
                        int LA173_0 = input.LA(1);

                        if ( (LA173_0==DOT) ) {
                            alt173=1;
                        }


                        switch (alt173) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1237:24: DOT viewExpression
                    	    {
                    	    DOT438=(Token)match(input,DOT,FOLLOW_DOT_in_subSelectFilterExpr7556); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_DOT.add(DOT438);

                    	    pushFollow(FOLLOW_viewExpression_in_subSelectFilterExpr7558);
                    	    viewExpression439=viewExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_viewExpression.add(viewExpression439.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop173;
                        }
                    } while (true);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1237:47: ( AS i= IDENT | i= IDENT )?
            int alt175=3;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==AS) ) {
                alt175=1;
            }
            else if ( (LA175_0==IDENT) ) {
                alt175=2;
            }
            switch (alt175) {
                case 1 :
                    // EsperEPL2Grammar.g:1237:48: AS i= IDENT
                    {
                    AS440=(Token)match(input,AS,FOLLOW_AS_in_subSelectFilterExpr7565); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS440);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1237:61: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_subSelectFilterExpr7575); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1237:71: (ru= RETAINUNION | ri= RETAININTERSECTION )?
            int alt176=3;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==RETAINUNION) ) {
                alt176=1;
            }
            else if ( (LA176_0==RETAININTERSECTION) ) {
                alt176=2;
            }
            switch (alt176) {
                case 1 :
                    // EsperEPL2Grammar.g:1237:72: ru= RETAINUNION
                    {
                    ru=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_subSelectFilterExpr7582); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAINUNION.add(ru);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1237:87: ri= RETAININTERSECTION
                    {
                    ri=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7586); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RETAININTERSECTION.add(ri);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventFilterExpression, i, ri, ru, viewExpression
            // token labels: ri, ru, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ri=new RewriteRuleTokenStream(adaptor,"token ri",ri);
            RewriteRuleTokenStream stream_ru=new RewriteRuleTokenStream(adaptor,"token ru",ru);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1238:3: -> ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
            {
                // EsperEPL2Grammar.g:1238:6: ^( STREAM_EXPR eventFilterExpression ( viewExpression )* ( $i)? ( $ru)? ( $ri)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STREAM_EXPR, "STREAM_EXPR"), root_1);

                adaptor.addChild(root_1, stream_eventFilterExpression.nextTree());
                // EsperEPL2Grammar.g:1238:42: ( viewExpression )*
                while ( stream_viewExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_viewExpression.nextTree());

                }
                stream_viewExpression.reset();
                // EsperEPL2Grammar.g:1238:58: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                // EsperEPL2Grammar.g:1238:62: ( $ru)?
                if ( stream_ru.hasNext() ) {
                    adaptor.addChild(root_1, stream_ru.nextNode());

                }
                stream_ru.reset();
                // EsperEPL2Grammar.g:1238:67: ( $ri)?
                if ( stream_ri.hasNext() ) {
                    adaptor.addChild(root_1, stream_ri.nextNode());

                }
                stream_ri.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "subSelectFilterExpr"

    public static class arrayExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "arrayExpression"
    // EsperEPL2Grammar.g:1241:1: arrayExpression : LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) ;
    public final EsperEPL2GrammarParser.arrayExpression_return arrayExpression() throws RecognitionException {
        EsperEPL2GrammarParser.arrayExpression_return retval = new EsperEPL2GrammarParser.arrayExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LCURLY441=null;
        Token COMMA443=null;
        Token RCURLY445=null;
        EsperEPL2GrammarParser.expression_return expression442 = null;

        EsperEPL2GrammarParser.expression_return expression444 = null;


        CommonTree LCURLY441_tree=null;
        CommonTree COMMA443_tree=null;
        CommonTree RCURLY445_tree=null;
        RewriteRuleTokenStream stream_LCURLY=new RewriteRuleTokenStream(adaptor,"token LCURLY");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_RCURLY=new RewriteRuleTokenStream(adaptor,"token RCURLY");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1242:2: ( LCURLY ( expression ( COMMA expression )* )? RCURLY -> ^( ARRAY_EXPR ( expression )* ) )
            // EsperEPL2Grammar.g:1242:4: LCURLY ( expression ( COMMA expression )* )? RCURLY
            {
            LCURLY441=(Token)match(input,LCURLY,FOLLOW_LCURLY_in_arrayExpression7626); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LCURLY.add(LCURLY441);

            // EsperEPL2Grammar.g:1242:11: ( expression ( COMMA expression )* )?
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==WINDOW||LA178_0==ESCAPE||(LA178_0>=NOT_EXPR && LA178_0<=EVERY_EXPR)||(LA178_0>=SUM && LA178_0<=COUNT)||LA178_0==CASE||LA178_0==OUTER||(LA178_0>=JOIN && LA178_0<=FULL)||(LA178_0>=EVENTS && LA178_0<=LAST)||(LA178_0>=UNIDIRECTIONAL && LA178_0<=CURRENT_TIMESTAMP)||LA178_0==SNAPSHOT||(LA178_0>=VARIABLE && LA178_0<=INDEX)||(LA178_0>=BOOLEAN_TRUE && LA178_0<=VALUE_NULL)||(LA178_0>=DEFINE && LA178_0<=MATCHES)||LA178_0==WHILE||LA178_0==NUM_DOUBLE||LA178_0==IDENT||LA178_0==LPAREN||(LA178_0>=PLUS && LA178_0<=QUESTION)||(LA178_0>=STRING_LITERAL && LA178_0<=QUOTED_STRING_LITERAL)||LA178_0==MINUS||LA178_0==LCURLY||LA178_0==NUM_INT||(LA178_0>=TICKED_STRING_LITERAL && LA178_0<=NUM_FLOAT)) ) {
                alt178=1;
            }
            switch (alt178) {
                case 1 :
                    // EsperEPL2Grammar.g:1242:12: expression ( COMMA expression )*
                    {
                    pushFollow(FOLLOW_expression_in_arrayExpression7629);
                    expression442=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression442.getTree());
                    // EsperEPL2Grammar.g:1242:23: ( COMMA expression )*
                    loop177:
                    do {
                        int alt177=2;
                        int LA177_0 = input.LA(1);

                        if ( (LA177_0==COMMA) ) {
                            alt177=1;
                        }


                        switch (alt177) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1242:24: COMMA expression
                    	    {
                    	    COMMA443=(Token)match(input,COMMA,FOLLOW_COMMA_in_arrayExpression7632); if (state.failed) return retval; 
                    	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA443);

                    	    pushFollow(FOLLOW_expression_in_arrayExpression7634);
                    	    expression444=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) stream_expression.add(expression444.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop177;
                        }
                    } while (true);


                    }
                    break;

            }

            RCURLY445=(Token)match(input,RCURLY,FOLLOW_RCURLY_in_arrayExpression7641); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RCURLY.add(RCURLY445);



            // AST REWRITE
            // elements: expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1243:4: -> ^( ARRAY_EXPR ( expression )* )
            {
                // EsperEPL2Grammar.g:1243:7: ^( ARRAY_EXPR ( expression )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(ARRAY_EXPR, "ARRAY_EXPR"), root_1);

                // EsperEPL2Grammar.g:1243:20: ( expression )*
                while ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "arrayExpression"

    public static class builtinFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "builtinFunc"
    // EsperEPL2Grammar.g:1246:1: builtinFunc : ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | windowAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PREVIOUSTAIL LPAREN expression ( COMMA expression )? RPAREN | PREVIOUSCOUNT LPAREN expression RPAREN | PREVIOUSWINDOW LPAREN expression RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? );
    public final EsperEPL2GrammarParser.builtinFunc_return builtinFunc() throws RecognitionException {
        EsperEPL2GrammarParser.builtinFunc_return retval = new EsperEPL2GrammarParser.builtinFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token SUM446=null;
        Token LPAREN447=null;
        Token ALL448=null;
        Token DISTINCT449=null;
        Token RPAREN451=null;
        Token AVG452=null;
        Token LPAREN453=null;
        Token ALL454=null;
        Token DISTINCT455=null;
        Token RPAREN457=null;
        Token COUNT458=null;
        Token LPAREN459=null;
        Token ALL460=null;
        Token DISTINCT461=null;
        Token STAR463=null;
        Token RPAREN464=null;
        Token MEDIAN465=null;
        Token LPAREN466=null;
        Token ALL467=null;
        Token DISTINCT468=null;
        Token RPAREN470=null;
        Token STDDEV471=null;
        Token LPAREN472=null;
        Token ALL473=null;
        Token DISTINCT474=null;
        Token RPAREN476=null;
        Token AVEDEV477=null;
        Token LPAREN478=null;
        Token ALL479=null;
        Token DISTINCT480=null;
        Token RPAREN482=null;
        Token COALESCE486=null;
        Token LPAREN487=null;
        Token COMMA489=null;
        Token COMMA491=null;
        Token RPAREN493=null;
        Token PREVIOUS494=null;
        Token LPAREN495=null;
        Token COMMA497=null;
        Token RPAREN499=null;
        Token PREVIOUSTAIL500=null;
        Token LPAREN501=null;
        Token COMMA503=null;
        Token RPAREN505=null;
        Token PREVIOUSCOUNT506=null;
        Token LPAREN507=null;
        Token RPAREN509=null;
        Token PREVIOUSWINDOW510=null;
        Token LPAREN511=null;
        Token RPAREN513=null;
        Token PRIOR514=null;
        Token LPAREN515=null;
        Token NUM_INT516=null;
        Token COMMA517=null;
        Token RPAREN519=null;
        Token INSTANCEOF520=null;
        Token LPAREN521=null;
        Token COMMA523=null;
        Token COMMA525=null;
        Token RPAREN527=null;
        Token CAST528=null;
        Token LPAREN529=null;
        Token COMMA531=null;
        Token AS532=null;
        Token RPAREN534=null;
        Token EXISTS535=null;
        Token LPAREN536=null;
        Token RPAREN538=null;
        Token CURRENT_TIMESTAMP539=null;
        Token LPAREN540=null;
        Token RPAREN541=null;
        EsperEPL2GrammarParser.expression_return expression450 = null;

        EsperEPL2GrammarParser.expression_return expression456 = null;

        EsperEPL2GrammarParser.expression_return expression462 = null;

        EsperEPL2GrammarParser.expression_return expression469 = null;

        EsperEPL2GrammarParser.expression_return expression475 = null;

        EsperEPL2GrammarParser.expression_return expression481 = null;

        EsperEPL2GrammarParser.firstAggregation_return firstAggregation483 = null;

        EsperEPL2GrammarParser.lastAggregation_return lastAggregation484 = null;

        EsperEPL2GrammarParser.windowAggregation_return windowAggregation485 = null;

        EsperEPL2GrammarParser.expression_return expression488 = null;

        EsperEPL2GrammarParser.expression_return expression490 = null;

        EsperEPL2GrammarParser.expression_return expression492 = null;

        EsperEPL2GrammarParser.expression_return expression496 = null;

        EsperEPL2GrammarParser.expression_return expression498 = null;

        EsperEPL2GrammarParser.expression_return expression502 = null;

        EsperEPL2GrammarParser.expression_return expression504 = null;

        EsperEPL2GrammarParser.expression_return expression508 = null;

        EsperEPL2GrammarParser.expression_return expression512 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty518 = null;

        EsperEPL2GrammarParser.expression_return expression522 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier524 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier526 = null;

        EsperEPL2GrammarParser.expression_return expression530 = null;

        EsperEPL2GrammarParser.classIdentifier_return classIdentifier533 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty537 = null;


        CommonTree SUM446_tree=null;
        CommonTree LPAREN447_tree=null;
        CommonTree ALL448_tree=null;
        CommonTree DISTINCT449_tree=null;
        CommonTree RPAREN451_tree=null;
        CommonTree AVG452_tree=null;
        CommonTree LPAREN453_tree=null;
        CommonTree ALL454_tree=null;
        CommonTree DISTINCT455_tree=null;
        CommonTree RPAREN457_tree=null;
        CommonTree COUNT458_tree=null;
        CommonTree LPAREN459_tree=null;
        CommonTree ALL460_tree=null;
        CommonTree DISTINCT461_tree=null;
        CommonTree STAR463_tree=null;
        CommonTree RPAREN464_tree=null;
        CommonTree MEDIAN465_tree=null;
        CommonTree LPAREN466_tree=null;
        CommonTree ALL467_tree=null;
        CommonTree DISTINCT468_tree=null;
        CommonTree RPAREN470_tree=null;
        CommonTree STDDEV471_tree=null;
        CommonTree LPAREN472_tree=null;
        CommonTree ALL473_tree=null;
        CommonTree DISTINCT474_tree=null;
        CommonTree RPAREN476_tree=null;
        CommonTree AVEDEV477_tree=null;
        CommonTree LPAREN478_tree=null;
        CommonTree ALL479_tree=null;
        CommonTree DISTINCT480_tree=null;
        CommonTree RPAREN482_tree=null;
        CommonTree COALESCE486_tree=null;
        CommonTree LPAREN487_tree=null;
        CommonTree COMMA489_tree=null;
        CommonTree COMMA491_tree=null;
        CommonTree RPAREN493_tree=null;
        CommonTree PREVIOUS494_tree=null;
        CommonTree LPAREN495_tree=null;
        CommonTree COMMA497_tree=null;
        CommonTree RPAREN499_tree=null;
        CommonTree PREVIOUSTAIL500_tree=null;
        CommonTree LPAREN501_tree=null;
        CommonTree COMMA503_tree=null;
        CommonTree RPAREN505_tree=null;
        CommonTree PREVIOUSCOUNT506_tree=null;
        CommonTree LPAREN507_tree=null;
        CommonTree RPAREN509_tree=null;
        CommonTree PREVIOUSWINDOW510_tree=null;
        CommonTree LPAREN511_tree=null;
        CommonTree RPAREN513_tree=null;
        CommonTree PRIOR514_tree=null;
        CommonTree LPAREN515_tree=null;
        CommonTree NUM_INT516_tree=null;
        CommonTree COMMA517_tree=null;
        CommonTree RPAREN519_tree=null;
        CommonTree INSTANCEOF520_tree=null;
        CommonTree LPAREN521_tree=null;
        CommonTree COMMA523_tree=null;
        CommonTree COMMA525_tree=null;
        CommonTree RPAREN527_tree=null;
        CommonTree CAST528_tree=null;
        CommonTree LPAREN529_tree=null;
        CommonTree COMMA531_tree=null;
        CommonTree AS532_tree=null;
        CommonTree RPAREN534_tree=null;
        CommonTree EXISTS535_tree=null;
        CommonTree LPAREN536_tree=null;
        CommonTree RPAREN538_tree=null;
        CommonTree CURRENT_TIMESTAMP539_tree=null;
        CommonTree LPAREN540_tree=null;
        CommonTree RPAREN541_tree=null;

        try {
            // EsperEPL2Grammar.g:1247:2: ( SUM LPAREN ( ALL | DISTINCT )? expression RPAREN | AVG LPAREN ( ALL | DISTINCT )? expression RPAREN | COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN | MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN | STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN | firstAggregation | lastAggregation | windowAggregation | COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN | PREVIOUS LPAREN expression ( COMMA expression )? RPAREN | PREVIOUSTAIL LPAREN expression ( COMMA expression )? RPAREN | PREVIOUSCOUNT LPAREN expression RPAREN | PREVIOUSWINDOW LPAREN expression RPAREN | PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN | INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN | CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN | EXISTS LPAREN eventProperty RPAREN | CURRENT_TIMESTAMP ( LPAREN RPAREN )? )
            int alt192=19;
            switch ( input.LA(1) ) {
            case SUM:
                {
                alt192=1;
                }
                break;
            case AVG:
                {
                alt192=2;
                }
                break;
            case COUNT:
                {
                alt192=3;
                }
                break;
            case MEDIAN:
                {
                alt192=4;
                }
                break;
            case STDDEV:
                {
                alt192=5;
                }
                break;
            case AVEDEV:
                {
                alt192=6;
                }
                break;
            case FIRST:
                {
                alt192=7;
                }
                break;
            case LAST:
                {
                alt192=8;
                }
                break;
            case WINDOW:
                {
                alt192=9;
                }
                break;
            case COALESCE:
                {
                alt192=10;
                }
                break;
            case PREVIOUS:
                {
                alt192=11;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt192=12;
                }
                break;
            case PREVIOUSCOUNT:
                {
                alt192=13;
                }
                break;
            case PREVIOUSWINDOW:
                {
                alt192=14;
                }
                break;
            case PRIOR:
                {
                alt192=15;
                }
                break;
            case INSTANCEOF:
                {
                alt192=16;
                }
                break;
            case CAST:
                {
                alt192=17;
                }
                break;
            case EXISTS:
                {
                alt192=18;
                }
                break;
            case CURRENT_TIMESTAMP:
                {
                alt192=19;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 192, 0, input);

                throw nvae;
            }

            switch (alt192) {
                case 1 :
                    // EsperEPL2Grammar.g:1247:4: SUM LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM446=(Token)match(input,SUM,FOLLOW_SUM_in_builtinFunc7664); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM446_tree = (CommonTree)adaptor.create(SUM446);
                    root_0 = (CommonTree)adaptor.becomeRoot(SUM446_tree, root_0);
                    }
                    LPAREN447=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7667); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1247:17: ( ALL | DISTINCT )?
                    int alt179=3;
                    int LA179_0 = input.LA(1);

                    if ( (LA179_0==ALL) ) {
                        alt179=1;
                    }
                    else if ( (LA179_0==DISTINCT) ) {
                        alt179=2;
                    }
                    switch (alt179) {
                        case 1 :
                            // EsperEPL2Grammar.g:1247:18: ALL
                            {
                            ALL448=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7671); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1247:25: DISTINCT
                            {
                            DISTINCT449=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7676); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT449_tree = (CommonTree)adaptor.create(DISTINCT449);
                            adaptor.addChild(root_0, DISTINCT449_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7680);
                    expression450=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression450.getTree());
                    RPAREN451=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7682); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1248:4: AVG LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG452=(Token)match(input,AVG,FOLLOW_AVG_in_builtinFunc7688); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG452_tree = (CommonTree)adaptor.create(AVG452);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVG452_tree, root_0);
                    }
                    LPAREN453=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7691); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1248:17: ( ALL | DISTINCT )?
                    int alt180=3;
                    int LA180_0 = input.LA(1);

                    if ( (LA180_0==ALL) ) {
                        alt180=1;
                    }
                    else if ( (LA180_0==DISTINCT) ) {
                        alt180=2;
                    }
                    switch (alt180) {
                        case 1 :
                            // EsperEPL2Grammar.g:1248:18: ALL
                            {
                            ALL454=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7695); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1248:25: DISTINCT
                            {
                            DISTINCT455=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7700); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT455_tree = (CommonTree)adaptor.create(DISTINCT455);
                            adaptor.addChild(root_0, DISTINCT455_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7704);
                    expression456=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression456.getTree());
                    RPAREN457=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7706); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1249:4: COUNT LPAREN ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) ) RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT458=(Token)match(input,COUNT,FOLLOW_COUNT_in_builtinFunc7712); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT458_tree = (CommonTree)adaptor.create(COUNT458);
                    root_0 = (CommonTree)adaptor.becomeRoot(COUNT458_tree, root_0);
                    }
                    LPAREN459=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7715); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1250:3: ( ( ( ALL | DISTINCT )? expression ) | ( STAR ) )
                    int alt182=2;
                    int LA182_0 = input.LA(1);

                    if ( (LA182_0==WINDOW||LA182_0==ESCAPE||(LA182_0>=NOT_EXPR && LA182_0<=EVERY_EXPR)||(LA182_0>=SUM && LA182_0<=COUNT)||LA182_0==CASE||LA182_0==OUTER||(LA182_0>=JOIN && LA182_0<=FULL)||(LA182_0>=DISTINCT && LA182_0<=ALL)||(LA182_0>=EVENTS && LA182_0<=LAST)||(LA182_0>=UNIDIRECTIONAL && LA182_0<=CURRENT_TIMESTAMP)||LA182_0==SNAPSHOT||(LA182_0>=VARIABLE && LA182_0<=INDEX)||(LA182_0>=BOOLEAN_TRUE && LA182_0<=VALUE_NULL)||(LA182_0>=DEFINE && LA182_0<=MATCHES)||LA182_0==WHILE||LA182_0==NUM_DOUBLE||LA182_0==IDENT||LA182_0==LPAREN||(LA182_0>=PLUS && LA182_0<=QUESTION)||(LA182_0>=STRING_LITERAL && LA182_0<=QUOTED_STRING_LITERAL)||LA182_0==MINUS||LA182_0==LCURLY||LA182_0==NUM_INT||(LA182_0>=TICKED_STRING_LITERAL && LA182_0<=NUM_FLOAT)) ) {
                        alt182=1;
                    }
                    else if ( (LA182_0==STAR) ) {
                        alt182=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 182, 0, input);

                        throw nvae;
                    }
                    switch (alt182) {
                        case 1 :
                            // EsperEPL2Grammar.g:1251:4: ( ( ALL | DISTINCT )? expression )
                            {
                            // EsperEPL2Grammar.g:1251:4: ( ( ALL | DISTINCT )? expression )
                            // EsperEPL2Grammar.g:1251:5: ( ALL | DISTINCT )? expression
                            {
                            // EsperEPL2Grammar.g:1251:5: ( ALL | DISTINCT )?
                            int alt181=3;
                            int LA181_0 = input.LA(1);

                            if ( (LA181_0==ALL) ) {
                                alt181=1;
                            }
                            else if ( (LA181_0==DISTINCT) ) {
                                alt181=2;
                            }
                            switch (alt181) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1251:6: ALL
                                    {
                                    ALL460=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7727); if (state.failed) return retval;

                                    }
                                    break;
                                case 2 :
                                    // EsperEPL2Grammar.g:1251:13: DISTINCT
                                    {
                                    DISTINCT461=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7732); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                    DISTINCT461_tree = (CommonTree)adaptor.create(DISTINCT461);
                                    adaptor.addChild(root_0, DISTINCT461_tree);
                                    }

                                    }
                                    break;

                            }

                            pushFollow(FOLLOW_expression_in_builtinFunc7736);
                            expression462=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression462.getTree());

                            }


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1253:4: ( STAR )
                            {
                            // EsperEPL2Grammar.g:1253:4: ( STAR )
                            // EsperEPL2Grammar.g:1253:5: STAR
                            {
                            STAR463=(Token)match(input,STAR,FOLLOW_STAR_in_builtinFunc7747); if (state.failed) return retval;

                            }


                            }
                            break;

                    }

                    RPAREN464=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7758); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1256:4: MEDIAN LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN465=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_builtinFunc7764); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN465_tree = (CommonTree)adaptor.create(MEDIAN465);
                    root_0 = (CommonTree)adaptor.becomeRoot(MEDIAN465_tree, root_0);
                    }
                    LPAREN466=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7767); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1256:20: ( ALL | DISTINCT )?
                    int alt183=3;
                    int LA183_0 = input.LA(1);

                    if ( (LA183_0==ALL) ) {
                        alt183=1;
                    }
                    else if ( (LA183_0==DISTINCT) ) {
                        alt183=2;
                    }
                    switch (alt183) {
                        case 1 :
                            // EsperEPL2Grammar.g:1256:21: ALL
                            {
                            ALL467=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7771); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1256:28: DISTINCT
                            {
                            DISTINCT468=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7776); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT468_tree = (CommonTree)adaptor.create(DISTINCT468);
                            adaptor.addChild(root_0, DISTINCT468_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7780);
                    expression469=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression469.getTree());
                    RPAREN470=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7782); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1257:4: STDDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV471=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_builtinFunc7788); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV471_tree = (CommonTree)adaptor.create(STDDEV471);
                    root_0 = (CommonTree)adaptor.becomeRoot(STDDEV471_tree, root_0);
                    }
                    LPAREN472=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7791); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1257:20: ( ALL | DISTINCT )?
                    int alt184=3;
                    int LA184_0 = input.LA(1);

                    if ( (LA184_0==ALL) ) {
                        alt184=1;
                    }
                    else if ( (LA184_0==DISTINCT) ) {
                        alt184=2;
                    }
                    switch (alt184) {
                        case 1 :
                            // EsperEPL2Grammar.g:1257:21: ALL
                            {
                            ALL473=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7795); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1257:28: DISTINCT
                            {
                            DISTINCT474=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7800); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT474_tree = (CommonTree)adaptor.create(DISTINCT474);
                            adaptor.addChild(root_0, DISTINCT474_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7804);
                    expression475=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression475.getTree());
                    RPAREN476=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7806); if (state.failed) return retval;

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1258:4: AVEDEV LPAREN ( ALL | DISTINCT )? expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV477=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_builtinFunc7812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV477_tree = (CommonTree)adaptor.create(AVEDEV477);
                    root_0 = (CommonTree)adaptor.becomeRoot(AVEDEV477_tree, root_0);
                    }
                    LPAREN478=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7815); if (state.failed) return retval;
                    // EsperEPL2Grammar.g:1258:20: ( ALL | DISTINCT )?
                    int alt185=3;
                    int LA185_0 = input.LA(1);

                    if ( (LA185_0==ALL) ) {
                        alt185=1;
                    }
                    else if ( (LA185_0==DISTINCT) ) {
                        alt185=2;
                    }
                    switch (alt185) {
                        case 1 :
                            // EsperEPL2Grammar.g:1258:21: ALL
                            {
                            ALL479=(Token)match(input,ALL,FOLLOW_ALL_in_builtinFunc7819); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1258:28: DISTINCT
                            {
                            DISTINCT480=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_builtinFunc7824); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                            DISTINCT480_tree = (CommonTree)adaptor.create(DISTINCT480);
                            adaptor.addChild(root_0, DISTINCT480_tree);
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_expression_in_builtinFunc7828);
                    expression481=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression481.getTree());
                    RPAREN482=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7830); if (state.failed) return retval;

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1259:4: firstAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_firstAggregation_in_builtinFunc7836);
                    firstAggregation483=firstAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, firstAggregation483.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1260:4: lastAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastAggregation_in_builtinFunc7841);
                    lastAggregation484=lastAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastAggregation484.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1261:4: windowAggregation
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_windowAggregation_in_builtinFunc7846);
                    windowAggregation485=windowAggregation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, windowAggregation485.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1262:4: COALESCE LPAREN expression COMMA expression ( COMMA expression )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE486=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_builtinFunc7851); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE486_tree = (CommonTree)adaptor.create(COALESCE486);
                    root_0 = (CommonTree)adaptor.becomeRoot(COALESCE486_tree, root_0);
                    }
                    LPAREN487=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7854); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7857);
                    expression488=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression488.getTree());
                    COMMA489=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7859); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7862);
                    expression490=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression490.getTree());
                    // EsperEPL2Grammar.g:1262:51: ( COMMA expression )*
                    loop186:
                    do {
                        int alt186=2;
                        int LA186_0 = input.LA(1);

                        if ( (LA186_0==COMMA) ) {
                            alt186=1;
                        }


                        switch (alt186) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1262:52: COMMA expression
                    	    {
                    	    COMMA491=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7865); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_builtinFunc7868);
                    	    expression492=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression492.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop186;
                        }
                    } while (true);

                    RPAREN493=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7872); if (state.failed) return retval;

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1263:4: PREVIOUS LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS494=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_builtinFunc7878); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS494_tree = (CommonTree)adaptor.create(PREVIOUS494);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUS494_tree, root_0);
                    }
                    LPAREN495=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7881); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7884);
                    expression496=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression496.getTree());
                    // EsperEPL2Grammar.g:1263:33: ( COMMA expression )?
                    int alt187=2;
                    int LA187_0 = input.LA(1);

                    if ( (LA187_0==COMMA) ) {
                        alt187=1;
                    }
                    switch (alt187) {
                        case 1 :
                            // EsperEPL2Grammar.g:1263:34: COMMA expression
                            {
                            COMMA497=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7887); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7890);
                            expression498=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression498.getTree());

                            }
                            break;

                    }

                    RPAREN499=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7894); if (state.failed) return retval;

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1264:4: PREVIOUSTAIL LPAREN expression ( COMMA expression )? RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUSTAIL500=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_builtinFunc7900); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL500_tree = (CommonTree)adaptor.create(PREVIOUSTAIL500);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSTAIL500_tree, root_0);
                    }
                    LPAREN501=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7903); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7906);
                    expression502=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression502.getTree());
                    // EsperEPL2Grammar.g:1264:37: ( COMMA expression )?
                    int alt188=2;
                    int LA188_0 = input.LA(1);

                    if ( (LA188_0==COMMA) ) {
                        alt188=1;
                    }
                    switch (alt188) {
                        case 1 :
                            // EsperEPL2Grammar.g:1264:38: COMMA expression
                            {
                            COMMA503=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7909); if (state.failed) return retval;
                            pushFollow(FOLLOW_expression_in_builtinFunc7912);
                            expression504=expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression504.getTree());

                            }
                            break;

                    }

                    RPAREN505=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7916); if (state.failed) return retval;

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1265:4: PREVIOUSCOUNT LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUSCOUNT506=(Token)match(input,PREVIOUSCOUNT,FOLLOW_PREVIOUSCOUNT_in_builtinFunc7922); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSCOUNT506_tree = (CommonTree)adaptor.create(PREVIOUSCOUNT506);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSCOUNT506_tree, root_0);
                    }
                    LPAREN507=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7925); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7928);
                    expression508=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression508.getTree());
                    RPAREN509=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7930); if (state.failed) return retval;

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1266:4: PREVIOUSWINDOW LPAREN expression RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUSWINDOW510=(Token)match(input,PREVIOUSWINDOW,FOLLOW_PREVIOUSWINDOW_in_builtinFunc7936); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSWINDOW510_tree = (CommonTree)adaptor.create(PREVIOUSWINDOW510);
                    root_0 = (CommonTree)adaptor.becomeRoot(PREVIOUSWINDOW510_tree, root_0);
                    }
                    LPAREN511=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7939); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7942);
                    expression512=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression512.getTree());
                    RPAREN513=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7944); if (state.failed) return retval;

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1267:4: PRIOR LPAREN NUM_INT COMMA eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR514=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_builtinFunc7950); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR514_tree = (CommonTree)adaptor.create(PRIOR514);
                    root_0 = (CommonTree)adaptor.becomeRoot(PRIOR514_tree, root_0);
                    }
                    LPAREN515=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7953); if (state.failed) return retval;
                    NUM_INT516=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_builtinFunc7956); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    NUM_INT516_tree = (CommonTree)adaptor.create(NUM_INT516);
                    adaptor.addChild(root_0, NUM_INT516_tree);
                    }
                    COMMA517=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7958); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc7961);
                    eventProperty518=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty518.getTree());
                    RPAREN519=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7963); if (state.failed) return retval;

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1270:4: INSTANCEOF LPAREN expression COMMA classIdentifier ( COMMA classIdentifier )* RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF520=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_builtinFunc7973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF520_tree = (CommonTree)adaptor.create(INSTANCEOF520);
                    root_0 = (CommonTree)adaptor.becomeRoot(INSTANCEOF520_tree, root_0);
                    }
                    LPAREN521=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc7976); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc7979);
                    expression522=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression522.getTree());
                    COMMA523=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7981); if (state.failed) return retval;
                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7984);
                    classIdentifier524=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier524.getTree());
                    // EsperEPL2Grammar.g:1270:58: ( COMMA classIdentifier )*
                    loop189:
                    do {
                        int alt189=2;
                        int LA189_0 = input.LA(1);

                        if ( (LA189_0==COMMA) ) {
                            alt189=1;
                        }


                        switch (alt189) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1270:59: COMMA classIdentifier
                    	    {
                    	    COMMA525=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc7987); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_classIdentifier_in_builtinFunc7990);
                    	    classIdentifier526=classIdentifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier526.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop189;
                        }
                    } while (true);

                    RPAREN527=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc7994); if (state.failed) return retval;

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1271:4: CAST LPAREN expression ( COMMA | AS ) classIdentifier RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST528=(Token)match(input,CAST,FOLLOW_CAST_in_builtinFunc8000); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST528_tree = (CommonTree)adaptor.create(CAST528);
                    root_0 = (CommonTree)adaptor.becomeRoot(CAST528_tree, root_0);
                    }
                    LPAREN529=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8003); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_builtinFunc8006);
                    expression530=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression530.getTree());
                    // EsperEPL2Grammar.g:1271:29: ( COMMA | AS )
                    int alt190=2;
                    int LA190_0 = input.LA(1);

                    if ( (LA190_0==COMMA) ) {
                        alt190=1;
                    }
                    else if ( (LA190_0==AS) ) {
                        alt190=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 190, 0, input);

                        throw nvae;
                    }
                    switch (alt190) {
                        case 1 :
                            // EsperEPL2Grammar.g:1271:30: COMMA
                            {
                            COMMA531=(Token)match(input,COMMA,FOLLOW_COMMA_in_builtinFunc8009); if (state.failed) return retval;

                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1271:39: AS
                            {
                            AS532=(Token)match(input,AS,FOLLOW_AS_in_builtinFunc8014); if (state.failed) return retval;

                            }
                            break;

                    }

                    pushFollow(FOLLOW_classIdentifier_in_builtinFunc8018);
                    classIdentifier533=classIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, classIdentifier533.getTree());
                    RPAREN534=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8020); if (state.failed) return retval;

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1272:4: EXISTS LPAREN eventProperty RPAREN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EXISTS535=(Token)match(input,EXISTS,FOLLOW_EXISTS_in_builtinFunc8026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EXISTS535_tree = (CommonTree)adaptor.create(EXISTS535);
                    root_0 = (CommonTree)adaptor.becomeRoot(EXISTS535_tree, root_0);
                    }
                    LPAREN536=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8029); if (state.failed) return retval;
                    pushFollow(FOLLOW_eventProperty_in_builtinFunc8032);
                    eventProperty537=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty537.getTree());
                    RPAREN538=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8034); if (state.failed) return retval;

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1273:4: CURRENT_TIMESTAMP ( LPAREN RPAREN )?
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CURRENT_TIMESTAMP539=(Token)match(input,CURRENT_TIMESTAMP,FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CURRENT_TIMESTAMP539_tree = (CommonTree)adaptor.create(CURRENT_TIMESTAMP539);
                    root_0 = (CommonTree)adaptor.becomeRoot(CURRENT_TIMESTAMP539_tree, root_0);
                    }
                    // EsperEPL2Grammar.g:1273:23: ( LPAREN RPAREN )?
                    int alt191=2;
                    int LA191_0 = input.LA(1);

                    if ( (LA191_0==LPAREN) ) {
                        alt191=1;
                    }
                    switch (alt191) {
                        case 1 :
                            // EsperEPL2Grammar.g:1273:24: LPAREN RPAREN
                            {
                            LPAREN540=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_builtinFunc8044); if (state.failed) return retval;
                            RPAREN541=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_builtinFunc8047); if (state.failed) return retval;

                            }
                            break;

                    }


                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "builtinFunc"

    public static class firstAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "firstAggregation"
    // EsperEPL2Grammar.g:1276:1: firstAggregation : FIRST LPAREN accessAggExpr ( COMMA expression )? RPAREN -> ^( FIRST_AGGREG accessAggExpr ( expression )? ) ;
    public final EsperEPL2GrammarParser.firstAggregation_return firstAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.firstAggregation_return retval = new EsperEPL2GrammarParser.firstAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token FIRST542=null;
        Token LPAREN543=null;
        Token COMMA545=null;
        Token RPAREN547=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr544 = null;

        EsperEPL2GrammarParser.expression_return expression546 = null;


        CommonTree FIRST542_tree=null;
        CommonTree LPAREN543_tree=null;
        CommonTree COMMA545_tree=null;
        CommonTree RPAREN547_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_FIRST=new RewriteRuleTokenStream(adaptor,"token FIRST");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            // EsperEPL2Grammar.g:1277:2: ( FIRST LPAREN accessAggExpr ( COMMA expression )? RPAREN -> ^( FIRST_AGGREG accessAggExpr ( expression )? ) )
            // EsperEPL2Grammar.g:1277:4: FIRST LPAREN accessAggExpr ( COMMA expression )? RPAREN
            {
            FIRST542=(Token)match(input,FIRST,FOLLOW_FIRST_in_firstAggregation8062); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_FIRST.add(FIRST542);

            LPAREN543=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_firstAggregation8064); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN543);

            pushFollow(FOLLOW_accessAggExpr_in_firstAggregation8066);
            accessAggExpr544=accessAggExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr544.getTree());
            // EsperEPL2Grammar.g:1277:31: ( COMMA expression )?
            int alt193=2;
            int LA193_0 = input.LA(1);

            if ( (LA193_0==COMMA) ) {
                alt193=1;
            }
            switch (alt193) {
                case 1 :
                    // EsperEPL2Grammar.g:1277:32: COMMA expression
                    {
                    COMMA545=(Token)match(input,COMMA,FOLLOW_COMMA_in_firstAggregation8069); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA545);

                    pushFollow(FOLLOW_expression_in_firstAggregation8071);
                    expression546=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression546.getTree());

                    }
                    break;

            }

            RPAREN547=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_firstAggregation8075); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN547);



            // AST REWRITE
            // elements: expression, accessAggExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1278:4: -> ^( FIRST_AGGREG accessAggExpr ( expression )? )
            {
                // EsperEPL2Grammar.g:1278:7: ^( FIRST_AGGREG accessAggExpr ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FIRST_AGGREG, "FIRST_AGGREG"), root_1);

                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                // EsperEPL2Grammar.g:1278:36: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "firstAggregation"

    public static class lastAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastAggregation"
    // EsperEPL2Grammar.g:1281:1: lastAggregation : LAST LPAREN accessAggExpr ( COMMA expression )? RPAREN -> ^( LAST_AGGREG accessAggExpr ( expression )? ) ;
    public final EsperEPL2GrammarParser.lastAggregation_return lastAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.lastAggregation_return retval = new EsperEPL2GrammarParser.lastAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST548=null;
        Token LPAREN549=null;
        Token COMMA551=null;
        Token RPAREN553=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr550 = null;

        EsperEPL2GrammarParser.expression_return expression552 = null;


        CommonTree LAST548_tree=null;
        CommonTree LPAREN549_tree=null;
        CommonTree COMMA551_tree=null;
        CommonTree RPAREN553_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            // EsperEPL2Grammar.g:1282:2: ( LAST LPAREN accessAggExpr ( COMMA expression )? RPAREN -> ^( LAST_AGGREG accessAggExpr ( expression )? ) )
            // EsperEPL2Grammar.g:1282:4: LAST LPAREN accessAggExpr ( COMMA expression )? RPAREN
            {
            LAST548=(Token)match(input,LAST,FOLLOW_LAST_in_lastAggregation8100); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST548);

            LPAREN549=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_lastAggregation8102); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN549);

            pushFollow(FOLLOW_accessAggExpr_in_lastAggregation8104);
            accessAggExpr550=accessAggExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr550.getTree());
            // EsperEPL2Grammar.g:1282:30: ( COMMA expression )?
            int alt194=2;
            int LA194_0 = input.LA(1);

            if ( (LA194_0==COMMA) ) {
                alt194=1;
            }
            switch (alt194) {
                case 1 :
                    // EsperEPL2Grammar.g:1282:31: COMMA expression
                    {
                    COMMA551=(Token)match(input,COMMA,FOLLOW_COMMA_in_lastAggregation8107); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COMMA.add(COMMA551);

                    pushFollow(FOLLOW_expression_in_lastAggregation8109);
                    expression552=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression552.getTree());

                    }
                    break;

            }

            RPAREN553=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_lastAggregation8113); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN553);



            // AST REWRITE
            // elements: expression, accessAggExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1283:4: -> ^( LAST_AGGREG accessAggExpr ( expression )? )
            {
                // EsperEPL2Grammar.g:1283:7: ^( LAST_AGGREG accessAggExpr ( expression )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_AGGREG, "LAST_AGGREG"), root_1);

                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());
                // EsperEPL2Grammar.g:1283:35: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_1, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastAggregation"

    public static class windowAggregation_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "windowAggregation"
    // EsperEPL2Grammar.g:1286:1: windowAggregation : WINDOW LPAREN accessAggExpr RPAREN -> ^( WINDOW_AGGREG accessAggExpr ) ;
    public final EsperEPL2GrammarParser.windowAggregation_return windowAggregation() throws RecognitionException {
        EsperEPL2GrammarParser.windowAggregation_return retval = new EsperEPL2GrammarParser.windowAggregation_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token WINDOW554=null;
        Token LPAREN555=null;
        Token RPAREN557=null;
        EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr556 = null;


        CommonTree WINDOW554_tree=null;
        CommonTree LPAREN555_tree=null;
        CommonTree RPAREN557_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WINDOW=new RewriteRuleTokenStream(adaptor,"token WINDOW");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_accessAggExpr=new RewriteRuleSubtreeStream(adaptor,"rule accessAggExpr");
        try {
            // EsperEPL2Grammar.g:1287:2: ( WINDOW LPAREN accessAggExpr RPAREN -> ^( WINDOW_AGGREG accessAggExpr ) )
            // EsperEPL2Grammar.g:1287:4: WINDOW LPAREN accessAggExpr RPAREN
            {
            WINDOW554=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_windowAggregation8139); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WINDOW.add(WINDOW554);

            LPAREN555=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_windowAggregation8141); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN555);

            pushFollow(FOLLOW_accessAggExpr_in_windowAggregation8143);
            accessAggExpr556=accessAggExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_accessAggExpr.add(accessAggExpr556.getTree());
            RPAREN557=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_windowAggregation8145); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN557);



            // AST REWRITE
            // elements: accessAggExpr
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1288:4: -> ^( WINDOW_AGGREG accessAggExpr )
            {
                // EsperEPL2Grammar.g:1288:7: ^( WINDOW_AGGREG accessAggExpr )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WINDOW_AGGREG, "WINDOW_AGGREG"), root_1);

                adaptor.addChild(root_1, stream_accessAggExpr.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "windowAggregation"

    public static class accessAggExpr_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "accessAggExpr"
    // EsperEPL2Grammar.g:1291:1: accessAggExpr : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression );
    public final EsperEPL2GrammarParser.accessAggExpr_return accessAggExpr() throws RecognitionException {
        EsperEPL2GrammarParser.accessAggExpr_return retval = new EsperEPL2GrammarParser.accessAggExpr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector558 = null;

        EsperEPL2GrammarParser.expression_return expression559 = null;


        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1292:5: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression )
            int alt195=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt195=1;
                }
                break;
            case IDENT:
                {
                int LA195_2 = input.LA(2);

                if ( (LA195_2==DOT) ) {
                    int LA195_66 = input.LA(3);

                    if ( (LA195_66==STAR) && (synpred4_EsperEPL2Grammar())) {
                        alt195=2;
                    }
                    else if ( (LA195_66==WINDOW||LA195_66==ESCAPE||LA195_66==EVERY_EXPR||(LA195_66>=SUM && LA195_66<=COUNT)||LA195_66==OUTER||(LA195_66>=JOIN && LA195_66<=FULL)||(LA195_66>=EVENTS && LA195_66<=LAST)||(LA195_66>=UNIDIRECTIONAL && LA195_66<=PREVIOUSTAIL)||LA195_66==PRIOR||(LA195_66>=WEEKDAY && LA195_66<=CAST)||LA195_66==SNAPSHOT||(LA195_66>=VARIABLE && LA195_66<=INDEX)||(LA195_66>=DEFINE && LA195_66<=MATCHES)||LA195_66==WHILE||LA195_66==IDENT||LA195_66==TICKED_STRING_LITERAL) ) {
                        alt195=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 195, 66, input);

                        throw nvae;
                    }
                }
                else if ( ((LA195_2>=IN_SET && LA195_2<=REGEXP)||(LA195_2>=OR_EXPR && LA195_2<=NOT_EXPR)||LA195_2==IS||LA195_2==COMMA||LA195_2==EQUALS||(LA195_2>=LPAREN && LA195_2<=LBRACK)||(LA195_2>=STAR && LA195_2<=QUESTION)||(LA195_2>=BAND && LA195_2<=MOD)||LA195_2==ESCAPECHAR) ) {
                    alt195=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 195, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt195=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 195, 0, input);

                throw nvae;
            }

            switch (alt195) {
                case 1 :
                    // EsperEPL2Grammar.g:1292:10: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_accessAggExpr8175); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1292:17: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1293:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_accessAggExpr8191);
                    propertyStreamSelector558=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector558.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1294:4: expression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expression_in_accessAggExpr8196);
                    expression559=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression559.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "accessAggExpr"

    public static class maxFunc_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "maxFunc"
    // EsperEPL2Grammar.g:1298:1: maxFunc : ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN ;
    public final EsperEPL2GrammarParser.maxFunc_return maxFunc() throws RecognitionException {
        EsperEPL2GrammarParser.maxFunc_return retval = new EsperEPL2GrammarParser.maxFunc_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token MAX560=null;
        Token MIN561=null;
        Token LPAREN562=null;
        Token COMMA564=null;
        Token COMMA566=null;
        Token RPAREN568=null;
        EsperEPL2GrammarParser.expression_return expression563 = null;

        EsperEPL2GrammarParser.expression_return expression565 = null;

        EsperEPL2GrammarParser.expression_return expression567 = null;


        CommonTree MAX560_tree=null;
        CommonTree MIN561_tree=null;
        CommonTree LPAREN562_tree=null;
        CommonTree COMMA564_tree=null;
        CommonTree COMMA566_tree=null;
        CommonTree RPAREN568_tree=null;

        try {
            // EsperEPL2Grammar.g:1299:2: ( ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN )
            // EsperEPL2Grammar.g:1299:4: ( MAX | MIN ) LPAREN expression ( COMMA expression ( COMMA expression )* )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1299:4: ( MAX | MIN )
            int alt196=2;
            int LA196_0 = input.LA(1);

            if ( (LA196_0==MAX) ) {
                alt196=1;
            }
            else if ( (LA196_0==MIN) ) {
                alt196=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 196, 0, input);

                throw nvae;
            }
            switch (alt196) {
                case 1 :
                    // EsperEPL2Grammar.g:1299:5: MAX
                    {
                    MAX560=(Token)match(input,MAX,FOLLOW_MAX_in_maxFunc8209); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX560_tree = (CommonTree)adaptor.create(MAX560);
                    root_0 = (CommonTree)adaptor.becomeRoot(MAX560_tree, root_0);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1299:12: MIN
                    {
                    MIN561=(Token)match(input,MIN,FOLLOW_MIN_in_maxFunc8214); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN561_tree = (CommonTree)adaptor.create(MIN561);
                    root_0 = (CommonTree)adaptor.becomeRoot(MIN561_tree, root_0);
                    }

                    }
                    break;

            }

            LPAREN562=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_maxFunc8218); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_maxFunc8221);
            expression563=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression563.getTree());
            // EsperEPL2Grammar.g:1299:37: ( COMMA expression ( COMMA expression )* )?
            int alt198=2;
            int LA198_0 = input.LA(1);

            if ( (LA198_0==COMMA) ) {
                alt198=1;
            }
            switch (alt198) {
                case 1 :
                    // EsperEPL2Grammar.g:1299:38: COMMA expression ( COMMA expression )*
                    {
                    COMMA564=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8224); if (state.failed) return retval;
                    pushFollow(FOLLOW_expression_in_maxFunc8227);
                    expression565=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression565.getTree());
                    // EsperEPL2Grammar.g:1299:56: ( COMMA expression )*
                    loop197:
                    do {
                        int alt197=2;
                        int LA197_0 = input.LA(1);

                        if ( (LA197_0==COMMA) ) {
                            alt197=1;
                        }


                        switch (alt197) {
                    	case 1 :
                    	    // EsperEPL2Grammar.g:1299:57: COMMA expression
                    	    {
                    	    COMMA566=(Token)match(input,COMMA,FOLLOW_COMMA_in_maxFunc8230); if (state.failed) return retval;
                    	    pushFollow(FOLLOW_expression_in_maxFunc8233);
                    	    expression567=expression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression567.getTree());

                    	    }
                    	    break;

                    	default :
                    	    break loop197;
                        }
                    } while (true);


                    }
                    break;

            }

            RPAREN568=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_maxFunc8240); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "maxFunc"

    public static class eventPropertyOrLibFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyOrLibFunction"
    // EsperEPL2Grammar.g:1302:1: eventPropertyOrLibFunction : ( ( eventProperty )=> eventProperty | libFunction );
    public final EsperEPL2GrammarParser.eventPropertyOrLibFunction_return eventPropertyOrLibFunction() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyOrLibFunction_return retval = new EsperEPL2GrammarParser.eventPropertyOrLibFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty569 = null;

        EsperEPL2GrammarParser.libFunction_return libFunction570 = null;



        try {
            // EsperEPL2Grammar.g:1303:2: ( ( eventProperty )=> eventProperty | libFunction )
            int alt199=2;
            int LA199_0 = input.LA(1);

            if ( (LA199_0==IDENT) ) {
                int LA199_1 = input.LA(2);

                if ( (LA199_1==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA199_281 = input.LA(4);

                        if ( (LA199_281==RPAREN) ) {
                            int LA199_637 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 637, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA199_281>=IN_SET && LA199_281<=REGEXP)||(LA199_281>=OR_EXPR && LA199_281<=NOT_EXPR)||LA199_281==IS||LA199_281==COMMA||LA199_281==EQUALS||(LA199_281>=STAR && LA199_281<=PLUS)||(LA199_281>=BAND && LA199_281<=MOD)) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 281, input);

                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA199_282 = input.LA(4);

                        if ( (LA199_282==RPAREN) ) {
                            int LA199_663 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 663, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA199_282>=IN_SET && LA199_282<=REGEXP)||(LA199_282>=OR_EXPR && LA199_282<=NOT_EXPR)||LA199_282==IS||LA199_282==COMMA||LA199_282==EQUALS||(LA199_282>=STAR && LA199_282<=PLUS)||(LA199_282>=BAND && LA199_282<=MOD)) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 282, input);

                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt199=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 47, input);

                        throw nvae;
                    }

                }
                else if ( (LA199_1==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==DOT) ) {
                    int LA199_49 = input.LA(3);

                    if ( (LA199_49==IDENT) ) {
                        int LA199_348 = input.LA(4);

                        if ( (LA199_348==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==LPAREN) ) {
                            int LA199_691 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 691, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_348==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==END) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_348==DOT) ) {
                            int LA199_747 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 747, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 348, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA199_49==TICKED_STRING_LITERAL) ) {
                        int LA199_349 = input.LA(4);

                        if ( (LA199_349==DOT) ) {
                            int LA199_748 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 748, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_349==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==LPAREN) ) {
                            int LA199_751 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 751, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_349==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==END) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_349==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 349, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA199_49==MAX) ) {
                        int LA199_350 = input.LA(4);

                        if ( (LA199_350==LPAREN) ) {
                            int LA199_807 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 807, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_350==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==END) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_350==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 350, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA199_49==MIN) ) {
                        int LA199_351 = input.LA(4);

                        if ( (LA199_351==LPAREN) ) {
                            int LA199_866 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 866, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_351==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==END) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_351==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 351, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA199_49==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_49==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 49, input);

                        throw nvae;
                    }
                }
                else if ( (LA199_1==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==END) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_1==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 199, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA199_0==TICKED_STRING_LITERAL) ) {
                int LA199_2 = input.LA(2);

                if ( (LA199_2==DOT) ) {
                    int LA199_104 = input.LA(3);

                    if ( (LA199_104==IDENT) ) {
                        int LA199_392 = input.LA(4);

                        if ( (LA199_392==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==LPAREN) ) {
                            int LA199_927 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 927, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_392==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==END) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_392==DOT) ) {
                            int LA199_983 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 983, input);

                                throw nvae;
                            }
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 392, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA199_104==TICKED_STRING_LITERAL) ) {
                        int LA199_393 = input.LA(4);

                        if ( (LA199_393==DOT) ) {
                            int LA199_984 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 984, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_393==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==LPAREN) ) {
                            int LA199_987 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 987, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_393==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==END) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_393==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 393, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA199_104==AT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==COUNT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==SUM) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==AVG) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==MAX) ) {
                        int LA199_400 = input.LA(4);

                        if ( (LA199_400==LPAREN) ) {
                            int LA199_1043 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 1043, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_400==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==END) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_400==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 400, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA199_104==MIN) ) {
                        int LA199_401 = input.LA(4);

                        if ( (LA199_401==LPAREN) ) {
                            int LA199_1102 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 1102, input);

                                throw nvae;
                            }
                        }
                        else if ( (LA199_401==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==STAR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==DIV) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==MOD) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==PLUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==MINUS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==LOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==LT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==GT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==LE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==GE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==IS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==BAND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==BOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==BXOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==GROUP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==HAVING) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==ORDER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==FOR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==EOF) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==INSERT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==COMMA) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==WHERE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==AS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==FROM) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==ALL) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==AFTER) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==ASC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==DESC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==THEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==ELSE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==END) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==WHEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==COLON) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==LIKE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else if ( (LA199_401==DOT) && (synpred5_EsperEPL2Grammar())) {
                            alt199=1;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 401, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA199_104==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==FIRST) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==LAST) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==WHILE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==SQL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==LW) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==CAST) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==INDEX) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==LEFT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==OUTER) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==FULL) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==JOIN) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else if ( (LA199_104==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                        alt199=1;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 104, input);

                        throw nvae;
                    }
                }
                else if ( (LA199_2==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA199_436 = input.LA(4);

                        if ( (LA199_436==RPAREN) ) {
                            int LA199_1161 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 1161, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA199_436>=IN_SET && LA199_436<=REGEXP)||(LA199_436>=OR_EXPR && LA199_436<=NOT_EXPR)||LA199_436==IS||LA199_436==COMMA||LA199_436==EQUALS||(LA199_436>=STAR && LA199_436<=PLUS)||(LA199_436>=BAND && LA199_436<=MOD)) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 436, input);

                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA199_437 = input.LA(4);

                        if ( (LA199_437==RPAREN) ) {
                            int LA199_1187 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 1187, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA199_437>=IN_SET && LA199_437<=REGEXP)||(LA199_437>=OR_EXPR && LA199_437<=NOT_EXPR)||LA199_437==IS||LA199_437==COMMA||LA199_437==EQUALS||(LA199_437>=STAR && LA199_437<=PLUS)||(LA199_437>=BAND && LA199_437<=MOD)) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 437, input);

                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt199=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 107, input);

                        throw nvae;
                    }

                }
                else if ( (LA199_2==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==END) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_2==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 199, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA199_0==AT) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==COUNT) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==EVERY_EXPR) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==SUM) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==AVG) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==MAX) ) {
                int LA199_9 = input.LA(2);

                if ( (LA199_9==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA199_503 = input.LA(4);

                        if ( (LA199_503==RPAREN) ) {
                            int LA199_1213 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 1213, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA199_503>=IN_SET && LA199_503<=REGEXP)||(LA199_503>=OR_EXPR && LA199_503<=NOT_EXPR)||LA199_503==IS||LA199_503==COMMA||LA199_503==EQUALS||(LA199_503>=STAR && LA199_503<=PLUS)||(LA199_503>=BAND && LA199_503<=MOD)) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 503, input);

                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA199_504 = input.LA(4);

                        if ( (LA199_504==RPAREN) ) {
                            int LA199_1239 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 1239, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA199_504>=IN_SET && LA199_504<=REGEXP)||(LA199_504>=OR_EXPR && LA199_504<=NOT_EXPR)||LA199_504==IS||LA199_504==COMMA||LA199_504==EQUALS||(LA199_504>=STAR && LA199_504<=PLUS)||(LA199_504>=BAND && LA199_504<=MOD)) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 504, input);

                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt199=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 163, input);

                        throw nvae;
                    }

                }
                else if ( (LA199_9==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==END) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_9==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 199, 9, input);

                    throw nvae;
                }
            }
            else if ( (LA199_0==MIN) ) {
                int LA199_10 = input.LA(2);

                if ( (LA199_10==LPAREN) ) {
                    switch ( input.LA(3) ) {
                    case STRING_LITERAL:
                        {
                        int LA199_570 = input.LA(4);

                        if ( (LA199_570==RPAREN) ) {
                            int LA199_1265 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 1265, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA199_570>=IN_SET && LA199_570<=REGEXP)||(LA199_570>=OR_EXPR && LA199_570<=NOT_EXPR)||LA199_570==IS||LA199_570==COMMA||LA199_570==EQUALS||(LA199_570>=STAR && LA199_570<=PLUS)||(LA199_570>=BAND && LA199_570<=MOD)) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 570, input);

                            throw nvae;
                        }
                        }
                        break;
                    case QUOTED_STRING_LITERAL:
                        {
                        int LA199_571 = input.LA(4);

                        if ( (LA199_571==RPAREN) ) {
                            int LA199_1291 = input.LA(5);

                            if ( (synpred5_EsperEPL2Grammar()) ) {
                                alt199=1;
                            }
                            else if ( (true) ) {
                                alt199=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 199, 1291, input);

                                throw nvae;
                            }
                        }
                        else if ( ((LA199_571>=IN_SET && LA199_571<=REGEXP)||(LA199_571>=OR_EXPR && LA199_571<=NOT_EXPR)||LA199_571==IS||LA199_571==COMMA||LA199_571==EQUALS||(LA199_571>=STAR && LA199_571<=PLUS)||(LA199_571>=BAND && LA199_571<=MOD)) ) {
                            alt199=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 199, 571, input);

                            throw nvae;
                        }
                        }
                        break;
                    case WINDOW:
                    case ESCAPE:
                    case NOT_EXPR:
                    case EVERY_EXPR:
                    case SUM:
                    case AVG:
                    case MAX:
                    case MIN:
                    case COALESCE:
                    case MEDIAN:
                    case STDDEV:
                    case AVEDEV:
                    case COUNT:
                    case CASE:
                    case OUTER:
                    case JOIN:
                    case LEFT:
                    case RIGHT:
                    case FULL:
                    case DISTINCT:
                    case ALL:
                    case EVENTS:
                    case FIRST:
                    case LAST:
                    case UNIDIRECTIONAL:
                    case RETAINUNION:
                    case RETAININTERSECTION:
                    case PATTERN:
                    case SQL:
                    case METADATASQL:
                    case PREVIOUS:
                    case PREVIOUSTAIL:
                    case PREVIOUSCOUNT:
                    case PREVIOUSWINDOW:
                    case PRIOR:
                    case EXISTS:
                    case WEEKDAY:
                    case LW:
                    case INSTANCEOF:
                    case CAST:
                    case CURRENT_TIMESTAMP:
                    case SNAPSHOT:
                    case VARIABLE:
                    case UNTIL:
                    case AT:
                    case INDEX:
                    case BOOLEAN_TRUE:
                    case BOOLEAN_FALSE:
                    case VALUE_NULL:
                    case DEFINE:
                    case PARTITION:
                    case MATCHES:
                    case WHILE:
                    case NUM_DOUBLE:
                    case IDENT:
                    case LPAREN:
                    case RPAREN:
                    case PLUS:
                    case QUESTION:
                    case MINUS:
                    case LCURLY:
                    case NUM_INT:
                    case TICKED_STRING_LITERAL:
                    case NUM_LONG:
                    case NUM_FLOAT:
                        {
                        alt199=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 199, 222, input);

                        throw nvae;
                    }

                }
                else if ( (LA199_10==ESCAPECHAR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==LBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==QUESTION) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==DOT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==STAR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==DIV) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==MOD) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==PLUS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==MINUS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==LOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==LT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==GT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==LE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==GE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==EQUALS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==IS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==SQL_NE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==NOT_EQUAL) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==BAND) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==BOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==BXOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==AND_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==OR_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==GROUP) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==HAVING) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==OUTPUT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==ORDER) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==ROW_LIMIT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==FOR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==EOF) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==INSERT) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==RPAREN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==COMMA) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==WHERE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==AS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==FROM) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==MEASURES) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==ALL) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==AFTER) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==ASC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==DESC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==THEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==ELSE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==END) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==WHEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==COLON) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==RBRACK) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==RCURLY) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==TIMEPERIOD_SECONDS) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==TIMEPERIOD_SECOND) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==TIMEPERIOD_SEC) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==NOT_EXPR) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==IN_SET) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==BETWEEN) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==LIKE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==REGEXP) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else if ( (LA199_10==ESCAPE) && (synpred5_EsperEPL2Grammar())) {
                    alt199=1;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 199, 10, input);

                    throw nvae;
                }
            }
            else if ( (LA199_0==COALESCE) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==MEDIAN) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==STDDEV) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==AVEDEV) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==EVENTS) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==FIRST) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==LAST) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==WHILE) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==UNIDIRECTIONAL) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==RETAINUNION) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==RETAININTERSECTION) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==UNTIL) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==PATTERN) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==SQL) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==METADATASQL) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==PREVIOUS) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==PREVIOUSTAIL) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==PRIOR) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==WEEKDAY) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==LW) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==INSTANCEOF) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==CAST) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==SNAPSHOT) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==VARIABLE) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==INDEX) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==WINDOW) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==LEFT) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==RIGHT) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==OUTER) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==FULL) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==JOIN) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==DEFINE) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==PARTITION) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else if ( (LA199_0==MATCHES) && (synpred5_EsperEPL2Grammar())) {
                alt199=1;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 199, 0, input);

                throw nvae;
            }
            switch (alt199) {
                case 1 :
                    // EsperEPL2Grammar.g:1303:4: ( eventProperty )=> eventProperty
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_eventProperty_in_eventPropertyOrLibFunction8259);
                    eventProperty569=eventProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, eventProperty569.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1304:4: libFunction
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_libFunction_in_eventPropertyOrLibFunction8264);
                    libFunction570=libFunction();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, libFunction570.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyOrLibFunction"

    public static class libFunction_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunction"
    // EsperEPL2Grammar.g:1307:1: libFunction : ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) ;
    public final EsperEPL2GrammarParser.libFunction_return libFunction() throws RecognitionException {
        EsperEPL2GrammarParser.libFunction_return retval = new EsperEPL2GrammarParser.libFunction_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT572=null;
        Token LPAREN574=null;
        Token RPAREN576=null;
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy571 = null;

        EsperEPL2GrammarParser.funcIdent_return funcIdent573 = null;

        EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs575 = null;


        CommonTree DOT572_tree=null;
        CommonTree LPAREN574_tree=null;
        CommonTree RPAREN576_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_libFunctionArgs=new RewriteRuleSubtreeStream(adaptor,"rule libFunctionArgs");
        RewriteRuleSubtreeStream stream_classIdentifierNonGreedy=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifierNonGreedy");
        RewriteRuleSubtreeStream stream_funcIdent=new RewriteRuleSubtreeStream(adaptor,"rule funcIdent");
        try {
            // EsperEPL2Grammar.g:1308:2: ( ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? ) )
            // EsperEPL2Grammar.g:1308:4: ( classIdentifierNonGreedy DOT )? funcIdent LPAREN ( libFunctionArgs )? RPAREN
            {
            // EsperEPL2Grammar.g:1308:4: ( classIdentifierNonGreedy DOT )?
            int alt200=2;
            int LA200_0 = input.LA(1);

            if ( (LA200_0==IDENT) ) {
                int LA200_1 = input.LA(2);

                if ( (LA200_1==DOT) ) {
                    alt200=1;
                }
            }
            else if ( (LA200_0==TICKED_STRING_LITERAL) ) {
                int LA200_2 = input.LA(2);

                if ( (LA200_2==DOT) ) {
                    alt200=1;
                }
            }
            switch (alt200) {
                case 1 :
                    // EsperEPL2Grammar.g:1308:5: classIdentifierNonGreedy DOT
                    {
                    pushFollow(FOLLOW_classIdentifierNonGreedy_in_libFunction8277);
                    classIdentifierNonGreedy571=classIdentifierNonGreedy();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_classIdentifierNonGreedy.add(classIdentifierNonGreedy571.getTree());
                    DOT572=(Token)match(input,DOT,FOLLOW_DOT_in_libFunction8279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DOT.add(DOT572);


                    }
                    break;

            }

            pushFollow(FOLLOW_funcIdent_in_libFunction8283);
            funcIdent573=funcIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_funcIdent.add(funcIdent573.getTree());
            LPAREN574=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_libFunction8285); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN574);

            // EsperEPL2Grammar.g:1308:53: ( libFunctionArgs )?
            int alt201=2;
            int LA201_0 = input.LA(1);

            if ( (LA201_0==WINDOW||LA201_0==ESCAPE||(LA201_0>=NOT_EXPR && LA201_0<=EVERY_EXPR)||(LA201_0>=SUM && LA201_0<=COUNT)||LA201_0==CASE||LA201_0==OUTER||(LA201_0>=JOIN && LA201_0<=FULL)||(LA201_0>=DISTINCT && LA201_0<=ALL)||(LA201_0>=EVENTS && LA201_0<=LAST)||(LA201_0>=UNIDIRECTIONAL && LA201_0<=CURRENT_TIMESTAMP)||LA201_0==SNAPSHOT||(LA201_0>=VARIABLE && LA201_0<=INDEX)||(LA201_0>=BOOLEAN_TRUE && LA201_0<=VALUE_NULL)||(LA201_0>=DEFINE && LA201_0<=MATCHES)||LA201_0==WHILE||LA201_0==NUM_DOUBLE||LA201_0==IDENT||LA201_0==LPAREN||(LA201_0>=PLUS && LA201_0<=QUESTION)||(LA201_0>=STRING_LITERAL && LA201_0<=QUOTED_STRING_LITERAL)||LA201_0==MINUS||LA201_0==LCURLY||LA201_0==NUM_INT||(LA201_0>=TICKED_STRING_LITERAL && LA201_0<=NUM_FLOAT)) ) {
                alt201=1;
            }
            switch (alt201) {
                case 1 :
                    // EsperEPL2Grammar.g:1308:54: libFunctionArgs
                    {
                    pushFollow(FOLLOW_libFunctionArgs_in_libFunction8288);
                    libFunctionArgs575=libFunctionArgs();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_libFunctionArgs.add(libFunctionArgs575.getTree());

                    }
                    break;

            }

            RPAREN576=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_libFunction8292); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN576);



            // AST REWRITE
            // elements: funcIdent, libFunctionArgs, classIdentifierNonGreedy
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1309:4: -> ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
            {
                // EsperEPL2Grammar.g:1309:7: ^( LIB_FUNCTION ( classIdentifierNonGreedy )? funcIdent ( libFunctionArgs )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LIB_FUNCTION, "LIB_FUNCTION"), root_1);

                // EsperEPL2Grammar.g:1309:22: ( classIdentifierNonGreedy )?
                if ( stream_classIdentifierNonGreedy.hasNext() ) {
                    adaptor.addChild(root_1, stream_classIdentifierNonGreedy.nextTree());

                }
                stream_classIdentifierNonGreedy.reset();
                adaptor.addChild(root_1, stream_funcIdent.nextTree());
                // EsperEPL2Grammar.g:1309:58: ( libFunctionArgs )?
                if ( stream_libFunctionArgs.hasNext() ) {
                    adaptor.addChild(root_1, stream_libFunctionArgs.nextTree());

                }
                stream_libFunctionArgs.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunction"

    public static class funcIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "funcIdent"
    // EsperEPL2Grammar.g:1312:1: funcIdent : ( escapableIdent | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] );
    public final EsperEPL2GrammarParser.funcIdent_return funcIdent() throws RecognitionException {
        EsperEPL2GrammarParser.funcIdent_return retval = new EsperEPL2GrammarParser.funcIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token max=null;
        Token min=null;
        EsperEPL2GrammarParser.escapableIdent_return escapableIdent577 = null;


        CommonTree max_tree=null;
        CommonTree min_tree=null;
        RewriteRuleTokenStream stream_MAX=new RewriteRuleTokenStream(adaptor,"token MAX");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");

        try {
            // EsperEPL2Grammar.g:1313:2: ( escapableIdent | max= MAX -> IDENT[$max] | min= MIN -> IDENT[$min] )
            int alt202=3;
            switch ( input.LA(1) ) {
            case IDENT:
            case TICKED_STRING_LITERAL:
                {
                alt202=1;
                }
                break;
            case MAX:
                {
                alt202=2;
                }
                break;
            case MIN:
                {
                alt202=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 202, 0, input);

                throw nvae;
            }

            switch (alt202) {
                case 1 :
                    // EsperEPL2Grammar.g:1313:4: escapableIdent
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_escapableIdent_in_funcIdent8322);
                    escapableIdent577=escapableIdent();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, escapableIdent577.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1314:4: max= MAX
                    {
                    max=(Token)match(input,MAX,FOLLOW_MAX_in_funcIdent8329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MAX.add(max);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1314:12: -> IDENT[$max]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, max));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1315:4: min= MIN
                    {
                    min=(Token)match(input,MIN,FOLLOW_MIN_in_funcIdent8341); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(min);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1315:12: -> IDENT[$min]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, min));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "funcIdent"

    public static class libFunctionArgs_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "libFunctionArgs"
    // EsperEPL2Grammar.g:1318:1: libFunctionArgs : ( ALL | DISTINCT )? expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.libFunctionArgs_return libFunctionArgs() throws RecognitionException {
        EsperEPL2GrammarParser.libFunctionArgs_return retval = new EsperEPL2GrammarParser.libFunctionArgs_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ALL578=null;
        Token DISTINCT579=null;
        Token COMMA581=null;
        EsperEPL2GrammarParser.expression_return expression580 = null;

        EsperEPL2GrammarParser.expression_return expression582 = null;


        CommonTree ALL578_tree=null;
        CommonTree DISTINCT579_tree=null;
        CommonTree COMMA581_tree=null;

        try {
            // EsperEPL2Grammar.g:1319:2: ( ( ALL | DISTINCT )? expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1319:4: ( ALL | DISTINCT )? expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            // EsperEPL2Grammar.g:1319:4: ( ALL | DISTINCT )?
            int alt203=3;
            int LA203_0 = input.LA(1);

            if ( (LA203_0==ALL) ) {
                alt203=1;
            }
            else if ( (LA203_0==DISTINCT) ) {
                alt203=2;
            }
            switch (alt203) {
                case 1 :
                    // EsperEPL2Grammar.g:1319:5: ALL
                    {
                    ALL578=(Token)match(input,ALL,FOLLOW_ALL_in_libFunctionArgs8359); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1319:12: DISTINCT
                    {
                    DISTINCT579=(Token)match(input,DISTINCT,FOLLOW_DISTINCT_in_libFunctionArgs8364); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DISTINCT579_tree = (CommonTree)adaptor.create(DISTINCT579);
                    adaptor.addChild(root_0, DISTINCT579_tree);
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_expression_in_libFunctionArgs8368);
            expression580=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression580.getTree());
            // EsperEPL2Grammar.g:1319:34: ( COMMA expression )*
            loop204:
            do {
                int alt204=2;
                int LA204_0 = input.LA(1);

                if ( (LA204_0==COMMA) ) {
                    alt204=1;
                }


                switch (alt204) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1319:35: COMMA expression
            	    {
            	    COMMA581=(Token)match(input,COMMA,FOLLOW_COMMA_in_libFunctionArgs8371); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_libFunctionArgs8374);
            	    expression582=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression582.getTree());

            	    }
            	    break;

            	default :
            	    break loop204;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "libFunctionArgs"

    public static class betweenList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "betweenList"
    // EsperEPL2Grammar.g:1322:1: betweenList : concatenationExpr AND_EXPR concatenationExpr ;
    public final EsperEPL2GrammarParser.betweenList_return betweenList() throws RecognitionException {
        EsperEPL2GrammarParser.betweenList_return retval = new EsperEPL2GrammarParser.betweenList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token AND_EXPR584=null;
        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr583 = null;

        EsperEPL2GrammarParser.concatenationExpr_return concatenationExpr585 = null;


        CommonTree AND_EXPR584_tree=null;

        try {
            // EsperEPL2Grammar.g:1323:2: ( concatenationExpr AND_EXPR concatenationExpr )
            // EsperEPL2Grammar.g:1323:4: concatenationExpr AND_EXPR concatenationExpr
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_concatenationExpr_in_betweenList8388);
            concatenationExpr583=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr583.getTree());
            AND_EXPR584=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_betweenList8390); if (state.failed) return retval;
            pushFollow(FOLLOW_concatenationExpr_in_betweenList8393);
            concatenationExpr585=concatenationExpr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, concatenationExpr585.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "betweenList"

    public static class patternExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternExpression"
    // EsperEPL2Grammar.g:1332:1: patternExpression : followedByExpression ;
    public final EsperEPL2GrammarParser.patternExpression_return patternExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternExpression_return retval = new EsperEPL2GrammarParser.patternExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.followedByExpression_return followedByExpression586 = null;



         paraphrases.push("pattern expression"); 
        try {
            // EsperEPL2Grammar.g:1335:2: ( followedByExpression )
            // EsperEPL2Grammar.g:1335:4: followedByExpression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_followedByExpression_in_patternExpression8421);
            followedByExpression586=followedByExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, followedByExpression586.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternExpression"

    public static class followedByExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "followedByExpression"
    // EsperEPL2Grammar.g:1338:1: followedByExpression : orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression ;
    public final EsperEPL2GrammarParser.followedByExpression_return followedByExpression() throws RecognitionException {
        EsperEPL2GrammarParser.followedByExpression_return retval = new EsperEPL2GrammarParser.followedByExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token f=null;
        EsperEPL2GrammarParser.orExpression_return orExpression587 = null;

        EsperEPL2GrammarParser.orExpression_return orExpression588 = null;


        CommonTree f_tree=null;
        RewriteRuleTokenStream stream_FOLLOWED_BY=new RewriteRuleTokenStream(adaptor,"token FOLLOWED_BY");
        RewriteRuleSubtreeStream stream_orExpression=new RewriteRuleSubtreeStream(adaptor,"rule orExpression");
        try {
            // EsperEPL2Grammar.g:1339:2: ( orExpression (f= FOLLOWED_BY orExpression )* -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ ) -> orExpression )
            // EsperEPL2Grammar.g:1339:4: orExpression (f= FOLLOWED_BY orExpression )*
            {
            pushFollow(FOLLOW_orExpression_in_followedByExpression8433);
            orExpression587=orExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_orExpression.add(orExpression587.getTree());
            // EsperEPL2Grammar.g:1339:17: (f= FOLLOWED_BY orExpression )*
            loop205:
            do {
                int alt205=2;
                int LA205_0 = input.LA(1);

                if ( (LA205_0==FOLLOWED_BY) ) {
                    alt205=1;
                }


                switch (alt205) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1339:18: f= FOLLOWED_BY orExpression
            	    {
            	    f=(Token)match(input,FOLLOWED_BY,FOLLOW_FOLLOWED_BY_in_followedByExpression8438); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_FOLLOWED_BY.add(f);

            	    pushFollow(FOLLOW_orExpression_in_followedByExpression8440);
            	    orExpression588=orExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_orExpression.add(orExpression588.getTree());

            	    }
            	    break;

            	default :
            	    break loop205;
                }
            } while (true);



            // AST REWRITE
            // elements: orExpression, orExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1340:6: -> {$f != null}? ^( FOLLOWED_BY_EXPR ( orExpression )+ )
            if (f != null) {
                // EsperEPL2Grammar.g:1340:23: ^( FOLLOWED_BY_EXPR ( orExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(FOLLOWED_BY_EXPR, "FOLLOWED_BY_EXPR"), root_1);

                if ( !(stream_orExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_orExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_orExpression.nextTree());

                }
                stream_orExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1341:6: -> orExpression
            {
                adaptor.addChild(root_0, stream_orExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "followedByExpression"

    public static class orExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "orExpression"
    // EsperEPL2Grammar.g:1344:1: orExpression : andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression ;
    public final EsperEPL2GrammarParser.orExpression_return orExpression() throws RecognitionException {
        EsperEPL2GrammarParser.orExpression_return retval = new EsperEPL2GrammarParser.orExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token o=null;
        EsperEPL2GrammarParser.andExpression_return andExpression589 = null;

        EsperEPL2GrammarParser.andExpression_return andExpression590 = null;


        CommonTree o_tree=null;
        RewriteRuleTokenStream stream_OR_EXPR=new RewriteRuleTokenStream(adaptor,"token OR_EXPR");
        RewriteRuleSubtreeStream stream_andExpression=new RewriteRuleSubtreeStream(adaptor,"rule andExpression");
        try {
            // EsperEPL2Grammar.g:1345:2: ( andExpression (o= OR_EXPR andExpression )* -> {$o != null}? ^( OR_EXPR ( andExpression )+ ) -> andExpression )
            // EsperEPL2Grammar.g:1345:4: andExpression (o= OR_EXPR andExpression )*
            {
            pushFollow(FOLLOW_andExpression_in_orExpression8479);
            andExpression589=andExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_andExpression.add(andExpression589.getTree());
            // EsperEPL2Grammar.g:1345:18: (o= OR_EXPR andExpression )*
            loop206:
            do {
                int alt206=2;
                int LA206_0 = input.LA(1);

                if ( (LA206_0==OR_EXPR) ) {
                    alt206=1;
                }


                switch (alt206) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1345:19: o= OR_EXPR andExpression
            	    {
            	    o=(Token)match(input,OR_EXPR,FOLLOW_OR_EXPR_in_orExpression8484); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_OR_EXPR.add(o);

            	    pushFollow(FOLLOW_andExpression_in_orExpression8486);
            	    andExpression590=andExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_andExpression.add(andExpression590.getTree());

            	    }
            	    break;

            	default :
            	    break loop206;
                }
            } while (true);



            // AST REWRITE
            // elements: andExpression, andExpression, OR_EXPR
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1346:3: -> {$o != null}? ^( OR_EXPR ( andExpression )+ )
            if (o != null) {
                // EsperEPL2Grammar.g:1346:20: ^( OR_EXPR ( andExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_OR_EXPR.nextNode(), root_1);

                if ( !(stream_andExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_andExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_andExpression.nextTree());

                }
                stream_andExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1347:3: -> andExpression
            {
                adaptor.addChild(root_0, stream_andExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "orExpression"

    public static class andExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "andExpression"
    // EsperEPL2Grammar.g:1350:1: andExpression : matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression ;
    public final EsperEPL2GrammarParser.andExpression_return andExpression() throws RecognitionException {
        EsperEPL2GrammarParser.andExpression_return retval = new EsperEPL2GrammarParser.andExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression591 = null;

        EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression592 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_AND_EXPR=new RewriteRuleTokenStream(adaptor,"token AND_EXPR");
        RewriteRuleSubtreeStream stream_matchUntilExpression=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilExpression");
        try {
            // EsperEPL2Grammar.g:1351:2: ( matchUntilExpression (a= AND_EXPR matchUntilExpression )* -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ ) -> matchUntilExpression )
            // EsperEPL2Grammar.g:1351:4: matchUntilExpression (a= AND_EXPR matchUntilExpression )*
            {
            pushFollow(FOLLOW_matchUntilExpression_in_andExpression8518);
            matchUntilExpression591=matchUntilExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression591.getTree());
            // EsperEPL2Grammar.g:1351:25: (a= AND_EXPR matchUntilExpression )*
            loop207:
            do {
                int alt207=2;
                int LA207_0 = input.LA(1);

                if ( (LA207_0==AND_EXPR) ) {
                    alt207=1;
                }


                switch (alt207) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1351:26: a= AND_EXPR matchUntilExpression
            	    {
            	    a=(Token)match(input,AND_EXPR,FOLLOW_AND_EXPR_in_andExpression8523); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_AND_EXPR.add(a);

            	    pushFollow(FOLLOW_matchUntilExpression_in_andExpression8525);
            	    matchUntilExpression592=matchUntilExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_matchUntilExpression.add(matchUntilExpression592.getTree());

            	    }
            	    break;

            	default :
            	    break loop207;
                }
            } while (true);



            // AST REWRITE
            // elements: matchUntilExpression, AND_EXPR, matchUntilExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1352:3: -> {$a != null}? ^( AND_EXPR ( matchUntilExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1352:20: ^( AND_EXPR ( matchUntilExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_AND_EXPR.nextNode(), root_1);

                if ( !(stream_matchUntilExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_matchUntilExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_matchUntilExpression.nextTree());

                }
                stream_matchUntilExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1353:3: -> matchUntilExpression
            {
                adaptor.addChild(root_0, stream_matchUntilExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "andExpression"

    public static class matchUntilExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilExpression"
    // EsperEPL2Grammar.g:1356:1: matchUntilExpression : (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression ;
    public final EsperEPL2GrammarParser.matchUntilExpression_return matchUntilExpression() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilExpression_return retval = new EsperEPL2GrammarParser.matchUntilExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression593 = null;

        EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression594 = null;


        CommonTree a_tree=null;
        RewriteRuleTokenStream stream_UNTIL=new RewriteRuleTokenStream(adaptor,"token UNTIL");
        RewriteRuleSubtreeStream stream_qualifyExpression=new RewriteRuleSubtreeStream(adaptor,"rule qualifyExpression");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1357:2: ( (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )? -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ ) -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression ) -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ ) -> qualifyExpression )
            // EsperEPL2Grammar.g:1357:4: (r= matchUntilRange )? qualifyExpression (a= UNTIL qualifyExpression )?
            {
            // EsperEPL2Grammar.g:1357:4: (r= matchUntilRange )?
            int alt208=2;
            int LA208_0 = input.LA(1);

            if ( (LA208_0==LBRACK) ) {
                alt208=1;
            }
            switch (alt208) {
                case 1 :
                    // EsperEPL2Grammar.g:1357:5: r= matchUntilRange
                    {
                    pushFollow(FOLLOW_matchUntilRange_in_matchUntilExpression8560);
                    r=matchUntilRange();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                    }
                    break;

            }

            pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8564);
            qualifyExpression593=qualifyExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression593.getTree());
            // EsperEPL2Grammar.g:1357:43: (a= UNTIL qualifyExpression )?
            int alt209=2;
            int LA209_0 = input.LA(1);

            if ( (LA209_0==UNTIL) ) {
                alt209=1;
            }
            switch (alt209) {
                case 1 :
                    // EsperEPL2Grammar.g:1357:44: a= UNTIL qualifyExpression
                    {
                    a=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_matchUntilExpression8569); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_UNTIL.add(a);

                    pushFollow(FOLLOW_qualifyExpression_in_matchUntilExpression8571);
                    qualifyExpression594=qualifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_qualifyExpression.add(qualifyExpression594.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: matchUntilRange, qualifyExpression, qualifyExpression, qualifyExpression, matchUntilRange, qualifyExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1358:3: -> {r != null && a != null}? ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
            if (r != null && a != null) {
                // EsperEPL2Grammar.g:1358:32: ^( MATCH_UNTIL_EXPR matchUntilRange ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1359:3: -> {r != null && a == null}? ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
            if (r != null && a == null) {
                // EsperEPL2Grammar.g:1359:32: ^( MATCH_UNTIL_EXPR matchUntilRange qualifyExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                adaptor.addChild(root_1, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1360:3: -> {$a != null}? ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
            if (a != null) {
                // EsperEPL2Grammar.g:1360:20: ^( MATCH_UNTIL_EXPR ( qualifyExpression )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_1);

                if ( !(stream_qualifyExpression.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_qualifyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_qualifyExpression.nextTree());

                }
                stream_qualifyExpression.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1361:3: -> qualifyExpression
            {
                adaptor.addChild(root_0, stream_qualifyExpression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilExpression"

    public static class qualifyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "qualifyExpression"
    // EsperEPL2Grammar.g:1364:1: qualifyExpression : ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix ;
    public final EsperEPL2GrammarParser.qualifyExpression_return qualifyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.qualifyExpression_return retval = new EsperEPL2GrammarParser.qualifyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token e=null;
        Token n=null;
        Token d=null;
        EsperEPL2GrammarParser.matchUntilRange_return r = null;

        EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList595 = null;

        EsperEPL2GrammarParser.guardPostFix_return guardPostFix596 = null;


        CommonTree e_tree=null;
        CommonTree n_tree=null;
        CommonTree d_tree=null;
        RewriteRuleTokenStream stream_NOT_EXPR=new RewriteRuleTokenStream(adaptor,"token NOT_EXPR");
        RewriteRuleTokenStream stream_EVERY_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_EXPR");
        RewriteRuleTokenStream stream_EVERY_DISTINCT_EXPR=new RewriteRuleTokenStream(adaptor,"token EVERY_DISTINCT_EXPR");
        RewriteRuleSubtreeStream stream_distinctExpressionList=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionList");
        RewriteRuleSubtreeStream stream_guardPostFix=new RewriteRuleSubtreeStream(adaptor,"rule guardPostFix");
        RewriteRuleSubtreeStream stream_matchUntilRange=new RewriteRuleSubtreeStream(adaptor,"rule matchUntilRange");
        try {
            // EsperEPL2Grammar.g:1365:2: ( ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix ) -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix ) -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix ) -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) ) -> guardPostFix )
            // EsperEPL2Grammar.g:1365:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )? guardPostFix
            {
            // EsperEPL2Grammar.g:1365:4: ( (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )? )?
            int alt212=2;
            int LA212_0 = input.LA(1);

            if ( ((LA212_0>=NOT_EXPR && LA212_0<=EVERY_DISTINCT_EXPR)) ) {
                alt212=1;
            }
            switch (alt212) {
                case 1 :
                    // EsperEPL2Grammar.g:1365:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList ) (r= matchUntilRange )?
                    {
                    // EsperEPL2Grammar.g:1365:5: (e= EVERY_EXPR | n= NOT_EXPR | d= EVERY_DISTINCT_EXPR distinctExpressionList )
                    int alt210=3;
                    switch ( input.LA(1) ) {
                    case EVERY_EXPR:
                        {
                        alt210=1;
                        }
                        break;
                    case NOT_EXPR:
                        {
                        alt210=2;
                        }
                        break;
                    case EVERY_DISTINCT_EXPR:
                        {
                        alt210=3;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 210, 0, input);

                        throw nvae;
                    }

                    switch (alt210) {
                        case 1 :
                            // EsperEPL2Grammar.g:1365:6: e= EVERY_EXPR
                            {
                            e=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_qualifyExpression8636); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_EXPR.add(e);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1365:21: n= NOT_EXPR
                            {
                            n=(Token)match(input,NOT_EXPR,FOLLOW_NOT_EXPR_in_qualifyExpression8642); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_NOT_EXPR.add(n);


                            }
                            break;
                        case 3 :
                            // EsperEPL2Grammar.g:1365:34: d= EVERY_DISTINCT_EXPR distinctExpressionList
                            {
                            d=(Token)match(input,EVERY_DISTINCT_EXPR,FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8648); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_EVERY_DISTINCT_EXPR.add(d);

                            pushFollow(FOLLOW_distinctExpressionList_in_qualifyExpression8650);
                            distinctExpressionList595=distinctExpressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_distinctExpressionList.add(distinctExpressionList595.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1365:80: (r= matchUntilRange )?
                    int alt211=2;
                    int LA211_0 = input.LA(1);

                    if ( (LA211_0==LBRACK) ) {
                        alt211=1;
                    }
                    switch (alt211) {
                        case 1 :
                            // EsperEPL2Grammar.g:1365:81: r= matchUntilRange
                            {
                            pushFollow(FOLLOW_matchUntilRange_in_qualifyExpression8656);
                            r=matchUntilRange();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_matchUntilRange.add(r.getTree());

                            }
                            break;

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_guardPostFix_in_qualifyExpression8665);
            guardPostFix596=guardPostFix();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_guardPostFix.add(guardPostFix596.getTree());


            // AST REWRITE
            // elements: guardPostFix, guardPostFix, EVERY_EXPR, distinctExpressionList, EVERY_EXPR, matchUntilRange, guardPostFix, guardPostFix, distinctExpressionList, matchUntilRange, matchUntilRange, EVERY_DISTINCT_EXPR, guardPostFix, EVERY_DISTINCT_EXPR, guardPostFix, guardPostFix
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1367:3: -> {e != null && r == null}? ^( EVERY_EXPR guardPostFix )
            if (e != null && r == null) {
                // EsperEPL2Grammar.g:1367:32: ^( EVERY_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1368:3: -> {n != null && r == null}? ^( PATTERN_NOT_EXPR guardPostFix )
            if (n != null && r == null) {
                // EsperEPL2Grammar.g:1368:32: ^( PATTERN_NOT_EXPR guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1369:3: -> {d != null && r == null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
            if (d != null && r == null) {
                // EsperEPL2Grammar.g:1369:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList guardPostFix )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                adaptor.addChild(root_1, stream_guardPostFix.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1370:3: -> {e != null && r != null}? ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (e != null && r != null) {
                // EsperEPL2Grammar.g:1370:32: ^( EVERY_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_EXPR.nextNode(), root_1);

                // EsperEPL2Grammar.g:1370:45: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1371:3: -> {n != null && r != null}? ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (n != null && r != null) {
                // EsperEPL2Grammar.g:1371:32: ^( PATTERN_NOT_EXPR ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_NOT_EXPR, "PATTERN_NOT_EXPR"), root_1);

                // EsperEPL2Grammar.g:1371:51: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1372:3: -> {d != null && r != null}? ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
            if (d != null && r != null) {
                // EsperEPL2Grammar.g:1372:32: ^( EVERY_DISTINCT_EXPR distinctExpressionList ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot(stream_EVERY_DISTINCT_EXPR.nextNode(), root_1);

                adaptor.addChild(root_1, stream_distinctExpressionList.nextTree());
                // EsperEPL2Grammar.g:1372:77: ^( MATCH_UNTIL_EXPR matchUntilRange guardPostFix )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_EXPR, "MATCH_UNTIL_EXPR"), root_2);

                adaptor.addChild(root_2, stream_matchUntilRange.nextTree());
                adaptor.addChild(root_2, stream_guardPostFix.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1373:3: -> guardPostFix
            {
                adaptor.addChild(root_0, stream_guardPostFix.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "qualifyExpression"

    public static class distinctExpressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionList"
    // EsperEPL2Grammar.g:1376:1: distinctExpressionList : LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) ;
    public final EsperEPL2GrammarParser.distinctExpressionList_return distinctExpressionList() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionList_return retval = new EsperEPL2GrammarParser.distinctExpressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN597=null;
        Token COMMA599=null;
        Token RPAREN601=null;
        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom598 = null;

        EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom600 = null;


        CommonTree LPAREN597_tree=null;
        CommonTree COMMA599_tree=null;
        CommonTree RPAREN601_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_distinctExpressionAtom=new RewriteRuleSubtreeStream(adaptor,"rule distinctExpressionAtom");
        try {
            // EsperEPL2Grammar.g:1377:2: ( LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ ) )
            // EsperEPL2Grammar.g:1377:4: LPAREN distinctExpressionAtom ( COMMA distinctExpressionAtom )* RPAREN
            {
            LPAREN597=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_distinctExpressionList8780); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN597);

            pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8782);
            distinctExpressionAtom598=distinctExpressionAtom();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom598.getTree());
            // EsperEPL2Grammar.g:1377:34: ( COMMA distinctExpressionAtom )*
            loop213:
            do {
                int alt213=2;
                int LA213_0 = input.LA(1);

                if ( (LA213_0==COMMA) ) {
                    alt213=1;
                }


                switch (alt213) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1377:35: COMMA distinctExpressionAtom
            	    {
            	    COMMA599=(Token)match(input,COMMA,FOLLOW_COMMA_in_distinctExpressionList8785); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA599);

            	    pushFollow(FOLLOW_distinctExpressionAtom_in_distinctExpressionList8787);
            	    distinctExpressionAtom600=distinctExpressionAtom();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_distinctExpressionAtom.add(distinctExpressionAtom600.getTree());

            	    }
            	    break;

            	default :
            	    break loop213;
                }
            } while (true);

            RPAREN601=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_distinctExpressionList8791); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN601);



            // AST REWRITE
            // elements: distinctExpressionAtom
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1378:3: -> ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
            {
                // EsperEPL2Grammar.g:1378:6: ^( PATTERN_EVERY_DISTINCT_EXPR ( distinctExpressionAtom )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_EVERY_DISTINCT_EXPR, "PATTERN_EVERY_DISTINCT_EXPR"), root_1);

                if ( !(stream_distinctExpressionAtom.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_distinctExpressionAtom.hasNext() ) {
                    adaptor.addChild(root_1, stream_distinctExpressionAtom.nextTree());

                }
                stream_distinctExpressionAtom.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionList"

    public static class distinctExpressionAtom_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "distinctExpressionAtom"
    // EsperEPL2Grammar.g:1381:1: distinctExpressionAtom : expression ;
    public final EsperEPL2GrammarParser.distinctExpressionAtom_return distinctExpressionAtom() throws RecognitionException {
        EsperEPL2GrammarParser.distinctExpressionAtom_return retval = new EsperEPL2GrammarParser.distinctExpressionAtom_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.expression_return expression602 = null;



        try {
            // EsperEPL2Grammar.g:1382:2: ( expression )
            // EsperEPL2Grammar.g:1382:4: expression
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_distinctExpressionAtom8814);
            expression602=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression602.getTree());

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "distinctExpressionAtom"

    public static class guardPostFix_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardPostFix"
    // EsperEPL2Grammar.g:1385:1: guardPostFix : ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )? -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression ) -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression ) -> ( atomicExpression )? ( patternExpression )? ;
    public final EsperEPL2GrammarParser.guardPostFix_return guardPostFix() throws RecognitionException {
        EsperEPL2GrammarParser.guardPostFix_return retval = new EsperEPL2GrammarParser.guardPostFix_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token l=null;
        Token wh=null;
        Token wi=null;
        Token RPAREN605=null;
        EsperEPL2GrammarParser.atomicExpression_return atomicExpression603 = null;

        EsperEPL2GrammarParser.patternExpression_return patternExpression604 = null;

        EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression606 = null;

        EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression607 = null;


        CommonTree l_tree=null;
        CommonTree wh_tree=null;
        CommonTree wi_tree=null;
        CommonTree RPAREN605_tree=null;
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_WHILE=new RewriteRuleTokenStream(adaptor,"token WHILE");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_guardWhileExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhileExpression");
        RewriteRuleSubtreeStream stream_atomicExpression=new RewriteRuleSubtreeStream(adaptor,"rule atomicExpression");
        RewriteRuleSubtreeStream stream_guardWhereExpression=new RewriteRuleSubtreeStream(adaptor,"rule guardWhereExpression");
        RewriteRuleSubtreeStream stream_patternExpression=new RewriteRuleSubtreeStream(adaptor,"rule patternExpression");
        try {
            // EsperEPL2Grammar.g:1386:2: ( ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )? -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression ) -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression ) -> ( atomicExpression )? ( patternExpression )? )
            // EsperEPL2Grammar.g:1386:4: ( atomicExpression | l= LPAREN patternExpression RPAREN ) ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )?
            {
            // EsperEPL2Grammar.g:1386:4: ( atomicExpression | l= LPAREN patternExpression RPAREN )
            int alt214=2;
            int LA214_0 = input.LA(1);

            if ( (LA214_0==IDENT||LA214_0==TICKED_STRING_LITERAL) ) {
                alt214=1;
            }
            else if ( (LA214_0==LPAREN) ) {
                alt214=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 214, 0, input);

                throw nvae;
            }
            switch (alt214) {
                case 1 :
                    // EsperEPL2Grammar.g:1386:5: atomicExpression
                    {
                    pushFollow(FOLLOW_atomicExpression_in_guardPostFix8829);
                    atomicExpression603=atomicExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_atomicExpression.add(atomicExpression603.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1386:24: l= LPAREN patternExpression RPAREN
                    {
                    l=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardPostFix8835); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(l);

                    pushFollow(FOLLOW_patternExpression_in_guardPostFix8837);
                    patternExpression604=patternExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_patternExpression.add(patternExpression604.getTree());
                    RPAREN605=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardPostFix8839); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN605);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1386:59: ( (wh= WHERE guardWhereExpression ) | (wi= WHILE guardWhileExpression ) )?
            int alt215=3;
            int LA215_0 = input.LA(1);

            if ( (LA215_0==WHERE) ) {
                alt215=1;
            }
            else if ( (LA215_0==WHILE) ) {
                alt215=2;
            }
            switch (alt215) {
                case 1 :
                    // EsperEPL2Grammar.g:1386:60: (wh= WHERE guardWhereExpression )
                    {
                    // EsperEPL2Grammar.g:1386:60: (wh= WHERE guardWhereExpression )
                    // EsperEPL2Grammar.g:1386:61: wh= WHERE guardWhereExpression
                    {
                    wh=(Token)match(input,WHERE,FOLLOW_WHERE_in_guardPostFix8846); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(wh);

                    pushFollow(FOLLOW_guardWhereExpression_in_guardPostFix8848);
                    guardWhereExpression606=guardWhereExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhereExpression.add(guardWhereExpression606.getTree());

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1386:94: (wi= WHILE guardWhileExpression )
                    {
                    // EsperEPL2Grammar.g:1386:94: (wi= WHILE guardWhileExpression )
                    // EsperEPL2Grammar.g:1386:95: wi= WHILE guardWhileExpression
                    {
                    wi=(Token)match(input,WHILE,FOLLOW_WHILE_in_guardPostFix8856); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHILE.add(wi);

                    pushFollow(FOLLOW_guardWhileExpression_in_guardPostFix8858);
                    guardWhileExpression607=guardWhileExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_guardWhileExpression.add(guardWhileExpression607.getTree());

                    }


                    }
                    break;

            }



            // AST REWRITE
            // elements: atomicExpression, guardWhileExpression, guardWhereExpression, patternExpression, atomicExpression, atomicExpression, patternExpression, patternExpression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1387:3: -> {$wh != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression )
            if (wh != null) {
                // EsperEPL2Grammar.g:1387:21: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhereExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1387:34: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1387:52: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhereExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1388:3: -> {$wi != null}? ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression )
            if (wi != null) {
                // EsperEPL2Grammar.g:1388:21: ^( GUARD_EXPR ( atomicExpression )? ( patternExpression )? guardWhileExpression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(GUARD_EXPR, "GUARD_EXPR"), root_1);

                // EsperEPL2Grammar.g:1388:34: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1388:52: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();
                adaptor.addChild(root_1, stream_guardWhileExpression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1389:3: -> ( atomicExpression )? ( patternExpression )?
            {
                // EsperEPL2Grammar.g:1389:6: ( atomicExpression )?
                if ( stream_atomicExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_atomicExpression.nextTree());

                }
                stream_atomicExpression.reset();
                // EsperEPL2Grammar.g:1389:24: ( patternExpression )?
                if ( stream_patternExpression.hasNext() ) {
                    adaptor.addChild(root_0, stream_patternExpression.nextTree());

                }
                stream_patternExpression.reset();

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardPostFix"

    public static class atomicExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "atomicExpression"
    // EsperEPL2Grammar.g:1392:1: atomicExpression : ( observerExpression | patternFilterExpression );
    public final EsperEPL2GrammarParser.atomicExpression_return atomicExpression() throws RecognitionException {
        EsperEPL2GrammarParser.atomicExpression_return retval = new EsperEPL2GrammarParser.atomicExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.observerExpression_return observerExpression608 = null;

        EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression609 = null;



        try {
            // EsperEPL2Grammar.g:1393:2: ( observerExpression | patternFilterExpression )
            int alt216=2;
            int LA216_0 = input.LA(1);

            if ( (LA216_0==IDENT) ) {
                int LA216_1 = input.LA(2);

                if ( (LA216_1==COLON) ) {
                    alt216=1;
                }
                else if ( (LA216_1==EOF||(LA216_1>=OR_EXPR && LA216_1<=AND_EXPR)||LA216_1==WHERE||LA216_1==UNTIL||LA216_1==WHILE||(LA216_1>=EQUALS && LA216_1<=RBRACK)||LA216_1==FOLLOWED_BY) ) {
                    alt216=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 216, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA216_0==TICKED_STRING_LITERAL) ) {
                alt216=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 216, 0, input);

                throw nvae;
            }
            switch (alt216) {
                case 1 :
                    // EsperEPL2Grammar.g:1393:4: observerExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_observerExpression_in_atomicExpression8920);
                    observerExpression608=observerExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, observerExpression608.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1393:25: patternFilterExpression
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_patternFilterExpression_in_atomicExpression8924);
                    patternFilterExpression609=patternFilterExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, patternFilterExpression609.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "atomicExpression"

    public static class observerExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "observerExpression"
    // EsperEPL2Grammar.g:1396:1: observerExpression : ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) ;
    public final EsperEPL2GrammarParser.observerExpression_return observerExpression() throws RecognitionException {
        EsperEPL2GrammarParser.observerExpression_return retval = new EsperEPL2GrammarParser.observerExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ns=null;
        Token nm=null;
        Token a=null;
        Token COLON610=null;
        Token LPAREN611=null;
        Token RPAREN613=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList612 = null;


        CommonTree ns_tree=null;
        CommonTree nm_tree=null;
        CommonTree a_tree=null;
        CommonTree COLON610_tree=null;
        CommonTree LPAREN611_tree=null;
        CommonTree RPAREN613_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_AT=new RewriteRuleTokenStream(adaptor,"token AT");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionWithTimeList=new RewriteRuleSubtreeStream(adaptor,"rule expressionWithTimeList");
        try {
            // EsperEPL2Grammar.g:1397:2: (ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? ) -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? ) )
            // EsperEPL2Grammar.g:1397:4: ns= IDENT COLON (nm= IDENT | a= AT ) LPAREN ( expressionWithTimeList )? RPAREN
            {
            ns=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8939); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(ns);

            COLON610=(Token)match(input,COLON,FOLLOW_COLON_in_observerExpression8941); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON610);

            // EsperEPL2Grammar.g:1397:19: (nm= IDENT | a= AT )
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( (LA217_0==IDENT) ) {
                alt217=1;
            }
            else if ( (LA217_0==AT) ) {
                alt217=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 217, 0, input);

                throw nvae;
            }
            switch (alt217) {
                case 1 :
                    // EsperEPL2Grammar.g:1397:20: nm= IDENT
                    {
                    nm=(Token)match(input,IDENT,FOLLOW_IDENT_in_observerExpression8946); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(nm);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1397:31: a= AT
                    {
                    a=(Token)match(input,AT,FOLLOW_AT_in_observerExpression8952); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AT.add(a);


                    }
                    break;

            }

            LPAREN611=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_observerExpression8955); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN611);

            // EsperEPL2Grammar.g:1397:44: ( expressionWithTimeList )?
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( (LA218_0==WINDOW||LA218_0==ESCAPE||(LA218_0>=NOT_EXPR && LA218_0<=EVERY_EXPR)||(LA218_0>=SUM && LA218_0<=COUNT)||LA218_0==CASE||LA218_0==OUTER||(LA218_0>=JOIN && LA218_0<=FULL)||(LA218_0>=EVENTS && LA218_0<=LAST)||(LA218_0>=UNIDIRECTIONAL && LA218_0<=CURRENT_TIMESTAMP)||LA218_0==SNAPSHOT||(LA218_0>=VARIABLE && LA218_0<=INDEX)||(LA218_0>=BOOLEAN_TRUE && LA218_0<=VALUE_NULL)||(LA218_0>=DEFINE && LA218_0<=MATCHES)||LA218_0==WHILE||LA218_0==NUM_DOUBLE||LA218_0==IDENT||LA218_0==LPAREN||LA218_0==LBRACK||LA218_0==STAR||(LA218_0>=PLUS && LA218_0<=QUESTION)||(LA218_0>=STRING_LITERAL && LA218_0<=QUOTED_STRING_LITERAL)||LA218_0==MINUS||LA218_0==LCURLY||LA218_0==NUM_INT||(LA218_0>=TICKED_STRING_LITERAL && LA218_0<=NUM_FLOAT)) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    // EsperEPL2Grammar.g:1397:44: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_observerExpression8957);
                    expressionWithTimeList612=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expressionWithTimeList.add(expressionWithTimeList612.getTree());

                    }
                    break;

            }

            RPAREN613=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_observerExpression8960); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN613);



            // AST REWRITE
            // elements: expressionWithTimeList, nm, ns, IDENT, expressionWithTimeList, ns
            // token labels: ns, nm
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_ns=new RewriteRuleTokenStream(adaptor,"token ns",ns);
            RewriteRuleTokenStream stream_nm=new RewriteRuleTokenStream(adaptor,"token nm",nm);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1398:3: -> {$a != null}? ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
            if (a != null) {
                // EsperEPL2Grammar.g:1398:20: ^( OBSERVER_EXPR $ns ^( IDENT[$a.text] ) ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                // EsperEPL2Grammar.g:1398:40: ^( IDENT[$a.text] )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, (a!=null?a.getText():null)), root_2);

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1398:58: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1399:3: -> ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
            {
                // EsperEPL2Grammar.g:1399:6: ^( OBSERVER_EXPR $ns $nm ( expressionWithTimeList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBSERVER_EXPR, "OBSERVER_EXPR"), root_1);

                adaptor.addChild(root_1, stream_ns.nextNode());
                adaptor.addChild(root_1, stream_nm.nextNode());
                // EsperEPL2Grammar.g:1399:30: ( expressionWithTimeList )?
                if ( stream_expressionWithTimeList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionWithTimeList.nextTree());

                }
                stream_expressionWithTimeList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "observerExpression"

    public static class guardWhereExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardWhereExpression"
    // EsperEPL2Grammar.g:1402:1: guardWhereExpression : IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN ;
    public final EsperEPL2GrammarParser.guardWhereExpression_return guardWhereExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhereExpression_return retval = new EsperEPL2GrammarParser.guardWhereExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token IDENT614=null;
        Token COLON615=null;
        Token IDENT616=null;
        Token LPAREN617=null;
        Token RPAREN619=null;
        EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList618 = null;


        CommonTree IDENT614_tree=null;
        CommonTree COLON615_tree=null;
        CommonTree IDENT616_tree=null;
        CommonTree LPAREN617_tree=null;
        CommonTree RPAREN619_tree=null;

        try {
            // EsperEPL2Grammar.g:1403:2: ( IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN )
            // EsperEPL2Grammar.g:1403:4: IDENT COLON IDENT LPAREN ( expressionWithTimeList )? RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            IDENT614=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9009); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT614_tree = (CommonTree)adaptor.create(IDENT614);
            adaptor.addChild(root_0, IDENT614_tree);
            }
            COLON615=(Token)match(input,COLON,FOLLOW_COLON_in_guardWhereExpression9011); if (state.failed) return retval;
            IDENT616=(Token)match(input,IDENT,FOLLOW_IDENT_in_guardWhereExpression9014); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            IDENT616_tree = (CommonTree)adaptor.create(IDENT616);
            adaptor.addChild(root_0, IDENT616_tree);
            }
            LPAREN617=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhereExpression9016); if (state.failed) return retval;
            // EsperEPL2Grammar.g:1403:31: ( expressionWithTimeList )?
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( (LA219_0==WINDOW||LA219_0==ESCAPE||(LA219_0>=NOT_EXPR && LA219_0<=EVERY_EXPR)||(LA219_0>=SUM && LA219_0<=COUNT)||LA219_0==CASE||LA219_0==OUTER||(LA219_0>=JOIN && LA219_0<=FULL)||(LA219_0>=EVENTS && LA219_0<=LAST)||(LA219_0>=UNIDIRECTIONAL && LA219_0<=CURRENT_TIMESTAMP)||LA219_0==SNAPSHOT||(LA219_0>=VARIABLE && LA219_0<=INDEX)||(LA219_0>=BOOLEAN_TRUE && LA219_0<=VALUE_NULL)||(LA219_0>=DEFINE && LA219_0<=MATCHES)||LA219_0==WHILE||LA219_0==NUM_DOUBLE||LA219_0==IDENT||LA219_0==LPAREN||LA219_0==LBRACK||LA219_0==STAR||(LA219_0>=PLUS && LA219_0<=QUESTION)||(LA219_0>=STRING_LITERAL && LA219_0<=QUOTED_STRING_LITERAL)||LA219_0==MINUS||LA219_0==LCURLY||LA219_0==NUM_INT||(LA219_0>=TICKED_STRING_LITERAL && LA219_0<=NUM_FLOAT)) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    // EsperEPL2Grammar.g:1403:32: expressionWithTimeList
                    {
                    pushFollow(FOLLOW_expressionWithTimeList_in_guardWhereExpression9020);
                    expressionWithTimeList618=expressionWithTimeList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTimeList618.getTree());

                    }
                    break;

            }

            RPAREN619=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhereExpression9024); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardWhereExpression"

    public static class guardWhileExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "guardWhileExpression"
    // EsperEPL2Grammar.g:1406:1: guardWhileExpression : LPAREN expression RPAREN ;
    public final EsperEPL2GrammarParser.guardWhileExpression_return guardWhileExpression() throws RecognitionException {
        EsperEPL2GrammarParser.guardWhileExpression_return retval = new EsperEPL2GrammarParser.guardWhileExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LPAREN620=null;
        Token RPAREN622=null;
        EsperEPL2GrammarParser.expression_return expression621 = null;


        CommonTree LPAREN620_tree=null;
        CommonTree RPAREN622_tree=null;

        try {
            // EsperEPL2Grammar.g:1407:2: ( LPAREN expression RPAREN )
            // EsperEPL2Grammar.g:1407:4: LPAREN expression RPAREN
            {
            root_0 = (CommonTree)adaptor.nil();

            LPAREN620=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_guardWhileExpression9037); if (state.failed) return retval;
            pushFollow(FOLLOW_expression_in_guardWhileExpression9040);
            expression621=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression621.getTree());
            RPAREN622=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_guardWhileExpression9042); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "guardWhileExpression"

    public static class matchUntilRange_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "matchUntilRange"
    // EsperEPL2Grammar.g:1411:1: matchUntilRange : LBRACK ( expression (c1= COLON ( expression )? )? | c2= COLON expression ) RBRACK -> {$c1 != null && !isopen}? ^( MATCH_UNTIL_RANGE_CLOSED expression expression ) -> {$c1 != null && isopen}? ^( MATCH_UNTIL_RANGE_HALFOPEN expression ) -> {$c2 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED expression ) -> ^( MATCH_UNTIL_RANGE_BOUNDED expression ) ;
    public final EsperEPL2GrammarParser.matchUntilRange_return matchUntilRange() throws RecognitionException {
        EsperEPL2GrammarParser.matchUntilRange_return retval = new EsperEPL2GrammarParser.matchUntilRange_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token c1=null;
        Token c2=null;
        Token LBRACK623=null;
        Token RBRACK627=null;
        EsperEPL2GrammarParser.expression_return expression624 = null;

        EsperEPL2GrammarParser.expression_return expression625 = null;

        EsperEPL2GrammarParser.expression_return expression626 = null;


        CommonTree c1_tree=null;
        CommonTree c2_tree=null;
        CommonTree LBRACK623_tree=null;
        CommonTree RBRACK627_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
         Boolean isopen = true; 
        try {
            // EsperEPL2Grammar.g:1413:2: ( LBRACK ( expression (c1= COLON ( expression )? )? | c2= COLON expression ) RBRACK -> {$c1 != null && !isopen}? ^( MATCH_UNTIL_RANGE_CLOSED expression expression ) -> {$c1 != null && isopen}? ^( MATCH_UNTIL_RANGE_HALFOPEN expression ) -> {$c2 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED expression ) -> ^( MATCH_UNTIL_RANGE_BOUNDED expression ) )
            // EsperEPL2Grammar.g:1413:4: LBRACK ( expression (c1= COLON ( expression )? )? | c2= COLON expression ) RBRACK
            {
            LBRACK623=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_matchUntilRange9063); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK623);

            // EsperEPL2Grammar.g:1413:11: ( expression (c1= COLON ( expression )? )? | c2= COLON expression )
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( (LA222_0==WINDOW||LA222_0==ESCAPE||(LA222_0>=NOT_EXPR && LA222_0<=EVERY_EXPR)||(LA222_0>=SUM && LA222_0<=COUNT)||LA222_0==CASE||LA222_0==OUTER||(LA222_0>=JOIN && LA222_0<=FULL)||(LA222_0>=EVENTS && LA222_0<=LAST)||(LA222_0>=UNIDIRECTIONAL && LA222_0<=CURRENT_TIMESTAMP)||LA222_0==SNAPSHOT||(LA222_0>=VARIABLE && LA222_0<=INDEX)||(LA222_0>=BOOLEAN_TRUE && LA222_0<=VALUE_NULL)||(LA222_0>=DEFINE && LA222_0<=MATCHES)||LA222_0==WHILE||LA222_0==NUM_DOUBLE||LA222_0==IDENT||LA222_0==LPAREN||(LA222_0>=PLUS && LA222_0<=QUESTION)||(LA222_0>=STRING_LITERAL && LA222_0<=QUOTED_STRING_LITERAL)||LA222_0==MINUS||LA222_0==LCURLY||LA222_0==NUM_INT||(LA222_0>=TICKED_STRING_LITERAL && LA222_0<=NUM_FLOAT)) ) {
                alt222=1;
            }
            else if ( (LA222_0==COLON) ) {
                alt222=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 222, 0, input);

                throw nvae;
            }
            switch (alt222) {
                case 1 :
                    // EsperEPL2Grammar.g:1414:4: expression (c1= COLON ( expression )? )?
                    {
                    pushFollow(FOLLOW_expression_in_matchUntilRange9070);
                    expression624=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression624.getTree());
                    // EsperEPL2Grammar.g:1414:15: (c1= COLON ( expression )? )?
                    int alt221=2;
                    int LA221_0 = input.LA(1);

                    if ( (LA221_0==COLON) ) {
                        alt221=1;
                    }
                    switch (alt221) {
                        case 1 :
                            // EsperEPL2Grammar.g:1414:16: c1= COLON ( expression )?
                            {
                            c1=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9075); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_COLON.add(c1);

                            // EsperEPL2Grammar.g:1414:25: ( expression )?
                            int alt220=2;
                            int LA220_0 = input.LA(1);

                            if ( (LA220_0==WINDOW||LA220_0==ESCAPE||(LA220_0>=NOT_EXPR && LA220_0<=EVERY_EXPR)||(LA220_0>=SUM && LA220_0<=COUNT)||LA220_0==CASE||LA220_0==OUTER||(LA220_0>=JOIN && LA220_0<=FULL)||(LA220_0>=EVENTS && LA220_0<=LAST)||(LA220_0>=UNIDIRECTIONAL && LA220_0<=CURRENT_TIMESTAMP)||LA220_0==SNAPSHOT||(LA220_0>=VARIABLE && LA220_0<=INDEX)||(LA220_0>=BOOLEAN_TRUE && LA220_0<=VALUE_NULL)||(LA220_0>=DEFINE && LA220_0<=MATCHES)||LA220_0==WHILE||LA220_0==NUM_DOUBLE||LA220_0==IDENT||LA220_0==LPAREN||(LA220_0>=PLUS && LA220_0<=QUESTION)||(LA220_0>=STRING_LITERAL && LA220_0<=QUOTED_STRING_LITERAL)||LA220_0==MINUS||LA220_0==LCURLY||LA220_0==NUM_INT||(LA220_0>=TICKED_STRING_LITERAL && LA220_0<=NUM_FLOAT)) ) {
                                alt220=1;
                            }
                            switch (alt220) {
                                case 1 :
                                    // EsperEPL2Grammar.g:1414:26: expression
                                    {
                                    pushFollow(FOLLOW_expression_in_matchUntilRange9078);
                                    expression625=expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) stream_expression.add(expression625.getTree());
                                    if ( state.backtracking==0 ) {
                                       isopen = false; 
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1415:8: c2= COLON expression
                    {
                    c2=(Token)match(input,COLON,FOLLOW_COLON_in_matchUntilRange9098); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_COLON.add(c2);

                    pushFollow(FOLLOW_expression_in_matchUntilRange9100);
                    expression626=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression626.getTree());

                    }
                    break;

            }

            RBRACK627=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_matchUntilRange9111); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK627);



            // AST REWRITE
            // elements: expression, expression, expression, expression, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1418:3: -> {$c1 != null && !isopen}? ^( MATCH_UNTIL_RANGE_CLOSED expression expression )
            if (c1 != null && !isopen) {
                // EsperEPL2Grammar.g:1418:32: ^( MATCH_UNTIL_RANGE_CLOSED expression expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_CLOSED, "MATCH_UNTIL_RANGE_CLOSED"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1419:3: -> {$c1 != null && isopen}? ^( MATCH_UNTIL_RANGE_HALFOPEN expression )
            if (c1 != null && isopen) {
                // EsperEPL2Grammar.g:1419:31: ^( MATCH_UNTIL_RANGE_HALFOPEN expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFOPEN, "MATCH_UNTIL_RANGE_HALFOPEN"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1420:3: -> {$c2 != null}? ^( MATCH_UNTIL_RANGE_HALFCLOSED expression )
            if (c2 != null) {
                // EsperEPL2Grammar.g:1420:21: ^( MATCH_UNTIL_RANGE_HALFCLOSED expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_HALFCLOSED, "MATCH_UNTIL_RANGE_HALFCLOSED"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1421:3: -> ^( MATCH_UNTIL_RANGE_BOUNDED expression )
            {
                // EsperEPL2Grammar.g:1421:6: ^( MATCH_UNTIL_RANGE_BOUNDED expression )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MATCH_UNTIL_RANGE_BOUNDED, "MATCH_UNTIL_RANGE_BOUNDED"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "matchUntilRange"

    public static class eventFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventFilterExpression"
    // EsperEPL2Grammar.g:1429:1: eventFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.eventFilterExpression_return eventFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.eventFilterExpression_return retval = new EsperEPL2GrammarParser.eventFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS628=null;
        Token LPAREN630=null;
        Token RPAREN632=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier629 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList631 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression633 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS628_tree=null;
        CommonTree LPAREN630_tree=null;
        CommonTree RPAREN632_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1432:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1432:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1432:9: (i= IDENT EQUALS )?
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( (LA223_0==IDENT) ) {
                int LA223_1 = input.LA(2);

                if ( (LA223_1==EQUALS) ) {
                    alt223=1;
                }
            }
            switch (alt223) {
                case 1 :
                    // EsperEPL2Grammar.g:1432:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_eventFilterExpression9198); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS628=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_eventFilterExpression9200); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS628);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_eventFilterExpression9209);
            classIdentifier629=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier629.getTree());
            // EsperEPL2Grammar.g:1434:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==LPAREN) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    // EsperEPL2Grammar.g:1434:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN630=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventFilterExpression9220); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN630);

                    // EsperEPL2Grammar.g:1434:17: ( expressionList )?
                    int alt224=2;
                    int LA224_0 = input.LA(1);

                    if ( (LA224_0==WINDOW||LA224_0==ESCAPE||(LA224_0>=NOT_EXPR && LA224_0<=EVERY_EXPR)||(LA224_0>=SUM && LA224_0<=COUNT)||LA224_0==CASE||LA224_0==OUTER||(LA224_0>=JOIN && LA224_0<=FULL)||(LA224_0>=EVENTS && LA224_0<=LAST)||(LA224_0>=UNIDIRECTIONAL && LA224_0<=CURRENT_TIMESTAMP)||LA224_0==SNAPSHOT||(LA224_0>=VARIABLE && LA224_0<=INDEX)||(LA224_0>=BOOLEAN_TRUE && LA224_0<=VALUE_NULL)||(LA224_0>=DEFINE && LA224_0<=MATCHES)||LA224_0==WHILE||LA224_0==NUM_DOUBLE||LA224_0==IDENT||LA224_0==LPAREN||(LA224_0>=PLUS && LA224_0<=QUESTION)||(LA224_0>=STRING_LITERAL && LA224_0<=QUOTED_STRING_LITERAL)||LA224_0==MINUS||LA224_0==LCURLY||LA224_0==NUM_INT||(LA224_0>=TICKED_STRING_LITERAL && LA224_0<=NUM_FLOAT)) ) {
                        alt224=1;
                    }
                    switch (alt224) {
                        case 1 :
                            // EsperEPL2Grammar.g:1434:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_eventFilterExpression9222);
                            expressionList631=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList631.getTree());

                            }
                            break;

                    }

                    RPAREN632=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventFilterExpression9225); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN632);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1435:9: ( propertyExpression )?
            int alt226=2;
            int LA226_0 = input.LA(1);

            if ( (LA226_0==LBRACK) ) {
                alt226=1;
            }
            switch (alt226) {
                case 1 :
                    // EsperEPL2Grammar.g:1435:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_eventFilterExpression9237);
                    propertyExpression633=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression633.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, propertyExpression, i, expressionList
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1436:9: -> ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1436:12: ^( EVENT_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_EXPR, "EVENT_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1436:32: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1436:52: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1436:72: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventFilterExpression"

    public static class propertyExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpression"
    // EsperEPL2Grammar.g:1439:1: propertyExpression : propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) ;
    public final EsperEPL2GrammarParser.propertyExpression_return propertyExpression() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpression_return retval = new EsperEPL2GrammarParser.propertyExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic634 = null;

        EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic635 = null;


        RewriteRuleSubtreeStream stream_propertyExpressionAtomic=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpressionAtomic");
        try {
            // EsperEPL2Grammar.g:1440:2: ( propertyExpressionAtomic ( propertyExpressionAtomic )* -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ ) )
            // EsperEPL2Grammar.g:1440:4: propertyExpressionAtomic ( propertyExpressionAtomic )*
            {
            pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9282);
            propertyExpressionAtomic634=propertyExpressionAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic634.getTree());
            // EsperEPL2Grammar.g:1440:29: ( propertyExpressionAtomic )*
            loop227:
            do {
                int alt227=2;
                int LA227_0 = input.LA(1);

                if ( (LA227_0==LBRACK) ) {
                    alt227=1;
                }


                switch (alt227) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1440:30: propertyExpressionAtomic
            	    {
            	    pushFollow(FOLLOW_propertyExpressionAtomic_in_propertyExpression9285);
            	    propertyExpressionAtomic635=propertyExpressionAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_propertyExpressionAtomic.add(propertyExpressionAtomic635.getTree());

            	    }
            	    break;

            	default :
            	    break loop227;
                }
            } while (true);



            // AST REWRITE
            // elements: propertyExpressionAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1441:9: -> ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
            {
                // EsperEPL2Grammar.g:1441:12: ^( EVENT_FILTER_PROPERTY_EXPR ( propertyExpressionAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR, "EVENT_FILTER_PROPERTY_EXPR"), root_1);

                if ( !(stream_propertyExpressionAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_propertyExpressionAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpressionAtomic.nextTree());

                }
                stream_propertyExpressionAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpression"

    public static class propertyExpressionAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyExpressionAtomic"
    // EsperEPL2Grammar.g:1444:1: propertyExpressionAtomic : LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) ;
    public final EsperEPL2GrammarParser.propertyExpressionAtomic_return propertyExpressionAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.propertyExpressionAtomic_return retval = new EsperEPL2GrammarParser.propertyExpressionAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK636=null;
        Token SELECT637=null;
        Token FROM639=null;
        Token AS641=null;
        Token IDENT642=null;
        Token WHERE643=null;
        Token RBRACK645=null;
        EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList638 = null;

        EsperEPL2GrammarParser.eventProperty_return eventProperty640 = null;

        EsperEPL2GrammarParser.expression_return expression644 = null;


        CommonTree LBRACK636_tree=null;
        CommonTree SELECT637_tree=null;
        CommonTree FROM639_tree=null;
        CommonTree AS641_tree=null;
        CommonTree IDENT642_tree=null;
        CommonTree WHERE643_tree=null;
        CommonTree RBRACK645_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WHERE=new RewriteRuleTokenStream(adaptor,"token WHERE");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_FROM=new RewriteRuleTokenStream(adaptor,"token FROM");
        RewriteRuleTokenStream stream_SELECT=new RewriteRuleTokenStream(adaptor,"token SELECT");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_propertySelectionList=new RewriteRuleSubtreeStream(adaptor,"rule propertySelectionList");
        RewriteRuleSubtreeStream stream_eventProperty=new RewriteRuleSubtreeStream(adaptor,"rule eventProperty");
        try {
            // EsperEPL2Grammar.g:1445:2: ( LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) ) )
            // EsperEPL2Grammar.g:1445:4: LBRACK ( SELECT propertySelectionList FROM )? eventProperty ( AS IDENT )? ( WHERE expression )? RBRACK
            {
            LBRACK636=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_propertyExpressionAtomic9315); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK636);

            // EsperEPL2Grammar.g:1445:11: ( SELECT propertySelectionList FROM )?
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==SELECT) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    // EsperEPL2Grammar.g:1445:12: SELECT propertySelectionList FROM
                    {
                    SELECT637=(Token)match(input,SELECT,FOLLOW_SELECT_in_propertyExpressionAtomic9318); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_SELECT.add(SELECT637);

                    pushFollow(FOLLOW_propertySelectionList_in_propertyExpressionAtomic9320);
                    propertySelectionList638=propertySelectionList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertySelectionList.add(propertySelectionList638.getTree());
                    FROM639=(Token)match(input,FROM,FOLLOW_FROM_in_propertyExpressionAtomic9322); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_FROM.add(FROM639);


                    }
                    break;

            }

            pushFollow(FOLLOW_eventProperty_in_propertyExpressionAtomic9326);
            eventProperty640=eventProperty();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventProperty.add(eventProperty640.getTree());
            // EsperEPL2Grammar.g:1445:62: ( AS IDENT )?
            int alt229=2;
            int LA229_0 = input.LA(1);

            if ( (LA229_0==AS) ) {
                alt229=1;
            }
            switch (alt229) {
                case 1 :
                    // EsperEPL2Grammar.g:1445:63: AS IDENT
                    {
                    AS641=(Token)match(input,AS,FOLLOW_AS_in_propertyExpressionAtomic9329); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS641);

                    IDENT642=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyExpressionAtomic9331); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(IDENT642);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1445:74: ( WHERE expression )?
            int alt230=2;
            int LA230_0 = input.LA(1);

            if ( (LA230_0==WHERE) ) {
                alt230=1;
            }
            switch (alt230) {
                case 1 :
                    // EsperEPL2Grammar.g:1445:75: WHERE expression
                    {
                    WHERE643=(Token)match(input,WHERE,FOLLOW_WHERE_in_propertyExpressionAtomic9336); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_WHERE.add(WHERE643);

                    pushFollow(FOLLOW_expression_in_propertyExpressionAtomic9338);
                    expression644=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression644.getTree());

                    }
                    break;

            }

            RBRACK645=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_propertyExpressionAtomic9342); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK645);



            // AST REWRITE
            // elements: propertySelectionList, eventProperty, IDENT, expression
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1446:9: -> ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
            {
                // EsperEPL2Grammar.g:1446:12: ^( EVENT_FILTER_PROPERTY_EXPR_ATOM ( propertySelectionList )? eventProperty ( IDENT )? ^( WHERE_EXPR ( expression )? ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_FILTER_PROPERTY_EXPR_ATOM, "EVENT_FILTER_PROPERTY_EXPR_ATOM"), root_1);

                // EsperEPL2Grammar.g:1446:46: ( propertySelectionList )?
                if ( stream_propertySelectionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertySelectionList.nextTree());

                }
                stream_propertySelectionList.reset();
                adaptor.addChild(root_1, stream_eventProperty.nextTree());
                // EsperEPL2Grammar.g:1446:83: ( IDENT )?
                if ( stream_IDENT.hasNext() ) {
                    adaptor.addChild(root_1, stream_IDENT.nextNode());

                }
                stream_IDENT.reset();
                // EsperEPL2Grammar.g:1446:90: ^( WHERE_EXPR ( expression )? )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WHERE_EXPR, "WHERE_EXPR"), root_2);

                // EsperEPL2Grammar.g:1446:103: ( expression )?
                if ( stream_expression.hasNext() ) {
                    adaptor.addChild(root_2, stream_expression.nextTree());

                }
                stream_expression.reset();

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyExpressionAtomic"

    public static class propertySelectionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionList"
    // EsperEPL2Grammar.g:1449:1: propertySelectionList : propertySelectionListElement ( COMMA propertySelectionListElement )* ;
    public final EsperEPL2GrammarParser.propertySelectionList_return propertySelectionList() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionList_return retval = new EsperEPL2GrammarParser.propertySelectionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA647=null;
        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement646 = null;

        EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement648 = null;


        CommonTree COMMA647_tree=null;

        try {
            // EsperEPL2Grammar.g:1450:2: ( propertySelectionListElement ( COMMA propertySelectionListElement )* )
            // EsperEPL2Grammar.g:1450:4: propertySelectionListElement ( COMMA propertySelectionListElement )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9392);
            propertySelectionListElement646=propertySelectionListElement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement646.getTree());
            // EsperEPL2Grammar.g:1450:33: ( COMMA propertySelectionListElement )*
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( (LA231_0==COMMA) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1450:34: COMMA propertySelectionListElement
            	    {
            	    COMMA647=(Token)match(input,COMMA,FOLLOW_COMMA_in_propertySelectionList9395); if (state.failed) return retval;
            	    pushFollow(FOLLOW_propertySelectionListElement_in_propertySelectionList9398);
            	    propertySelectionListElement648=propertySelectionListElement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertySelectionListElement648.getTree());

            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionList"

    public static class propertySelectionListElement_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertySelectionListElement"
    // EsperEPL2Grammar.g:1453:1: propertySelectionListElement : (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) );
    public final EsperEPL2GrammarParser.propertySelectionListElement_return propertySelectionListElement() throws RecognitionException {
        EsperEPL2GrammarParser.propertySelectionListElement_return retval = new EsperEPL2GrammarParser.propertySelectionListElement_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token AS651=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return i = null;

        EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector649 = null;

        EsperEPL2GrammarParser.expression_return expression650 = null;


        CommonTree s_tree=null;
        CommonTree AS651_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = null; 
        try {
            // EsperEPL2Grammar.g:1455:2: (s= STAR -> PROPERTY_WILDCARD_SELECT[$s] | ( propertyStreamSelector )=> propertyStreamSelector | expression ( AS i= keywordAllowedIdent )? -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] ) -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression ) )
            int alt233=3;
            switch ( input.LA(1) ) {
            case STAR:
                {
                alt233=1;
                }
                break;
            case IDENT:
                {
                int LA233_2 = input.LA(2);

                if ( (LA233_2==DOT) ) {
                    int LA233_66 = input.LA(3);

                    if ( (LA233_66==STAR) && (synpred6_EsperEPL2Grammar())) {
                        alt233=2;
                    }
                    else if ( (LA233_66==WINDOW||LA233_66==ESCAPE||LA233_66==EVERY_EXPR||(LA233_66>=SUM && LA233_66<=COUNT)||LA233_66==OUTER||(LA233_66>=JOIN && LA233_66<=FULL)||(LA233_66>=EVENTS && LA233_66<=LAST)||(LA233_66>=UNIDIRECTIONAL && LA233_66<=PREVIOUSTAIL)||LA233_66==PRIOR||(LA233_66>=WEEKDAY && LA233_66<=CAST)||LA233_66==SNAPSHOT||(LA233_66>=VARIABLE && LA233_66<=INDEX)||(LA233_66>=DEFINE && LA233_66<=MATCHES)||LA233_66==WHILE||LA233_66==IDENT||LA233_66==TICKED_STRING_LITERAL) ) {
                        alt233=3;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 233, 66, input);

                        throw nvae;
                    }
                }
                else if ( ((LA233_2>=IN_SET && LA233_2<=REGEXP)||(LA233_2>=OR_EXPR && LA233_2<=NOT_EXPR)||LA233_2==AS||LA233_2==FROM||LA233_2==IS||LA233_2==COMMA||LA233_2==EQUALS||LA233_2==LPAREN||LA233_2==LBRACK||(LA233_2>=STAR && LA233_2<=QUESTION)||(LA233_2>=BAND && LA233_2<=MOD)||LA233_2==ESCAPECHAR) ) {
                    alt233=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 233, 2, input);

                    throw nvae;
                }
                }
                break;
            case WINDOW:
            case ESCAPE:
            case NOT_EXPR:
            case EVERY_EXPR:
            case SUM:
            case AVG:
            case MAX:
            case MIN:
            case COALESCE:
            case MEDIAN:
            case STDDEV:
            case AVEDEV:
            case COUNT:
            case CASE:
            case OUTER:
            case JOIN:
            case LEFT:
            case RIGHT:
            case FULL:
            case EVENTS:
            case FIRST:
            case LAST:
            case UNIDIRECTIONAL:
            case RETAINUNION:
            case RETAININTERSECTION:
            case PATTERN:
            case SQL:
            case METADATASQL:
            case PREVIOUS:
            case PREVIOUSTAIL:
            case PREVIOUSCOUNT:
            case PREVIOUSWINDOW:
            case PRIOR:
            case EXISTS:
            case WEEKDAY:
            case LW:
            case INSTANCEOF:
            case CAST:
            case CURRENT_TIMESTAMP:
            case SNAPSHOT:
            case VARIABLE:
            case UNTIL:
            case AT:
            case INDEX:
            case BOOLEAN_TRUE:
            case BOOLEAN_FALSE:
            case VALUE_NULL:
            case DEFINE:
            case PARTITION:
            case MATCHES:
            case WHILE:
            case NUM_DOUBLE:
            case LPAREN:
            case PLUS:
            case QUESTION:
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
            case MINUS:
            case LCURLY:
            case NUM_INT:
            case TICKED_STRING_LITERAL:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt233=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 233, 0, input);

                throw nvae;
            }

            switch (alt233) {
                case 1 :
                    // EsperEPL2Grammar.g:1455:7: s= STAR
                    {
                    s=(Token)match(input,STAR,FOLLOW_STAR_in_propertySelectionListElement9424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STAR.add(s);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1455:14: -> PROPERTY_WILDCARD_SELECT[$s]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(PROPERTY_WILDCARD_SELECT, s));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1456:4: ( propertyStreamSelector )=> propertyStreamSelector
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_propertyStreamSelector_in_propertySelectionListElement9440);
                    propertyStreamSelector649=propertyStreamSelector();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, propertyStreamSelector649.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1457:4: expression ( AS i= keywordAllowedIdent )?
                    {
                    pushFollow(FOLLOW_expression_in_propertySelectionListElement9445);
                    expression650=expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_expression.add(expression650.getTree());
                    // EsperEPL2Grammar.g:1457:15: ( AS i= keywordAllowedIdent )?
                    int alt232=2;
                    int LA232_0 = input.LA(1);

                    if ( (LA232_0==AS) ) {
                        alt232=1;
                    }
                    switch (alt232) {
                        case 1 :
                            // EsperEPL2Grammar.g:1457:16: AS i= keywordAllowedIdent
                            {
                            AS651=(Token)match(input,AS,FOLLOW_AS_in_propertySelectionListElement9448); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_AS.add(AS651);

                            pushFollow(FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9452);
                            i=keywordAllowedIdent();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(i.getTree());
                            if ( state.backtracking==0 ) {
                               identifier = i.getTree().toString(); 
                            }

                            }
                            break;

                    }



                    // AST REWRITE
                    // elements: expression, expression
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1458:3: -> {identifier != null}? ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                    if (identifier != null) {
                        // EsperEPL2Grammar.g:1458:28: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression IDENT[identifier] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());
                        adaptor.addChild(root_1, (CommonTree)adaptor.create(IDENT, identifier));

                        adaptor.addChild(root_0, root_1);
                        }

                    }
                    else // 1459:3: -> ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                    {
                        // EsperEPL2Grammar.g:1459:6: ^( PROPERTY_SELECTION_ELEMENT_EXPR expression )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_ELEMENT_EXPR, "PROPERTY_SELECTION_ELEMENT_EXPR"), root_1);

                        adaptor.addChild(root_1, stream_expression.nextTree());

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertySelectionListElement"

    public static class propertyStreamSelector_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "propertyStreamSelector"
    // EsperEPL2Grammar.g:1462:1: propertyStreamSelector : s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) ;
    public final EsperEPL2GrammarParser.propertyStreamSelector_return propertyStreamSelector() throws RecognitionException {
        EsperEPL2GrammarParser.propertyStreamSelector_return retval = new EsperEPL2GrammarParser.propertyStreamSelector_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token s=null;
        Token i=null;
        Token DOT652=null;
        Token STAR653=null;
        Token AS654=null;

        CommonTree s_tree=null;
        CommonTree i_tree=null;
        CommonTree DOT652_tree=null;
        CommonTree STAR653_tree=null;
        CommonTree AS654_tree=null;
        RewriteRuleTokenStream stream_AS=new RewriteRuleTokenStream(adaptor,"token AS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");

        try {
            // EsperEPL2Grammar.g:1463:2: (s= IDENT DOT STAR ( AS i= IDENT )? -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? ) )
            // EsperEPL2Grammar.g:1463:4: s= IDENT DOT STAR ( AS i= IDENT )?
            {
            s=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9496); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_IDENT.add(s);

            DOT652=(Token)match(input,DOT,FOLLOW_DOT_in_propertyStreamSelector9498); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DOT.add(DOT652);

            STAR653=(Token)match(input,STAR,FOLLOW_STAR_in_propertyStreamSelector9500); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR653);

            // EsperEPL2Grammar.g:1463:21: ( AS i= IDENT )?
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==AS) ) {
                alt234=1;
            }
            switch (alt234) {
                case 1 :
                    // EsperEPL2Grammar.g:1463:22: AS i= IDENT
                    {
                    AS654=(Token)match(input,AS,FOLLOW_AS_in_propertyStreamSelector9503); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_AS.add(AS654);

                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_propertyStreamSelector9507); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, s
            // token labels: s, i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1464:3: -> ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
            {
                // EsperEPL2Grammar.g:1464:6: ^( PROPERTY_SELECTION_STREAM $s ( $i)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PROPERTY_SELECTION_STREAM, "PROPERTY_SELECTION_STREAM"), root_1);

                adaptor.addChild(root_1, stream_s.nextNode());
                // EsperEPL2Grammar.g:1464:37: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "propertyStreamSelector"

    public static class patternFilterExpression_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "patternFilterExpression"
    // EsperEPL2Grammar.g:1467:1: patternFilterExpression : (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) ;
    public final EsperEPL2GrammarParser.patternFilterExpression_return patternFilterExpression() throws RecognitionException {
        EsperEPL2GrammarParser.patternFilterExpression_return retval = new EsperEPL2GrammarParser.patternFilterExpression_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token EQUALS655=null;
        Token LPAREN657=null;
        Token RPAREN659=null;
        EsperEPL2GrammarParser.classIdentifier_return classIdentifier656 = null;

        EsperEPL2GrammarParser.expressionList_return expressionList658 = null;

        EsperEPL2GrammarParser.propertyExpression_return propertyExpression660 = null;


        CommonTree i_tree=null;
        CommonTree EQUALS655_tree=null;
        CommonTree LPAREN657_tree=null;
        CommonTree RPAREN659_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_EQUALS=new RewriteRuleTokenStream(adaptor,"token EQUALS");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleSubtreeStream stream_expressionList=new RewriteRuleSubtreeStream(adaptor,"rule expressionList");
        RewriteRuleSubtreeStream stream_propertyExpression=new RewriteRuleSubtreeStream(adaptor,"rule propertyExpression");
        RewriteRuleSubtreeStream stream_classIdentifier=new RewriteRuleSubtreeStream(adaptor,"rule classIdentifier");
         paraphrases.push("filter specification"); 
        try {
            // EsperEPL2Grammar.g:1470:5: ( (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )? -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? ) )
            // EsperEPL2Grammar.g:1470:9: (i= IDENT EQUALS )? classIdentifier ( LPAREN ( expressionList )? RPAREN )? ( propertyExpression )?
            {
            // EsperEPL2Grammar.g:1470:9: (i= IDENT EQUALS )?
            int alt235=2;
            int LA235_0 = input.LA(1);

            if ( (LA235_0==IDENT) ) {
                int LA235_1 = input.LA(2);

                if ( (LA235_1==EQUALS) ) {
                    alt235=1;
                }
            }
            switch (alt235) {
                case 1 :
                    // EsperEPL2Grammar.g:1470:10: i= IDENT EQUALS
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_patternFilterExpression9554); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);

                    EQUALS655=(Token)match(input,EQUALS,FOLLOW_EQUALS_in_patternFilterExpression9556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_EQUALS.add(EQUALS655);


                    }
                    break;

            }

            pushFollow(FOLLOW_classIdentifier_in_patternFilterExpression9565);
            classIdentifier656=classIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_classIdentifier.add(classIdentifier656.getTree());
            // EsperEPL2Grammar.g:1472:9: ( LPAREN ( expressionList )? RPAREN )?
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==LPAREN) ) {
                alt237=1;
            }
            switch (alt237) {
                case 1 :
                    // EsperEPL2Grammar.g:1472:10: LPAREN ( expressionList )? RPAREN
                    {
                    LPAREN657=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_patternFilterExpression9576); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(LPAREN657);

                    // EsperEPL2Grammar.g:1472:17: ( expressionList )?
                    int alt236=2;
                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==WINDOW||LA236_0==ESCAPE||(LA236_0>=NOT_EXPR && LA236_0<=EVERY_EXPR)||(LA236_0>=SUM && LA236_0<=COUNT)||LA236_0==CASE||LA236_0==OUTER||(LA236_0>=JOIN && LA236_0<=FULL)||(LA236_0>=EVENTS && LA236_0<=LAST)||(LA236_0>=UNIDIRECTIONAL && LA236_0<=CURRENT_TIMESTAMP)||LA236_0==SNAPSHOT||(LA236_0>=VARIABLE && LA236_0<=INDEX)||(LA236_0>=BOOLEAN_TRUE && LA236_0<=VALUE_NULL)||(LA236_0>=DEFINE && LA236_0<=MATCHES)||LA236_0==WHILE||LA236_0==NUM_DOUBLE||LA236_0==IDENT||LA236_0==LPAREN||(LA236_0>=PLUS && LA236_0<=QUESTION)||(LA236_0>=STRING_LITERAL && LA236_0<=QUOTED_STRING_LITERAL)||LA236_0==MINUS||LA236_0==LCURLY||LA236_0==NUM_INT||(LA236_0>=TICKED_STRING_LITERAL && LA236_0<=NUM_FLOAT)) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            // EsperEPL2Grammar.g:1472:17: expressionList
                            {
                            pushFollow(FOLLOW_expressionList_in_patternFilterExpression9578);
                            expressionList658=expressionList();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_expressionList.add(expressionList658.getTree());

                            }
                            break;

                    }

                    RPAREN659=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_patternFilterExpression9581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN659);


                    }
                    break;

            }

            // EsperEPL2Grammar.g:1473:9: ( propertyExpression )?
            int alt238=2;
            int LA238_0 = input.LA(1);

            if ( (LA238_0==LBRACK) ) {
                alt238=1;
            }
            switch (alt238) {
                case 1 :
                    // EsperEPL2Grammar.g:1473:9: propertyExpression
                    {
                    pushFollow(FOLLOW_propertyExpression_in_patternFilterExpression9593);
                    propertyExpression660=propertyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_propertyExpression.add(propertyExpression660.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: classIdentifier, i, expressionList, propertyExpression
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1474:9: -> ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
            {
                // EsperEPL2Grammar.g:1474:12: ^( PATTERN_FILTER_EXPR ( $i)? classIdentifier ( propertyExpression )? ( expressionList )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(PATTERN_FILTER_EXPR, "PATTERN_FILTER_EXPR"), root_1);

                // EsperEPL2Grammar.g:1474:34: ( $i)?
                if ( stream_i.hasNext() ) {
                    adaptor.addChild(root_1, stream_i.nextNode());

                }
                stream_i.reset();
                adaptor.addChild(root_1, stream_classIdentifier.nextTree());
                // EsperEPL2Grammar.g:1474:54: ( propertyExpression )?
                if ( stream_propertyExpression.hasNext() ) {
                    adaptor.addChild(root_1, stream_propertyExpression.nextTree());

                }
                stream_propertyExpression.reset();
                // EsperEPL2Grammar.g:1474:74: ( expressionList )?
                if ( stream_expressionList.hasNext() ) {
                    adaptor.addChild(root_1, stream_expressionList.nextTree());

                }
                stream_expressionList.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
            if ( state.backtracking==0 ) {
               paraphrases.pop(); 
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "patternFilterExpression"

    public static class classIdentifier_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifier"
    // EsperEPL2Grammar.g:1478:1: classIdentifier : i1= escapableStr ( DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifier_return classIdentifier() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifier_return retval = new EsperEPL2GrammarParser.classIdentifier_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT661=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;

        EsperEPL2GrammarParser.escapableStr_return i2 = null;


        CommonTree DOT661_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1480:2: (i1= escapableStr ( DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1480:4: i1= escapableStr ( DOT i2= escapableStr )*
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifier9648);
            i1=escapableStr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1481:6: ( DOT i2= escapableStr )*
            loop239:
            do {
                int alt239=2;
                int LA239_0 = input.LA(1);

                if ( (LA239_0==DOT) ) {
                    int LA239_21 = input.LA(2);

                    if ( (LA239_21==IDENT) ) {
                        int LA239_44 = input.LA(3);

                        if ( (LA239_44==EOF||LA239_44==CREATE||(LA239_44>=OR_EXPR && LA239_44<=AS)||LA239_44==SELECT||(LA239_44>=INNER && LA239_44<=ON)||(LA239_44>=GROUP && LA239_44<=HAVING)||LA239_44==OUTPUT||LA239_44==INSERT||LA239_44==ORDER||(LA239_44>=UNIDIRECTIONAL && LA239_44<=RETAININTERSECTION)||LA239_44==DELETE||LA239_44==SET||LA239_44==UNTIL||LA239_44==ROW_LIMIT_EXPR||(LA239_44>=UPDATE && LA239_44<=MATCH_RECOGNIZE)||(LA239_44>=FOR && LA239_44<=WHILE)||(LA239_44>=COMMA && LA239_44<=IDENT)||(LA239_44>=DOT && LA239_44<=RBRACK)||LA239_44==RCURLY||LA239_44==FOLLOWED_BY||LA239_44==TICKED_STRING_LITERAL||LA239_44==EMAILAT) ) {
                            alt239=1;
                        }


                    }
                    else if ( (LA239_21==TICKED_STRING_LITERAL) ) {
                        alt239=1;
                    }


                }


                switch (alt239) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1482:8: DOT i2= escapableStr
            	    {
            	    DOT661=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifier9667); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT661);

            	    pushFollow(FOLLOW_escapableStr_in_classIdentifier9671);
            	    i2=escapableStr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop239;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1484:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1484:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifier"

    public static class classIdentifierNonGreedy_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "classIdentifierNonGreedy"
    // EsperEPL2Grammar.g:1487:1: classIdentifierNonGreedy : i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.classIdentifierNonGreedy_return classIdentifierNonGreedy() throws RecognitionException {
        EsperEPL2GrammarParser.classIdentifierNonGreedy_return retval = new EsperEPL2GrammarParser.classIdentifierNonGreedy_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT662=null;
        EsperEPL2GrammarParser.escapableStr_return i1 = null;

        EsperEPL2GrammarParser.escapableStr_return i2 = null;


        CommonTree DOT662_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_escapableStr=new RewriteRuleSubtreeStream(adaptor,"rule escapableStr");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1489:2: (i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )* -> ^( CLASS_IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1489:4: i1= escapableStr ( options {greedy=false; } : DOT i2= escapableStr )*
            {
            pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy9716);
            i1=escapableStr();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_escapableStr.add(i1.getTree());
            if ( state.backtracking==0 ) {
               identifier = (i1!=null?i1.result:null); 
            }
            // EsperEPL2Grammar.g:1490:6: ( options {greedy=false; } : DOT i2= escapableStr )*
            loop240:
            do {
                int alt240=2;
                int LA240_0 = input.LA(1);

                if ( (LA240_0==DOT) ) {
                    switch ( input.LA(2) ) {
                    case IDENT:
                        {
                        int LA240_2 = input.LA(3);

                        if ( (LA240_2==DOT) ) {
                            alt240=1;
                        }
                        else if ( (LA240_2==LPAREN) ) {
                            alt240=2;
                        }


                        }
                        break;
                    case TICKED_STRING_LITERAL:
                        {
                        int LA240_3 = input.LA(3);

                        if ( (LA240_3==LPAREN) ) {
                            alt240=2;
                        }
                        else if ( (LA240_3==DOT) ) {
                            alt240=1;
                        }


                        }
                        break;
                    case MAX:
                    case MIN:
                        {
                        alt240=2;
                        }
                        break;

                    }

                }


                switch (alt240) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1492:8: DOT i2= escapableStr
            	    {
            	    DOT662=(Token)match(input,DOT,FOLLOW_DOT_in_classIdentifierNonGreedy9751); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT662);

            	    pushFollow(FOLLOW_escapableStr_in_classIdentifierNonGreedy9755);
            	    i2=escapableStr();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_escapableStr.add(i2.getTree());
            	    if ( state.backtracking==0 ) {
            	       identifier += "." + (i2!=null?i2.result:null); 
            	    }

            	    }
            	    break;

            	default :
            	    break loop240;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1494:6: -> ^( CLASS_IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1494:9: ^( CLASS_IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(CLASS_IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "classIdentifierNonGreedy"

    public static class expressionList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionList"
    // EsperEPL2Grammar.g:1497:1: expressionList : expression ( COMMA expression )* ;
    public final EsperEPL2GrammarParser.expressionList_return expressionList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionList_return retval = new EsperEPL2GrammarParser.expressionList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA664=null;
        EsperEPL2GrammarParser.expression_return expression663 = null;

        EsperEPL2GrammarParser.expression_return expression665 = null;


        CommonTree COMMA664_tree=null;

        try {
            // EsperEPL2Grammar.g:1498:6: ( expression ( COMMA expression )* )
            // EsperEPL2Grammar.g:1498:11: expression ( COMMA expression )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expression_in_expressionList9797);
            expression663=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expression663.getTree());
            // EsperEPL2Grammar.g:1498:22: ( COMMA expression )*
            loop241:
            do {
                int alt241=2;
                int LA241_0 = input.LA(1);

                if ( (LA241_0==COMMA) ) {
                    alt241=1;
                }


                switch (alt241) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1498:23: COMMA expression
            	    {
            	    COMMA664=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionList9800); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expression_in_expressionList9803);
            	    expression665=expression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expression665.getTree());

            	    }
            	    break;

            	default :
            	    break loop241;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionList"

    public static class expressionWithTimeList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTimeList"
    // EsperEPL2Grammar.g:1501:1: expressionWithTimeList : expressionWithTime ( COMMA expressionWithTime )* ;
    public final EsperEPL2GrammarParser.expressionWithTimeList_return expressionWithTimeList() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTimeList_return retval = new EsperEPL2GrammarParser.expressionWithTimeList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token COMMA667=null;
        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime666 = null;

        EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime668 = null;


        CommonTree COMMA667_tree=null;

        try {
            // EsperEPL2Grammar.g:1502:6: ( expressionWithTime ( COMMA expressionWithTime )* )
            // EsperEPL2Grammar.g:1502:11: expressionWithTime ( COMMA expressionWithTime )*
            {
            root_0 = (CommonTree)adaptor.nil();

            pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9831);
            expressionWithTime666=expressionWithTime();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime666.getTree());
            // EsperEPL2Grammar.g:1502:30: ( COMMA expressionWithTime )*
            loop242:
            do {
                int alt242=2;
                int LA242_0 = input.LA(1);

                if ( (LA242_0==COMMA) ) {
                    alt242=1;
                }


                switch (alt242) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1502:31: COMMA expressionWithTime
            	    {
            	    COMMA667=(Token)match(input,COMMA,FOLLOW_COMMA_in_expressionWithTimeList9834); if (state.failed) return retval;
            	    pushFollow(FOLLOW_expressionWithTime_in_expressionWithTimeList9837);
            	    expressionWithTime668=expressionWithTime();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionWithTime668.getTree());

            	    }
            	    break;

            	default :
            	    break loop242;
                }
            } while (true);


            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTimeList"

    public static class expressionWithTime_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionWithTime"
    // EsperEPL2Grammar.g:1505:1: expressionWithTime : ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar );
    public final EsperEPL2GrammarParser.expressionWithTime_return expressionWithTime() throws RecognitionException {
        EsperEPL2GrammarParser.expressionWithTime_return retval = new EsperEPL2GrammarParser.expressionWithTime_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.lastOperand_return lastOperand669 = null;

        EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand670 = null;

        EsperEPL2GrammarParser.timePeriod_return timePeriod671 = null;

        EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable672 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand673 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand674 = null;

        EsperEPL2GrammarParser.lastOperator_return lastOperator675 = null;

        EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator676 = null;

        EsperEPL2GrammarParser.numericParameterList_return numericParameterList677 = null;

        EsperEPL2GrammarParser.numberSetStar_return numberSetStar678 = null;



        try {
            // EsperEPL2Grammar.g:1506:2: ( ( lastOperand )=> lastOperand | ( lastWeekdayOperand )=> lastWeekdayOperand | ( timePeriod )=> timePeriod | ( expressionQualifyable )=> expressionQualifyable | ( rangeOperand )=> rangeOperand | ( frequencyOperand )=> frequencyOperand | ( lastOperator )=> lastOperator | ( weekDayOperator )=> weekDayOperator | ( numericParameterList )=> numericParameterList | numberSetStar )
            int alt243=10;
            int LA243_0 = input.LA(1);

            if ( (LA243_0==LAST) ) {
                int LA243_1 = input.LA(2);

                if ( (synpred7_EsperEPL2Grammar()) ) {
                    alt243=1;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt243=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 1, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==LW) ) {
                int LA243_2 = input.LA(2);

                if ( (synpred8_EsperEPL2Grammar()) ) {
                    alt243=2;
                }
                else if ( (synpred10_EsperEPL2Grammar()) ) {
                    alt243=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 2, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==NUM_INT) ) {
                int LA243_3 = input.LA(2);

                if ( (LA243_3==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_3==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_3==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_3==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==TIMEPERIOD_SECONDS) ) {
                    int LA243_173 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 173, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_3==TIMEPERIOD_SECOND) ) {
                    int LA243_174 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 174, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_3==TIMEPERIOD_SEC) ) {
                    int LA243_175 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 175, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_3==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_3==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_3==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 3, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==NUM_LONG) ) {
                int LA243_4 = input.LA(2);

                if ( (LA243_4==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_4==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_4==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==TIMEPERIOD_SECONDS) ) {
                    int LA243_214 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 214, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_4==TIMEPERIOD_SECOND) ) {
                    int LA243_215 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 215, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_4==TIMEPERIOD_SEC) ) {
                    int LA243_216 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 216, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_4==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_4==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_4==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_4==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 4, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==NUM_FLOAT) ) {
                int LA243_5 = input.LA(2);

                if ( (LA243_5==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_5==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_5==TIMEPERIOD_SECONDS) ) {
                    int LA243_237 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 237, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_5==TIMEPERIOD_SECOND) ) {
                    int LA243_238 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 238, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_5==TIMEPERIOD_SEC) ) {
                    int LA243_239 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 239, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_5==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_5==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_5==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_5==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 5, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==NUM_DOUBLE) ) {
                int LA243_6 = input.LA(2);

                if ( (LA243_6==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_6==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_6==TIMEPERIOD_SECONDS) ) {
                    int LA243_278 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 278, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_6==TIMEPERIOD_SECOND) ) {
                    int LA243_279 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 279, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_6==TIMEPERIOD_SEC) ) {
                    int LA243_280 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 280, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_6==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_6==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_6==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_6==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 6, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==IDENT) ) {
                int LA243_7 = input.LA(2);

                if ( (LA243_7==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_7==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_7==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_7==DOT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==TIMEPERIOD_SECONDS) ) {
                    int LA243_323 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 323, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_7==TIMEPERIOD_SECOND) ) {
                    int LA243_324 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 324, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_7==TIMEPERIOD_SEC) ) {
                    int LA243_325 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 325, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_7==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_7==ESCAPECHAR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LBRACK) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==QUESTION) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_7==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 7, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==QUESTION) ) {
                int LA243_8 = input.LA(2);

                if ( (LA243_8==TIMEPERIOD_MINUTES) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_MINUTE) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==MIN) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_DAYS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_DAY) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==STAR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==DIV) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==MOD) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==PLUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==MINUS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==LOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==LT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==GT) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==LE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==GE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==EQUALS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==IS) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==SQL_NE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==NOT_EQUAL) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==BAND) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==BOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==BXOR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==AND_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==OR_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==ASC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==DESC) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==TIMEPERIOD_SECONDS) ) {
                    int LA243_392 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 392, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_8==TIMEPERIOD_SECOND) ) {
                    int LA243_393 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 393, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_8==TIMEPERIOD_SEC) ) {
                    int LA243_394 = input.LA(3);

                    if ( (synpred9_EsperEPL2Grammar()) ) {
                        alt243=3;
                    }
                    else if ( (synpred10_EsperEPL2Grammar()) ) {
                        alt243=4;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 243, 394, input);

                        throw nvae;
                    }
                }
                else if ( (LA243_8==COMMA) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==RPAREN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==IN_SET) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==BETWEEN) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==LIKE) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==REGEXP) && (synpred10_EsperEPL2Grammar())) {
                    alt243=4;
                }
                else if ( (LA243_8==COLON) && (synpred11_EsperEPL2Grammar())) {
                    alt243=5;
                }
                else if ( (LA243_8==WEEKDAY) && (synpred14_EsperEPL2Grammar())) {
                    alt243=8;
                }
                else if ( (LA243_8==TIMEPERIOD_MILLISECONDS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_MILLISECOND) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_MILLISEC) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==LAST) && (synpred13_EsperEPL2Grammar())) {
                    alt243=7;
                }
                else if ( (LA243_8==TIMEPERIOD_HOURS) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else if ( (LA243_8==TIMEPERIOD_HOUR) && (synpred9_EsperEPL2Grammar())) {
                    alt243=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 8, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==CASE) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MINUS) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PLUS) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==QUOTED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==BOOLEAN_TRUE) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==BOOLEAN_FALSE) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==VALUE_NULL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==LPAREN) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==TICKED_STRING_LITERAL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==AT) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==COUNT) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==ESCAPE) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==EVERY_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==SUM) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==AVG) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MAX) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MIN) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==COALESCE) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MEDIAN) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==STDDEV) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==AVEDEV) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==EVENTS) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==FIRST) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==WHILE) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==UNIDIRECTIONAL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==RETAINUNION) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==RETAININTERSECTION) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==UNTIL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PATTERN) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==SQL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==METADATASQL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PREVIOUS) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PREVIOUSTAIL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PRIOR) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==WEEKDAY) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==INSTANCEOF) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==CAST) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==SNAPSHOT) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==VARIABLE) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==INDEX) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==WINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==LEFT) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==RIGHT) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==OUTER) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==FULL) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==JOIN) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==DEFINE) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PARTITION) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==MATCHES) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PREVIOUSCOUNT) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==PREVIOUSWINDOW) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==EXISTS) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==CURRENT_TIMESTAMP) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==LCURLY) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==NOT_EXPR) && (synpred10_EsperEPL2Grammar())) {
                alt243=4;
            }
            else if ( (LA243_0==STAR) ) {
                int LA243_65 = input.LA(2);

                if ( (LA243_65==DIV) && (synpred12_EsperEPL2Grammar())) {
                    alt243=6;
                }
                else if ( (LA243_65==COMMA||LA243_65==RPAREN) ) {
                    alt243=10;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 243, 65, input);

                    throw nvae;
                }
            }
            else if ( (LA243_0==LBRACK) && (synpred15_EsperEPL2Grammar())) {
                alt243=9;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 243, 0, input);

                throw nvae;
            }
            switch (alt243) {
                case 1 :
                    // EsperEPL2Grammar.g:1506:7: ( lastOperand )=> lastOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperand_in_expressionWithTime9863);
                    lastOperand669=lastOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperand669.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1507:4: ( lastWeekdayOperand )=> lastWeekdayOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastWeekdayOperand_in_expressionWithTime9874);
                    lastWeekdayOperand670=lastWeekdayOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastWeekdayOperand670.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1508:4: ( timePeriod )=> timePeriod
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_timePeriod_in_expressionWithTime9885);
                    timePeriod671=timePeriod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, timePeriod671.getTree());

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1509:4: ( expressionQualifyable )=> expressionQualifyable
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_expressionQualifyable_in_expressionWithTime9896);
                    expressionQualifyable672=expressionQualifyable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, expressionQualifyable672.getTree());

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1510:4: ( rangeOperand )=> rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_expressionWithTime9907);
                    rangeOperand673=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand673.getTree());

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1511:5: ( frequencyOperand )=> frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_expressionWithTime9919);
                    frequencyOperand674=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand674.getTree());

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1512:4: ( lastOperator )=> lastOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_lastOperator_in_expressionWithTime9930);
                    lastOperator675=lastOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, lastOperator675.getTree());

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1513:4: ( weekDayOperator )=> weekDayOperator
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_weekDayOperator_in_expressionWithTime9942);
                    weekDayOperator676=weekDayOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, weekDayOperator676.getTree());

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1514:5: ( numericParameterList )=> numericParameterList
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numericParameterList_in_expressionWithTime9954);
                    numericParameterList677=numericParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numericParameterList677.getTree());

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1515:4: numberSetStar
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberSetStar_in_expressionWithTime9959);
                    numberSetStar678=numberSetStar();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberSetStar678.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionWithTime"

    public static class expressionQualifyable_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "expressionQualifyable"
    // EsperEPL2Grammar.g:1518:1: expressionQualifyable : expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression ;
    public final EsperEPL2GrammarParser.expressionQualifyable_return expressionQualifyable() throws RecognitionException {
        EsperEPL2GrammarParser.expressionQualifyable_return retval = new EsperEPL2GrammarParser.expressionQualifyable_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token a=null;
        Token d=null;
        Token s=null;
        EsperEPL2GrammarParser.expression_return expression679 = null;


        CommonTree a_tree=null;
        CommonTree d_tree=null;
        CommonTree s_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_ASC=new RewriteRuleTokenStream(adaptor,"token ASC");
        RewriteRuleTokenStream stream_DESC=new RewriteRuleTokenStream(adaptor,"token DESC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_expression=new RewriteRuleSubtreeStream(adaptor,"rule expression");
        try {
            // EsperEPL2Grammar.g:1519:2: ( expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )? -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? ) -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) ) -> expression )
            // EsperEPL2Grammar.g:1519:4: expression (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            {
            pushFollow(FOLLOW_expression_in_expressionQualifyable9970);
            expression679=expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_expression.add(expression679.getTree());
            // EsperEPL2Grammar.g:1519:15: (a= ASC | d= DESC | s= TIMEPERIOD_SECONDS | s= TIMEPERIOD_SECOND | s= TIMEPERIOD_SEC )?
            int alt244=6;
            switch ( input.LA(1) ) {
                case ASC:
                    {
                    alt244=1;
                    }
                    break;
                case DESC:
                    {
                    alt244=2;
                    }
                    break;
                case TIMEPERIOD_SECONDS:
                    {
                    alt244=3;
                    }
                    break;
                case TIMEPERIOD_SECOND:
                    {
                    alt244=4;
                    }
                    break;
                case TIMEPERIOD_SEC:
                    {
                    alt244=5;
                    }
                    break;
            }

            switch (alt244) {
                case 1 :
                    // EsperEPL2Grammar.g:1519:16: a= ASC
                    {
                    a=(Token)match(input,ASC,FOLLOW_ASC_in_expressionQualifyable9975); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_ASC.add(a);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1519:22: d= DESC
                    {
                    d=(Token)match(input,DESC,FOLLOW_DESC_in_expressionQualifyable9979); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_DESC.add(d);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1519:29: s= TIMEPERIOD_SECONDS
                    {
                    s=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9983); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(s);


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1519:50: s= TIMEPERIOD_SECOND
                    {
                    s=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9987); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(s);


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1519:70: s= TIMEPERIOD_SEC
                    {
                    s=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9991); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(s);


                    }
                    break;

            }



            // AST REWRITE
            // elements: a, expression, expression, d, expression
            // token labels: d, a
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_d=new RewriteRuleTokenStream(adaptor,"token d",d);
            RewriteRuleTokenStream stream_a=new RewriteRuleTokenStream(adaptor,"token a",a);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1520:3: -> {d != null || a != null}? ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
            if (d != null || a != null) {
                // EsperEPL2Grammar.g:1520:32: ^( OBJECT_PARAM_ORDERED_EXPR expression ( $a)? ( $d)? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(OBJECT_PARAM_ORDERED_EXPR, "OBJECT_PARAM_ORDERED_EXPR"), root_1);

                adaptor.addChild(root_1, stream_expression.nextTree());
                // EsperEPL2Grammar.g:1520:71: ( $a)?
                if ( stream_a.hasNext() ) {
                    adaptor.addChild(root_1, stream_a.nextNode());

                }
                stream_a.reset();
                // EsperEPL2Grammar.g:1520:75: ( $d)?
                if ( stream_d.hasNext() ) {
                    adaptor.addChild(root_1, stream_d.nextNode());

                }
                stream_d.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1521:3: -> {s != null}? ^( TIME_PERIOD ^( SECOND_PART expression ) )
            if (s != null) {
                // EsperEPL2Grammar.g:1521:19: ^( TIME_PERIOD ^( SECOND_PART expression ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1521:33: ^( SECOND_PART expression )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_2);

                adaptor.addChild(root_2, stream_expression.nextTree());

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1522:3: -> expression
            {
                adaptor.addChild(root_0, stream_expression.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "expressionQualifyable"

    public static class numberSetStar_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberSetStar"
    // EsperEPL2Grammar.g:1526:1: numberSetStar : STAR -> ^( NUMBERSETSTAR ) ;
    public final EsperEPL2GrammarParser.numberSetStar_return numberSetStar() throws RecognitionException {
        EsperEPL2GrammarParser.numberSetStar_return retval = new EsperEPL2GrammarParser.numberSetStar_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token STAR680=null;

        CommonTree STAR680_tree=null;
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");

        try {
            // EsperEPL2Grammar.g:1527:2: ( STAR -> ^( NUMBERSETSTAR ) )
            // EsperEPL2Grammar.g:1527:4: STAR
            {
            STAR680=(Token)match(input,STAR,FOLLOW_STAR_in_numberSetStar10048); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR680);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1528:3: -> ^( NUMBERSETSTAR )
            {
                // EsperEPL2Grammar.g:1528:6: ^( NUMBERSETSTAR )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMBERSETSTAR, "NUMBERSETSTAR"), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberSetStar"

    public static class lastWeekdayOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastWeekdayOperand"
    // EsperEPL2Grammar.g:1531:1: lastWeekdayOperand : LW ;
    public final EsperEPL2GrammarParser.lastWeekdayOperand_return lastWeekdayOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastWeekdayOperand_return retval = new EsperEPL2GrammarParser.lastWeekdayOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LW681=null;

        CommonTree LW681_tree=null;

        try {
            // EsperEPL2Grammar.g:1532:2: ( LW )
            // EsperEPL2Grammar.g:1532:4: LW
            {
            root_0 = (CommonTree)adaptor.nil();

            LW681=(Token)match(input,LW,FOLLOW_LW_in_lastWeekdayOperand10068); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LW681_tree = (CommonTree)adaptor.create(LW681);
            root_0 = (CommonTree)adaptor.becomeRoot(LW681_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastWeekdayOperand"

    public static class lastOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperand"
    // EsperEPL2Grammar.g:1535:1: lastOperand : LAST ;
    public final EsperEPL2GrammarParser.lastOperand_return lastOperand() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperand_return retval = new EsperEPL2GrammarParser.lastOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LAST682=null;

        CommonTree LAST682_tree=null;

        try {
            // EsperEPL2Grammar.g:1536:2: ( LAST )
            // EsperEPL2Grammar.g:1536:4: LAST
            {
            root_0 = (CommonTree)adaptor.nil();

            LAST682=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperand10081); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
            LAST682_tree = (CommonTree)adaptor.create(LAST682);
            root_0 = (CommonTree)adaptor.becomeRoot(LAST682_tree, root_0);
            }

            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperand"

    public static class frequencyOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "frequencyOperand"
    // EsperEPL2Grammar.g:1539:1: frequencyOperand : STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand() throws RecognitionException {
        EsperEPL2GrammarParser.frequencyOperand_return retval = new EsperEPL2GrammarParser.frequencyOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token STAR683=null;
        Token DIV684=null;
        EsperEPL2GrammarParser.number_return number685 = null;

        EsperEPL2GrammarParser.substitution_return substitution686 = null;


        CommonTree i_tree=null;
        CommonTree STAR683_tree=null;
        CommonTree DIV684_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_STAR=new RewriteRuleTokenStream(adaptor,"token STAR");
        RewriteRuleTokenStream stream_DIV=new RewriteRuleTokenStream(adaptor,"token DIV");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1540:2: ( STAR DIV ( number | i= IDENT | substitution ) -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1540:4: STAR DIV ( number | i= IDENT | substitution )
            {
            STAR683=(Token)match(input,STAR,FOLLOW_STAR_in_frequencyOperand10093); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_STAR.add(STAR683);

            DIV684=(Token)match(input,DIV,FOLLOW_DIV_in_frequencyOperand10095); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_DIV.add(DIV684);

            // EsperEPL2Grammar.g:1540:13: ( number | i= IDENT | substitution )
            int alt245=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt245=1;
                }
                break;
            case IDENT:
                {
                alt245=2;
                }
                break;
            case QUESTION:
                {
                alt245=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 245, 0, input);

                throw nvae;
            }

            switch (alt245) {
                case 1 :
                    // EsperEPL2Grammar.g:1540:14: number
                    {
                    pushFollow(FOLLOW_number_in_frequencyOperand10098);
                    number685=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number685.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1540:21: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_frequencyOperand10102); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1540:29: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_frequencyOperand10104);
                    substitution686=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution686.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1541:3: -> {i!= null}? ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1541:18: ^( NUMERIC_PARAM_FREQUENCY ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1541:44: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1541:62: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1542:3: -> ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1542:6: ^( NUMERIC_PARAM_FREQUENCY ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_FREQUENCY, "NUMERIC_PARAM_FREQUENCY"), root_1);

                // EsperEPL2Grammar.g:1542:32: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1542:40: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "frequencyOperand"

    public static class rangeOperand_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "rangeOperand"
    // EsperEPL2Grammar.g:1545:1: rangeOperand : ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) ;
    public final EsperEPL2GrammarParser.rangeOperand_return rangeOperand() throws RecognitionException {
        EsperEPL2GrammarParser.rangeOperand_return retval = new EsperEPL2GrammarParser.rangeOperand_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token COLON689=null;
        EsperEPL2GrammarParser.number_return number687 = null;

        EsperEPL2GrammarParser.substitution_return substitution688 = null;

        EsperEPL2GrammarParser.number_return number690 = null;

        EsperEPL2GrammarParser.substitution_return substitution691 = null;


        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree COLON689_tree=null;
        RewriteRuleTokenStream stream_COLON=new RewriteRuleTokenStream(adaptor,"token COLON");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1546:2: ( ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution ) -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? ) -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) ) -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* ) )
            // EsperEPL2Grammar.g:1546:4: ( number | i1= IDENT | substitution ) COLON ( number | i2= IDENT | substitution )
            {
            // EsperEPL2Grammar.g:1546:4: ( number | i1= IDENT | substitution )
            int alt246=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt246=1;
                }
                break;
            case IDENT:
                {
                alt246=2;
                }
                break;
            case QUESTION:
                {
                alt246=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 246, 0, input);

                throw nvae;
            }

            switch (alt246) {
                case 1 :
                    // EsperEPL2Grammar.g:1546:5: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10153);
                    number687=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number687.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1546:12: i1= IDENT
                    {
                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10157); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i1);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1546:21: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10159);
                    substitution688=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution688.getTree());

                    }
                    break;

            }

            COLON689=(Token)match(input,COLON,FOLLOW_COLON_in_rangeOperand10162); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_COLON.add(COLON689);

            // EsperEPL2Grammar.g:1546:41: ( number | i2= IDENT | substitution )
            int alt247=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt247=1;
                }
                break;
            case IDENT:
                {
                alt247=2;
                }
                break;
            case QUESTION:
                {
                alt247=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 247, 0, input);

                throw nvae;
            }

            switch (alt247) {
                case 1 :
                    // EsperEPL2Grammar.g:1546:42: number
                    {
                    pushFollow(FOLLOW_number_in_rangeOperand10165);
                    number690=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number690.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1546:49: i2= IDENT
                    {
                    i2=(Token)match(input,IDENT,FOLLOW_IDENT_in_rangeOperand10169); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i2);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1546:58: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_rangeOperand10171);
                    substitution691=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution691.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, substitution, i1, number, i2, substitution, number, i2, i1
            // token labels: i2, i1
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i2=new RewriteRuleTokenStream(adaptor,"token i2",i2);
            RewriteRuleTokenStream stream_i1=new RewriteRuleTokenStream(adaptor,"token i1",i1);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1547:3: -> {i1 != null && i2 != null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 != null && i2 != null) {
                // EsperEPL2Grammar.g:1547:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1547:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1547:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1547:100: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1547:118: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1548:3: -> {i1 != null && i2 == null}? ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
            if (i1 != null && i2 == null) {
                // EsperEPL2Grammar.g:1548:34: ^( NUMERIC_PARAM_RANGE ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) ) ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1548:56: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i1) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1548:74: ^( EVENT_PROP_SIMPLE $i1)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i1.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }
                // EsperEPL2Grammar.g:1548:100: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1548:108: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1549:3: -> {i1 == null && i2 != null}? ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
            if (i1 == null && i2 != null) {
                // EsperEPL2Grammar.g:1549:34: ^( NUMERIC_PARAM_RANGE ( number )? ( substitution )? ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1549:56: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1549:64: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();
                // EsperEPL2Grammar.g:1549:78: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i2) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1549:96: ^( EVENT_PROP_SIMPLE $i2)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i2.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1550:3: -> ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
            {
                // EsperEPL2Grammar.g:1550:6: ^( NUMERIC_PARAM_RANGE ( number )* ( substitution )* )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_RANGE, "NUMERIC_PARAM_RANGE"), root_1);

                // EsperEPL2Grammar.g:1550:28: ( number )*
                while ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1550:36: ( substitution )*
                while ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "rangeOperand"

    public static class lastOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "lastOperator"
    // EsperEPL2Grammar.g:1553:1: lastOperator : ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.lastOperator_return lastOperator() throws RecognitionException {
        EsperEPL2GrammarParser.lastOperator_return retval = new EsperEPL2GrammarParser.lastOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token LAST694=null;
        EsperEPL2GrammarParser.number_return number692 = null;

        EsperEPL2GrammarParser.substitution_return substitution693 = null;


        CommonTree i_tree=null;
        CommonTree LAST694_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_LAST=new RewriteRuleTokenStream(adaptor,"token LAST");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1554:2: ( ( number | i= IDENT | substitution ) LAST -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( LAST_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1554:4: ( number | i= IDENT | substitution ) LAST
            {
            // EsperEPL2Grammar.g:1554:4: ( number | i= IDENT | substitution )
            int alt248=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt248=1;
                }
                break;
            case IDENT:
                {
                alt248=2;
                }
                break;
            case QUESTION:
                {
                alt248=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 248, 0, input);

                throw nvae;
            }

            switch (alt248) {
                case 1 :
                    // EsperEPL2Grammar.g:1554:5: number
                    {
                    pushFollow(FOLLOW_number_in_lastOperator10285);
                    number692=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number692.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1554:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_lastOperator10289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1554:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_lastOperator10291);
                    substitution693=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution693.getTree());

                    }
                    break;

            }

            LAST694=(Token)match(input,LAST,FOLLOW_LAST_in_lastOperator10294); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LAST.add(LAST694);



            // AST REWRITE
            // elements: substitution, number, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1555:3: -> {i!= null}? ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1555:18: ^( LAST_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1555:34: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1555:52: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1556:3: -> ^( LAST_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1556:6: ^( LAST_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(LAST_OPERATOR, "LAST_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1556:22: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1556:30: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "lastOperator"

    public static class weekDayOperator_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "weekDayOperator"
    // EsperEPL2Grammar.g:1559:1: weekDayOperator : ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.weekDayOperator_return weekDayOperator() throws RecognitionException {
        EsperEPL2GrammarParser.weekDayOperator_return retval = new EsperEPL2GrammarParser.weekDayOperator_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token WEEKDAY697=null;
        EsperEPL2GrammarParser.number_return number695 = null;

        EsperEPL2GrammarParser.substitution_return substitution696 = null;


        CommonTree i_tree=null;
        CommonTree WEEKDAY697_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_WEEKDAY=new RewriteRuleTokenStream(adaptor,"token WEEKDAY");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1560:2: ( ( number | i= IDENT | substitution ) WEEKDAY -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1560:4: ( number | i= IDENT | substitution ) WEEKDAY
            {
            // EsperEPL2Grammar.g:1560:4: ( number | i= IDENT | substitution )
            int alt249=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt249=1;
                }
                break;
            case IDENT:
                {
                alt249=2;
                }
                break;
            case QUESTION:
                {
                alt249=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 249, 0, input);

                throw nvae;
            }

            switch (alt249) {
                case 1 :
                    // EsperEPL2Grammar.g:1560:5: number
                    {
                    pushFollow(FOLLOW_number_in_weekDayOperator10342);
                    number695=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number695.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1560:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_weekDayOperator10346); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1560:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_weekDayOperator10348);
                    substitution696=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution696.getTree());

                    }
                    break;

            }

            WEEKDAY697=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_weekDayOperator10351); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_WEEKDAY.add(WEEKDAY697);



            // AST REWRITE
            // elements: substitution, i, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1561:3: -> {i!= null}? ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1561:18: ^( WEEKDAY_OPERATOR ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1561:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1561:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1562:3: -> ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1562:6: ^( WEEKDAY_OPERATOR ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(WEEKDAY_OPERATOR, "WEEKDAY_OPERATOR"), root_1);

                // EsperEPL2Grammar.g:1562:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1562:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "weekDayOperator"

    public static class numericParameterList_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericParameterList"
    // EsperEPL2Grammar.g:1565:1: numericParameterList : LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) ;
    public final EsperEPL2GrammarParser.numericParameterList_return numericParameterList() throws RecognitionException {
        EsperEPL2GrammarParser.numericParameterList_return retval = new EsperEPL2GrammarParser.numericParameterList_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token LBRACK698=null;
        Token COMMA700=null;
        Token RBRACK702=null;
        EsperEPL2GrammarParser.numericListParameter_return numericListParameter699 = null;

        EsperEPL2GrammarParser.numericListParameter_return numericListParameter701 = null;


        CommonTree LBRACK698_tree=null;
        CommonTree COMMA700_tree=null;
        CommonTree RBRACK702_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_COMMA=new RewriteRuleTokenStream(adaptor,"token COMMA");
        RewriteRuleSubtreeStream stream_numericListParameter=new RewriteRuleSubtreeStream(adaptor,"rule numericListParameter");
        try {
            // EsperEPL2Grammar.g:1566:2: ( LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ ) )
            // EsperEPL2Grammar.g:1566:4: LBRACK numericListParameter ( COMMA numericListParameter )* RBRACK
            {
            LBRACK698=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_numericParameterList10398); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_LBRACK.add(LBRACK698);

            pushFollow(FOLLOW_numericListParameter_in_numericParameterList10400);
            numericListParameter699=numericListParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter699.getTree());
            // EsperEPL2Grammar.g:1566:32: ( COMMA numericListParameter )*
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==COMMA) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1566:33: COMMA numericListParameter
            	    {
            	    COMMA700=(Token)match(input,COMMA,FOLLOW_COMMA_in_numericParameterList10403); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_COMMA.add(COMMA700);

            	    pushFollow(FOLLOW_numericListParameter_in_numericParameterList10405);
            	    numericListParameter701=numericListParameter();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_numericListParameter.add(numericListParameter701.getTree());

            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);

            RBRACK702=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_numericParameterList10409); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK702);



            // AST REWRITE
            // elements: numericListParameter
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1567:3: -> ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
            {
                // EsperEPL2Grammar.g:1567:6: ^( NUMERIC_PARAM_LIST ( numericListParameter )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NUMERIC_PARAM_LIST, "NUMERIC_PARAM_LIST"), root_1);

                if ( !(stream_numericListParameter.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_numericListParameter.hasNext() ) {
                    adaptor.addChild(root_1, stream_numericListParameter.nextTree());

                }
                stream_numericListParameter.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericParameterList"

    public static class numericListParameter_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numericListParameter"
    // EsperEPL2Grammar.g:1570:1: numericListParameter : ( rangeOperand | frequencyOperand | numberconstant );
    public final EsperEPL2GrammarParser.numericListParameter_return numericListParameter() throws RecognitionException {
        EsperEPL2GrammarParser.numericListParameter_return retval = new EsperEPL2GrammarParser.numericListParameter_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.rangeOperand_return rangeOperand703 = null;

        EsperEPL2GrammarParser.frequencyOperand_return frequencyOperand704 = null;

        EsperEPL2GrammarParser.numberconstant_return numberconstant705 = null;



        try {
            // EsperEPL2Grammar.g:1571:2: ( rangeOperand | frequencyOperand | numberconstant )
            int alt251=3;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                int LA251_1 = input.LA(2);

                if ( (LA251_1==COLON) ) {
                    alt251=1;
                }
                else if ( (LA251_1==COMMA||LA251_1==RBRACK) ) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 1, input);

                    throw nvae;
                }
                }
                break;
            case NUM_LONG:
                {
                int LA251_2 = input.LA(2);

                if ( (LA251_2==COLON) ) {
                    alt251=1;
                }
                else if ( (LA251_2==COMMA||LA251_2==RBRACK) ) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 2, input);

                    throw nvae;
                }
                }
                break;
            case NUM_FLOAT:
                {
                int LA251_3 = input.LA(2);

                if ( (LA251_3==COLON) ) {
                    alt251=1;
                }
                else if ( (LA251_3==COMMA||LA251_3==RBRACK) ) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 3, input);

                    throw nvae;
                }
                }
                break;
            case NUM_DOUBLE:
                {
                int LA251_4 = input.LA(2);

                if ( (LA251_4==COLON) ) {
                    alt251=1;
                }
                else if ( (LA251_4==COMMA||LA251_4==RBRACK) ) {
                    alt251=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 251, 4, input);

                    throw nvae;
                }
                }
                break;
            case IDENT:
            case QUESTION:
                {
                alt251=1;
                }
                break;
            case STAR:
                {
                alt251=2;
                }
                break;
            case PLUS:
            case MINUS:
                {
                alt251=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 251, 0, input);

                throw nvae;
            }

            switch (alt251) {
                case 1 :
                    // EsperEPL2Grammar.g:1571:4: rangeOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_rangeOperand_in_numericListParameter10431);
                    rangeOperand703=rangeOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, rangeOperand703.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1572:5: frequencyOperand
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_frequencyOperand_in_numericListParameter10437);
                    frequencyOperand704=frequencyOperand();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, frequencyOperand704.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1573:4: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_numericListParameter10442);
                    numberconstant705=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant705.getTree());

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numericListParameter"

    public static class eventProperty_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventProperty"
    // EsperEPL2Grammar.g:1576:1: eventProperty : eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) ;
    public final EsperEPL2GrammarParser.eventProperty_return eventProperty() throws RecognitionException {
        EsperEPL2GrammarParser.eventProperty_return retval = new EsperEPL2GrammarParser.eventProperty_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token DOT707=null;
        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic706 = null;

        EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic708 = null;


        CommonTree DOT707_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleSubtreeStream stream_eventPropertyAtomic=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyAtomic");
        try {
            // EsperEPL2Grammar.g:1577:2: ( eventPropertyAtomic ( DOT eventPropertyAtomic )* -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ ) )
            // EsperEPL2Grammar.g:1577:4: eventPropertyAtomic ( DOT eventPropertyAtomic )*
            {
            pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10458);
            eventPropertyAtomic706=eventPropertyAtomic();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic706.getTree());
            // EsperEPL2Grammar.g:1577:24: ( DOT eventPropertyAtomic )*
            loop252:
            do {
                int alt252=2;
                int LA252_0 = input.LA(1);

                if ( (LA252_0==DOT) ) {
                    alt252=1;
                }


                switch (alt252) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1577:25: DOT eventPropertyAtomic
            	    {
            	    DOT707=(Token)match(input,DOT,FOLLOW_DOT_in_eventProperty10461); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT707);

            	    pushFollow(FOLLOW_eventPropertyAtomic_in_eventProperty10463);
            	    eventPropertyAtomic708=eventPropertyAtomic();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) stream_eventPropertyAtomic.add(eventPropertyAtomic708.getTree());

            	    }
            	    break;

            	default :
            	    break loop252;
                }
            } while (true);



            // AST REWRITE
            // elements: eventPropertyAtomic
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1578:3: -> ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
            {
                // EsperEPL2Grammar.g:1578:6: ^( EVENT_PROP_EXPR ( eventPropertyAtomic )+ )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_1);

                if ( !(stream_eventPropertyAtomic.hasNext()) ) {
                    throw new RewriteEarlyExitException();
                }
                while ( stream_eventPropertyAtomic.hasNext() ) {
                    adaptor.addChild(root_1, stream_eventPropertyAtomic.nextTree());

                }
                stream_eventPropertyAtomic.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventProperty"

    public static class eventPropertyAtomic_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyAtomic"
    // EsperEPL2Grammar.g:1581:1: eventPropertyAtomic : eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) ;
    public final EsperEPL2GrammarParser.eventPropertyAtomic_return eventPropertyAtomic() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyAtomic_return retval = new EsperEPL2GrammarParser.eventPropertyAtomic_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token lb=null;
        Token ni=null;
        Token q=null;
        Token lp=null;
        Token s=null;
        Token q1=null;
        Token RBRACK710=null;
        Token RPAREN711=null;
        EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent709 = null;


        CommonTree lb_tree=null;
        CommonTree ni_tree=null;
        CommonTree q_tree=null;
        CommonTree lp_tree=null;
        CommonTree s_tree=null;
        CommonTree q1_tree=null;
        CommonTree RBRACK710_tree=null;
        CommonTree RPAREN711_tree=null;
        RewriteRuleTokenStream stream_RBRACK=new RewriteRuleTokenStream(adaptor,"token RBRACK");
        RewriteRuleTokenStream stream_RPAREN=new RewriteRuleTokenStream(adaptor,"token RPAREN");
        RewriteRuleTokenStream stream_LBRACK=new RewriteRuleTokenStream(adaptor,"token LBRACK");
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");
        RewriteRuleTokenStream stream_LPAREN=new RewriteRuleTokenStream(adaptor,"token LPAREN");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");
        RewriteRuleSubtreeStream stream_eventPropertyIdent=new RewriteRuleSubtreeStream(adaptor,"rule eventPropertyIdent");
        try {
            // EsperEPL2Grammar.g:1582:2: ( eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )? -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni) -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni) -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s) -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s) -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent ) -> ^( EVENT_PROP_SIMPLE eventPropertyIdent ) )
            // EsperEPL2Grammar.g:1582:4: eventPropertyIdent (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            {
            pushFollow(FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10489);
            eventPropertyIdent709=eventPropertyIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_eventPropertyIdent.add(eventPropertyIdent709.getTree());
            // EsperEPL2Grammar.g:1582:23: (lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )? | lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )? | q1= QUESTION )?
            int alt256=4;
            switch ( input.LA(1) ) {
                case LBRACK:
                    {
                    alt256=1;
                    }
                    break;
                case LPAREN:
                    {
                    alt256=2;
                    }
                    break;
                case QUESTION:
                    {
                    alt256=3;
                    }
                    break;
            }

            switch (alt256) {
                case 1 :
                    // EsperEPL2Grammar.g:1583:4: lb= LBRACK ni= NUM_INT RBRACK (q= QUESTION )?
                    {
                    lb=(Token)match(input,LBRACK,FOLLOW_LBRACK_in_eventPropertyAtomic10498); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LBRACK.add(lb);

                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_eventPropertyAtomic10502); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);

                    RBRACK710=(Token)match(input,RBRACK,FOLLOW_RBRACK_in_eventPropertyAtomic10504); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RBRACK.add(RBRACK710);

                    // EsperEPL2Grammar.g:1583:32: (q= QUESTION )?
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==QUESTION) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            // EsperEPL2Grammar.g:1583:33: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10509); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1585:4: lp= LPAREN (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL ) RPAREN (q= QUESTION )?
                    {
                    lp=(Token)match(input,LPAREN,FOLLOW_LPAREN_in_eventPropertyAtomic10523); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_LPAREN.add(lp);

                    // EsperEPL2Grammar.g:1585:14: (s= STRING_LITERAL | s= QUOTED_STRING_LITERAL )
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==STRING_LITERAL) ) {
                        alt254=1;
                    }
                    else if ( (LA254_0==QUOTED_STRING_LITERAL) ) {
                        alt254=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 254, 0, input);

                        throw nvae;
                    }
                    switch (alt254) {
                        case 1 :
                            // EsperEPL2Grammar.g:1585:15: s= STRING_LITERAL
                            {
                            s=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10528); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_STRING_LITERAL.add(s);


                            }
                            break;
                        case 2 :
                            // EsperEPL2Grammar.g:1585:34: s= QUOTED_STRING_LITERAL
                            {
                            s=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10534); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(s);


                            }
                            break;

                    }

                    RPAREN711=(Token)match(input,RPAREN,FOLLOW_RPAREN_in_eventPropertyAtomic10537); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_RPAREN.add(RPAREN711);

                    // EsperEPL2Grammar.g:1585:66: (q= QUESTION )?
                    int alt255=2;
                    int LA255_0 = input.LA(1);

                    if ( (LA255_0==QUESTION) ) {
                        alt255=1;
                    }
                    switch (alt255) {
                        case 1 :
                            // EsperEPL2Grammar.g:1585:67: q= QUESTION
                            {
                            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10542); if (state.failed) return retval; 
                            if ( state.backtracking==0 ) stream_QUESTION.add(q);


                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1587:4: q1= QUESTION
                    {
                    q1=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_eventPropertyAtomic10556); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUESTION.add(q1);


                    }
                    break;

            }



            // AST REWRITE
            // elements: eventPropertyIdent, ni, eventPropertyIdent, s, eventPropertyIdent, eventPropertyIdent, eventPropertyIdent, s, eventPropertyIdent, ni
            // token labels: s, ni
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_s=new RewriteRuleTokenStream(adaptor,"token s",s);
            RewriteRuleTokenStream stream_ni=new RewriteRuleTokenStream(adaptor,"token ni",ni);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1590:3: -> {lb!= null && $q == null}? ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q == null) {
                // EsperEPL2Grammar.g:1590:33: ^( EVENT_PROP_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_INDEXED, "EVENT_PROP_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1591:3: -> {lb!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
            if (lb!= null && q != null) {
                // EsperEPL2Grammar.g:1591:33: ^( EVENT_PROP_DYNAMIC_INDEXED eventPropertyIdent $ni)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_INDEXED, "EVENT_PROP_DYNAMIC_INDEXED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_ni.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1592:3: -> {lp!= null && $q == null}? ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
            if (lp!= null && q == null) {
                // EsperEPL2Grammar.g:1592:33: ^( EVENT_PROP_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_MAPPED, "EVENT_PROP_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1593:3: -> {lp!= null && $q != null}? ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
            if (lp!= null && q != null) {
                // EsperEPL2Grammar.g:1593:33: ^( EVENT_PROP_DYNAMIC_MAPPED eventPropertyIdent $s)
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_MAPPED, "EVENT_PROP_DYNAMIC_MAPPED"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());
                adaptor.addChild(root_1, stream_s.nextNode());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1594:3: -> {q1 != null}? ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
            if (q1 != null) {
                // EsperEPL2Grammar.g:1594:27: ^( EVENT_PROP_DYNAMIC_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_DYNAMIC_SIMPLE, "EVENT_PROP_DYNAMIC_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1595:3: -> ^( EVENT_PROP_SIMPLE eventPropertyIdent )
            {
                // EsperEPL2Grammar.g:1595:6: ^( EVENT_PROP_SIMPLE eventPropertyIdent )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_1);

                adaptor.addChild(root_1, stream_eventPropertyIdent.nextTree());

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyAtomic"

    public static class eventPropertyIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "eventPropertyIdent"
    // EsperEPL2Grammar.g:1598:1: eventPropertyIdent : ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) ;
    public final EsperEPL2GrammarParser.eventPropertyIdent_return eventPropertyIdent() throws RecognitionException {
        EsperEPL2GrammarParser.eventPropertyIdent_return retval = new EsperEPL2GrammarParser.eventPropertyIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ESCAPECHAR712=null;
        Token DOT713=null;
        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi = null;

        EsperEPL2GrammarParser.keywordAllowedIdent_return ipi2 = null;


        CommonTree ESCAPECHAR712_tree=null;
        CommonTree DOT713_tree=null;
        RewriteRuleTokenStream stream_DOT=new RewriteRuleTokenStream(adaptor,"token DOT");
        RewriteRuleTokenStream stream_ESCAPECHAR=new RewriteRuleTokenStream(adaptor,"token ESCAPECHAR");
        RewriteRuleSubtreeStream stream_keywordAllowedIdent=new RewriteRuleSubtreeStream(adaptor,"rule keywordAllowedIdent");
         String identifier = ""; 
        try {
            // EsperEPL2Grammar.g:1600:2: (ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )* -> ^( IDENT[identifier] ) )
            // EsperEPL2Grammar.g:1600:4: ipi= keywordAllowedIdent ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            {
            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10679);
            ipi=keywordAllowedIdent();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi.getTree());
            if ( state.backtracking==0 ) {
               identifier = ipi.result; 
            }
            // EsperEPL2Grammar.g:1601:3: ( ESCAPECHAR DOT (ipi2= keywordAllowedIdent )? )*
            loop258:
            do {
                int alt258=2;
                int LA258_0 = input.LA(1);

                if ( (LA258_0==ESCAPECHAR) ) {
                    alt258=1;
                }


                switch (alt258) {
            	case 1 :
            	    // EsperEPL2Grammar.g:1602:5: ESCAPECHAR DOT (ipi2= keywordAllowedIdent )?
            	    {
            	    ESCAPECHAR712=(Token)match(input,ESCAPECHAR,FOLLOW_ESCAPECHAR_in_eventPropertyIdent10691); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_ESCAPECHAR.add(ESCAPECHAR712);

            	    DOT713=(Token)match(input,DOT,FOLLOW_DOT_in_eventPropertyIdent10693); if (state.failed) return retval; 
            	    if ( state.backtracking==0 ) stream_DOT.add(DOT713);

            	    // EsperEPL2Grammar.g:1602:24: (ipi2= keywordAllowedIdent )?
            	    int alt257=2;
            	    switch ( input.LA(1) ) {
            	        case WINDOW:
            	        case EVERY_EXPR:
            	        case SUM:
            	        case AVG:
            	        case MAX:
            	        case MIN:
            	        case COALESCE:
            	        case MEDIAN:
            	        case STDDEV:
            	        case AVEDEV:
            	        case COUNT:
            	        case OUTER:
            	        case EVENTS:
            	        case FIRST:
            	        case LAST:
            	        case UNIDIRECTIONAL:
            	        case RETAINUNION:
            	        case RETAININTERSECTION:
            	        case SQL:
            	        case METADATASQL:
            	        case PREVIOUS:
            	        case PREVIOUSTAIL:
            	        case PRIOR:
            	        case WEEKDAY:
            	        case LW:
            	        case INSTANCEOF:
            	        case CAST:
            	        case SNAPSHOT:
            	        case VARIABLE:
            	        case UNTIL:
            	        case AT:
            	        case INDEX:
            	        case DEFINE:
            	        case PARTITION:
            	        case MATCHES:
            	        case WHILE:
            	        case IDENT:
            	        case TICKED_STRING_LITERAL:
            	            {
            	            alt257=1;
            	            }
            	            break;
            	        case ESCAPE:
            	            {
            	            int LA257_5 = input.LA(2);

            	            if ( (LA257_5==EOF||(LA257_5>=IN_SET && LA257_5<=NOT_EXPR)||(LA257_5>=WHERE && LA257_5<=AS)||(LA257_5>=ELSE && LA257_5<=FROM)||(LA257_5>=INNER && LA257_5<=FULL)||LA257_5==IS||(LA257_5>=GROUP && LA257_5<=HAVING)||LA257_5==ALL||LA257_5==OUTPUT||LA257_5==INSERT||(LA257_5>=ORDER && LA257_5<=DESC)||LA257_5==PATTERN||(LA257_5>=TIMEPERIOD_SEC && LA257_5<=TIMEPERIOD_SECONDS)||LA257_5==ROW_LIMIT_EXPR||(LA257_5>=MATCH_RECOGNIZE && LA257_5<=MEASURES)||(LA257_5>=AFTER && LA257_5<=FOR)||LA257_5==COMMA||(LA257_5>=EQUALS && LA257_5<=COLON)||(LA257_5>=BAND && LA257_5<=MOD)||LA257_5==RCURLY||LA257_5==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case PATTERN:
            	            {
            	            int LA257_23 = input.LA(2);

            	            if ( (LA257_23==LPAREN) ) {
            	                int LA257_171 = input.LA(3);

            	                if ( ((LA257_171>=STRING_LITERAL && LA257_171<=QUOTED_STRING_LITERAL)) ) {
            	                    alt257=1;
            	                }
            	            }
            	            else if ( (LA257_23==EOF||(LA257_23>=IN_SET && LA257_23<=NOT_EXPR)||(LA257_23>=WHERE && LA257_23<=AS)||(LA257_23>=ELSE && LA257_23<=FROM)||(LA257_23>=INNER && LA257_23<=FULL)||LA257_23==IS||(LA257_23>=GROUP && LA257_23<=HAVING)||LA257_23==ALL||LA257_23==OUTPUT||LA257_23==INSERT||(LA257_23>=ORDER && LA257_23<=DESC)||LA257_23==PATTERN||(LA257_23>=TIMEPERIOD_SEC && LA257_23<=TIMEPERIOD_SECONDS)||LA257_23==ROW_LIMIT_EXPR||(LA257_23>=MATCH_RECOGNIZE && LA257_23<=MEASURES)||(LA257_23>=AFTER && LA257_23<=FOR)||LA257_23==COMMA||(LA257_23>=EQUALS && LA257_23<=DOT)||(LA257_23>=RPAREN && LA257_23<=COLON)||(LA257_23>=BAND && LA257_23<=MOD)||LA257_23==RCURLY||LA257_23==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case LEFT:
            	            {
            	            int LA257_37 = input.LA(2);

            	            if ( (LA257_37==EOF||(LA257_37>=IN_SET && LA257_37<=NOT_EXPR)||(LA257_37>=WHERE && LA257_37<=AS)||(LA257_37>=ELSE && LA257_37<=FROM)||(LA257_37>=INNER && LA257_37<=FULL)||LA257_37==IS||(LA257_37>=GROUP && LA257_37<=HAVING)||LA257_37==ALL||LA257_37==OUTPUT||LA257_37==INSERT||(LA257_37>=ORDER && LA257_37<=DESC)||LA257_37==PATTERN||(LA257_37>=TIMEPERIOD_SEC && LA257_37<=TIMEPERIOD_SECONDS)||LA257_37==ROW_LIMIT_EXPR||(LA257_37>=MATCH_RECOGNIZE && LA257_37<=MEASURES)||(LA257_37>=AFTER && LA257_37<=FOR)||LA257_37==COMMA||(LA257_37>=EQUALS && LA257_37<=COLON)||(LA257_37>=BAND && LA257_37<=MOD)||LA257_37==RCURLY||LA257_37==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case RIGHT:
            	            {
            	            int LA257_38 = input.LA(2);

            	            if ( (LA257_38==EOF||(LA257_38>=IN_SET && LA257_38<=NOT_EXPR)||(LA257_38>=WHERE && LA257_38<=AS)||(LA257_38>=ELSE && LA257_38<=FROM)||(LA257_38>=INNER && LA257_38<=FULL)||LA257_38==IS||(LA257_38>=GROUP && LA257_38<=HAVING)||LA257_38==ALL||LA257_38==OUTPUT||LA257_38==INSERT||(LA257_38>=ORDER && LA257_38<=DESC)||LA257_38==PATTERN||(LA257_38>=TIMEPERIOD_SEC && LA257_38<=TIMEPERIOD_SECONDS)||LA257_38==ROW_LIMIT_EXPR||(LA257_38>=MATCH_RECOGNIZE && LA257_38<=MEASURES)||(LA257_38>=AFTER && LA257_38<=FOR)||LA257_38==COMMA||(LA257_38>=EQUALS && LA257_38<=COLON)||(LA257_38>=BAND && LA257_38<=MOD)||LA257_38==RCURLY||LA257_38==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case FULL:
            	            {
            	            int LA257_40 = input.LA(2);

            	            if ( (LA257_40==EOF||(LA257_40>=IN_SET && LA257_40<=NOT_EXPR)||(LA257_40>=WHERE && LA257_40<=AS)||(LA257_40>=ELSE && LA257_40<=FROM)||(LA257_40>=INNER && LA257_40<=FULL)||LA257_40==IS||(LA257_40>=GROUP && LA257_40<=HAVING)||LA257_40==ALL||LA257_40==OUTPUT||LA257_40==INSERT||(LA257_40>=ORDER && LA257_40<=DESC)||LA257_40==PATTERN||(LA257_40>=TIMEPERIOD_SEC && LA257_40<=TIMEPERIOD_SECONDS)||LA257_40==ROW_LIMIT_EXPR||(LA257_40>=MATCH_RECOGNIZE && LA257_40<=MEASURES)||(LA257_40>=AFTER && LA257_40<=FOR)||LA257_40==COMMA||(LA257_40>=EQUALS && LA257_40<=COLON)||(LA257_40>=BAND && LA257_40<=MOD)||LA257_40==RCURLY||LA257_40==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            }
            	            break;
            	        case JOIN:
            	            {
            	            int LA257_41 = input.LA(2);

            	            if ( (LA257_41==EOF||(LA257_41>=IN_SET && LA257_41<=NOT_EXPR)||(LA257_41>=WHERE && LA257_41<=AS)||(LA257_41>=ELSE && LA257_41<=FROM)||(LA257_41>=INNER && LA257_41<=FULL)||LA257_41==IS||(LA257_41>=GROUP && LA257_41<=HAVING)||LA257_41==ALL||LA257_41==OUTPUT||LA257_41==INSERT||(LA257_41>=ORDER && LA257_41<=DESC)||(LA257_41>=TIMEPERIOD_SEC && LA257_41<=TIMEPERIOD_SECONDS)||LA257_41==ROW_LIMIT_EXPR||(LA257_41>=MATCH_RECOGNIZE && LA257_41<=MEASURES)||(LA257_41>=AFTER && LA257_41<=FOR)||LA257_41==COMMA||(LA257_41>=EQUALS && LA257_41<=COLON)||(LA257_41>=BAND && LA257_41<=MOD)||LA257_41==RCURLY||LA257_41==ESCAPECHAR) ) {
            	                alt257=1;
            	            }
            	            else if ( (LA257_41==PATTERN) ) {
            	                int LA257_479 = input.LA(3);

            	                if ( (LA257_479==LPAREN) ) {
            	                    alt257=1;
            	                }
            	            }
            	            }
            	            break;
            	    }

            	    switch (alt257) {
            	        case 1 :
            	            // EsperEPL2Grammar.g:1602:24: ipi2= keywordAllowedIdent
            	            {
            	            pushFollow(FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10697);
            	            ipi2=keywordAllowedIdent();

            	            state._fsp--;
            	            if (state.failed) return retval;
            	            if ( state.backtracking==0 ) stream_keywordAllowedIdent.add(ipi2.getTree());

            	            }
            	            break;

            	    }

            	    if ( state.backtracking==0 ) {
            	       identifier += "."; if (ipi2 != null) identifier += ipi2.result; 
            	    }

            	    }
            	    break;

            	default :
            	    break loop258;
                }
            } while (true);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1604:7: -> ^( IDENT[identifier] )
            {
                // EsperEPL2Grammar.g:1604:10: ^( IDENT[identifier] )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(IDENT, identifier), root_1);

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "eventPropertyIdent"

    public static class keywordAllowedIdent_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "keywordAllowedIdent"
    // EsperEPL2Grammar.g:1607:1: keywordAllowedIdent returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | WHILE | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PREVIOUSTAIL | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES );
    public final EsperEPL2GrammarParser.keywordAllowedIdent_return keywordAllowedIdent() throws RecognitionException {
        EsperEPL2GrammarParser.keywordAllowedIdent_return retval = new EsperEPL2GrammarParser.keywordAllowedIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;
        Token AT714=null;
        Token COUNT715=null;
        Token ESCAPE716=null;
        Token EVERY_EXPR717=null;
        Token SUM718=null;
        Token AVG719=null;
        Token MAX720=null;
        Token MIN721=null;
        Token COALESCE722=null;
        Token MEDIAN723=null;
        Token STDDEV724=null;
        Token AVEDEV725=null;
        Token EVENTS726=null;
        Token FIRST727=null;
        Token LAST728=null;
        Token WHILE729=null;
        Token UNIDIRECTIONAL730=null;
        Token RETAINUNION731=null;
        Token RETAININTERSECTION732=null;
        Token UNTIL733=null;
        Token PATTERN734=null;
        Token SQL735=null;
        Token METADATASQL736=null;
        Token PREVIOUS737=null;
        Token PREVIOUSTAIL738=null;
        Token PRIOR739=null;
        Token WEEKDAY740=null;
        Token LW741=null;
        Token INSTANCEOF742=null;
        Token CAST743=null;
        Token SNAPSHOT744=null;
        Token VARIABLE745=null;
        Token INDEX746=null;
        Token WINDOW747=null;
        Token LEFT748=null;
        Token RIGHT749=null;
        Token OUTER750=null;
        Token FULL751=null;
        Token JOIN752=null;
        Token DEFINE753=null;
        Token PARTITION754=null;
        Token MATCHES755=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;
        CommonTree AT714_tree=null;
        CommonTree COUNT715_tree=null;
        CommonTree ESCAPE716_tree=null;
        CommonTree EVERY_EXPR717_tree=null;
        CommonTree SUM718_tree=null;
        CommonTree AVG719_tree=null;
        CommonTree MAX720_tree=null;
        CommonTree MIN721_tree=null;
        CommonTree COALESCE722_tree=null;
        CommonTree MEDIAN723_tree=null;
        CommonTree STDDEV724_tree=null;
        CommonTree AVEDEV725_tree=null;
        CommonTree EVENTS726_tree=null;
        CommonTree FIRST727_tree=null;
        CommonTree LAST728_tree=null;
        CommonTree WHILE729_tree=null;
        CommonTree UNIDIRECTIONAL730_tree=null;
        CommonTree RETAINUNION731_tree=null;
        CommonTree RETAININTERSECTION732_tree=null;
        CommonTree UNTIL733_tree=null;
        CommonTree PATTERN734_tree=null;
        CommonTree SQL735_tree=null;
        CommonTree METADATASQL736_tree=null;
        CommonTree PREVIOUS737_tree=null;
        CommonTree PREVIOUSTAIL738_tree=null;
        CommonTree PRIOR739_tree=null;
        CommonTree WEEKDAY740_tree=null;
        CommonTree LW741_tree=null;
        CommonTree INSTANCEOF742_tree=null;
        CommonTree CAST743_tree=null;
        CommonTree SNAPSHOT744_tree=null;
        CommonTree VARIABLE745_tree=null;
        CommonTree INDEX746_tree=null;
        CommonTree WINDOW747_tree=null;
        CommonTree LEFT748_tree=null;
        CommonTree RIGHT749_tree=null;
        CommonTree OUTER750_tree=null;
        CommonTree FULL751_tree=null;
        CommonTree JOIN752_tree=null;
        CommonTree DEFINE753_tree=null;
        CommonTree PARTITION754_tree=null;
        CommonTree MATCHES755_tree=null;

        try {
            // EsperEPL2Grammar.g:1608:2: (i1= IDENT | i2= TICKED_STRING_LITERAL | AT | COUNT | ESCAPE | EVERY_EXPR | SUM | AVG | MAX | MIN | COALESCE | MEDIAN | STDDEV | AVEDEV | EVENTS | FIRST | LAST | WHILE | UNIDIRECTIONAL | RETAINUNION | RETAININTERSECTION | UNTIL | PATTERN | SQL | METADATASQL | PREVIOUS | PREVIOUSTAIL | PRIOR | WEEKDAY | LW | INSTANCEOF | CAST | SNAPSHOT | VARIABLE | INDEX | WINDOW | LEFT | RIGHT | OUTER | FULL | JOIN | DEFINE | PARTITION | MATCHES )
            int alt259=44;
            switch ( input.LA(1) ) {
            case IDENT:
                {
                alt259=1;
                }
                break;
            case TICKED_STRING_LITERAL:
                {
                alt259=2;
                }
                break;
            case AT:
                {
                alt259=3;
                }
                break;
            case COUNT:
                {
                alt259=4;
                }
                break;
            case ESCAPE:
                {
                alt259=5;
                }
                break;
            case EVERY_EXPR:
                {
                alt259=6;
                }
                break;
            case SUM:
                {
                alt259=7;
                }
                break;
            case AVG:
                {
                alt259=8;
                }
                break;
            case MAX:
                {
                alt259=9;
                }
                break;
            case MIN:
                {
                alt259=10;
                }
                break;
            case COALESCE:
                {
                alt259=11;
                }
                break;
            case MEDIAN:
                {
                alt259=12;
                }
                break;
            case STDDEV:
                {
                alt259=13;
                }
                break;
            case AVEDEV:
                {
                alt259=14;
                }
                break;
            case EVENTS:
                {
                alt259=15;
                }
                break;
            case FIRST:
                {
                alt259=16;
                }
                break;
            case LAST:
                {
                alt259=17;
                }
                break;
            case WHILE:
                {
                alt259=18;
                }
                break;
            case UNIDIRECTIONAL:
                {
                alt259=19;
                }
                break;
            case RETAINUNION:
                {
                alt259=20;
                }
                break;
            case RETAININTERSECTION:
                {
                alt259=21;
                }
                break;
            case UNTIL:
                {
                alt259=22;
                }
                break;
            case PATTERN:
                {
                alt259=23;
                }
                break;
            case SQL:
                {
                alt259=24;
                }
                break;
            case METADATASQL:
                {
                alt259=25;
                }
                break;
            case PREVIOUS:
                {
                alt259=26;
                }
                break;
            case PREVIOUSTAIL:
                {
                alt259=27;
                }
                break;
            case PRIOR:
                {
                alt259=28;
                }
                break;
            case WEEKDAY:
                {
                alt259=29;
                }
                break;
            case LW:
                {
                alt259=30;
                }
                break;
            case INSTANCEOF:
                {
                alt259=31;
                }
                break;
            case CAST:
                {
                alt259=32;
                }
                break;
            case SNAPSHOT:
                {
                alt259=33;
                }
                break;
            case VARIABLE:
                {
                alt259=34;
                }
                break;
            case INDEX:
                {
                alt259=35;
                }
                break;
            case WINDOW:
                {
                alt259=36;
                }
                break;
            case LEFT:
                {
                alt259=37;
                }
                break;
            case RIGHT:
                {
                alt259=38;
                }
                break;
            case OUTER:
                {
                alt259=39;
                }
                break;
            case FULL:
                {
                alt259=40;
                }
                break;
            case JOIN:
                {
                alt259=41;
                }
                break;
            case DEFINE:
                {
                alt259=42;
                }
                break;
            case PARTITION:
                {
                alt259=43;
                }
                break;
            case MATCHES:
                {
                alt259=44;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 259, 0, input);

                throw nvae;
            }

            switch (alt259) {
                case 1 :
                    // EsperEPL2Grammar.g:1608:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_keywordAllowedIdent10736); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1609:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10745); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1610:4: AT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AT714=(Token)match(input,AT,FOLLOW_AT_in_keywordAllowedIdent10752); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AT714_tree = (CommonTree)adaptor.create(AT714);
                    adaptor.addChild(root_0, AT714_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "at"; 
                    }

                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1611:4: COUNT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COUNT715=(Token)match(input,COUNT,FOLLOW_COUNT_in_keywordAllowedIdent10759); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COUNT715_tree = (CommonTree)adaptor.create(COUNT715);
                    adaptor.addChild(root_0, COUNT715_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "count"; 
                    }

                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1612:4: ESCAPE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    ESCAPE716=(Token)match(input,ESCAPE,FOLLOW_ESCAPE_in_keywordAllowedIdent10766); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    ESCAPE716_tree = (CommonTree)adaptor.create(ESCAPE716);
                    adaptor.addChild(root_0, ESCAPE716_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "escape"; 
                    }

                    }
                    break;
                case 6 :
                    // EsperEPL2Grammar.g:1613:8: EVERY_EXPR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVERY_EXPR717=(Token)match(input,EVERY_EXPR,FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10777); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVERY_EXPR717_tree = (CommonTree)adaptor.create(EVERY_EXPR717);
                    adaptor.addChild(root_0, EVERY_EXPR717_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "every"; 
                    }

                    }
                    break;
                case 7 :
                    // EsperEPL2Grammar.g:1614:4: SUM
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SUM718=(Token)match(input,SUM,FOLLOW_SUM_in_keywordAllowedIdent10784); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SUM718_tree = (CommonTree)adaptor.create(SUM718);
                    adaptor.addChild(root_0, SUM718_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sum"; 
                    }

                    }
                    break;
                case 8 :
                    // EsperEPL2Grammar.g:1615:4: AVG
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVG719=(Token)match(input,AVG,FOLLOW_AVG_in_keywordAllowedIdent10791); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVG719_tree = (CommonTree)adaptor.create(AVG719);
                    adaptor.addChild(root_0, AVG719_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avg"; 
                    }

                    }
                    break;
                case 9 :
                    // EsperEPL2Grammar.g:1616:4: MAX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MAX720=(Token)match(input,MAX,FOLLOW_MAX_in_keywordAllowedIdent10798); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MAX720_tree = (CommonTree)adaptor.create(MAX720);
                    adaptor.addChild(root_0, MAX720_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "max"; 
                    }

                    }
                    break;
                case 10 :
                    // EsperEPL2Grammar.g:1617:4: MIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MIN721=(Token)match(input,MIN,FOLLOW_MIN_in_keywordAllowedIdent10805); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MIN721_tree = (CommonTree)adaptor.create(MIN721);
                    adaptor.addChild(root_0, MIN721_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "min"; 
                    }

                    }
                    break;
                case 11 :
                    // EsperEPL2Grammar.g:1618:4: COALESCE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    COALESCE722=(Token)match(input,COALESCE,FOLLOW_COALESCE_in_keywordAllowedIdent10812); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    COALESCE722_tree = (CommonTree)adaptor.create(COALESCE722);
                    adaptor.addChild(root_0, COALESCE722_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "coalesce"; 
                    }

                    }
                    break;
                case 12 :
                    // EsperEPL2Grammar.g:1619:4: MEDIAN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MEDIAN723=(Token)match(input,MEDIAN,FOLLOW_MEDIAN_in_keywordAllowedIdent10819); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MEDIAN723_tree = (CommonTree)adaptor.create(MEDIAN723);
                    adaptor.addChild(root_0, MEDIAN723_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "median"; 
                    }

                    }
                    break;
                case 13 :
                    // EsperEPL2Grammar.g:1620:4: STDDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    STDDEV724=(Token)match(input,STDDEV,FOLLOW_STDDEV_in_keywordAllowedIdent10826); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    STDDEV724_tree = (CommonTree)adaptor.create(STDDEV724);
                    adaptor.addChild(root_0, STDDEV724_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "stddev"; 
                    }

                    }
                    break;
                case 14 :
                    // EsperEPL2Grammar.g:1621:4: AVEDEV
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    AVEDEV725=(Token)match(input,AVEDEV,FOLLOW_AVEDEV_in_keywordAllowedIdent10833); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    AVEDEV725_tree = (CommonTree)adaptor.create(AVEDEV725);
                    adaptor.addChild(root_0, AVEDEV725_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "avedev"; 
                    }

                    }
                    break;
                case 15 :
                    // EsperEPL2Grammar.g:1622:4: EVENTS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    EVENTS726=(Token)match(input,EVENTS,FOLLOW_EVENTS_in_keywordAllowedIdent10840); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    EVENTS726_tree = (CommonTree)adaptor.create(EVENTS726);
                    adaptor.addChild(root_0, EVENTS726_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "events"; 
                    }

                    }
                    break;
                case 16 :
                    // EsperEPL2Grammar.g:1623:4: FIRST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FIRST727=(Token)match(input,FIRST,FOLLOW_FIRST_in_keywordAllowedIdent10847); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FIRST727_tree = (CommonTree)adaptor.create(FIRST727);
                    adaptor.addChild(root_0, FIRST727_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "first"; 
                    }

                    }
                    break;
                case 17 :
                    // EsperEPL2Grammar.g:1624:4: LAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LAST728=(Token)match(input,LAST,FOLLOW_LAST_in_keywordAllowedIdent10854); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LAST728_tree = (CommonTree)adaptor.create(LAST728);
                    adaptor.addChild(root_0, LAST728_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "last"; 
                    }

                    }
                    break;
                case 18 :
                    // EsperEPL2Grammar.g:1625:4: WHILE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WHILE729=(Token)match(input,WHILE,FOLLOW_WHILE_in_keywordAllowedIdent10861); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WHILE729_tree = (CommonTree)adaptor.create(WHILE729);
                    adaptor.addChild(root_0, WHILE729_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "while"; 
                    }

                    }
                    break;
                case 19 :
                    // EsperEPL2Grammar.g:1626:4: UNIDIRECTIONAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNIDIRECTIONAL730=(Token)match(input,UNIDIRECTIONAL,FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10868); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNIDIRECTIONAL730_tree = (CommonTree)adaptor.create(UNIDIRECTIONAL730);
                    adaptor.addChild(root_0, UNIDIRECTIONAL730_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "unidirectional"; 
                    }

                    }
                    break;
                case 20 :
                    // EsperEPL2Grammar.g:1627:4: RETAINUNION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAINUNION731=(Token)match(input,RETAINUNION,FOLLOW_RETAINUNION_in_keywordAllowedIdent10875); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAINUNION731_tree = (CommonTree)adaptor.create(RETAINUNION731);
                    adaptor.addChild(root_0, RETAINUNION731_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-union"; 
                    }

                    }
                    break;
                case 21 :
                    // EsperEPL2Grammar.g:1628:4: RETAININTERSECTION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RETAININTERSECTION732=(Token)match(input,RETAININTERSECTION,FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10882); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RETAININTERSECTION732_tree = (CommonTree)adaptor.create(RETAININTERSECTION732);
                    adaptor.addChild(root_0, RETAININTERSECTION732_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "retain-intersection"; 
                    }

                    }
                    break;
                case 22 :
                    // EsperEPL2Grammar.g:1629:4: UNTIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    UNTIL733=(Token)match(input,UNTIL,FOLLOW_UNTIL_in_keywordAllowedIdent10889); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    UNTIL733_tree = (CommonTree)adaptor.create(UNTIL733);
                    adaptor.addChild(root_0, UNTIL733_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "until"; 
                    }

                    }
                    break;
                case 23 :
                    // EsperEPL2Grammar.g:1630:4: PATTERN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PATTERN734=(Token)match(input,PATTERN,FOLLOW_PATTERN_in_keywordAllowedIdent10896); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PATTERN734_tree = (CommonTree)adaptor.create(PATTERN734);
                    adaptor.addChild(root_0, PATTERN734_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "pattern"; 
                    }

                    }
                    break;
                case 24 :
                    // EsperEPL2Grammar.g:1631:4: SQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SQL735=(Token)match(input,SQL,FOLLOW_SQL_in_keywordAllowedIdent10903); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SQL735_tree = (CommonTree)adaptor.create(SQL735);
                    adaptor.addChild(root_0, SQL735_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "sql"; 
                    }

                    }
                    break;
                case 25 :
                    // EsperEPL2Grammar.g:1632:4: METADATASQL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    METADATASQL736=(Token)match(input,METADATASQL,FOLLOW_METADATASQL_in_keywordAllowedIdent10910); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    METADATASQL736_tree = (CommonTree)adaptor.create(METADATASQL736);
                    adaptor.addChild(root_0, METADATASQL736_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "metadatasql"; 
                    }

                    }
                    break;
                case 26 :
                    // EsperEPL2Grammar.g:1633:4: PREVIOUS
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUS737=(Token)match(input,PREVIOUS,FOLLOW_PREVIOUS_in_keywordAllowedIdent10917); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUS737_tree = (CommonTree)adaptor.create(PREVIOUS737);
                    adaptor.addChild(root_0, PREVIOUS737_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prev"; 
                    }

                    }
                    break;
                case 27 :
                    // EsperEPL2Grammar.g:1634:4: PREVIOUSTAIL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PREVIOUSTAIL738=(Token)match(input,PREVIOUSTAIL,FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent10924); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PREVIOUSTAIL738_tree = (CommonTree)adaptor.create(PREVIOUSTAIL738);
                    adaptor.addChild(root_0, PREVIOUSTAIL738_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prevtail"; 
                    }

                    }
                    break;
                case 28 :
                    // EsperEPL2Grammar.g:1635:4: PRIOR
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PRIOR739=(Token)match(input,PRIOR,FOLLOW_PRIOR_in_keywordAllowedIdent10931); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PRIOR739_tree = (CommonTree)adaptor.create(PRIOR739);
                    adaptor.addChild(root_0, PRIOR739_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "prior"; 
                    }

                    }
                    break;
                case 29 :
                    // EsperEPL2Grammar.g:1636:4: WEEKDAY
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WEEKDAY740=(Token)match(input,WEEKDAY,FOLLOW_WEEKDAY_in_keywordAllowedIdent10938); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WEEKDAY740_tree = (CommonTree)adaptor.create(WEEKDAY740);
                    adaptor.addChild(root_0, WEEKDAY740_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "weekday"; 
                    }

                    }
                    break;
                case 30 :
                    // EsperEPL2Grammar.g:1637:4: LW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LW741=(Token)match(input,LW,FOLLOW_LW_in_keywordAllowedIdent10945); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LW741_tree = (CommonTree)adaptor.create(LW741);
                    adaptor.addChild(root_0, LW741_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "lastweekday"; 
                    }

                    }
                    break;
                case 31 :
                    // EsperEPL2Grammar.g:1638:4: INSTANCEOF
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INSTANCEOF742=(Token)match(input,INSTANCEOF,FOLLOW_INSTANCEOF_in_keywordAllowedIdent10952); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INSTANCEOF742_tree = (CommonTree)adaptor.create(INSTANCEOF742);
                    adaptor.addChild(root_0, INSTANCEOF742_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "instanceof"; 
                    }

                    }
                    break;
                case 32 :
                    // EsperEPL2Grammar.g:1639:4: CAST
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    CAST743=(Token)match(input,CAST,FOLLOW_CAST_in_keywordAllowedIdent10959); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    CAST743_tree = (CommonTree)adaptor.create(CAST743);
                    adaptor.addChild(root_0, CAST743_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "cast"; 
                    }

                    }
                    break;
                case 33 :
                    // EsperEPL2Grammar.g:1640:4: SNAPSHOT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    SNAPSHOT744=(Token)match(input,SNAPSHOT,FOLLOW_SNAPSHOT_in_keywordAllowedIdent10966); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    SNAPSHOT744_tree = (CommonTree)adaptor.create(SNAPSHOT744);
                    adaptor.addChild(root_0, SNAPSHOT744_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "snapshot"; 
                    }

                    }
                    break;
                case 34 :
                    // EsperEPL2Grammar.g:1641:4: VARIABLE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    VARIABLE745=(Token)match(input,VARIABLE,FOLLOW_VARIABLE_in_keywordAllowedIdent10973); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    VARIABLE745_tree = (CommonTree)adaptor.create(VARIABLE745);
                    adaptor.addChild(root_0, VARIABLE745_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "variable"; 
                    }

                    }
                    break;
                case 35 :
                    // EsperEPL2Grammar.g:1642:4: INDEX
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    INDEX746=(Token)match(input,INDEX,FOLLOW_INDEX_in_keywordAllowedIdent10982); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    INDEX746_tree = (CommonTree)adaptor.create(INDEX746);
                    adaptor.addChild(root_0, INDEX746_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "index"; 
                    }

                    }
                    break;
                case 36 :
                    // EsperEPL2Grammar.g:1643:4: WINDOW
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    WINDOW747=(Token)match(input,WINDOW,FOLLOW_WINDOW_in_keywordAllowedIdent10991); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    WINDOW747_tree = (CommonTree)adaptor.create(WINDOW747);
                    adaptor.addChild(root_0, WINDOW747_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "window"; 
                    }

                    }
                    break;
                case 37 :
                    // EsperEPL2Grammar.g:1644:4: LEFT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    LEFT748=(Token)match(input,LEFT,FOLLOW_LEFT_in_keywordAllowedIdent10998); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    LEFT748_tree = (CommonTree)adaptor.create(LEFT748);
                    adaptor.addChild(root_0, LEFT748_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "left"; 
                    }

                    }
                    break;
                case 38 :
                    // EsperEPL2Grammar.g:1645:4: RIGHT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    RIGHT749=(Token)match(input,RIGHT,FOLLOW_RIGHT_in_keywordAllowedIdent11005); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    RIGHT749_tree = (CommonTree)adaptor.create(RIGHT749);
                    adaptor.addChild(root_0, RIGHT749_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "right"; 
                    }

                    }
                    break;
                case 39 :
                    // EsperEPL2Grammar.g:1646:4: OUTER
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    OUTER750=(Token)match(input,OUTER,FOLLOW_OUTER_in_keywordAllowedIdent11012); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    OUTER750_tree = (CommonTree)adaptor.create(OUTER750);
                    adaptor.addChild(root_0, OUTER750_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "outer"; 
                    }

                    }
                    break;
                case 40 :
                    // EsperEPL2Grammar.g:1647:4: FULL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    FULL751=(Token)match(input,FULL,FOLLOW_FULL_in_keywordAllowedIdent11019); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    FULL751_tree = (CommonTree)adaptor.create(FULL751);
                    adaptor.addChild(root_0, FULL751_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "full"; 
                    }

                    }
                    break;
                case 41 :
                    // EsperEPL2Grammar.g:1648:4: JOIN
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    JOIN752=(Token)match(input,JOIN,FOLLOW_JOIN_in_keywordAllowedIdent11026); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    JOIN752_tree = (CommonTree)adaptor.create(JOIN752);
                    adaptor.addChild(root_0, JOIN752_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "join"; 
                    }

                    }
                    break;
                case 42 :
                    // EsperEPL2Grammar.g:1649:4: DEFINE
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    DEFINE753=(Token)match(input,DEFINE,FOLLOW_DEFINE_in_keywordAllowedIdent11033); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    DEFINE753_tree = (CommonTree)adaptor.create(DEFINE753);
                    adaptor.addChild(root_0, DEFINE753_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "define"; 
                    }

                    }
                    break;
                case 43 :
                    // EsperEPL2Grammar.g:1650:4: PARTITION
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    PARTITION754=(Token)match(input,PARTITION,FOLLOW_PARTITION_in_keywordAllowedIdent11040); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    PARTITION754_tree = (CommonTree)adaptor.create(PARTITION754);
                    adaptor.addChild(root_0, PARTITION754_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "partition"; 
                    }

                    }
                    break;
                case 44 :
                    // EsperEPL2Grammar.g:1651:4: MATCHES
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    MATCHES755=(Token)match(input,MATCHES,FOLLOW_MATCHES_in_keywordAllowedIdent11047); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    MATCHES755_tree = (CommonTree)adaptor.create(MATCHES755);
                    adaptor.addChild(root_0, MATCHES755_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = "matches"; 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "keywordAllowedIdent"

    public static class escapableStr_return extends ParserRuleReturnScope {
        public String result;
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableStr"
    // EsperEPL2Grammar.g:1654:1: escapableStr returns [String result] : (i1= IDENT | i2= TICKED_STRING_LITERAL );
    public final EsperEPL2GrammarParser.escapableStr_return escapableStr() throws RecognitionException {
        EsperEPL2GrammarParser.escapableStr_return retval = new EsperEPL2GrammarParser.escapableStr_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i1=null;
        Token i2=null;

        CommonTree i1_tree=null;
        CommonTree i2_tree=null;

        try {
            // EsperEPL2Grammar.g:1655:2: (i1= IDENT | i2= TICKED_STRING_LITERAL )
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( (LA260_0==IDENT) ) {
                alt260=1;
            }
            else if ( (LA260_0==TICKED_STRING_LITERAL) ) {
                alt260=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 260, 0, input);

                throw nvae;
            }
            switch (alt260) {
                case 1 :
                    // EsperEPL2Grammar.g:1655:4: i1= IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i1=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableStr11068); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i1_tree = (CommonTree)adaptor.create(i1);
                    adaptor.addChild(root_0, i1_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = i1.getText(); 
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1656:4: i2= TICKED_STRING_LITERAL
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    i2=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11077); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    i2_tree = (CommonTree)adaptor.create(i2);
                    adaptor.addChild(root_0, i2_tree);
                    }
                    if ( state.backtracking==0 ) {
                       retval.result = removeTicks(i2.getText()); 
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableStr"

    public static class escapableIdent_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "escapableIdent"
    // EsperEPL2Grammar.g:1659:1: escapableIdent : ( IDENT | t= TICKED_STRING_LITERAL -> IDENT[$t] );
    public final EsperEPL2GrammarParser.escapableIdent_return escapableIdent() throws RecognitionException {
        EsperEPL2GrammarParser.escapableIdent_return retval = new EsperEPL2GrammarParser.escapableIdent_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token IDENT756=null;

        CommonTree t_tree=null;
        CommonTree IDENT756_tree=null;
        RewriteRuleTokenStream stream_TICKED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token TICKED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1660:2: ( IDENT | t= TICKED_STRING_LITERAL -> IDENT[$t] )
            int alt261=2;
            int LA261_0 = input.LA(1);

            if ( (LA261_0==IDENT) ) {
                alt261=1;
            }
            else if ( (LA261_0==TICKED_STRING_LITERAL) ) {
                alt261=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 261, 0, input);

                throw nvae;
            }
            switch (alt261) {
                case 1 :
                    // EsperEPL2Grammar.g:1660:4: IDENT
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    IDENT756=(Token)match(input,IDENT,FOLLOW_IDENT_in_escapableIdent11091); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                    IDENT756_tree = (CommonTree)adaptor.create(IDENT756);
                    adaptor.addChild(root_0, IDENT756_tree);
                    }

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1661:4: t= TICKED_STRING_LITERAL
                    {
                    t=(Token)match(input,TICKED_STRING_LITERAL,FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11099); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TICKED_STRING_LITERAL.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1661:28: -> IDENT[$t]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(IDENT, t));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "escapableIdent"

    public static class timePeriod_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "timePeriod"
    // EsperEPL2Grammar.g:1664:1: timePeriod : ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) ;
    public final EsperEPL2GrammarParser.timePeriod_return timePeriod() throws RecognitionException {
        EsperEPL2GrammarParser.timePeriod_return retval = new EsperEPL2GrammarParser.timePeriod_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        EsperEPL2GrammarParser.dayPart_return dayPart757 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart758 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart759 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart760 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart761 = null;

        EsperEPL2GrammarParser.hourPart_return hourPart762 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart763 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart764 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart765 = null;

        EsperEPL2GrammarParser.minutePart_return minutePart766 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart767 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart768 = null;

        EsperEPL2GrammarParser.secondPart_return secondPart769 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart770 = null;

        EsperEPL2GrammarParser.millisecondPart_return millisecondPart771 = null;


        RewriteRuleSubtreeStream stream_secondPart=new RewriteRuleSubtreeStream(adaptor,"rule secondPart");
        RewriteRuleSubtreeStream stream_minutePart=new RewriteRuleSubtreeStream(adaptor,"rule minutePart");
        RewriteRuleSubtreeStream stream_millisecondPart=new RewriteRuleSubtreeStream(adaptor,"rule millisecondPart");
        RewriteRuleSubtreeStream stream_dayPart=new RewriteRuleSubtreeStream(adaptor,"rule dayPart");
        RewriteRuleSubtreeStream stream_hourPart=new RewriteRuleSubtreeStream(adaptor,"rule hourPart");
        try {
            // EsperEPL2Grammar.g:1665:2: ( ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart ) -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? ) )
            // EsperEPL2Grammar.g:1666:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            {
            // EsperEPL2Grammar.g:1666:2: ( dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? | hourPart ( minutePart )? ( secondPart )? ( millisecondPart )? | minutePart ( secondPart )? ( millisecondPart )? | secondPart ( millisecondPart )? | millisecondPart )
            int alt272=5;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 1, input);

                    throw nvae;
                }

                }
                break;
            case NUM_LONG:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 2, input);

                    throw nvae;
                }

                }
                break;
            case NUM_FLOAT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 3, input);

                    throw nvae;
                }

                }
                break;
            case NUM_DOUBLE:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 4, input);

                    throw nvae;
                }

                }
                break;
            case IDENT:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 5, input);

                    throw nvae;
                }

                }
                break;
            case QUESTION:
                {
                switch ( input.LA(2) ) {
                case TIMEPERIOD_DAY:
                case TIMEPERIOD_DAYS:
                    {
                    alt272=1;
                    }
                    break;
                case MIN:
                case TIMEPERIOD_MINUTE:
                case TIMEPERIOD_MINUTES:
                    {
                    alt272=3;
                    }
                    break;
                case TIMEPERIOD_HOUR:
                case TIMEPERIOD_HOURS:
                    {
                    alt272=2;
                    }
                    break;
                case TIMEPERIOD_MILLISEC:
                case TIMEPERIOD_MILLISECOND:
                case TIMEPERIOD_MILLISECONDS:
                    {
                    alt272=5;
                    }
                    break;
                case TIMEPERIOD_SEC:
                case TIMEPERIOD_SECOND:
                case TIMEPERIOD_SECONDS:
                    {
                    alt272=4;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 272, 6, input);

                    throw nvae;
                }

                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 272, 0, input);

                throw nvae;
            }

            switch (alt272) {
                case 1 :
                    // EsperEPL2Grammar.g:1667:3: dayPart ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_dayPart_in_timePeriod11124);
                    dayPart757=dayPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_dayPart.add(dayPart757.getTree());
                    // EsperEPL2Grammar.g:1667:11: ( hourPart )?
                    int alt262=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA262_1 = input.LA(2);

                            if ( ((LA262_1>=TIMEPERIOD_HOUR && LA262_1<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA262_2 = input.LA(2);

                            if ( ((LA262_2>=TIMEPERIOD_HOUR && LA262_2<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA262_3 = input.LA(2);

                            if ( ((LA262_3>=TIMEPERIOD_HOUR && LA262_3<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA262_4 = input.LA(2);

                            if ( ((LA262_4>=TIMEPERIOD_HOUR && LA262_4<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA262_5 = input.LA(2);

                            if ( ((LA262_5>=TIMEPERIOD_HOUR && LA262_5<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA262_6 = input.LA(2);

                            if ( ((LA262_6>=TIMEPERIOD_HOUR && LA262_6<=TIMEPERIOD_HOURS)) ) {
                                alt262=1;
                            }
                            }
                            break;
                    }

                    switch (alt262) {
                        case 1 :
                            // EsperEPL2Grammar.g:1667:11: hourPart
                            {
                            pushFollow(FOLLOW_hourPart_in_timePeriod11126);
                            hourPart758=hourPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_hourPart.add(hourPart758.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1667:21: ( minutePart )?
                    int alt263=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA263_1 = input.LA(2);

                            if ( (LA263_1==MIN||(LA263_1>=TIMEPERIOD_MINUTE && LA263_1<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA263_2 = input.LA(2);

                            if ( (LA263_2==MIN||(LA263_2>=TIMEPERIOD_MINUTE && LA263_2<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA263_3 = input.LA(2);

                            if ( (LA263_3==MIN||(LA263_3>=TIMEPERIOD_MINUTE && LA263_3<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA263_4 = input.LA(2);

                            if ( (LA263_4==MIN||(LA263_4>=TIMEPERIOD_MINUTE && LA263_4<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA263_5 = input.LA(2);

                            if ( (LA263_5==MIN||(LA263_5>=TIMEPERIOD_MINUTE && LA263_5<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA263_6 = input.LA(2);

                            if ( (LA263_6==MIN||(LA263_6>=TIMEPERIOD_MINUTE && LA263_6<=TIMEPERIOD_MINUTES)) ) {
                                alt263=1;
                            }
                            }
                            break;
                    }

                    switch (alt263) {
                        case 1 :
                            // EsperEPL2Grammar.g:1667:21: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11129);
                            minutePart759=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart759.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1667:33: ( secondPart )?
                    int alt264=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA264_1 = input.LA(2);

                            if ( ((LA264_1>=TIMEPERIOD_SEC && LA264_1<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA264_2 = input.LA(2);

                            if ( ((LA264_2>=TIMEPERIOD_SEC && LA264_2<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA264_3 = input.LA(2);

                            if ( ((LA264_3>=TIMEPERIOD_SEC && LA264_3<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA264_4 = input.LA(2);

                            if ( ((LA264_4>=TIMEPERIOD_SEC && LA264_4<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA264_5 = input.LA(2);

                            if ( ((LA264_5>=TIMEPERIOD_SEC && LA264_5<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA264_6 = input.LA(2);

                            if ( ((LA264_6>=TIMEPERIOD_SEC && LA264_6<=TIMEPERIOD_SECONDS)) ) {
                                alt264=1;
                            }
                            }
                            break;
                    }

                    switch (alt264) {
                        case 1 :
                            // EsperEPL2Grammar.g:1667:33: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11132);
                            secondPart760=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart760.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1667:45: ( millisecondPart )?
                    int alt265=2;
                    int LA265_0 = input.LA(1);

                    if ( (LA265_0==NUM_DOUBLE||LA265_0==IDENT||LA265_0==QUESTION||LA265_0==NUM_INT||(LA265_0>=NUM_LONG && LA265_0<=NUM_FLOAT)) ) {
                        alt265=1;
                    }
                    switch (alt265) {
                        case 1 :
                            // EsperEPL2Grammar.g:1667:45: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11135);
                            millisecondPart761=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart761.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1668:4: hourPart ( minutePart )? ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_hourPart_in_timePeriod11141);
                    hourPart762=hourPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_hourPart.add(hourPart762.getTree());
                    // EsperEPL2Grammar.g:1668:13: ( minutePart )?
                    int alt266=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA266_1 = input.LA(2);

                            if ( (LA266_1==MIN||(LA266_1>=TIMEPERIOD_MINUTE && LA266_1<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA266_2 = input.LA(2);

                            if ( (LA266_2==MIN||(LA266_2>=TIMEPERIOD_MINUTE && LA266_2<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA266_3 = input.LA(2);

                            if ( (LA266_3==MIN||(LA266_3>=TIMEPERIOD_MINUTE && LA266_3<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA266_4 = input.LA(2);

                            if ( (LA266_4==MIN||(LA266_4>=TIMEPERIOD_MINUTE && LA266_4<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA266_5 = input.LA(2);

                            if ( (LA266_5==MIN||(LA266_5>=TIMEPERIOD_MINUTE && LA266_5<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA266_6 = input.LA(2);

                            if ( (LA266_6==MIN||(LA266_6>=TIMEPERIOD_MINUTE && LA266_6<=TIMEPERIOD_MINUTES)) ) {
                                alt266=1;
                            }
                            }
                            break;
                    }

                    switch (alt266) {
                        case 1 :
                            // EsperEPL2Grammar.g:1668:13: minutePart
                            {
                            pushFollow(FOLLOW_minutePart_in_timePeriod11143);
                            minutePart763=minutePart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_minutePart.add(minutePart763.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1668:25: ( secondPart )?
                    int alt267=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA267_1 = input.LA(2);

                            if ( ((LA267_1>=TIMEPERIOD_SEC && LA267_1<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA267_2 = input.LA(2);

                            if ( ((LA267_2>=TIMEPERIOD_SEC && LA267_2<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA267_3 = input.LA(2);

                            if ( ((LA267_3>=TIMEPERIOD_SEC && LA267_3<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA267_4 = input.LA(2);

                            if ( ((LA267_4>=TIMEPERIOD_SEC && LA267_4<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA267_5 = input.LA(2);

                            if ( ((LA267_5>=TIMEPERIOD_SEC && LA267_5<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA267_6 = input.LA(2);

                            if ( ((LA267_6>=TIMEPERIOD_SEC && LA267_6<=TIMEPERIOD_SECONDS)) ) {
                                alt267=1;
                            }
                            }
                            break;
                    }

                    switch (alt267) {
                        case 1 :
                            // EsperEPL2Grammar.g:1668:25: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11146);
                            secondPart764=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart764.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1668:37: ( millisecondPart )?
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==NUM_DOUBLE||LA268_0==IDENT||LA268_0==QUESTION||LA268_0==NUM_INT||(LA268_0>=NUM_LONG && LA268_0<=NUM_FLOAT)) ) {
                        alt268=1;
                    }
                    switch (alt268) {
                        case 1 :
                            // EsperEPL2Grammar.g:1668:37: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11149);
                            millisecondPart765=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart765.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1669:4: minutePart ( secondPart )? ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_minutePart_in_timePeriod11155);
                    minutePart766=minutePart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_minutePart.add(minutePart766.getTree());
                    // EsperEPL2Grammar.g:1669:15: ( secondPart )?
                    int alt269=2;
                    switch ( input.LA(1) ) {
                        case NUM_INT:
                            {
                            int LA269_1 = input.LA(2);

                            if ( ((LA269_1>=TIMEPERIOD_SEC && LA269_1<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case NUM_LONG:
                            {
                            int LA269_2 = input.LA(2);

                            if ( ((LA269_2>=TIMEPERIOD_SEC && LA269_2<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case NUM_FLOAT:
                            {
                            int LA269_3 = input.LA(2);

                            if ( ((LA269_3>=TIMEPERIOD_SEC && LA269_3<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case NUM_DOUBLE:
                            {
                            int LA269_4 = input.LA(2);

                            if ( ((LA269_4>=TIMEPERIOD_SEC && LA269_4<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case IDENT:
                            {
                            int LA269_5 = input.LA(2);

                            if ( ((LA269_5>=TIMEPERIOD_SEC && LA269_5<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                        case QUESTION:
                            {
                            int LA269_6 = input.LA(2);

                            if ( ((LA269_6>=TIMEPERIOD_SEC && LA269_6<=TIMEPERIOD_SECONDS)) ) {
                                alt269=1;
                            }
                            }
                            break;
                    }

                    switch (alt269) {
                        case 1 :
                            // EsperEPL2Grammar.g:1669:15: secondPart
                            {
                            pushFollow(FOLLOW_secondPart_in_timePeriod11157);
                            secondPart767=secondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_secondPart.add(secondPart767.getTree());

                            }
                            break;

                    }

                    // EsperEPL2Grammar.g:1669:27: ( millisecondPart )?
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==NUM_DOUBLE||LA270_0==IDENT||LA270_0==QUESTION||LA270_0==NUM_INT||(LA270_0>=NUM_LONG && LA270_0<=NUM_FLOAT)) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            // EsperEPL2Grammar.g:1669:27: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11160);
                            millisecondPart768=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart768.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1670:4: secondPart ( millisecondPart )?
                    {
                    pushFollow(FOLLOW_secondPart_in_timePeriod11166);
                    secondPart769=secondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_secondPart.add(secondPart769.getTree());
                    // EsperEPL2Grammar.g:1670:15: ( millisecondPart )?
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==NUM_DOUBLE||LA271_0==IDENT||LA271_0==QUESTION||LA271_0==NUM_INT||(LA271_0>=NUM_LONG && LA271_0<=NUM_FLOAT)) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            // EsperEPL2Grammar.g:1670:15: millisecondPart
                            {
                            pushFollow(FOLLOW_millisecondPart_in_timePeriod11168);
                            millisecondPart770=millisecondPart();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart770.getTree());

                            }
                            break;

                    }


                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1671:4: millisecondPart
                    {
                    pushFollow(FOLLOW_millisecondPart_in_timePeriod11174);
                    millisecondPart771=millisecondPart();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_millisecondPart.add(millisecondPart771.getTree());

                    }
                    break;

            }



            // AST REWRITE
            // elements: minutePart, millisecondPart, hourPart, secondPart, dayPart
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1673:3: -> ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
            {
                // EsperEPL2Grammar.g:1673:6: ^( TIME_PERIOD ( dayPart )? ( hourPart )? ( minutePart )? ( secondPart )? ( millisecondPart )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(TIME_PERIOD, "TIME_PERIOD"), root_1);

                // EsperEPL2Grammar.g:1673:20: ( dayPart )?
                if ( stream_dayPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_dayPart.nextTree());

                }
                stream_dayPart.reset();
                // EsperEPL2Grammar.g:1673:29: ( hourPart )?
                if ( stream_hourPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_hourPart.nextTree());

                }
                stream_hourPart.reset();
                // EsperEPL2Grammar.g:1673:39: ( minutePart )?
                if ( stream_minutePart.hasNext() ) {
                    adaptor.addChild(root_1, stream_minutePart.nextTree());

                }
                stream_minutePart.reset();
                // EsperEPL2Grammar.g:1673:51: ( secondPart )?
                if ( stream_secondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_secondPart.nextTree());

                }
                stream_secondPart.reset();
                // EsperEPL2Grammar.g:1673:63: ( millisecondPart )?
                if ( stream_millisecondPart.hasNext() ) {
                    adaptor.addChild(root_1, stream_millisecondPart.nextTree());

                }
                stream_millisecondPart.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "timePeriod"

    public static class dayPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "dayPart"
    // EsperEPL2Grammar.g:1676:1: dayPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.dayPart_return dayPart() throws RecognitionException {
        EsperEPL2GrammarParser.dayPart_return retval = new EsperEPL2GrammarParser.dayPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_DAYS774=null;
        Token TIMEPERIOD_DAY775=null;
        EsperEPL2GrammarParser.number_return number772 = null;

        EsperEPL2GrammarParser.substitution_return substitution773 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_DAYS774_tree=null;
        CommonTree TIMEPERIOD_DAY775_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAY=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAY");
        RewriteRuleTokenStream stream_TIMEPERIOD_DAYS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_DAYS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1677:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY ) -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( DAY_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1677:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            {
            // EsperEPL2Grammar.g:1677:4: ( number | i= IDENT | substitution )
            int alt273=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt273=1;
                }
                break;
            case IDENT:
                {
                alt273=2;
                }
                break;
            case QUESTION:
                {
                alt273=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 273, 0, input);

                throw nvae;
            }

            switch (alt273) {
                case 1 :
                    // EsperEPL2Grammar.g:1677:5: number
                    {
                    pushFollow(FOLLOW_number_in_dayPart11212);
                    number772=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number772.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1677:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_dayPart11216); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1677:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_dayPart11218);
                    substitution773=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution773.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1677:34: ( TIMEPERIOD_DAYS | TIMEPERIOD_DAY )
            int alt274=2;
            int LA274_0 = input.LA(1);

            if ( (LA274_0==TIMEPERIOD_DAYS) ) {
                alt274=1;
            }
            else if ( (LA274_0==TIMEPERIOD_DAY) ) {
                alt274=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 274, 0, input);

                throw nvae;
            }
            switch (alt274) {
                case 1 :
                    // EsperEPL2Grammar.g:1677:35: TIMEPERIOD_DAYS
                    {
                    TIMEPERIOD_DAYS774=(Token)match(input,TIMEPERIOD_DAYS,FOLLOW_TIMEPERIOD_DAYS_in_dayPart11222); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAYS.add(TIMEPERIOD_DAYS774);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1677:53: TIMEPERIOD_DAY
                    {
                    TIMEPERIOD_DAY775=(Token)match(input,TIMEPERIOD_DAY,FOLLOW_TIMEPERIOD_DAY_in_dayPart11226); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_DAY.add(TIMEPERIOD_DAY775);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1678:3: -> {i!= null}? ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1678:18: ^( DAY_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1678:29: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1678:47: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1679:3: -> ^( DAY_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1679:6: ^( DAY_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(DAY_PART, "DAY_PART"), root_1);

                // EsperEPL2Grammar.g:1679:17: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1679:25: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "dayPart"

    public static class hourPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "hourPart"
    // EsperEPL2Grammar.g:1682:1: hourPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.hourPart_return hourPart() throws RecognitionException {
        EsperEPL2GrammarParser.hourPart_return retval = new EsperEPL2GrammarParser.hourPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_HOURS778=null;
        Token TIMEPERIOD_HOUR779=null;
        EsperEPL2GrammarParser.number_return number776 = null;

        EsperEPL2GrammarParser.substitution_return substitution777 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_HOURS778_tree=null;
        CommonTree TIMEPERIOD_HOUR779_tree=null;
        RewriteRuleTokenStream stream_TIMEPERIOD_HOURS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOURS");
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_HOUR=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_HOUR");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1683:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR ) -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( HOUR_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1683:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            {
            // EsperEPL2Grammar.g:1683:4: ( number | i= IDENT | substitution )
            int alt275=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt275=1;
                }
                break;
            case IDENT:
                {
                alt275=2;
                }
                break;
            case QUESTION:
                {
                alt275=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 275, 0, input);

                throw nvae;
            }

            switch (alt275) {
                case 1 :
                    // EsperEPL2Grammar.g:1683:5: number
                    {
                    pushFollow(FOLLOW_number_in_hourPart11275);
                    number776=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number776.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1683:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_hourPart11279); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1683:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_hourPart11281);
                    substitution777=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution777.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1683:34: ( TIMEPERIOD_HOURS | TIMEPERIOD_HOUR )
            int alt276=2;
            int LA276_0 = input.LA(1);

            if ( (LA276_0==TIMEPERIOD_HOURS) ) {
                alt276=1;
            }
            else if ( (LA276_0==TIMEPERIOD_HOUR) ) {
                alt276=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 276, 0, input);

                throw nvae;
            }
            switch (alt276) {
                case 1 :
                    // EsperEPL2Grammar.g:1683:35: TIMEPERIOD_HOURS
                    {
                    TIMEPERIOD_HOURS778=(Token)match(input,TIMEPERIOD_HOURS,FOLLOW_TIMEPERIOD_HOURS_in_hourPart11285); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOURS.add(TIMEPERIOD_HOURS778);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1683:54: TIMEPERIOD_HOUR
                    {
                    TIMEPERIOD_HOUR779=(Token)match(input,TIMEPERIOD_HOUR,FOLLOW_TIMEPERIOD_HOUR_in_hourPart11289); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_HOUR.add(TIMEPERIOD_HOUR779);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1684:3: -> {i!= null}? ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1684:18: ^( HOUR_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1684:30: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1684:48: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1685:3: -> ^( HOUR_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1685:6: ^( HOUR_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(HOUR_PART, "HOUR_PART"), root_1);

                // EsperEPL2Grammar.g:1685:18: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1685:26: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "hourPart"

    public static class minutePart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "minutePart"
    // EsperEPL2Grammar.g:1688:1: minutePart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.minutePart_return minutePart() throws RecognitionException {
        EsperEPL2GrammarParser.minutePart_return retval = new EsperEPL2GrammarParser.minutePart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MINUTES782=null;
        Token TIMEPERIOD_MINUTE783=null;
        Token MIN784=null;
        EsperEPL2GrammarParser.number_return number780 = null;

        EsperEPL2GrammarParser.substitution_return substitution781 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MINUTES782_tree=null;
        CommonTree TIMEPERIOD_MINUTE783_tree=null;
        CommonTree MIN784_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTE=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTE");
        RewriteRuleTokenStream stream_MIN=new RewriteRuleTokenStream(adaptor,"token MIN");
        RewriteRuleTokenStream stream_TIMEPERIOD_MINUTES=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MINUTES");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1689:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN ) -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MINUTE_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1689:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            {
            // EsperEPL2Grammar.g:1689:4: ( number | i= IDENT | substitution )
            int alt277=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt277=1;
                }
                break;
            case IDENT:
                {
                alt277=2;
                }
                break;
            case QUESTION:
                {
                alt277=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 277, 0, input);

                throw nvae;
            }

            switch (alt277) {
                case 1 :
                    // EsperEPL2Grammar.g:1689:5: number
                    {
                    pushFollow(FOLLOW_number_in_minutePart11338);
                    number780=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number780.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1689:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_minutePart11342); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1689:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_minutePart11344);
                    substitution781=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution781.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1689:34: ( TIMEPERIOD_MINUTES | TIMEPERIOD_MINUTE | MIN )
            int alt278=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MINUTES:
                {
                alt278=1;
                }
                break;
            case TIMEPERIOD_MINUTE:
                {
                alt278=2;
                }
                break;
            case MIN:
                {
                alt278=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 278, 0, input);

                throw nvae;
            }

            switch (alt278) {
                case 1 :
                    // EsperEPL2Grammar.g:1689:35: TIMEPERIOD_MINUTES
                    {
                    TIMEPERIOD_MINUTES782=(Token)match(input,TIMEPERIOD_MINUTES,FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11348); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTES.add(TIMEPERIOD_MINUTES782);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1689:56: TIMEPERIOD_MINUTE
                    {
                    TIMEPERIOD_MINUTE783=(Token)match(input,TIMEPERIOD_MINUTE,FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11352); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MINUTE.add(TIMEPERIOD_MINUTE783);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1689:76: MIN
                    {
                    MIN784=(Token)match(input,MIN,FOLLOW_MIN_in_minutePart11356); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MIN.add(MIN784);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, substitution, i
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1690:3: -> {i!= null}? ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1690:18: ^( MINUTE_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1690:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1690:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1691:3: -> ^( MINUTE_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1691:6: ^( MINUTE_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MINUTE_PART, "MINUTE_PART"), root_1);

                // EsperEPL2Grammar.g:1691:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1691:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "minutePart"

    public static class secondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "secondPart"
    // EsperEPL2Grammar.g:1694:1: secondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.secondPart_return secondPart() throws RecognitionException {
        EsperEPL2GrammarParser.secondPart_return retval = new EsperEPL2GrammarParser.secondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_SECONDS787=null;
        Token TIMEPERIOD_SECOND788=null;
        Token TIMEPERIOD_SEC789=null;
        EsperEPL2GrammarParser.number_return number785 = null;

        EsperEPL2GrammarParser.substitution_return substitution786 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_SECONDS787_tree=null;
        CommonTree TIMEPERIOD_SECOND788_tree=null;
        CommonTree TIMEPERIOD_SEC789_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_SEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_SECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_SECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1695:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC ) -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( SECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1695:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            {
            // EsperEPL2Grammar.g:1695:4: ( number | i= IDENT | substitution )
            int alt279=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt279=1;
                }
                break;
            case IDENT:
                {
                alt279=2;
                }
                break;
            case QUESTION:
                {
                alt279=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 279, 0, input);

                throw nvae;
            }

            switch (alt279) {
                case 1 :
                    // EsperEPL2Grammar.g:1695:5: number
                    {
                    pushFollow(FOLLOW_number_in_secondPart11406);
                    number785=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number785.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1695:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_secondPart11410); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1695:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_secondPart11412);
                    substitution786=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution786.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1695:34: ( TIMEPERIOD_SECONDS | TIMEPERIOD_SECOND | TIMEPERIOD_SEC )
            int alt280=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_SECONDS:
                {
                alt280=1;
                }
                break;
            case TIMEPERIOD_SECOND:
                {
                alt280=2;
                }
                break;
            case TIMEPERIOD_SEC:
                {
                alt280=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 280, 0, input);

                throw nvae;
            }

            switch (alt280) {
                case 1 :
                    // EsperEPL2Grammar.g:1695:35: TIMEPERIOD_SECONDS
                    {
                    TIMEPERIOD_SECONDS787=(Token)match(input,TIMEPERIOD_SECONDS,FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11416); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECONDS.add(TIMEPERIOD_SECONDS787);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1695:56: TIMEPERIOD_SECOND
                    {
                    TIMEPERIOD_SECOND788=(Token)match(input,TIMEPERIOD_SECOND,FOLLOW_TIMEPERIOD_SECOND_in_secondPart11420); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SECOND.add(TIMEPERIOD_SECOND788);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1695:76: TIMEPERIOD_SEC
                    {
                    TIMEPERIOD_SEC789=(Token)match(input,TIMEPERIOD_SEC,FOLLOW_TIMEPERIOD_SEC_in_secondPart11424); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_SEC.add(TIMEPERIOD_SEC789);


                    }
                    break;

            }



            // AST REWRITE
            // elements: number, i, substitution
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1696:3: -> {i!= null}? ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1696:18: ^( SECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1696:32: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1696:50: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1697:3: -> ^( SECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1697:6: ^( SECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(SECOND_PART, "SECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1697:20: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1697:28: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "secondPart"

    public static class millisecondPart_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "millisecondPart"
    // EsperEPL2Grammar.g:1700:1: millisecondPart : ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) ;
    public final EsperEPL2GrammarParser.millisecondPart_return millisecondPart() throws RecognitionException {
        EsperEPL2GrammarParser.millisecondPart_return retval = new EsperEPL2GrammarParser.millisecondPart_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token i=null;
        Token TIMEPERIOD_MILLISECONDS792=null;
        Token TIMEPERIOD_MILLISECOND793=null;
        Token TIMEPERIOD_MILLISEC794=null;
        EsperEPL2GrammarParser.number_return number790 = null;

        EsperEPL2GrammarParser.substitution_return substitution791 = null;


        CommonTree i_tree=null;
        CommonTree TIMEPERIOD_MILLISECONDS792_tree=null;
        CommonTree TIMEPERIOD_MILLISECOND793_tree=null;
        CommonTree TIMEPERIOD_MILLISEC794_tree=null;
        RewriteRuleTokenStream stream_IDENT=new RewriteRuleTokenStream(adaptor,"token IDENT");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISEC=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISEC");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECOND=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECOND");
        RewriteRuleTokenStream stream_TIMEPERIOD_MILLISECONDS=new RewriteRuleTokenStream(adaptor,"token TIMEPERIOD_MILLISECONDS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        RewriteRuleSubtreeStream stream_substitution=new RewriteRuleSubtreeStream(adaptor,"rule substitution");
        try {
            // EsperEPL2Grammar.g:1701:2: ( ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC ) -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) ) -> ^( MILLISECOND_PART ( number )? ( substitution )? ) )
            // EsperEPL2Grammar.g:1701:4: ( number | i= IDENT | substitution ) ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            {
            // EsperEPL2Grammar.g:1701:4: ( number | i= IDENT | substitution )
            int alt281=3;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt281=1;
                }
                break;
            case IDENT:
                {
                alt281=2;
                }
                break;
            case QUESTION:
                {
                alt281=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 281, 0, input);

                throw nvae;
            }

            switch (alt281) {
                case 1 :
                    // EsperEPL2Grammar.g:1701:5: number
                    {
                    pushFollow(FOLLOW_number_in_millisecondPart11474);
                    number790=number();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_number.add(number790.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1701:12: i= IDENT
                    {
                    i=(Token)match(input,IDENT,FOLLOW_IDENT_in_millisecondPart11478); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_IDENT.add(i);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1701:20: substitution
                    {
                    pushFollow(FOLLOW_substitution_in_millisecondPart11480);
                    substitution791=substitution();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) stream_substitution.add(substitution791.getTree());

                    }
                    break;

            }

            // EsperEPL2Grammar.g:1701:34: ( TIMEPERIOD_MILLISECONDS | TIMEPERIOD_MILLISECOND | TIMEPERIOD_MILLISEC )
            int alt282=3;
            switch ( input.LA(1) ) {
            case TIMEPERIOD_MILLISECONDS:
                {
                alt282=1;
                }
                break;
            case TIMEPERIOD_MILLISECOND:
                {
                alt282=2;
                }
                break;
            case TIMEPERIOD_MILLISEC:
                {
                alt282=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 282, 0, input);

                throw nvae;
            }

            switch (alt282) {
                case 1 :
                    // EsperEPL2Grammar.g:1701:35: TIMEPERIOD_MILLISECONDS
                    {
                    TIMEPERIOD_MILLISECONDS792=(Token)match(input,TIMEPERIOD_MILLISECONDS,FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11484); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECONDS.add(TIMEPERIOD_MILLISECONDS792);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1701:61: TIMEPERIOD_MILLISECOND
                    {
                    TIMEPERIOD_MILLISECOND793=(Token)match(input,TIMEPERIOD_MILLISECOND,FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11488); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISECOND.add(TIMEPERIOD_MILLISECOND793);


                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1701:86: TIMEPERIOD_MILLISEC
                    {
                    TIMEPERIOD_MILLISEC794=(Token)match(input,TIMEPERIOD_MILLISEC,FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11492); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_TIMEPERIOD_MILLISEC.add(TIMEPERIOD_MILLISEC794);


                    }
                    break;

            }



            // AST REWRITE
            // elements: i, substitution, number
            // token labels: i
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleTokenStream stream_i=new RewriteRuleTokenStream(adaptor,"token i",i);
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1702:3: -> {i!= null}? ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
            if (i!= null) {
                // EsperEPL2Grammar.g:1702:18: ^( MILLISECOND_PART ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) ) )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1702:37: ^( EVENT_PROP_EXPR ^( EVENT_PROP_SIMPLE $i) )
                {
                CommonTree root_2 = (CommonTree)adaptor.nil();
                root_2 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_EXPR, "EVENT_PROP_EXPR"), root_2);

                // EsperEPL2Grammar.g:1702:55: ^( EVENT_PROP_SIMPLE $i)
                {
                CommonTree root_3 = (CommonTree)adaptor.nil();
                root_3 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(EVENT_PROP_SIMPLE, "EVENT_PROP_SIMPLE"), root_3);

                adaptor.addChild(root_3, stream_i.nextNode());

                adaptor.addChild(root_2, root_3);
                }

                adaptor.addChild(root_1, root_2);
                }

                adaptor.addChild(root_0, root_1);
                }

            }
            else // 1703:3: -> ^( MILLISECOND_PART ( number )? ( substitution )? )
            {
                // EsperEPL2Grammar.g:1703:6: ^( MILLISECOND_PART ( number )? ( substitution )? )
                {
                CommonTree root_1 = (CommonTree)adaptor.nil();
                root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(MILLISECOND_PART, "MILLISECOND_PART"), root_1);

                // EsperEPL2Grammar.g:1703:25: ( number )?
                if ( stream_number.hasNext() ) {
                    adaptor.addChild(root_1, stream_number.nextTree());

                }
                stream_number.reset();
                // EsperEPL2Grammar.g:1703:33: ( substitution )?
                if ( stream_substitution.hasNext() ) {
                    adaptor.addChild(root_1, stream_substitution.nextTree());

                }
                stream_substitution.reset();

                adaptor.addChild(root_0, root_1);
                }

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "millisecondPart"

    public static class number_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "number"
    // EsperEPL2Grammar.g:1706:1: number : (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] );
    public final EsperEPL2GrammarParser.number_return number() throws RecognitionException {
        EsperEPL2GrammarParser.number_return retval = new EsperEPL2GrammarParser.number_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token ni=null;
        Token nl=null;
        Token nf=null;
        Token nd=null;

        CommonTree ni_tree=null;
        CommonTree nl_tree=null;
        CommonTree nf_tree=null;
        CommonTree nd_tree=null;
        RewriteRuleTokenStream stream_NUM_LONG=new RewriteRuleTokenStream(adaptor,"token NUM_LONG");
        RewriteRuleTokenStream stream_NUM_DOUBLE=new RewriteRuleTokenStream(adaptor,"token NUM_DOUBLE");
        RewriteRuleTokenStream stream_NUM_FLOAT=new RewriteRuleTokenStream(adaptor,"token NUM_FLOAT");
        RewriteRuleTokenStream stream_NUM_INT=new RewriteRuleTokenStream(adaptor,"token NUM_INT");

        try {
            // EsperEPL2Grammar.g:1707:5: (ni= NUM_INT -> INT_TYPE[$ni] | nl= NUM_LONG -> LONG_TYPE[$nl] | nf= NUM_FLOAT -> FLOAT_TYPE[$nf] | nd= NUM_DOUBLE -> DOUBLE_TYPE[$nd] )
            int alt283=4;
            switch ( input.LA(1) ) {
            case NUM_INT:
                {
                alt283=1;
                }
                break;
            case NUM_LONG:
                {
                alt283=2;
                }
                break;
            case NUM_FLOAT:
                {
                alt283=3;
                }
                break;
            case NUM_DOUBLE:
                {
                alt283=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                throw nvae;
            }

            switch (alt283) {
                case 1 :
                    // EsperEPL2Grammar.g:1707:9: ni= NUM_INT
                    {
                    ni=(Token)match(input,NUM_INT,FOLLOW_NUM_INT_in_number11547); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_INT.add(ni);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1707:20: -> INT_TYPE[$ni]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(INT_TYPE, ni));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1708:9: nl= NUM_LONG
                    {
                    nl=(Token)match(input,NUM_LONG,FOLLOW_NUM_LONG_in_number11564); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_LONG.add(nl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1708:21: -> LONG_TYPE[$nl]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(LONG_TYPE, nl));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1709:9: nf= NUM_FLOAT
                    {
                    nf=(Token)match(input,NUM_FLOAT,FOLLOW_NUM_FLOAT_in_number11581); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_FLOAT.add(nf);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1709:22: -> FLOAT_TYPE[$nf]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(FLOAT_TYPE, nf));

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1710:9: nd= NUM_DOUBLE
                    {
                    nd=(Token)match(input,NUM_DOUBLE,FOLLOW_NUM_DOUBLE_in_number11598); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_NUM_DOUBLE.add(nd);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1710:23: -> DOUBLE_TYPE[$nd]
                    {
                        adaptor.addChild(root_0, (CommonTree)adaptor.create(DOUBLE_TYPE, nd));

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "number"

    public static class substitution_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "substitution"
    // EsperEPL2Grammar.g:1713:1: substitution : q= QUESTION -> SUBSTITUTION[$q] ;
    public final EsperEPL2GrammarParser.substitution_return substitution() throws RecognitionException {
        EsperEPL2GrammarParser.substitution_return retval = new EsperEPL2GrammarParser.substitution_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token q=null;

        CommonTree q_tree=null;
        RewriteRuleTokenStream stream_QUESTION=new RewriteRuleTokenStream(adaptor,"token QUESTION");

        try {
            // EsperEPL2Grammar.g:1714:2: (q= QUESTION -> SUBSTITUTION[$q] )
            // EsperEPL2Grammar.g:1714:4: q= QUESTION
            {
            q=(Token)match(input,QUESTION,FOLLOW_QUESTION_in_substitution11619); if (state.failed) return retval; 
            if ( state.backtracking==0 ) stream_QUESTION.add(q);



            // AST REWRITE
            // elements: 
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1714:15: -> SUBSTITUTION[$q]
            {
                adaptor.addChild(root_0, (CommonTree)adaptor.create(SUBSTITUTION, q));

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "substitution"

    public static class constant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "constant"
    // EsperEPL2Grammar.g:1717:1: constant : ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) );
    public final EsperEPL2GrammarParser.constant_return constant() throws RecognitionException {
        EsperEPL2GrammarParser.constant_return retval = new EsperEPL2GrammarParser.constant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token t=null;
        Token f=null;
        Token nu=null;
        EsperEPL2GrammarParser.numberconstant_return numberconstant795 = null;

        EsperEPL2GrammarParser.stringconstant_return stringconstant796 = null;


        CommonTree t_tree=null;
        CommonTree f_tree=null;
        CommonTree nu_tree=null;
        RewriteRuleTokenStream stream_BOOLEAN_TRUE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_TRUE");
        RewriteRuleTokenStream stream_VALUE_NULL=new RewriteRuleTokenStream(adaptor,"token VALUE_NULL");
        RewriteRuleTokenStream stream_BOOLEAN_FALSE=new RewriteRuleTokenStream(adaptor,"token BOOLEAN_FALSE");

        try {
            // EsperEPL2Grammar.g:1718:2: ( numberconstant | stringconstant | t= BOOLEAN_TRUE -> ^( BOOL_TYPE[$t] ) | f= BOOLEAN_FALSE -> ^( BOOL_TYPE[$f] ) | nu= VALUE_NULL -> ^( NULL_TYPE[$nu] ) )
            int alt284=5;
            switch ( input.LA(1) ) {
            case NUM_DOUBLE:
            case PLUS:
            case MINUS:
            case NUM_INT:
            case NUM_LONG:
            case NUM_FLOAT:
                {
                alt284=1;
                }
                break;
            case STRING_LITERAL:
            case QUOTED_STRING_LITERAL:
                {
                alt284=2;
                }
                break;
            case BOOLEAN_TRUE:
                {
                alt284=3;
                }
                break;
            case BOOLEAN_FALSE:
                {
                alt284=4;
                }
                break;
            case VALUE_NULL:
                {
                alt284=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);

                throw nvae;
            }

            switch (alt284) {
                case 1 :
                    // EsperEPL2Grammar.g:1718:6: numberconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_numberconstant_in_constant11638);
                    numberconstant795=numberconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, numberconstant795.getTree());

                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1719:6: stringconstant
                    {
                    root_0 = (CommonTree)adaptor.nil();

                    pushFollow(FOLLOW_stringconstant_in_constant11645);
                    stringconstant796=stringconstant();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) adaptor.addChild(root_0, stringconstant796.getTree());

                    }
                    break;
                case 3 :
                    // EsperEPL2Grammar.g:1720:10: t= BOOLEAN_TRUE
                    {
                    t=(Token)match(input,BOOLEAN_TRUE,FOLLOW_BOOLEAN_TRUE_in_constant11658); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_TRUE.add(t);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1720:25: -> ^( BOOL_TYPE[$t] )
                    {
                        // EsperEPL2Grammar.g:1720:28: ^( BOOL_TYPE[$t] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, t), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 4 :
                    // EsperEPL2Grammar.g:1721:10: f= BOOLEAN_FALSE
                    {
                    f=(Token)match(input,BOOLEAN_FALSE,FOLLOW_BOOLEAN_FALSE_in_constant11678); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_BOOLEAN_FALSE.add(f);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1721:26: -> ^( BOOL_TYPE[$f] )
                    {
                        // EsperEPL2Grammar.g:1721:29: ^( BOOL_TYPE[$f] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(BOOL_TYPE, f), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 5 :
                    // EsperEPL2Grammar.g:1722:10: nu= VALUE_NULL
                    {
                    nu=(Token)match(input,VALUE_NULL,FOLLOW_VALUE_NULL_in_constant11698); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_VALUE_NULL.add(nu);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1722:24: -> ^( NULL_TYPE[$nu] )
                    {
                        // EsperEPL2Grammar.g:1722:27: ^( NULL_TYPE[$nu] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(NULL_TYPE, nu), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "constant"

    public static class numberconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "numberconstant"
    // EsperEPL2Grammar.g:1725:1: numberconstant : (m= MINUS | p= PLUS )? number -> {$m != null}? -> number ;
    public final EsperEPL2GrammarParser.numberconstant_return numberconstant() throws RecognitionException {
        EsperEPL2GrammarParser.numberconstant_return retval = new EsperEPL2GrammarParser.numberconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token m=null;
        Token p=null;
        EsperEPL2GrammarParser.number_return number797 = null;


        CommonTree m_tree=null;
        CommonTree p_tree=null;
        RewriteRuleTokenStream stream_PLUS=new RewriteRuleTokenStream(adaptor,"token PLUS");
        RewriteRuleTokenStream stream_MINUS=new RewriteRuleTokenStream(adaptor,"token MINUS");
        RewriteRuleSubtreeStream stream_number=new RewriteRuleSubtreeStream(adaptor,"rule number");
        try {
            // EsperEPL2Grammar.g:1726:2: ( (m= MINUS | p= PLUS )? number -> {$m != null}? -> number )
            // EsperEPL2Grammar.g:1726:5: (m= MINUS | p= PLUS )? number
            {
            // EsperEPL2Grammar.g:1726:5: (m= MINUS | p= PLUS )?
            int alt285=3;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==MINUS) ) {
                alt285=1;
            }
            else if ( (LA285_0==PLUS) ) {
                alt285=2;
            }
            switch (alt285) {
                case 1 :
                    // EsperEPL2Grammar.g:1726:6: m= MINUS
                    {
                    m=(Token)match(input,MINUS,FOLLOW_MINUS_in_numberconstant11720); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_MINUS.add(m);


                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1726:16: p= PLUS
                    {
                    p=(Token)match(input,PLUS,FOLLOW_PLUS_in_numberconstant11726); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_PLUS.add(p);


                    }
                    break;

            }

            pushFollow(FOLLOW_number_in_numberconstant11730);
            number797=number();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) stream_number.add(number797.getTree());


            // AST REWRITE
            // elements: number
            // token labels: 
            // rule labels: retval
            // token list labels: 
            // rule list labels: 
            // wildcard labels: 
            if ( state.backtracking==0 ) {
            retval.tree = root_0;
            RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

            root_0 = (CommonTree)adaptor.nil();
            // 1727:3: -> {$m != null}?
            if (m != null) {
                adaptor.addChild(root_0, adaptor.create((number797!=null?((CommonTree)number797.tree):null).getType(), "-" + (number797!=null?input.toString(number797.start,number797.stop):null)));

            }
            else // 1728:3: -> number
            {
                adaptor.addChild(root_0, stream_number.nextTree());

            }

            retval.tree = root_0;}
            }

            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "numberconstant"

    public static class stringconstant_return extends ParserRuleReturnScope {
        CommonTree tree;
        public Object getTree() { return tree; }
    };

    // $ANTLR start "stringconstant"
    // EsperEPL2Grammar.g:1731:1: stringconstant : (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) );
    public final EsperEPL2GrammarParser.stringconstant_return stringconstant() throws RecognitionException {
        EsperEPL2GrammarParser.stringconstant_return retval = new EsperEPL2GrammarParser.stringconstant_return();
        retval.start = input.LT(1);

        CommonTree root_0 = null;

        Token sl=null;
        Token qsl=null;

        CommonTree sl_tree=null;
        CommonTree qsl_tree=null;
        RewriteRuleTokenStream stream_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token STRING_LITERAL");
        RewriteRuleTokenStream stream_QUOTED_STRING_LITERAL=new RewriteRuleTokenStream(adaptor,"token QUOTED_STRING_LITERAL");

        try {
            // EsperEPL2Grammar.g:1732:2: (sl= STRING_LITERAL -> ^( STRING_TYPE[$sl] ) | qsl= QUOTED_STRING_LITERAL -> ^( STRING_TYPE[$qsl] ) )
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==STRING_LITERAL) ) {
                alt286=1;
            }
            else if ( (LA286_0==QUOTED_STRING_LITERAL) ) {
                alt286=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 286, 0, input);

                throw nvae;
            }
            switch (alt286) {
                case 1 :
                    // EsperEPL2Grammar.g:1732:6: sl= STRING_LITERAL
                    {
                    sl=(Token)match(input,STRING_LITERAL,FOLLOW_STRING_LITERAL_in_stringconstant11759); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_STRING_LITERAL.add(sl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1732:24: -> ^( STRING_TYPE[$sl] )
                    {
                        // EsperEPL2Grammar.g:1732:27: ^( STRING_TYPE[$sl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, sl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;
                case 2 :
                    // EsperEPL2Grammar.g:1733:6: qsl= QUOTED_STRING_LITERAL
                    {
                    qsl=(Token)match(input,QUOTED_STRING_LITERAL,FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11775); if (state.failed) return retval; 
                    if ( state.backtracking==0 ) stream_QUOTED_STRING_LITERAL.add(qsl);



                    // AST REWRITE
                    // elements: 
                    // token labels: 
                    // rule labels: retval
                    // token list labels: 
                    // rule list labels: 
                    // wildcard labels: 
                    if ( state.backtracking==0 ) {
                    retval.tree = root_0;
                    RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.tree:null);

                    root_0 = (CommonTree)adaptor.nil();
                    // 1733:32: -> ^( STRING_TYPE[$qsl] )
                    {
                        // EsperEPL2Grammar.g:1733:35: ^( STRING_TYPE[$qsl] )
                        {
                        CommonTree root_1 = (CommonTree)adaptor.nil();
                        root_1 = (CommonTree)adaptor.becomeRoot((CommonTree)adaptor.create(STRING_TYPE, qsl), root_1);

                        adaptor.addChild(root_0, root_1);
                        }

                    }

                    retval.tree = root_0;}
                    }
                    break;

            }
            retval.stop = input.LT(-1);

            if ( state.backtracking==0 ) {

            retval.tree = (CommonTree)adaptor.rulePostProcessing(root_0);
            adaptor.setTokenBoundaries(retval.tree, retval.start, retval.stop);
            }
        }

          catch (RecognitionException rex) {
            throw rex;
          }
        finally {
        }
        return retval;
    }
    // $ANTLR end "stringconstant"

    // $ANTLR start synpred1_EsperEPL2Grammar
    public final void synpred1_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:855:4: ( streamSelector )
        // EsperEPL2Grammar.g:855:5: streamSelector
        {
        pushFollow(FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4169);
        streamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred1_EsperEPL2Grammar

    // $ANTLR start synpred2_EsperEPL2Grammar
    public final void synpred2_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1033:9: ( timePeriod )
        // EsperEPL2Grammar.g:1033:10: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5542);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred2_EsperEPL2Grammar

    // $ANTLR start synpred3_EsperEPL2Grammar
    public final void synpred3_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1202:4: ( builtinFunc )
        // EsperEPL2Grammar.g:1202:5: builtinFunc
        {
        pushFollow(FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7362);
        builtinFunc();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred3_EsperEPL2Grammar

    // $ANTLR start synpred4_EsperEPL2Grammar
    public final void synpred4_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1293:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1293:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8186);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred4_EsperEPL2Grammar

    // $ANTLR start synpred5_EsperEPL2Grammar
    public final void synpred5_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1303:4: ( eventProperty )
        // EsperEPL2Grammar.g:1303:5: eventProperty
        {
        pushFollow(FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8254);
        eventProperty();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred5_EsperEPL2Grammar

    // $ANTLR start synpred6_EsperEPL2Grammar
    public final void synpred6_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1456:4: ( propertyStreamSelector )
        // EsperEPL2Grammar.g:1456:5: propertyStreamSelector
        {
        pushFollow(FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9435);
        propertyStreamSelector();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred6_EsperEPL2Grammar

    // $ANTLR start synpred7_EsperEPL2Grammar
    public final void synpred7_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1506:7: ( lastOperand )
        // EsperEPL2Grammar.g:1506:8: lastOperand
        {
        pushFollow(FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar9858);
        lastOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred7_EsperEPL2Grammar

    // $ANTLR start synpred8_EsperEPL2Grammar
    public final void synpred8_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1507:4: ( lastWeekdayOperand )
        // EsperEPL2Grammar.g:1507:5: lastWeekdayOperand
        {
        pushFollow(FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar9869);
        lastWeekdayOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred8_EsperEPL2Grammar

    // $ANTLR start synpred9_EsperEPL2Grammar
    public final void synpred9_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1508:4: ( timePeriod )
        // EsperEPL2Grammar.g:1508:5: timePeriod
        {
        pushFollow(FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar9880);
        timePeriod();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred9_EsperEPL2Grammar

    // $ANTLR start synpred10_EsperEPL2Grammar
    public final void synpred10_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1509:4: ( expressionQualifyable )
        // EsperEPL2Grammar.g:1509:5: expressionQualifyable
        {
        pushFollow(FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar9891);
        expressionQualifyable();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred10_EsperEPL2Grammar

    // $ANTLR start synpred11_EsperEPL2Grammar
    public final void synpred11_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1510:4: ( rangeOperand )
        // EsperEPL2Grammar.g:1510:5: rangeOperand
        {
        pushFollow(FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar9902);
        rangeOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred11_EsperEPL2Grammar

    // $ANTLR start synpred12_EsperEPL2Grammar
    public final void synpred12_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1511:5: ( frequencyOperand )
        // EsperEPL2Grammar.g:1511:6: frequencyOperand
        {
        pushFollow(FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar9914);
        frequencyOperand();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred12_EsperEPL2Grammar

    // $ANTLR start synpred13_EsperEPL2Grammar
    public final void synpred13_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1512:4: ( lastOperator )
        // EsperEPL2Grammar.g:1512:5: lastOperator
        {
        pushFollow(FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar9925);
        lastOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred13_EsperEPL2Grammar

    // $ANTLR start synpred14_EsperEPL2Grammar
    public final void synpred14_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1513:4: ( weekDayOperator )
        // EsperEPL2Grammar.g:1513:5: weekDayOperator
        {
        pushFollow(FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar9936);
        weekDayOperator();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred14_EsperEPL2Grammar

    // $ANTLR start synpred15_EsperEPL2Grammar
    public final void synpred15_EsperEPL2Grammar_fragment() throws RecognitionException {   
        // EsperEPL2Grammar.g:1514:5: ( numericParameterList )
        // EsperEPL2Grammar.g:1514:6: numericParameterList
        {
        pushFollow(FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar9949);
        numericParameterList();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    // $ANTLR end synpred15_EsperEPL2Grammar

    // Delegated rules

    public final boolean synpred3_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred5_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred5_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred7_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred7_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred14_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred14_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred15_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred15_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_EsperEPL2Grammar() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_EsperEPL2Grammar_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA170 dfa170 = new DFA170(this);
    static final String DFA170_eotS =
        "\u0ab2\uffff";
    static final String DFA170_eofS =
        "\21\uffff\1\16\2\uffff\2\16\2\uffff\4\16\1\uffff\2\16\10\uffff"+
        "\3\16\2\uffff\2\16\3\uffff\1\16\u0a80\uffff";
    static final String DFA170_minS =
        "\2\5\13\uffff\1\5\3\uffff\1\6\2\uffff\2\6\2\uffff\4\6\1\uffff\2"+
        "\6\10\uffff\3\6\2\uffff\2\6\3\uffff\1\6\12\uffff\1\u010d\163\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72\uffff"+
        "\1\5\72\uffff\1\u0116\72\uffff\1\5\72\uffff\1\5\72\uffff\1\5\72"+
        "\uffff\1\5\2\6\112\uffff\2\6\100\uffff\2\6\67\uffff\2\6\76\uffff"+
        "\2\6\100\uffff\2\6\100\uffff\2\6\100\uffff\2\6\110\uffff\2\6\66"+
        "\uffff\2\6\76\uffff\2\6\101\uffff\2\6\76\uffff\2\6\76\uffff\2\6"+
        "\154\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0"+
        "\30\uffff\1\0\114\uffff\1\0\30\uffff\1\0\53\uffff\1\0\5\uffff\1"+
        "\0\53\uffff\1\0\5\uffff\1\0\54\uffff\1\0\31\uffff\1\0\31\uffff\1"+
        "\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff\1"+
        "\0\u0083\uffff\1\0\30\uffff\1\0\30\uffff";
    static final String DFA170_maxS =
        "\2\u012b\13\uffff\1\u012b\3\uffff\1\u0128\2\uffff\2\u0128\2\uffff"+
        "\4\u0128\1\uffff\2\u0128\10\uffff\3\u0128\2\uffff\2\u0128\3\uffff"+
        "\1\u0128\12\uffff\1\u010d\163\uffff\1\u012b\72\uffff\1\u012b\72"+
        "\uffff\1\u012b\72\uffff\1\u012b\72\uffff\1\u012b\72\uffff\1\u012b"+
        "\72\uffff\1\u012b\72\uffff\1\u012b\72\uffff\1\u012b\72\uffff\1\u012b"+
        "\72\uffff\1\u012b\72\uffff\1\u0126\72\uffff\1\u012b\72\uffff\1\u012b"+
        "\72\uffff\1\u012b\72\uffff\1\u0129\2\u0123\112\uffff\2\u0123\100"+
        "\uffff\2\u0123\67\uffff\2\u0123\76\uffff\2\u0123\100\uffff\2\u0123"+
        "\100\uffff\2\u0123\100\uffff\2\u0123\110\uffff\2\u0123\66\uffff"+
        "\2\u0123\76\uffff\2\u0123\101\uffff\2\u0123\76\uffff\2\u0123\76"+
        "\uffff\2\u0123\154\uffff\1\0\53\uffff\1\0\5\uffff\1\0\53\uffff\1"+
        "\0\5\uffff\1\0\30\uffff\1\0\114\uffff\1\0\30\uffff\1\0\53\uffff"+
        "\1\0\5\uffff\1\0\53\uffff\1\0\5\uffff\1\0\54\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\5\uffff\1\0\31\uffff\1\0\31\uffff\1\0\31\uffff"+
        "\1\0\31\uffff\1\0\u0083\uffff\1\0\30\uffff\1\0\30\uffff";
    static final String DFA170_acceptS =
        "\2\uffff\1\2\11\uffff\1\3\1\uffff\1\5\53\uffff\2\6\1\uffff\1\6"+
        "\1\7\4\uffff\1\1\53\uffff\1\10\1\4\u03b7\uffff\112\6\2\uffff\100"+
        "\6\2\uffff\67\6\2\uffff\76\6\2\uffff\100\6\2\uffff\100\6\2\uffff"+
        "\100\6\2\uffff\110\6\2\uffff\66\6\2\uffff\76\6\2\uffff\77\6\4\uffff"+
        "\76\6\2\uffff\76\6\2\uffff\77\6\1\11\54\6\1\uffff\53\6\1\uffff\5"+
        "\6\1\uffff\53\6\1\uffff\5\6\1\uffff\30\6\1\uffff\61\6\1\uffff\31"+
        "\6\2\uffff\30\6\1\uffff\53\6\1\uffff\5\6\1\uffff\53\6\1\uffff\5"+
        "\6\1\uffff\54\6\1\uffff\31\6\1\uffff\31\6\1\uffff\5\6\1\uffff\31"+
        "\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\31\6\1\uffff\62"+
        "\6\2\uffff\32\6\1\uffff\32\6\1\uffff\30\6\1\uffff\30\6";
    static final String DFA170_specialS =
        "\1\0\u00af\uffff\1\1\72\uffff\1\2\72\uffff\1\3\72\uffff\1\4\72"+
        "\uffff\1\5\72\uffff\1\6\72\uffff\1\7\72\uffff\1\10\72\uffff\1\11"+
        "\72\uffff\1\12\72\uffff\1\13\72\uffff\1\14\72\uffff\1\15\72\uffff"+
        "\1\16\72\uffff\1\17\72\uffff\1\20\1\21\1\22\112\uffff\1\23\1\24"+
        "\100\uffff\1\25\1\26\67\uffff\1\27\1\30\76\uffff\1\31\1\32\100\uffff"+
        "\1\33\1\34\100\uffff\1\35\1\36\100\uffff\1\37\1\40\110\uffff\1\41"+
        "\1\42\66\uffff\1\43\1\44\76\uffff\1\45\1\46\101\uffff\1\47\1\50"+
        "\76\uffff\1\51\1\52\76\uffff\1\53\1\54\154\uffff\1\55\53\uffff\1"+
        "\56\5\uffff\1\57\53\uffff\1\60\5\uffff\1\61\30\uffff\1\62\114\uffff"+
        "\1\63\30\uffff\1\64\53\uffff\1\65\5\uffff\1\66\53\uffff\1\67\5\uffff"+
        "\1\70\54\uffff\1\71\31\uffff\1\72\31\uffff\1\73\5\uffff\1\74\31"+
        "\uffff\1\75\31\uffff\1\76\31\uffff\1\77\31\uffff\1\100\u0083\uffff"+
        "\1\101\30\uffff\1\102\30\uffff}>";
    static final String[] DFA170_transitionS = {
            "\1\61\4\uffff\1\16\3\uffff\1\16\3\uffff\1\24\1\25\2\16\1\30"+
            "\1\31\1\32\1\33\1\21\10\uffff\1\16\1\uffff\4\16\12\uffff\1\16"+
            "\1\35\1\36\11\uffff\6\16\1\47\1\50\1\72\1\73\1\51\1\74\2\16"+
            "\1\54\1\55\1\75\1\uffff\1\16\1\uffff\4\16\14\uffff\3\2\5\uffff"+
            "\3\16\2\uffff\1\16\u008a\uffff\1\2\16\uffff\1\16\2\uffff\1\15"+
            "\5\uffff\1\2\1\14\1\uffff\2\2\11\uffff\1\1\2\uffff\1\76\1\uffff"+
            "\1\2\2\uffff\1\16\2\2",
            "\1\103\4\uffff\1\103\3\uffff\1\103\3\uffff\11\103\10\uffff"+
            "\1\103\1\uffff\4\103\12\uffff\3\103\11\uffff\10\103\2\uffff"+
            "\1\103\1\uffff\4\103\2\uffff\1\103\1\uffff\4\103\24\uffff\3"+
            "\103\2\uffff\1\103\u008a\uffff\1\2\16\uffff\1\103\33\uffff\1"+
            "\2\2\uffff\1\103\2\2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\160\4\uffff\1\160\2\uffff\2\160\3\uffff\11\160\1\157\1"+
            "\160\6\uffff\1\160\1\uffff\4\160\12\uffff\3\160\11\uffff\21"+
            "\160\1\uffff\1\160\1\uffff\4\160\14\uffff\3\160\5\uffff\3\160"+
            "\2\uffff\1\160\u008a\uffff\1\160\16\uffff\1\160\2\uffff\1\160"+
            "\5\uffff\2\160\1\uffff\2\160\11\uffff\1\160\2\uffff\1\160\1"+
            "\uffff\1\160\2\uffff\3\160",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u00b0\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u00eb\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0126\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0161\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u019c\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u01d7\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0212\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u024d\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0288\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u02c3\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u02fe\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0339\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u0374\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u03af\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "\10\16\2\uffff\2\16\14\uffff\5\16\7\uffff\1\16\1\uffff\2\16"+
            "\1\uffff\1\16\2\uffff\1\16\3\uffff\1\16\1\uffff\3\16\7\uffff"+
            "\1\16\32\uffff\3\16\6\uffff\1\16\3\uffff\1\16\3\uffff\2\16\u0099"+
            "\uffff\1\16\1\uffff\2\16\1\u03ea\10\16\2\uffff\14\16\1\uffff"+
            "\1\16\2\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0425",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0459\4\uffff\1\u043a\2\uffff\1\u0467\1\u043b\3\uffff\1"+
            "\u043c\1\u043d\1\u043e\1\u043f\1\u0440\1\u0441\1\u0442\1\u0443"+
            "\1\u0439\1\uffff\1\u042a\6\uffff\1\u045c\1\uffff\1\u045e\1\u045a"+
            "\1\u045b\1\u045d\5\uffff\1\u0429\1\u0428\3\uffff\1\u0444\1\u0445"+
            "\1\u0446\11\uffff\1\u0448\1\u0449\1\u044a\1\u044c\1\u044d\1"+
            "\u044e\1\u044f\1\u0450\1\u0462\1\u0463\1\u0451\1\u0464\1\u0452"+
            "\1\u0453\1\u0454\1\u0455\1\u0465\1\uffff\1\u0456\1\uffff\1\u0457"+
            "\1\u044b\1\u0438\1\u0458\14\uffff\1\u0431\1\u0432\1\u0433\5"+
            "\uffff\1\u045f\1\u0460\1\u0461\2\uffff\1\u0447\u008a\uffff\1"+
            "\u0430\16\uffff\1\u0436\2\uffff\1\u0435\3\uffff\1\u0468\1\uffff"+
            "\1\u042c\1\u0434\1\uffff\1\u0426\1\u0427\11\uffff\1\u042b\2"+
            "\uffff\1\u0466\1\uffff\1\u042d\2\uffff\1\u0437\1\u042e\1\u042f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u049c\4\uffff\1\u047d\2\uffff\1\u04aa\1\u047e\3\uffff\1"+
            "\u047f\1\u0480\1\u0481\1\u0482\1\u0483\1\u0484\1\u0485\1\u0486"+
            "\1\u047c\1\uffff\1\u046b\6\uffff\1\u049f\1\uffff\1\u04a1\1\u049d"+
            "\1\u049e\1\u04a0\5\uffff\1\u046a\1\u0469\3\uffff\1\u0487\1\u0488"+
            "\1\u0489\11\uffff\1\u048b\1\u048c\1\u048d\1\u048f\1\u0490\1"+
            "\u0491\1\u0492\1\u0493\1\u04a5\1\u04a6\1\u0494\1\u04a7\1\u0495"+
            "\1\u0496\1\u0497\1\u0498\1\u04a8\1\uffff\1\u0499\1\uffff\1\u049a"+
            "\1\u048e\1\u047b\1\u049b\14\uffff\1\u0474\1\u0475\1\u0476\5"+
            "\uffff\1\u04a2\1\u04a3\1\u04a4\2\uffff\1\u048a\u008a\uffff\1"+
            "\u0471\16\uffff\1\u0479\2\uffff\1\u0478\5\uffff\1\u046d\1\u0477"+
            "\1\uffff\1\u0472\1\u0473\11\uffff\1\u046c\2\uffff\1\u04a9\1"+
            "\uffff\1\u046e\2\uffff\1\u047a\1\u046f\1\u0470",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u04de\4\uffff\1\u04bf\2\uffff\1\u04ec\1\u04c0\3\uffff\1"+
            "\u04c1\1\u04c2\1\u04c3\1\u04c4\1\u04c5\1\u04c6\1\u04c7\1\u04c8"+
            "\1\u04be\1\uffff\1\u04ad\6\uffff\1\u04e1\1\uffff\1\u04e3\1\u04df"+
            "\1\u04e0\1\u04e2\5\uffff\1\u04ac\1\u04ab\3\uffff\1\u04c9\1\u04ca"+
            "\1\u04cb\11\uffff\1\u04cd\1\u04ce\1\u04cf\1\u04d1\1\u04d2\1"+
            "\u04d3\1\u04d4\1\u04d5\1\u04e7\1\u04e8\1\u04d6\1\u04e9\1\u04d7"+
            "\1\u04d8\1\u04d9\1\u04da\1\u04ea\1\uffff\1\u04db\1\uffff\1\u04dc"+
            "\1\u04d0\1\u04bd\1\u04dd\14\uffff\1\u04b6\1\u04b7\1\u04b8\5"+
            "\uffff\1\u04e4\1\u04e5\1\u04e6\2\uffff\1\u04cc\u008a\uffff\1"+
            "\u04b3\16\uffff\1\u04bb\2\uffff\1\u04ba\5\uffff\1\u04af\1\u04b9"+
            "\1\uffff\1\u04b4\1\u04b5\11\uffff\1\u04ae\2\uffff\1\u04eb\1"+
            "\uffff\1\u04b0\2\uffff\1\u04bc\1\u04b1\1\u04b2",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u051e\4\uffff\1\u04ff\2\uffff\1\u052c\1\u0500\3\uffff\1"+
            "\u0501\1\u0502\1\u0503\1\u0504\1\u0505\1\u0506\1\u0507\1\u0508"+
            "\1\u04fe\1\uffff\1\u04ef\6\uffff\1\u0521\1\uffff\1\u0523\1\u051f"+
            "\1\u0520\1\u0522\12\uffff\1\u0509\1\u050a\1\u050b\11\uffff\1"+
            "\u050d\1\u050e\1\u050f\1\u0511\1\u0512\1\u0513\1\u0514\1\u0515"+
            "\1\u0527\1\u0528\1\u0516\1\u0529\1\u0517\1\u0518\1\u0519\1\u051a"+
            "\1\u052a\1\uffff\1\u051b\1\uffff\1\u051c\1\u0510\1\u04fd\1\u051d"+
            "\14\uffff\1\u04f6\1\u04f7\1\u04f8\5\uffff\1\u0524\1\u0525\1"+
            "\u0526\2\uffff\1\u050c\u008a\uffff\1\u04f5\16\uffff\1\u04fb"+
            "\2\uffff\1\u04fa\5\uffff\1\u04f1\1\u04f9\1\uffff\1\u04ed\1\u04ee"+
            "\11\uffff\1\u04f0\2\uffff\1\u052b\1\uffff\1\u04f2\2\uffff\1"+
            "\u04fc\1\u04f3\1\u04f4",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0560\4\uffff\1\u0541\2\uffff\1\u056e\1\u0542\3\uffff\1"+
            "\u0543\1\u0544\1\u0545\1\u0546\1\u0547\1\u0548\1\u0549\1\u054a"+
            "\1\u0540\1\uffff\1\u0531\6\uffff\1\u0563\1\uffff\1\u0565\1\u0561"+
            "\1\u0562\1\u0564\5\uffff\1\u0530\1\u052f\3\uffff\1\u054b\1\u054c"+
            "\1\u054d\11\uffff\1\u054f\1\u0550\1\u0551\1\u0553\1\u0554\1"+
            "\u0555\1\u0556\1\u0557\1\u0569\1\u056a\1\u0558\1\u056b\1\u0559"+
            "\1\u055a\1\u055b\1\u055c\1\u056c\1\uffff\1\u055d\1\uffff\1\u055e"+
            "\1\u0552\1\u053f\1\u055f\14\uffff\1\u0538\1\u0539\1\u053a\5"+
            "\uffff\1\u0566\1\u0567\1\u0568\2\uffff\1\u054e\u008a\uffff\1"+
            "\u0537\16\uffff\1\u053d\2\uffff\1\u053c\5\uffff\1\u0533\1\u053b"+
            "\1\uffff\1\u052d\1\u052e\11\uffff\1\u0532\2\uffff\1\u056d\1"+
            "\uffff\1\u0534\2\uffff\1\u053e\1\u0535\1\u0536",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05a2\4\uffff\1\u0583\2\uffff\1\u05b0\1\u0584\3\uffff\1"+
            "\u0585\1\u0586\1\u0587\1\u0588\1\u0589\1\u058a\1\u058b\1\u058c"+
            "\1\u0582\1\uffff\1\u0573\6\uffff\1\u05a5\1\uffff\1\u05a7\1\u05a3"+
            "\1\u05a4\1\u05a6\5\uffff\1\u0572\1\u0571\3\uffff\1\u058d\1\u058e"+
            "\1\u058f\11\uffff\1\u0591\1\u0592\1\u0593\1\u0595\1\u0596\1"+
            "\u0597\1\u0598\1\u0599\1\u05ab\1\u05ac\1\u059a\1\u05ad\1\u059b"+
            "\1\u059c\1\u059d\1\u059e\1\u05ae\1\uffff\1\u059f\1\uffff\1\u05a0"+
            "\1\u0594\1\u0581\1\u05a1\14\uffff\1\u057a\1\u057b\1\u057c\5"+
            "\uffff\1\u05a8\1\u05a9\1\u05aa\2\uffff\1\u0590\u008a\uffff\1"+
            "\u0579\16\uffff\1\u057f\2\uffff\1\u057e\5\uffff\1\u0575\1\u057d"+
            "\1\uffff\1\u056f\1\u0570\11\uffff\1\u0574\2\uffff\1\u05af\1"+
            "\uffff\1\u0576\2\uffff\1\u0580\1\u0577\1\u0578",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u05e4\4\uffff\1\u05c5\2\uffff\1\u05f2\1\u05c6\3\uffff\1"+
            "\u05c7\1\u05c8\1\u05c9\1\u05ca\1\u05cb\1\u05cc\1\u05cd\1\u05ce"+
            "\1\u05c4\1\uffff\1\u05b5\6\uffff\1\u05e7\1\uffff\1\u05e9\1\u05e5"+
            "\1\u05e6\1\u05e8\5\uffff\1\u05b4\1\u05b3\3\uffff\1\u05cf\1\u05d0"+
            "\1\u05d1\11\uffff\1\u05d3\1\u05d4\1\u05d5\1\u05d7\1\u05d8\1"+
            "\u05d9\1\u05da\1\u05db\1\u05ed\1\u05ee\1\u05dc\1\u05ef\1\u05dd"+
            "\1\u05de\1\u05df\1\u05e0\1\u05f0\1\uffff\1\u05e1\1\uffff\1\u05e2"+
            "\1\u05d6\1\u05c3\1\u05e3\14\uffff\1\u05bc\1\u05bd\1\u05be\5"+
            "\uffff\1\u05ea\1\u05eb\1\u05ec\2\uffff\1\u05d2\u008a\uffff\1"+
            "\u05bb\16\uffff\1\u05c1\2\uffff\1\u05c0\5\uffff\1\u05b7\1\u05bf"+
            "\1\uffff\1\u05b1\1\u05b2\11\uffff\1\u05b6\2\uffff\1\u05f1\1"+
            "\uffff\1\u05b8\2\uffff\1\u05c2\1\u05b9\1\u05ba",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0625\4\uffff\1\u0606\2\uffff\1\u0633\1\u0607\3\uffff\1"+
            "\u0608\1\u0609\1\u060a\1\u060b\1\u060c\1\u060d\1\u060e\1\u060f"+
            "\1\u0605\1\uffff\1\u05f7\6\uffff\1\u0628\1\uffff\1\u062a\1\u0626"+
            "\1\u0627\1\u0629\12\uffff\1\u0610\1\u0611\1\u0612\11\uffff\1"+
            "\u0614\1\u0615\1\u0616\1\u0618\1\u0619\1\u061a\1\u061b\1\u061c"+
            "\1\u062e\1\u062f\1\u061d\1\u0630\1\u061e\1\u061f\1\u0620\1\u0621"+
            "\1\u0631\1\uffff\1\u0622\1\uffff\1\u0623\1\u0617\1\u0604\1\u0624"+
            "\14\uffff\1\u05fe\1\u05ff\1\u0600\5\uffff\1\u062b\1\u062c\1"+
            "\u062d\2\uffff\1\u0613\u008a\uffff\1\u05fd\16\uffff\1\u05f6"+
            "\2\uffff\1\u0602\3\uffff\1\u05f5\1\uffff\1\u05f9\1\u0601\1\uffff"+
            "\1\u05f3\1\u05f4\11\uffff\1\u05f8\2\uffff\1\u0632\1\uffff\1"+
            "\u05fa\2\uffff\1\u0603\1\u05fb\1\u05fc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0666\4\uffff\1\u0647\2\uffff\1\u0674\1\u0648\3\uffff\1"+
            "\u0649\1\u064a\1\u064b\1\u064c\1\u064d\1\u064e\1\u064f\1\u0650"+
            "\1\u0646\1\uffff\1\u0636\6\uffff\1\u0669\1\uffff\1\u066b\1\u0667"+
            "\1\u0668\1\u066a\12\uffff\1\u0651\1\u0652\1\u0653\11\uffff\1"+
            "\u0655\1\u0656\1\u0657\1\u0659\1\u065a\1\u065b\1\u065c\1\u065d"+
            "\1\u066f\1\u0670\1\u065e\1\u0671\1\u065f\1\u0660\1\u0661\1\u0662"+
            "\1\u0672\1\uffff\1\u0663\1\uffff\1\u0664\1\u0658\1\u0645\1\u0665"+
            "\14\uffff\1\u063f\1\u0640\1\u0641\5\uffff\1\u066c\1\u066d\1"+
            "\u066e\2\uffff\1\u0654\u008a\uffff\1\u063c\16\uffff\1\u0635"+
            "\2\uffff\1\u0643\3\uffff\1\u0634\1\uffff\1\u0638\1\u0642\1\uffff"+
            "\1\u063d\1\u063e\11\uffff\1\u0637\2\uffff\1\u0673\1\uffff\1"+
            "\u0639\2\uffff\1\u0644\1\u063a\1\u063b",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06a6\4\uffff\1\u0687\2\uffff\1\u06b4\1\u0688\3\uffff\1"+
            "\u0689\1\u068a\1\u068b\1\u068c\1\u068d\1\u068e\1\u068f\1\u0690"+
            "\1\u0686\1\uffff\1\u0677\6\uffff\1\u06a9\1\uffff\1\u06ab\1\u06a7"+
            "\1\u06a8\1\u06aa\12\uffff\1\u0691\1\u0692\1\u0693\11\uffff\1"+
            "\u0695\1\u0696\1\u0697\1\u0699\1\u069a\1\u069b\1\u069c\1\u069d"+
            "\1\u06af\1\u06b0\1\u069e\1\u06b1\1\u069f\1\u06a0\1\u06a1\1\u06a2"+
            "\1\u06b2\1\uffff\1\u06a3\1\uffff\1\u06a4\1\u0698\1\u0685\1\u06a5"+
            "\14\uffff\1\u067e\1\u067f\1\u0680\5\uffff\1\u06ac\1\u06ad\1"+
            "\u06ae\2\uffff\1\u0694\u008a\uffff\1\u067d\16\uffff\1\u0683"+
            "\2\uffff\1\u0682\5\uffff\1\u0679\1\u0681\1\uffff\1\u0675\1\u0676"+
            "\11\uffff\1\u0678\2\uffff\1\u06b3\1\uffff\1\u067a\2\uffff\1"+
            "\u0684\1\u067b\1\u067c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u06e6\4\uffff\1\u06c7\2\uffff\1\u06f4\1\u06c8\3\uffff\1"+
            "\u06c9\1\u06ca\1\u06cb\1\u06cc\1\u06cd\1\u06ce\1\u06cf\1\u06d0"+
            "\1\u06c6\1\uffff\1\u06b7\6\uffff\1\u06e9\1\uffff\1\u06eb\1\u06e7"+
            "\1\u06e8\1\u06ea\12\uffff\1\u06d1\1\u06d2\1\u06d3\11\uffff\1"+
            "\u06d5\1\u06d6\1\u06d7\1\u06d9\1\u06da\1\u06db\1\u06dc\1\u06dd"+
            "\1\u06ef\1\u06f0\1\u06de\1\u06f1\1\u06df\1\u06e0\1\u06e1\1\u06e2"+
            "\1\u06f2\1\uffff\1\u06e3\1\uffff\1\u06e4\1\u06d8\1\u06c5\1\u06e5"+
            "\14\uffff\1\u06be\1\u06bf\1\u06c0\5\uffff\1\u06ec\1\u06ed\1"+
            "\u06ee\2\uffff\1\u06d4\u008a\uffff\1\u06bd\16\uffff\1\u06c3"+
            "\2\uffff\1\u06c2\5\uffff\1\u06b9\1\u06c1\1\uffff\1\u06b5\1\u06b6"+
            "\11\uffff\1\u06b8\2\uffff\1\u06f3\1\uffff\1\u06ba\2\uffff\1"+
            "\u06c4\1\u06bb\1\u06bc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\2\16\16\uffff\1\u06f5",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0729\4\uffff\1\u070a\2\uffff\1\u0737\1\u070b\3\uffff\1"+
            "\u070c\1\u070d\1\u070e\1\u070f\1\u0710\1\u0711\1\u0712\1\u0713"+
            "\1\u0709\1\uffff\1\u06fa\6\uffff\1\u072c\1\uffff\1\u072e\1\u072a"+
            "\1\u072b\1\u072d\12\uffff\1\u0714\1\u0715\1\u0716\11\uffff\1"+
            "\u0718\1\u0719\1\u071a\1\u071c\1\u071d\1\u071e\1\u071f\1\u0720"+
            "\1\u0732\1\u0733\1\u0721\1\u0734\1\u0722\1\u0723\1\u0724\1\u0725"+
            "\1\u0735\1\uffff\1\u0726\1\uffff\1\u0727\1\u071b\1\u0708\1\u0728"+
            "\14\uffff\1\u0701\1\u0702\1\u0703\5\uffff\1\u072f\1\u0730\1"+
            "\u0731\2\uffff\1\u0717\u008a\uffff\1\u0700\16\uffff\1\u0706"+
            "\2\uffff\1\u0705\5\uffff\1\u06fc\1\u0704\1\uffff\1\u06f8\1\u06f9"+
            "\11\uffff\1\u06fb\2\uffff\1\u0736\1\uffff\1\u06fd\2\uffff\1"+
            "\u0707\1\u06fe\1\u06ff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0769\4\uffff\1\u074a\2\uffff\1\u0777\1\u074b\3\uffff\1"+
            "\u074c\1\u074d\1\u074e\1\u074f\1\u0750\1\u0751\1\u0752\1\u0753"+
            "\1\u0749\1\uffff\1\u073a\6\uffff\1\u076c\1\uffff\1\u076e\1\u076a"+
            "\1\u076b\1\u076d\12\uffff\1\u0754\1\u0755\1\u0756\11\uffff\1"+
            "\u0758\1\u0759\1\u075a\1\u075c\1\u075d\1\u075e\1\u075f\1\u0760"+
            "\1\u0772\1\u0773\1\u0761\1\u0774\1\u0762\1\u0763\1\u0764\1\u0765"+
            "\1\u0775\1\uffff\1\u0766\1\uffff\1\u0767\1\u075b\1\u0748\1\u0768"+
            "\14\uffff\1\u0741\1\u0742\1\u0743\5\uffff\1\u076f\1\u0770\1"+
            "\u0771\2\uffff\1\u0757\u008a\uffff\1\u0740\16\uffff\1\u0746"+
            "\2\uffff\1\u0745\5\uffff\1\u073c\1\u0744\1\uffff\1\u0738\1\u0739"+
            "\11\uffff\1\u073b\2\uffff\1\u0776\1\uffff\1\u073d\2\uffff\1"+
            "\u0747\1\u073e\1\u073f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07aa\4\uffff\1\u078b\2\uffff\1\u07b8\1\u078c\3\uffff\1"+
            "\u078d\1\u078e\1\u078f\1\u0790\1\u0791\1\u0792\1\u0793\1\u0794"+
            "\1\u078a\1\uffff\1\u077c\6\uffff\1\u07ad\1\uffff\1\u07af\1\u07ab"+
            "\1\u07ac\1\u07ae\12\uffff\1\u0795\1\u0796\1\u0797\11\uffff\1"+
            "\u0799\1\u079a\1\u079b\1\u079d\1\u079e\1\u079f\1\u07a0\1\u07a1"+
            "\1\u07b3\1\u07b4\1\u07a2\1\u07b5\1\u07a3\1\u07a4\1\u07a5\1\u07a6"+
            "\1\u07b6\1\uffff\1\u07a7\1\uffff\1\u07a8\1\u079c\1\u0789\1\u07a9"+
            "\14\uffff\1\u0783\1\u0784\1\u0785\5\uffff\1\u07b0\1\u07b1\1"+
            "\u07b2\2\uffff\1\u0798\u008a\uffff\1\u0782\16\uffff\1\u077b"+
            "\2\uffff\1\u0787\3\uffff\1\u077a\1\uffff\1\u077e\1\u0786\1\uffff"+
            "\1\u0778\1\u0779\11\uffff\1\u077d\2\uffff\1\u07b7\1\uffff\1"+
            "\u077f\2\uffff\1\u0788\1\u0780\1\u0781",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u07dd\4\uffff\1\u07be\3\uffff\1\u07bf\3\uffff\1\u07c0\1"+
            "\u07c1\1\u07c2\1\u07c3\1\u07c4\1\u07c5\1\u07c6\1\u07c7\1\u07bd"+
            "\1\u07b9\7\uffff\1\u07e0\1\uffff\1\u07e2\1\u07de\1\u07df\1\u07e1"+
            "\12\uffff\1\u07c8\1\u07c9\1\u07ca\11\uffff\1\u07cc\1\u07cd\1"+
            "\u07ce\1\u07d0\1\u07d1\1\u07d2\1\u07d3\1\u07d4\2\uffff\1\u07d5"+
            "\1\uffff\1\u07d6\1\u07d7\1\u07d8\1\u07d9\2\uffff\1\u07da\1\uffff"+
            "\1\u07db\1\u07cf\1\u07bc\1\u07dc\24\uffff\1\u07e3\1\u07e4\1"+
            "\u07e5\2\uffff\1\u07cb\u0099\uffff\1\u07ba\36\uffff\1\u07bb",
            "\1\u07fb\1\u07fc\1\u07fd\1\u07fe\1\uffff\1\u07f9\1\u07f8\1"+
            "\u07fa\34\uffff\1\u07f2\u00e0\uffff\1\u07f1\2\uffff\1\u07e6"+
            "\2\uffff\1\u07e7\1\u07f6\1\u07ea\4\uffff\1\u07f5\1\u07f7\1\u07f3"+
            "\1\u07f4\1\u07ed\1\u07ee\1\u07ef\1\u07f0\1\u07ec\1\u07eb\1\u07e8"+
            "\1\u07e9",
            "\1\u0814\1\u0815\1\u0816\1\u0817\1\uffff\1\u0811\1\u0810\1"+
            "\u0813\34\uffff\1\u080a\u00e0\uffff\1\u0809\2\uffff\1\u0812"+
            "\2\uffff\1\u07ff\1\u080e\1\u0802\4\uffff\1\u080d\1\u080f\1\u080b"+
            "\1\u080c\1\u0805\1\u0806\1\u0807\1\u0808\1\u0804\1\u0803\1\u0800"+
            "\1\u0801",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u082d\1\u082e\1\u082f\1\u0830\1\uffff\1\u082b\1\u082a\1"+
            "\u082c\34\uffff\1\u0824\u00e0\uffff\1\u0823\2\uffff\1\u0818"+
            "\2\uffff\1\u0819\1\u0828\1\u081c\4\uffff\1\u0827\1\u0829\1\u0825"+
            "\1\u0826\1\u081f\1\u0820\1\u0821\1\u0822\1\u081e\1\u081d\1\u081a"+
            "\1\u081b",
            "\1\u0846\1\u0847\1\u0848\1\u0849\1\uffff\1\u0843\1\u0842\1"+
            "\u0845\34\uffff\1\u083c\u00e0\uffff\1\u083b\2\uffff\1\u0844"+
            "\2\uffff\1\u0831\1\u0840\1\u0834\4\uffff\1\u083f\1\u0841\1\u083d"+
            "\1\u083e\1\u0837\1\u0838\1\u0839\1\u083a\1\u0836\1\u0835\1\u0832"+
            "\1\u0833",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u085f\1\u0860\1\u0861\1\u0862\1\uffff\1\u085d\1\u085c\1"+
            "\u085e\34\uffff\1\u0856\u00e0\uffff\1\u0855\2\uffff\1\u084a"+
            "\2\uffff\1\u084b\1\u085a\1\u084e\4\uffff\1\u0859\1\u085b\1\u0857"+
            "\1\u0858\1\u0851\1\u0852\1\u0853\1\u0854\1\u0850\1\u084f\1\u084c"+
            "\1\u084d",
            "\1\u0878\1\u0879\1\u087a\1\u087b\1\uffff\1\u0876\1\u0875\1"+
            "\u0877\34\uffff\1\u086f\u00e0\uffff\1\u086e\2\uffff\1\u0863"+
            "\2\uffff\1\u0864\1\u0873\1\u0867\4\uffff\1\u0872\1\u0874\1\u0870"+
            "\1\u0871\1\u086a\1\u086b\1\u086c\1\u086d\1\u0869\1\u0868\1\u0865"+
            "\1\u0866",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0891\1\u0892\1\u0893\1\u0894\1\uffff\1\u088e\1\u088d\1"+
            "\u0890\34\uffff\1\u0887\u00de\uffff\1\u088f\1\uffff\1\u0886"+
            "\2\uffff\1\16\2\uffff\1\u087c\1\u088b\1\u087f\4\uffff\1\u088a"+
            "\1\u088c\1\u0888\1\u0889\1\u0882\1\u0883\1\u0884\1\u0885\1\u0881"+
            "\1\u0880\1\u087d\1\u087e",
            "\1\u08ab\1\u08ac\1\u08ad\1\u08ae\1\uffff\1\u08a8\1\u08a7\1"+
            "\u08aa\34\uffff\1\u08a1\u00de\uffff\1\u08a9\1\uffff\1\u08a0"+
            "\2\uffff\1\16\2\uffff\1\u0896\1\u08a5\1\u0899\4\uffff\1\u08a4"+
            "\1\u08a6\1\u08a2\1\u08a3\1\u089c\1\u089d\1\u089e\1\u089f\1\u089b"+
            "\1\u089a\1\u0897\1\u0898",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08c5\1\u08c6\1\u08c7\1\u08c8\1\uffff\1\u08c3\1\u08c2\1"+
            "\u08c4\34\uffff\1\u08bc\u00e0\uffff\1\u08bb\2\uffff\1\u08b0"+
            "\2\uffff\1\u08b1\1\u08c0\1\u08b4\4\uffff\1\u08bf\1\u08c1\1\u08bd"+
            "\1\u08be\1\u08b7\1\u08b8\1\u08b9\1\u08ba\1\u08b6\1\u08b5\1\u08b2"+
            "\1\u08b3",
            "\1\u08de\1\u08df\1\u08e0\1\u08e1\1\uffff\1\u08dc\1\u08db\1"+
            "\u08dd\34\uffff\1\u08d5\u00e0\uffff\1\u08d4\2\uffff\1\u08c9"+
            "\2\uffff\1\u08ca\1\u08d9\1\u08cd\4\uffff\1\u08d8\1\u08da\1\u08d6"+
            "\1\u08d7\1\u08d0\1\u08d1\1\u08d2\1\u08d3\1\u08cf\1\u08ce\1\u08cb"+
            "\1\u08cc",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u08f7\1\u08f8\1\u08f9\1\u08fa\1\uffff\1\u08f4\1\u08f3\1"+
            "\u08f6\34\uffff\1\u08ed\u00e0\uffff\1\u08ec\2\uffff\1\u08f5"+
            "\2\uffff\1\u08e2\1\u08f1\1\u08e5\4\uffff\1\u08f0\1\u08f2\1\u08ee"+
            "\1\u08ef\1\u08e8\1\u08e9\1\u08ea\1\u08eb\1\u08e7\1\u08e6\1\u08e3"+
            "\1\u08e4",
            "\1\u0910\1\u0911\1\u0912\1\u0913\1\uffff\1\u090e\1\u090d\1"+
            "\u090f\34\uffff\1\u0907\u00e0\uffff\1\u0906\2\uffff\1\u08fb"+
            "\2\uffff\1\u08fc\1\u090b\1\u08ff\4\uffff\1\u090a\1\u090c\1\u0908"+
            "\1\u0909\1\u0902\1\u0903\1\u0904\1\u0905\1\u0901\1\u0900\1\u08fd"+
            "\1\u08fe",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0929\1\u092a\1\u092b\1\u092c\1\uffff\1\u0926\1\u0925\1"+
            "\u0928\34\uffff\1\u091f\u00e0\uffff\1\u091e\2\uffff\1\u0927"+
            "\2\uffff\1\u0914\1\u0923\1\u0917\4\uffff\1\u0922\1\u0924\1\u0920"+
            "\1\u0921\1\u091a\1\u091b\1\u091c\1\u091d\1\u0919\1\u0918\1\u0915"+
            "\1\u0916",
            "\1\u0942\1\u0943\1\u0944\1\u0945\1\uffff\1\u0940\1\u093f\1"+
            "\u0941\34\uffff\1\u0939\u00e0\uffff\1\u0938\2\uffff\1\u092d"+
            "\2\uffff\1\u092e\1\u093d\1\u0931\4\uffff\1\u093c\1\u093e\1\u093a"+
            "\1\u093b\1\u0934\1\u0935\1\u0936\1\u0937\1\u0933\1\u0932\1\u092f"+
            "\1\u0930",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u095c\1\u095d\1\u095e\1\u095f\1\uffff\1\u0958\1\u0957\1"+
            "\u095b\34\uffff\1\u0951\u00de\uffff\1\u0959\1\uffff\1\u0950"+
            "\2\uffff\1\u095a\2\uffff\1\u0946\1\u0955\1\u0949\4\uffff\1\u0954"+
            "\1\u0956\1\u0952\1\u0953\1\u094c\1\u094d\1\u094e\1\u094f\1\u094b"+
            "\1\u094a\1\u0947\1\u0948",
            "\1\u0976\1\u0977\1\u0978\1\u0979\1\uffff\1\u0972\1\u0971\1"+
            "\u0975\34\uffff\1\u096b\u00de\uffff\1\u0973\1\uffff\1\u096a"+
            "\2\uffff\1\u0974\2\uffff\1\u0960\1\u096f\1\u0963\4\uffff\1\u096e"+
            "\1\u0970\1\u096c\1\u096d\1\u0966\1\u0967\1\u0968\1\u0969\1\u0965"+
            "\1\u0964\1\u0961\1\u0962",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0990\1\u0991\1\u0992\1\u0993\1\uffff\1\u098c\1\u098b\1"+
            "\u098f\34\uffff\1\u0985\u00de\uffff\1\u098d\1\uffff\1\u0984"+
            "\2\uffff\1\u098e\2\uffff\1\u097a\1\u0989\1\u097d\4\uffff\1\u0988"+
            "\1\u098a\1\u0986\1\u0987\1\u0980\1\u0981\1\u0982\1\u0983\1\u097f"+
            "\1\u097e\1\u097b\1\u097c",
            "\1\u09aa\1\u09ab\1\u09ac\1\u09ad\1\uffff\1\u09a7\1\u09a6\1"+
            "\u09a9\34\uffff\1\u09a0\u00de\uffff\1\u09a8\1\uffff\1\u099f"+
            "\2\uffff\1\u0994\2\uffff\1\u0995\1\u09a4\1\u0998\4\uffff\1\u09a3"+
            "\1\u09a5\1\u09a1\1\u09a2\1\u099b\1\u099c\1\u099d\1\u099e\1\u099a"+
            "\1\u0999\1\u0996\1\u0997",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09c4\1\u09c5\1\u09c6\1\u09c7\1\uffff\1\u09c1\1\u09c0\1"+
            "\u09c3\34\uffff\1\u09ba\u00de\uffff\1\u09c2\1\uffff\1\u09b9"+
            "\2\uffff\1\u09ae\2\uffff\1\u09af\1\u09be\1\u09b2\4\uffff\1\u09bd"+
            "\1\u09bf\1\u09bb\1\u09bc\1\u09b5\1\u09b6\1\u09b7\1\u09b8\1\u09b4"+
            "\1\u09b3\1\u09b0\1\u09b1",
            "\1\u09de\1\u09df\1\u09e0\1\u09e1\1\uffff\1\u09db\1\u09da\1"+
            "\u09dd\34\uffff\1\u09d4\u00de\uffff\1\u09dc\1\uffff\1\u09d3"+
            "\2\uffff\1\u09c8\2\uffff\1\u09c9\1\u09d8\1\u09cc\4\uffff\1\u09d7"+
            "\1\u09d9\1\u09d5\1\u09d6\1\u09cf\1\u09d0\1\u09d1\1\u09d2\1\u09ce"+
            "\1\u09cd\1\u09ca\1\u09cb",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u09f8\1\u09f9\1\u09fa\1\u09fb\1\uffff\1\u09f5\1\u09f4\1"+
            "\u09f7\34\uffff\1\u09ee\u00de\uffff\1\u09f6\1\uffff\1\u09ed"+
            "\2\uffff\1\u09e2\2\uffff\1\u09e3\1\u09f2\1\u09e6\4\uffff\1\u09f1"+
            "\1\u09f3\1\u09ef\1\u09f0\1\u09e9\1\u09ea\1\u09eb\1\u09ec\1\u09e8"+
            "\1\u09e7\1\u09e4\1\u09e5",
            "\1\u0a12\1\u0a13\1\u0a14\1\u0a15\1\uffff\1\u0a0f\1\u0a0e\1"+
            "\u0a11\34\uffff\1\u0a08\u00de\uffff\1\u0a10\1\uffff\1\u0a07"+
            "\2\uffff\1\u09fc\2\uffff\1\u09fd\1\u0a0c\1\u0a00\4\uffff\1\u0a0b"+
            "\1\u0a0d\1\u0a09\1\u0a0a\1\u0a03\1\u0a04\1\u0a05\1\u0a06\1\u0a02"+
            "\1\u0a01\1\u09fe\1\u09ff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a2c\1\u0a2d\1\u0a2e\1\u0a2f\1\uffff\1\u0a29\1\u0a28\1"+
            "\u0a2b\34\uffff\1\u0a22\u00de\uffff\1\u0a2a\1\uffff\1\u0a21"+
            "\2\uffff\1\16\2\uffff\1\u0a17\1\u0a26\1\u0a1a\4\uffff\1\u0a25"+
            "\1\u0a27\1\u0a23\1\u0a24\1\u0a1d\1\u0a1e\1\u0a1f\1\u0a20\1\u0a1c"+
            "\1\u0a1b\1\u0a18\1\u0a19",
            "\1\u0a45\1\u0a46\1\u0a47\1\u0a48\1\uffff\1\u0a42\1\u0a41\1"+
            "\u0a44\34\uffff\1\u0a3b\u00de\uffff\1\u0a43\1\uffff\1\u0a3a"+
            "\2\uffff\1\16\2\uffff\1\u0a30\1\u0a3f\1\u0a33\4\uffff\1\u0a3e"+
            "\1\u0a40\1\u0a3c\1\u0a3d\1\u0a36\1\u0a37\1\u0a38\1\u0a39\1\u0a35"+
            "\1\u0a34\1\u0a31\1\u0a32",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a61\1\u0a62\1\u0a63\1\u0a64\1\uffff\1\u0a5d\1\u0a5c\1"+
            "\u0a60\3\uffff\1\u0a5f\30\uffff\1\u0a56\u00de\uffff\1\u0a5e"+
            "\1\uffff\1\u0a55\2\uffff\1\16\2\uffff\1\u0a4b\1\u0a5a\1\u0a4e"+
            "\4\uffff\1\u0a59\1\u0a5b\1\u0a57\1\u0a58\1\u0a51\1\u0a52\1\u0a53"+
            "\1\u0a54\1\u0a50\1\u0a4f\1\u0a4c\1\u0a4d",
            "\1\u0a7c\1\u0a7d\1\u0a7e\1\u0a7f\1\uffff\1\u0a78\1\u0a77\1"+
            "\u0a7b\3\uffff\1\u0a7a\30\uffff\1\u0a71\u00de\uffff\1\u0a79"+
            "\1\uffff\1\u0a70\2\uffff\1\16\2\uffff\1\u0a66\1\u0a75\1\u0a69"+
            "\4\uffff\1\u0a74\1\u0a76\1\u0a72\1\u0a73\1\u0a6c\1\u0a6d\1\u0a6e"+
            "\1\u0a6f\1\u0a6b\1\u0a6a\1\u0a67\1\u0a68",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u0a95\1\u0a96\1\u0a97\1\u0a98\1\uffff\1\u0a93\1\u0a92\1"+
            "\u0a94\34\uffff\1\u0a8c\u00e0\uffff\1\u0a8b\2\uffff\1\u0a80"+
            "\2\uffff\1\u0a81\1\u0a90\1\u0a84\4\uffff\1\u0a8f\1\u0a91\1\u0a8d"+
            "\1\u0a8e\1\u0a87\1\u0a88\1\u0a89\1\u0a8a\1\u0a86\1\u0a85\1\u0a82"+
            "\1\u0a83",
            "\1\u0aae\1\u0aaf\1\u0ab0\1\u0ab1\1\uffff\1\u0aac\1\u0aab\1"+
            "\u0aad\34\uffff\1\u0aa5\u00e0\uffff\1\u0aa4\2\uffff\1\u0a99"+
            "\2\uffff\1\u0a9a\1\u0aa9\1\u0a9d\4\uffff\1\u0aa8\1\u0aaa\1\u0aa6"+
            "\1\u0aa7\1\u0aa0\1\u0aa1\1\u0aa2\1\u0aa3\1\u0a9f\1\u0a9e\1\u0a9b"+
            "\1\u0a9c",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] DFA170_eot = DFA.unpackEncodedString(DFA170_eotS);
    static final short[] DFA170_eof = DFA.unpackEncodedString(DFA170_eofS);
    static final char[] DFA170_min = DFA.unpackEncodedStringToUnsignedChars(DFA170_minS);
    static final char[] DFA170_max = DFA.unpackEncodedStringToUnsignedChars(DFA170_maxS);
    static final short[] DFA170_accept = DFA.unpackEncodedString(DFA170_acceptS);
    static final short[] DFA170_special = DFA.unpackEncodedString(DFA170_specialS);
    static final short[][] DFA170_transition;

    static {
        int numStates = DFA170_transitionS.length;
        DFA170_transition = new short[numStates][];
        for (int i=0; i<numStates; i++) {
            DFA170_transition[i] = DFA.unpackEncodedString(DFA170_transitionS[i]);
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = DFA170_eot;
            this.eof = DFA170_eof;
            this.min = DFA170_min;
            this.max = DFA170_max;
            this.accept = DFA170_accept;
            this.special = DFA170_special;
            this.transition = DFA170_transition;
        }
        public String getDescription() {
            return "1196:1: unaryExpression : ( MINUS eventProperty -> ^( UNARY_MINUS eventProperty ) | constant | substitution | LPAREN expression RPAREN | eventPropertyOrLibFunction | ( builtinFunc )=> ( builtinFunc ) | arrayExpression | subSelectExpression | existsSubSelectExpression );";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_0 = input.LA(1);

                         
                        int index170_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_0==MINUS) ) {s = 1;}

                        else if ( ((LA170_0>=BOOLEAN_TRUE && LA170_0<=VALUE_NULL)||LA170_0==NUM_DOUBLE||LA170_0==PLUS||(LA170_0>=STRING_LITERAL && LA170_0<=QUOTED_STRING_LITERAL)||LA170_0==NUM_INT||(LA170_0>=NUM_LONG && LA170_0<=NUM_FLOAT)) ) {s = 2;}

                        else if ( (LA170_0==QUESTION) ) {s = 12;}

                        else if ( (LA170_0==LPAREN) ) {s = 13;}

                        else if ( (LA170_0==ESCAPE||LA170_0==EVERY_EXPR||(LA170_0>=MAX && LA170_0<=MIN)||LA170_0==OUTER||(LA170_0>=JOIN && LA170_0<=FULL)||LA170_0==EVENTS||(LA170_0>=UNIDIRECTIONAL && LA170_0<=METADATASQL)||(LA170_0>=WEEKDAY && LA170_0<=LW)||LA170_0==SNAPSHOT||(LA170_0>=VARIABLE && LA170_0<=INDEX)||(LA170_0>=DEFINE && LA170_0<=MATCHES)||LA170_0==WHILE||LA170_0==IDENT||LA170_0==TICKED_STRING_LITERAL) ) {s = 14;}

                        else if ( (LA170_0==COUNT) ) {s = 17;}

                        else if ( (LA170_0==SUM) ) {s = 20;}

                        else if ( (LA170_0==AVG) ) {s = 21;}

                        else if ( (LA170_0==COALESCE) ) {s = 24;}

                        else if ( (LA170_0==MEDIAN) ) {s = 25;}

                        else if ( (LA170_0==STDDEV) ) {s = 26;}

                        else if ( (LA170_0==AVEDEV) ) {s = 27;}

                        else if ( (LA170_0==FIRST) ) {s = 29;}

                        else if ( (LA170_0==LAST) ) {s = 30;}

                        else if ( (LA170_0==PREVIOUS) ) {s = 39;}

                        else if ( (LA170_0==PREVIOUSTAIL) ) {s = 40;}

                        else if ( (LA170_0==PRIOR) ) {s = 41;}

                        else if ( (LA170_0==INSTANCEOF) ) {s = 44;}

                        else if ( (LA170_0==CAST) ) {s = 45;}

                        else if ( (LA170_0==WINDOW) ) {s = 49;}

                        else if ( (LA170_0==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 58;}

                        else if ( (LA170_0==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 59;}

                        else if ( (LA170_0==EXISTS) ) {s = 60;}

                        else if ( (LA170_0==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 61;}

                        else if ( (LA170_0==LCURLY) ) {s = 62;}

                         
                        input.seek(index170_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA170_176 = input.LA(1);

                         
                        int index170_176 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_176==STRING_LITERAL) ) {s = 1062;}

                        else if ( (LA170_176==QUOTED_STRING_LITERAL) ) {s = 1063;}

                        else if ( (LA170_176==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1064;}

                        else if ( (LA170_176==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1065;}

                        else if ( (LA170_176==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1066;}

                        else if ( (LA170_176==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1067;}

                        else if ( (LA170_176==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1068;}

                        else if ( (LA170_176==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1069;}

                        else if ( (LA170_176==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1070;}

                        else if ( (LA170_176==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1071;}

                        else if ( (LA170_176==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1072;}

                        else if ( (LA170_176==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1073;}

                        else if ( (LA170_176==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1074;}

                        else if ( (LA170_176==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1075;}

                        else if ( (LA170_176==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1076;}

                        else if ( (LA170_176==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1077;}

                        else if ( (LA170_176==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1078;}

                        else if ( (LA170_176==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1079;}

                        else if ( (LA170_176==AT) && (synpred3_EsperEPL2Grammar())) {s = 1080;}

                        else if ( (LA170_176==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1081;}

                        else if ( (LA170_176==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1082;}

                        else if ( (LA170_176==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1083;}

                        else if ( (LA170_176==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1084;}

                        else if ( (LA170_176==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1085;}

                        else if ( (LA170_176==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1086;}

                        else if ( (LA170_176==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1087;}

                        else if ( (LA170_176==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1088;}

                        else if ( (LA170_176==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1089;}

                        else if ( (LA170_176==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1090;}

                        else if ( (LA170_176==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1091;}

                        else if ( (LA170_176==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1092;}

                        else if ( (LA170_176==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1093;}

                        else if ( (LA170_176==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1094;}

                        else if ( (LA170_176==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1095;}

                        else if ( (LA170_176==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1096;}

                        else if ( (LA170_176==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1097;}

                        else if ( (LA170_176==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1098;}

                        else if ( (LA170_176==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1099;}

                        else if ( (LA170_176==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1100;}

                        else if ( (LA170_176==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1101;}

                        else if ( (LA170_176==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1102;}

                        else if ( (LA170_176==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1103;}

                        else if ( (LA170_176==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1104;}

                        else if ( (LA170_176==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1105;}

                        else if ( (LA170_176==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1106;}

                        else if ( (LA170_176==LW) && (synpred3_EsperEPL2Grammar())) {s = 1107;}

                        else if ( (LA170_176==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1108;}

                        else if ( (LA170_176==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1109;}

                        else if ( (LA170_176==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1110;}

                        else if ( (LA170_176==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1111;}

                        else if ( (LA170_176==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1112;}

                        else if ( (LA170_176==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1113;}

                        else if ( (LA170_176==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1114;}

                        else if ( (LA170_176==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1115;}

                        else if ( (LA170_176==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1116;}

                        else if ( (LA170_176==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1117;}

                        else if ( (LA170_176==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1118;}

                        else if ( (LA170_176==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1119;}

                        else if ( (LA170_176==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1120;}

                        else if ( (LA170_176==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1121;}

                        else if ( (LA170_176==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1122;}

                        else if ( (LA170_176==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1123;}

                        else if ( (LA170_176==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1124;}

                        else if ( (LA170_176==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1125;}

                        else if ( (LA170_176==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1126;}

                        else if ( (LA170_176==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1127;}

                        else if ( (LA170_176==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1128;}

                         
                        input.seek(index170_176);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA170_235 = input.LA(1);

                         
                        int index170_235 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_235==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1129;}

                        else if ( (LA170_235==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1130;}

                        else if ( (LA170_235==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1131;}

                        else if ( (LA170_235==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1132;}

                        else if ( (LA170_235==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1133;}

                        else if ( (LA170_235==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1134;}

                        else if ( (LA170_235==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1135;}

                        else if ( (LA170_235==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1136;}

                        else if ( (LA170_235==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1137;}

                        else if ( (LA170_235==STRING_LITERAL) ) {s = 1138;}

                        else if ( (LA170_235==QUOTED_STRING_LITERAL) ) {s = 1139;}

                        else if ( (LA170_235==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1140;}

                        else if ( (LA170_235==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1141;}

                        else if ( (LA170_235==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1142;}

                        else if ( (LA170_235==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1143;}

                        else if ( (LA170_235==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1144;}

                        else if ( (LA170_235==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1145;}

                        else if ( (LA170_235==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1146;}

                        else if ( (LA170_235==AT) && (synpred3_EsperEPL2Grammar())) {s = 1147;}

                        else if ( (LA170_235==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1148;}

                        else if ( (LA170_235==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1149;}

                        else if ( (LA170_235==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1150;}

                        else if ( (LA170_235==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1151;}

                        else if ( (LA170_235==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1152;}

                        else if ( (LA170_235==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1153;}

                        else if ( (LA170_235==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1154;}

                        else if ( (LA170_235==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1155;}

                        else if ( (LA170_235==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1156;}

                        else if ( (LA170_235==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1157;}

                        else if ( (LA170_235==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1158;}

                        else if ( (LA170_235==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1159;}

                        else if ( (LA170_235==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1160;}

                        else if ( (LA170_235==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1161;}

                        else if ( (LA170_235==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1162;}

                        else if ( (LA170_235==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1163;}

                        else if ( (LA170_235==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1164;}

                        else if ( (LA170_235==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1165;}

                        else if ( (LA170_235==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1166;}

                        else if ( (LA170_235==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1167;}

                        else if ( (LA170_235==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1168;}

                        else if ( (LA170_235==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1169;}

                        else if ( (LA170_235==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1170;}

                        else if ( (LA170_235==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1171;}

                        else if ( (LA170_235==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1172;}

                        else if ( (LA170_235==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1173;}

                        else if ( (LA170_235==LW) && (synpred3_EsperEPL2Grammar())) {s = 1174;}

                        else if ( (LA170_235==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1175;}

                        else if ( (LA170_235==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1176;}

                        else if ( (LA170_235==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1177;}

                        else if ( (LA170_235==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1178;}

                        else if ( (LA170_235==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1179;}

                        else if ( (LA170_235==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1180;}

                        else if ( (LA170_235==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1181;}

                        else if ( (LA170_235==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1182;}

                        else if ( (LA170_235==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1183;}

                        else if ( (LA170_235==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1184;}

                        else if ( (LA170_235==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1185;}

                        else if ( (LA170_235==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1186;}

                        else if ( (LA170_235==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1187;}

                        else if ( (LA170_235==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1188;}

                        else if ( (LA170_235==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1189;}

                        else if ( (LA170_235==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1190;}

                        else if ( (LA170_235==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1191;}

                        else if ( (LA170_235==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1192;}

                        else if ( (LA170_235==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1193;}

                        else if ( (LA170_235==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1194;}

                         
                        input.seek(index170_235);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA170_294 = input.LA(1);

                         
                        int index170_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_294==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1195;}

                        else if ( (LA170_294==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1196;}

                        else if ( (LA170_294==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1197;}

                        else if ( (LA170_294==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1198;}

                        else if ( (LA170_294==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1199;}

                        else if ( (LA170_294==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1200;}

                        else if ( (LA170_294==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1201;}

                        else if ( (LA170_294==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1202;}

                        else if ( (LA170_294==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1203;}

                        else if ( (LA170_294==STRING_LITERAL) ) {s = 1204;}

                        else if ( (LA170_294==QUOTED_STRING_LITERAL) ) {s = 1205;}

                        else if ( (LA170_294==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1206;}

                        else if ( (LA170_294==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1207;}

                        else if ( (LA170_294==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1208;}

                        else if ( (LA170_294==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1209;}

                        else if ( (LA170_294==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1210;}

                        else if ( (LA170_294==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1211;}

                        else if ( (LA170_294==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1212;}

                        else if ( (LA170_294==AT) && (synpred3_EsperEPL2Grammar())) {s = 1213;}

                        else if ( (LA170_294==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1214;}

                        else if ( (LA170_294==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1215;}

                        else if ( (LA170_294==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1216;}

                        else if ( (LA170_294==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1217;}

                        else if ( (LA170_294==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1218;}

                        else if ( (LA170_294==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1219;}

                        else if ( (LA170_294==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1220;}

                        else if ( (LA170_294==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1221;}

                        else if ( (LA170_294==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1222;}

                        else if ( (LA170_294==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1223;}

                        else if ( (LA170_294==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1224;}

                        else if ( (LA170_294==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1225;}

                        else if ( (LA170_294==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1226;}

                        else if ( (LA170_294==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1227;}

                        else if ( (LA170_294==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1228;}

                        else if ( (LA170_294==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1229;}

                        else if ( (LA170_294==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1230;}

                        else if ( (LA170_294==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1231;}

                        else if ( (LA170_294==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1232;}

                        else if ( (LA170_294==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1233;}

                        else if ( (LA170_294==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1234;}

                        else if ( (LA170_294==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1235;}

                        else if ( (LA170_294==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1236;}

                        else if ( (LA170_294==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1237;}

                        else if ( (LA170_294==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1238;}

                        else if ( (LA170_294==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1239;}

                        else if ( (LA170_294==LW) && (synpred3_EsperEPL2Grammar())) {s = 1240;}

                        else if ( (LA170_294==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1241;}

                        else if ( (LA170_294==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1242;}

                        else if ( (LA170_294==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1243;}

                        else if ( (LA170_294==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1244;}

                        else if ( (LA170_294==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1245;}

                        else if ( (LA170_294==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1246;}

                        else if ( (LA170_294==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1247;}

                        else if ( (LA170_294==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1248;}

                        else if ( (LA170_294==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1249;}

                        else if ( (LA170_294==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1250;}

                        else if ( (LA170_294==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1251;}

                        else if ( (LA170_294==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1252;}

                        else if ( (LA170_294==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1253;}

                        else if ( (LA170_294==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1254;}

                        else if ( (LA170_294==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1255;}

                        else if ( (LA170_294==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1256;}

                        else if ( (LA170_294==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1257;}

                        else if ( (LA170_294==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1258;}

                        else if ( (LA170_294==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1259;}

                        else if ( (LA170_294==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1260;}

                         
                        input.seek(index170_294);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA170_353 = input.LA(1);

                         
                        int index170_353 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_353==STRING_LITERAL) ) {s = 1261;}

                        else if ( (LA170_353==QUOTED_STRING_LITERAL) ) {s = 1262;}

                        else if ( (LA170_353==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1263;}

                        else if ( (LA170_353==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1264;}

                        else if ( (LA170_353==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1265;}

                        else if ( (LA170_353==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1266;}

                        else if ( (LA170_353==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1267;}

                        else if ( (LA170_353==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1268;}

                        else if ( (LA170_353==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1269;}

                        else if ( (LA170_353==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1270;}

                        else if ( (LA170_353==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1271;}

                        else if ( (LA170_353==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1272;}

                        else if ( (LA170_353==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1273;}

                        else if ( (LA170_353==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1274;}

                        else if ( (LA170_353==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1275;}

                        else if ( (LA170_353==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1276;}

                        else if ( (LA170_353==AT) && (synpred3_EsperEPL2Grammar())) {s = 1277;}

                        else if ( (LA170_353==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1278;}

                        else if ( (LA170_353==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1279;}

                        else if ( (LA170_353==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1280;}

                        else if ( (LA170_353==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1281;}

                        else if ( (LA170_353==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1282;}

                        else if ( (LA170_353==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1283;}

                        else if ( (LA170_353==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1284;}

                        else if ( (LA170_353==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1285;}

                        else if ( (LA170_353==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1286;}

                        else if ( (LA170_353==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1287;}

                        else if ( (LA170_353==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1288;}

                        else if ( (LA170_353==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1289;}

                        else if ( (LA170_353==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1290;}

                        else if ( (LA170_353==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1291;}

                        else if ( (LA170_353==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1292;}

                        else if ( (LA170_353==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1293;}

                        else if ( (LA170_353==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1294;}

                        else if ( (LA170_353==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1295;}

                        else if ( (LA170_353==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1296;}

                        else if ( (LA170_353==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1297;}

                        else if ( (LA170_353==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1298;}

                        else if ( (LA170_353==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1299;}

                        else if ( (LA170_353==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1300;}

                        else if ( (LA170_353==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1301;}

                        else if ( (LA170_353==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1302;}

                        else if ( (LA170_353==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1303;}

                        else if ( (LA170_353==LW) && (synpred3_EsperEPL2Grammar())) {s = 1304;}

                        else if ( (LA170_353==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1305;}

                        else if ( (LA170_353==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1306;}

                        else if ( (LA170_353==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1307;}

                        else if ( (LA170_353==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1308;}

                        else if ( (LA170_353==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1309;}

                        else if ( (LA170_353==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1310;}

                        else if ( (LA170_353==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1311;}

                        else if ( (LA170_353==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1312;}

                        else if ( (LA170_353==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1313;}

                        else if ( (LA170_353==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1314;}

                        else if ( (LA170_353==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1315;}

                        else if ( (LA170_353==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1316;}

                        else if ( (LA170_353==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1317;}

                        else if ( (LA170_353==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1318;}

                        else if ( (LA170_353==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1319;}

                        else if ( (LA170_353==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1320;}

                        else if ( (LA170_353==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1321;}

                        else if ( (LA170_353==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1322;}

                        else if ( (LA170_353==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1323;}

                        else if ( (LA170_353==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1324;}

                         
                        input.seek(index170_353);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA170_412 = input.LA(1);

                         
                        int index170_412 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_412==STRING_LITERAL) ) {s = 1325;}

                        else if ( (LA170_412==QUOTED_STRING_LITERAL) ) {s = 1326;}

                        else if ( (LA170_412==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1327;}

                        else if ( (LA170_412==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1328;}

                        else if ( (LA170_412==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1329;}

                        else if ( (LA170_412==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1330;}

                        else if ( (LA170_412==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1331;}

                        else if ( (LA170_412==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1332;}

                        else if ( (LA170_412==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1333;}

                        else if ( (LA170_412==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1334;}

                        else if ( (LA170_412==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1335;}

                        else if ( (LA170_412==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1336;}

                        else if ( (LA170_412==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1337;}

                        else if ( (LA170_412==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1338;}

                        else if ( (LA170_412==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1339;}

                        else if ( (LA170_412==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1340;}

                        else if ( (LA170_412==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1341;}

                        else if ( (LA170_412==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1342;}

                        else if ( (LA170_412==AT) && (synpred3_EsperEPL2Grammar())) {s = 1343;}

                        else if ( (LA170_412==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1344;}

                        else if ( (LA170_412==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1345;}

                        else if ( (LA170_412==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1346;}

                        else if ( (LA170_412==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1347;}

                        else if ( (LA170_412==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1348;}

                        else if ( (LA170_412==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1349;}

                        else if ( (LA170_412==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1350;}

                        else if ( (LA170_412==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1351;}

                        else if ( (LA170_412==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1352;}

                        else if ( (LA170_412==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1353;}

                        else if ( (LA170_412==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1354;}

                        else if ( (LA170_412==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1355;}

                        else if ( (LA170_412==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1356;}

                        else if ( (LA170_412==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1357;}

                        else if ( (LA170_412==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1358;}

                        else if ( (LA170_412==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1359;}

                        else if ( (LA170_412==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1360;}

                        else if ( (LA170_412==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1361;}

                        else if ( (LA170_412==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1362;}

                        else if ( (LA170_412==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1363;}

                        else if ( (LA170_412==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1364;}

                        else if ( (LA170_412==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1365;}

                        else if ( (LA170_412==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1366;}

                        else if ( (LA170_412==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1367;}

                        else if ( (LA170_412==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1368;}

                        else if ( (LA170_412==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1369;}

                        else if ( (LA170_412==LW) && (synpred3_EsperEPL2Grammar())) {s = 1370;}

                        else if ( (LA170_412==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1371;}

                        else if ( (LA170_412==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1372;}

                        else if ( (LA170_412==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1373;}

                        else if ( (LA170_412==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1374;}

                        else if ( (LA170_412==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1375;}

                        else if ( (LA170_412==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1376;}

                        else if ( (LA170_412==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1377;}

                        else if ( (LA170_412==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1378;}

                        else if ( (LA170_412==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1379;}

                        else if ( (LA170_412==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1380;}

                        else if ( (LA170_412==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1381;}

                        else if ( (LA170_412==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1382;}

                        else if ( (LA170_412==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1383;}

                        else if ( (LA170_412==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1384;}

                        else if ( (LA170_412==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1385;}

                        else if ( (LA170_412==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1386;}

                        else if ( (LA170_412==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1387;}

                        else if ( (LA170_412==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1388;}

                        else if ( (LA170_412==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1389;}

                        else if ( (LA170_412==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1390;}

                         
                        input.seek(index170_412);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA170_471 = input.LA(1);

                         
                        int index170_471 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_471==STRING_LITERAL) ) {s = 1391;}

                        else if ( (LA170_471==QUOTED_STRING_LITERAL) ) {s = 1392;}

                        else if ( (LA170_471==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1393;}

                        else if ( (LA170_471==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1394;}

                        else if ( (LA170_471==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1395;}

                        else if ( (LA170_471==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1396;}

                        else if ( (LA170_471==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1397;}

                        else if ( (LA170_471==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1398;}

                        else if ( (LA170_471==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1399;}

                        else if ( (LA170_471==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1400;}

                        else if ( (LA170_471==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1401;}

                        else if ( (LA170_471==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1402;}

                        else if ( (LA170_471==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1403;}

                        else if ( (LA170_471==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1404;}

                        else if ( (LA170_471==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1405;}

                        else if ( (LA170_471==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1406;}

                        else if ( (LA170_471==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1407;}

                        else if ( (LA170_471==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1408;}

                        else if ( (LA170_471==AT) && (synpred3_EsperEPL2Grammar())) {s = 1409;}

                        else if ( (LA170_471==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1410;}

                        else if ( (LA170_471==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1411;}

                        else if ( (LA170_471==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1412;}

                        else if ( (LA170_471==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1413;}

                        else if ( (LA170_471==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1414;}

                        else if ( (LA170_471==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1415;}

                        else if ( (LA170_471==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1416;}

                        else if ( (LA170_471==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1417;}

                        else if ( (LA170_471==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1418;}

                        else if ( (LA170_471==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1419;}

                        else if ( (LA170_471==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1420;}

                        else if ( (LA170_471==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1421;}

                        else if ( (LA170_471==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1422;}

                        else if ( (LA170_471==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1423;}

                        else if ( (LA170_471==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1424;}

                        else if ( (LA170_471==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1425;}

                        else if ( (LA170_471==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1426;}

                        else if ( (LA170_471==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1427;}

                        else if ( (LA170_471==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1428;}

                        else if ( (LA170_471==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1429;}

                        else if ( (LA170_471==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1430;}

                        else if ( (LA170_471==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1431;}

                        else if ( (LA170_471==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1432;}

                        else if ( (LA170_471==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1433;}

                        else if ( (LA170_471==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1434;}

                        else if ( (LA170_471==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1435;}

                        else if ( (LA170_471==LW) && (synpred3_EsperEPL2Grammar())) {s = 1436;}

                        else if ( (LA170_471==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1437;}

                        else if ( (LA170_471==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1438;}

                        else if ( (LA170_471==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1439;}

                        else if ( (LA170_471==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1440;}

                        else if ( (LA170_471==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1441;}

                        else if ( (LA170_471==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1442;}

                        else if ( (LA170_471==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1443;}

                        else if ( (LA170_471==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1444;}

                        else if ( (LA170_471==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1445;}

                        else if ( (LA170_471==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1446;}

                        else if ( (LA170_471==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1447;}

                        else if ( (LA170_471==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1448;}

                        else if ( (LA170_471==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1449;}

                        else if ( (LA170_471==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1450;}

                        else if ( (LA170_471==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1451;}

                        else if ( (LA170_471==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1452;}

                        else if ( (LA170_471==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1453;}

                        else if ( (LA170_471==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1454;}

                        else if ( (LA170_471==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1455;}

                        else if ( (LA170_471==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1456;}

                         
                        input.seek(index170_471);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA170_530 = input.LA(1);

                         
                        int index170_530 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_530==STRING_LITERAL) ) {s = 1457;}

                        else if ( (LA170_530==QUOTED_STRING_LITERAL) ) {s = 1458;}

                        else if ( (LA170_530==ALL) && (synpred3_EsperEPL2Grammar())) {s = 1459;}

                        else if ( (LA170_530==DISTINCT) && (synpred3_EsperEPL2Grammar())) {s = 1460;}

                        else if ( (LA170_530==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1461;}

                        else if ( (LA170_530==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1462;}

                        else if ( (LA170_530==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1463;}

                        else if ( (LA170_530==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1464;}

                        else if ( (LA170_530==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1465;}

                        else if ( (LA170_530==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1466;}

                        else if ( (LA170_530==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1467;}

                        else if ( (LA170_530==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1468;}

                        else if ( (LA170_530==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1469;}

                        else if ( (LA170_530==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1470;}

                        else if ( (LA170_530==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1471;}

                        else if ( (LA170_530==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1472;}

                        else if ( (LA170_530==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1473;}

                        else if ( (LA170_530==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1474;}

                        else if ( (LA170_530==AT) && (synpred3_EsperEPL2Grammar())) {s = 1475;}

                        else if ( (LA170_530==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1476;}

                        else if ( (LA170_530==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1477;}

                        else if ( (LA170_530==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1478;}

                        else if ( (LA170_530==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1479;}

                        else if ( (LA170_530==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1480;}

                        else if ( (LA170_530==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1481;}

                        else if ( (LA170_530==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1482;}

                        else if ( (LA170_530==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1483;}

                        else if ( (LA170_530==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1484;}

                        else if ( (LA170_530==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1485;}

                        else if ( (LA170_530==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1486;}

                        else if ( (LA170_530==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1487;}

                        else if ( (LA170_530==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1488;}

                        else if ( (LA170_530==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1489;}

                        else if ( (LA170_530==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1490;}

                        else if ( (LA170_530==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1491;}

                        else if ( (LA170_530==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1492;}

                        else if ( (LA170_530==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1493;}

                        else if ( (LA170_530==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1494;}

                        else if ( (LA170_530==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1495;}

                        else if ( (LA170_530==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1496;}

                        else if ( (LA170_530==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1497;}

                        else if ( (LA170_530==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1498;}

                        else if ( (LA170_530==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1499;}

                        else if ( (LA170_530==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1500;}

                        else if ( (LA170_530==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1501;}

                        else if ( (LA170_530==LW) && (synpred3_EsperEPL2Grammar())) {s = 1502;}

                        else if ( (LA170_530==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1503;}

                        else if ( (LA170_530==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1504;}

                        else if ( (LA170_530==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1505;}

                        else if ( (LA170_530==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1506;}

                        else if ( (LA170_530==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1507;}

                        else if ( (LA170_530==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1508;}

                        else if ( (LA170_530==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1509;}

                        else if ( (LA170_530==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1510;}

                        else if ( (LA170_530==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1511;}

                        else if ( (LA170_530==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1512;}

                        else if ( (LA170_530==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1513;}

                        else if ( (LA170_530==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1514;}

                        else if ( (LA170_530==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1515;}

                        else if ( (LA170_530==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1516;}

                        else if ( (LA170_530==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1517;}

                        else if ( (LA170_530==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1518;}

                        else if ( (LA170_530==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1519;}

                        else if ( (LA170_530==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1520;}

                        else if ( (LA170_530==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1521;}

                        else if ( (LA170_530==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1522;}

                         
                        input.seek(index170_530);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA170_589 = input.LA(1);

                         
                        int index170_589 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_589==STRING_LITERAL) ) {s = 1523;}

                        else if ( (LA170_589==QUOTED_STRING_LITERAL) ) {s = 1524;}

                        else if ( (LA170_589==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1525;}

                        else if ( (LA170_589==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1526;}

                        else if ( (LA170_589==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1527;}

                        else if ( (LA170_589==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1528;}

                        else if ( (LA170_589==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1529;}

                        else if ( (LA170_589==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1530;}

                        else if ( (LA170_589==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1531;}

                        else if ( (LA170_589==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1532;}

                        else if ( (LA170_589==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1533;}

                        else if ( (LA170_589==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1534;}

                        else if ( (LA170_589==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1535;}

                        else if ( (LA170_589==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1536;}

                        else if ( (LA170_589==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1537;}

                        else if ( (LA170_589==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1538;}

                        else if ( (LA170_589==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1539;}

                        else if ( (LA170_589==AT) && (synpred3_EsperEPL2Grammar())) {s = 1540;}

                        else if ( (LA170_589==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1541;}

                        else if ( (LA170_589==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1542;}

                        else if ( (LA170_589==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1543;}

                        else if ( (LA170_589==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1544;}

                        else if ( (LA170_589==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1545;}

                        else if ( (LA170_589==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1546;}

                        else if ( (LA170_589==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1547;}

                        else if ( (LA170_589==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1548;}

                        else if ( (LA170_589==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1549;}

                        else if ( (LA170_589==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1550;}

                        else if ( (LA170_589==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1551;}

                        else if ( (LA170_589==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1552;}

                        else if ( (LA170_589==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1553;}

                        else if ( (LA170_589==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1554;}

                        else if ( (LA170_589==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1555;}

                        else if ( (LA170_589==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1556;}

                        else if ( (LA170_589==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1557;}

                        else if ( (LA170_589==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1558;}

                        else if ( (LA170_589==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1559;}

                        else if ( (LA170_589==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1560;}

                        else if ( (LA170_589==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1561;}

                        else if ( (LA170_589==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1562;}

                        else if ( (LA170_589==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1563;}

                        else if ( (LA170_589==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1564;}

                        else if ( (LA170_589==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1565;}

                        else if ( (LA170_589==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1566;}

                        else if ( (LA170_589==LW) && (synpred3_EsperEPL2Grammar())) {s = 1567;}

                        else if ( (LA170_589==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1568;}

                        else if ( (LA170_589==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1569;}

                        else if ( (LA170_589==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1570;}

                        else if ( (LA170_589==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1571;}

                        else if ( (LA170_589==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1572;}

                        else if ( (LA170_589==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1573;}

                        else if ( (LA170_589==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1574;}

                        else if ( (LA170_589==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1575;}

                        else if ( (LA170_589==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1576;}

                        else if ( (LA170_589==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1577;}

                        else if ( (LA170_589==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1578;}

                        else if ( (LA170_589==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1579;}

                        else if ( (LA170_589==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1580;}

                        else if ( (LA170_589==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1581;}

                        else if ( (LA170_589==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1582;}

                        else if ( (LA170_589==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1583;}

                        else if ( (LA170_589==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1584;}

                        else if ( (LA170_589==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1585;}

                        else if ( (LA170_589==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1586;}

                        else if ( (LA170_589==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1587;}

                         
                        input.seek(index170_589);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA170_648 = input.LA(1);

                         
                        int index170_648 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_648==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1588;}

                        else if ( (LA170_648==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1589;}

                        else if ( (LA170_648==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1590;}

                        else if ( (LA170_648==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1591;}

                        else if ( (LA170_648==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1592;}

                        else if ( (LA170_648==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1593;}

                        else if ( (LA170_648==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1594;}

                        else if ( (LA170_648==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1595;}

                        else if ( (LA170_648==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1596;}

                        else if ( (LA170_648==STRING_LITERAL) ) {s = 1597;}

                        else if ( (LA170_648==QUOTED_STRING_LITERAL) ) {s = 1598;}

                        else if ( (LA170_648==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1599;}

                        else if ( (LA170_648==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1600;}

                        else if ( (LA170_648==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1601;}

                        else if ( (LA170_648==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1602;}

                        else if ( (LA170_648==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1603;}

                        else if ( (LA170_648==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1604;}

                        else if ( (LA170_648==AT) && (synpred3_EsperEPL2Grammar())) {s = 1605;}

                        else if ( (LA170_648==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1606;}

                        else if ( (LA170_648==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1607;}

                        else if ( (LA170_648==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1608;}

                        else if ( (LA170_648==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1609;}

                        else if ( (LA170_648==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1610;}

                        else if ( (LA170_648==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1611;}

                        else if ( (LA170_648==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1612;}

                        else if ( (LA170_648==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1613;}

                        else if ( (LA170_648==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1614;}

                        else if ( (LA170_648==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1615;}

                        else if ( (LA170_648==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1616;}

                        else if ( (LA170_648==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1617;}

                        else if ( (LA170_648==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1618;}

                        else if ( (LA170_648==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1619;}

                        else if ( (LA170_648==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1620;}

                        else if ( (LA170_648==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1621;}

                        else if ( (LA170_648==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1622;}

                        else if ( (LA170_648==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1623;}

                        else if ( (LA170_648==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1624;}

                        else if ( (LA170_648==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1625;}

                        else if ( (LA170_648==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1626;}

                        else if ( (LA170_648==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1627;}

                        else if ( (LA170_648==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1628;}

                        else if ( (LA170_648==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1629;}

                        else if ( (LA170_648==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1630;}

                        else if ( (LA170_648==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1631;}

                        else if ( (LA170_648==LW) && (synpred3_EsperEPL2Grammar())) {s = 1632;}

                        else if ( (LA170_648==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1633;}

                        else if ( (LA170_648==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1634;}

                        else if ( (LA170_648==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1635;}

                        else if ( (LA170_648==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1636;}

                        else if ( (LA170_648==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1637;}

                        else if ( (LA170_648==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1638;}

                        else if ( (LA170_648==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1639;}

                        else if ( (LA170_648==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1640;}

                        else if ( (LA170_648==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1641;}

                        else if ( (LA170_648==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1642;}

                        else if ( (LA170_648==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1643;}

                        else if ( (LA170_648==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1644;}

                        else if ( (LA170_648==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1645;}

                        else if ( (LA170_648==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1646;}

                        else if ( (LA170_648==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1647;}

                        else if ( (LA170_648==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1648;}

                        else if ( (LA170_648==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1649;}

                        else if ( (LA170_648==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1650;}

                        else if ( (LA170_648==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1651;}

                        else if ( (LA170_648==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1652;}

                         
                        input.seek(index170_648);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA170_707 = input.LA(1);

                         
                        int index170_707 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_707==STRING_LITERAL) ) {s = 1653;}

                        else if ( (LA170_707==QUOTED_STRING_LITERAL) ) {s = 1654;}

                        else if ( (LA170_707==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1655;}

                        else if ( (LA170_707==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1656;}

                        else if ( (LA170_707==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1657;}

                        else if ( (LA170_707==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1658;}

                        else if ( (LA170_707==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1659;}

                        else if ( (LA170_707==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1660;}

                        else if ( (LA170_707==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1661;}

                        else if ( (LA170_707==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1662;}

                        else if ( (LA170_707==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1663;}

                        else if ( (LA170_707==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1664;}

                        else if ( (LA170_707==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1665;}

                        else if ( (LA170_707==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1666;}

                        else if ( (LA170_707==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1667;}

                        else if ( (LA170_707==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1668;}

                        else if ( (LA170_707==AT) && (synpred3_EsperEPL2Grammar())) {s = 1669;}

                        else if ( (LA170_707==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1670;}

                        else if ( (LA170_707==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1671;}

                        else if ( (LA170_707==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1672;}

                        else if ( (LA170_707==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1673;}

                        else if ( (LA170_707==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1674;}

                        else if ( (LA170_707==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1675;}

                        else if ( (LA170_707==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1676;}

                        else if ( (LA170_707==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1677;}

                        else if ( (LA170_707==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1678;}

                        else if ( (LA170_707==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1679;}

                        else if ( (LA170_707==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1680;}

                        else if ( (LA170_707==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1681;}

                        else if ( (LA170_707==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1682;}

                        else if ( (LA170_707==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1683;}

                        else if ( (LA170_707==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1684;}

                        else if ( (LA170_707==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1685;}

                        else if ( (LA170_707==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1686;}

                        else if ( (LA170_707==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1687;}

                        else if ( (LA170_707==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1688;}

                        else if ( (LA170_707==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1689;}

                        else if ( (LA170_707==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1690;}

                        else if ( (LA170_707==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1691;}

                        else if ( (LA170_707==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1692;}

                        else if ( (LA170_707==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1693;}

                        else if ( (LA170_707==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1694;}

                        else if ( (LA170_707==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1695;}

                        else if ( (LA170_707==LW) && (synpred3_EsperEPL2Grammar())) {s = 1696;}

                        else if ( (LA170_707==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1697;}

                        else if ( (LA170_707==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1698;}

                        else if ( (LA170_707==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1699;}

                        else if ( (LA170_707==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1700;}

                        else if ( (LA170_707==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1701;}

                        else if ( (LA170_707==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1702;}

                        else if ( (LA170_707==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1703;}

                        else if ( (LA170_707==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1704;}

                        else if ( (LA170_707==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1705;}

                        else if ( (LA170_707==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1706;}

                        else if ( (LA170_707==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1707;}

                        else if ( (LA170_707==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1708;}

                        else if ( (LA170_707==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1709;}

                        else if ( (LA170_707==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1710;}

                        else if ( (LA170_707==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1711;}

                        else if ( (LA170_707==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1712;}

                        else if ( (LA170_707==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1713;}

                        else if ( (LA170_707==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1714;}

                        else if ( (LA170_707==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1715;}

                        else if ( (LA170_707==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1716;}

                         
                        input.seek(index170_707);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA170_766 = input.LA(1);

                         
                        int index170_766 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_766==STRING_LITERAL) ) {s = 1717;}

                        else if ( (LA170_766==QUOTED_STRING_LITERAL) ) {s = 1718;}

                        else if ( (LA170_766==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1719;}

                        else if ( (LA170_766==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1720;}

                        else if ( (LA170_766==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1721;}

                        else if ( (LA170_766==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1722;}

                        else if ( (LA170_766==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1723;}

                        else if ( (LA170_766==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1724;}

                        else if ( (LA170_766==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1725;}

                        else if ( (LA170_766==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1726;}

                        else if ( (LA170_766==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1727;}

                        else if ( (LA170_766==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1728;}

                        else if ( (LA170_766==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1729;}

                        else if ( (LA170_766==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1730;}

                        else if ( (LA170_766==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1731;}

                        else if ( (LA170_766==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1732;}

                        else if ( (LA170_766==AT) && (synpred3_EsperEPL2Grammar())) {s = 1733;}

                        else if ( (LA170_766==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1734;}

                        else if ( (LA170_766==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1735;}

                        else if ( (LA170_766==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1736;}

                        else if ( (LA170_766==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1737;}

                        else if ( (LA170_766==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1738;}

                        else if ( (LA170_766==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1739;}

                        else if ( (LA170_766==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1740;}

                        else if ( (LA170_766==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1741;}

                        else if ( (LA170_766==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1742;}

                        else if ( (LA170_766==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1743;}

                        else if ( (LA170_766==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1744;}

                        else if ( (LA170_766==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1745;}

                        else if ( (LA170_766==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1746;}

                        else if ( (LA170_766==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1747;}

                        else if ( (LA170_766==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1748;}

                        else if ( (LA170_766==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1749;}

                        else if ( (LA170_766==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1750;}

                        else if ( (LA170_766==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1751;}

                        else if ( (LA170_766==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1752;}

                        else if ( (LA170_766==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1753;}

                        else if ( (LA170_766==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1754;}

                        else if ( (LA170_766==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1755;}

                        else if ( (LA170_766==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1756;}

                        else if ( (LA170_766==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1757;}

                        else if ( (LA170_766==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1758;}

                        else if ( (LA170_766==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1759;}

                        else if ( (LA170_766==LW) && (synpred3_EsperEPL2Grammar())) {s = 1760;}

                        else if ( (LA170_766==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1761;}

                        else if ( (LA170_766==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1762;}

                        else if ( (LA170_766==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1763;}

                        else if ( (LA170_766==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1764;}

                        else if ( (LA170_766==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1765;}

                        else if ( (LA170_766==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1766;}

                        else if ( (LA170_766==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1767;}

                        else if ( (LA170_766==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1768;}

                        else if ( (LA170_766==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1769;}

                        else if ( (LA170_766==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1770;}

                        else if ( (LA170_766==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1771;}

                        else if ( (LA170_766==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1772;}

                        else if ( (LA170_766==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1773;}

                        else if ( (LA170_766==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1774;}

                        else if ( (LA170_766==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1775;}

                        else if ( (LA170_766==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1776;}

                        else if ( (LA170_766==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1777;}

                        else if ( (LA170_766==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1778;}

                        else if ( (LA170_766==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1779;}

                        else if ( (LA170_766==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1780;}

                         
                        input.seek(index170_766);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA170_825 = input.LA(1);

                         
                        int index170_825 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_825==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1781;}

                        else if ( ((LA170_825>=STRING_LITERAL && LA170_825<=QUOTED_STRING_LITERAL)) ) {s = 14;}

                         
                        input.seek(index170_825);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA170_884 = input.LA(1);

                         
                        int index170_884 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_884==STRING_LITERAL) ) {s = 1784;}

                        else if ( (LA170_884==QUOTED_STRING_LITERAL) ) {s = 1785;}

                        else if ( (LA170_884==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1786;}

                        else if ( (LA170_884==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1787;}

                        else if ( (LA170_884==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1788;}

                        else if ( (LA170_884==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1789;}

                        else if ( (LA170_884==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1790;}

                        else if ( (LA170_884==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1791;}

                        else if ( (LA170_884==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1792;}

                        else if ( (LA170_884==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1793;}

                        else if ( (LA170_884==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1794;}

                        else if ( (LA170_884==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1795;}

                        else if ( (LA170_884==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1796;}

                        else if ( (LA170_884==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1797;}

                        else if ( (LA170_884==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1798;}

                        else if ( (LA170_884==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1799;}

                        else if ( (LA170_884==AT) && (synpred3_EsperEPL2Grammar())) {s = 1800;}

                        else if ( (LA170_884==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1801;}

                        else if ( (LA170_884==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1802;}

                        else if ( (LA170_884==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1803;}

                        else if ( (LA170_884==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1804;}

                        else if ( (LA170_884==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1805;}

                        else if ( (LA170_884==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1806;}

                        else if ( (LA170_884==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1807;}

                        else if ( (LA170_884==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1808;}

                        else if ( (LA170_884==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1809;}

                        else if ( (LA170_884==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1810;}

                        else if ( (LA170_884==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1811;}

                        else if ( (LA170_884==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1812;}

                        else if ( (LA170_884==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1813;}

                        else if ( (LA170_884==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1814;}

                        else if ( (LA170_884==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1815;}

                        else if ( (LA170_884==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1816;}

                        else if ( (LA170_884==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1817;}

                        else if ( (LA170_884==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1818;}

                        else if ( (LA170_884==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1819;}

                        else if ( (LA170_884==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1820;}

                        else if ( (LA170_884==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1821;}

                        else if ( (LA170_884==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1822;}

                        else if ( (LA170_884==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1823;}

                        else if ( (LA170_884==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1824;}

                        else if ( (LA170_884==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1825;}

                        else if ( (LA170_884==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1826;}

                        else if ( (LA170_884==LW) && (synpred3_EsperEPL2Grammar())) {s = 1827;}

                        else if ( (LA170_884==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1828;}

                        else if ( (LA170_884==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1829;}

                        else if ( (LA170_884==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1830;}

                        else if ( (LA170_884==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1831;}

                        else if ( (LA170_884==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1832;}

                        else if ( (LA170_884==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1833;}

                        else if ( (LA170_884==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1834;}

                        else if ( (LA170_884==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1835;}

                        else if ( (LA170_884==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1836;}

                        else if ( (LA170_884==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1837;}

                        else if ( (LA170_884==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1838;}

                        else if ( (LA170_884==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1839;}

                        else if ( (LA170_884==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1840;}

                        else if ( (LA170_884==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1841;}

                        else if ( (LA170_884==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1842;}

                        else if ( (LA170_884==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1843;}

                        else if ( (LA170_884==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1844;}

                        else if ( (LA170_884==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1845;}

                        else if ( (LA170_884==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1846;}

                        else if ( (LA170_884==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1847;}

                         
                        input.seek(index170_884);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA170_943 = input.LA(1);

                         
                        int index170_943 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_943==STRING_LITERAL) ) {s = 1848;}

                        else if ( (LA170_943==QUOTED_STRING_LITERAL) ) {s = 1849;}

                        else if ( (LA170_943==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1850;}

                        else if ( (LA170_943==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1851;}

                        else if ( (LA170_943==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1852;}

                        else if ( (LA170_943==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1853;}

                        else if ( (LA170_943==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1854;}

                        else if ( (LA170_943==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1855;}

                        else if ( (LA170_943==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1856;}

                        else if ( (LA170_943==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1857;}

                        else if ( (LA170_943==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1858;}

                        else if ( (LA170_943==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1859;}

                        else if ( (LA170_943==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1860;}

                        else if ( (LA170_943==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1861;}

                        else if ( (LA170_943==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1862;}

                        else if ( (LA170_943==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1863;}

                        else if ( (LA170_943==AT) && (synpred3_EsperEPL2Grammar())) {s = 1864;}

                        else if ( (LA170_943==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1865;}

                        else if ( (LA170_943==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1866;}

                        else if ( (LA170_943==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1867;}

                        else if ( (LA170_943==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1868;}

                        else if ( (LA170_943==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1869;}

                        else if ( (LA170_943==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1870;}

                        else if ( (LA170_943==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1871;}

                        else if ( (LA170_943==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1872;}

                        else if ( (LA170_943==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1873;}

                        else if ( (LA170_943==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1874;}

                        else if ( (LA170_943==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1875;}

                        else if ( (LA170_943==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1876;}

                        else if ( (LA170_943==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1877;}

                        else if ( (LA170_943==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1878;}

                        else if ( (LA170_943==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1879;}

                        else if ( (LA170_943==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1880;}

                        else if ( (LA170_943==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1881;}

                        else if ( (LA170_943==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1882;}

                        else if ( (LA170_943==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1883;}

                        else if ( (LA170_943==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1884;}

                        else if ( (LA170_943==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1885;}

                        else if ( (LA170_943==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1886;}

                        else if ( (LA170_943==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1887;}

                        else if ( (LA170_943==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1888;}

                        else if ( (LA170_943==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1889;}

                        else if ( (LA170_943==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1890;}

                        else if ( (LA170_943==LW) && (synpred3_EsperEPL2Grammar())) {s = 1891;}

                        else if ( (LA170_943==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1892;}

                        else if ( (LA170_943==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1893;}

                        else if ( (LA170_943==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1894;}

                        else if ( (LA170_943==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1895;}

                        else if ( (LA170_943==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1896;}

                        else if ( (LA170_943==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1897;}

                        else if ( (LA170_943==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1898;}

                        else if ( (LA170_943==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1899;}

                        else if ( (LA170_943==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1900;}

                        else if ( (LA170_943==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1901;}

                        else if ( (LA170_943==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1902;}

                        else if ( (LA170_943==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1903;}

                        else if ( (LA170_943==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1904;}

                        else if ( (LA170_943==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1905;}

                        else if ( (LA170_943==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1906;}

                        else if ( (LA170_943==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1907;}

                        else if ( (LA170_943==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1908;}

                        else if ( (LA170_943==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1909;}

                        else if ( (LA170_943==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1910;}

                        else if ( (LA170_943==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1911;}

                         
                        input.seek(index170_943);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA170_1002 = input.LA(1);

                         
                        int index170_1002 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1002==STRING_LITERAL) ) {s = 1912;}

                        else if ( (LA170_1002==QUOTED_STRING_LITERAL) ) {s = 1913;}

                        else if ( (LA170_1002==STAR) && (synpred3_EsperEPL2Grammar())) {s = 1914;}

                        else if ( (LA170_1002==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1915;}

                        else if ( (LA170_1002==CASE) && (synpred3_EsperEPL2Grammar())) {s = 1916;}

                        else if ( (LA170_1002==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 1917;}

                        else if ( (LA170_1002==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 1918;}

                        else if ( (LA170_1002==NUM_INT) && (synpred3_EsperEPL2Grammar())) {s = 1919;}

                        else if ( (LA170_1002==NUM_LONG) && (synpred3_EsperEPL2Grammar())) {s = 1920;}

                        else if ( (LA170_1002==NUM_FLOAT) && (synpred3_EsperEPL2Grammar())) {s = 1921;}

                        else if ( (LA170_1002==NUM_DOUBLE) && (synpred3_EsperEPL2Grammar())) {s = 1922;}

                        else if ( (LA170_1002==BOOLEAN_TRUE) && (synpred3_EsperEPL2Grammar())) {s = 1923;}

                        else if ( (LA170_1002==BOOLEAN_FALSE) && (synpred3_EsperEPL2Grammar())) {s = 1924;}

                        else if ( (LA170_1002==VALUE_NULL) && (synpred3_EsperEPL2Grammar())) {s = 1925;}

                        else if ( (LA170_1002==QUESTION) && (synpred3_EsperEPL2Grammar())) {s = 1926;}

                        else if ( (LA170_1002==LPAREN) && (synpred3_EsperEPL2Grammar())) {s = 1927;}

                        else if ( (LA170_1002==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1928;}

                        else if ( (LA170_1002==AT) && (synpred3_EsperEPL2Grammar())) {s = 1929;}

                        else if ( (LA170_1002==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1930;}

                        else if ( (LA170_1002==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1931;}

                        else if ( (LA170_1002==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1932;}

                        else if ( (LA170_1002==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1933;}

                        else if ( (LA170_1002==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1934;}

                        else if ( (LA170_1002==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1935;}

                        else if ( (LA170_1002==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1936;}

                        else if ( (LA170_1002==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1937;}

                        else if ( (LA170_1002==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1938;}

                        else if ( (LA170_1002==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1939;}

                        else if ( (LA170_1002==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1940;}

                        else if ( (LA170_1002==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1941;}

                        else if ( (LA170_1002==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1942;}

                        else if ( (LA170_1002==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1943;}

                        else if ( (LA170_1002==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1944;}

                        else if ( (LA170_1002==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1945;}

                        else if ( (LA170_1002==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1946;}

                        else if ( (LA170_1002==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1947;}

                        else if ( (LA170_1002==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1948;}

                        else if ( (LA170_1002==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 1949;}

                        else if ( (LA170_1002==SQL) && (synpred3_EsperEPL2Grammar())) {s = 1950;}

                        else if ( (LA170_1002==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 1951;}

                        else if ( (LA170_1002==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 1952;}

                        else if ( (LA170_1002==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 1953;}

                        else if ( (LA170_1002==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 1954;}

                        else if ( (LA170_1002==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 1955;}

                        else if ( (LA170_1002==LW) && (synpred3_EsperEPL2Grammar())) {s = 1956;}

                        else if ( (LA170_1002==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 1957;}

                        else if ( (LA170_1002==CAST) && (synpred3_EsperEPL2Grammar())) {s = 1958;}

                        else if ( (LA170_1002==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 1959;}

                        else if ( (LA170_1002==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 1960;}

                        else if ( (LA170_1002==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 1961;}

                        else if ( (LA170_1002==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1962;}

                        else if ( (LA170_1002==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 1963;}

                        else if ( (LA170_1002==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 1964;}

                        else if ( (LA170_1002==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 1965;}

                        else if ( (LA170_1002==FULL) && (synpred3_EsperEPL2Grammar())) {s = 1966;}

                        else if ( (LA170_1002==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 1967;}

                        else if ( (LA170_1002==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 1968;}

                        else if ( (LA170_1002==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 1969;}

                        else if ( (LA170_1002==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 1970;}

                        else if ( (LA170_1002==PREVIOUSCOUNT) && (synpred3_EsperEPL2Grammar())) {s = 1971;}

                        else if ( (LA170_1002==PREVIOUSWINDOW) && (synpred3_EsperEPL2Grammar())) {s = 1972;}

                        else if ( (LA170_1002==EXISTS) && (synpred3_EsperEPL2Grammar())) {s = 1973;}

                        else if ( (LA170_1002==CURRENT_TIMESTAMP) && (synpred3_EsperEPL2Grammar())) {s = 1974;}

                        else if ( (LA170_1002==LCURLY) && (synpred3_EsperEPL2Grammar())) {s = 1975;}

                        else if ( (LA170_1002==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1976;}

                         
                        input.seek(index170_1002);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA170_1061 = input.LA(1);

                         
                        int index170_1061 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1061==SELECT) ) {s = 1977;}

                        else if ( (LA170_1061==IDENT) && (synpred3_EsperEPL2Grammar())) {s = 1978;}

                        else if ( (LA170_1061==TICKED_STRING_LITERAL) && (synpred3_EsperEPL2Grammar())) {s = 1979;}

                        else if ( (LA170_1061==AT) && (synpred3_EsperEPL2Grammar())) {s = 1980;}

                        else if ( (LA170_1061==COUNT) && (synpred3_EsperEPL2Grammar())) {s = 1981;}

                        else if ( (LA170_1061==ESCAPE) && (synpred3_EsperEPL2Grammar())) {s = 1982;}

                        else if ( (LA170_1061==EVERY_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 1983;}

                        else if ( (LA170_1061==SUM) && (synpred3_EsperEPL2Grammar())) {s = 1984;}

                        else if ( (LA170_1061==AVG) && (synpred3_EsperEPL2Grammar())) {s = 1985;}

                        else if ( (LA170_1061==MAX) && (synpred3_EsperEPL2Grammar())) {s = 1986;}

                        else if ( (LA170_1061==MIN) && (synpred3_EsperEPL2Grammar())) {s = 1987;}

                        else if ( (LA170_1061==COALESCE) && (synpred3_EsperEPL2Grammar())) {s = 1988;}

                        else if ( (LA170_1061==MEDIAN) && (synpred3_EsperEPL2Grammar())) {s = 1989;}

                        else if ( (LA170_1061==STDDEV) && (synpred3_EsperEPL2Grammar())) {s = 1990;}

                        else if ( (LA170_1061==AVEDEV) && (synpred3_EsperEPL2Grammar())) {s = 1991;}

                        else if ( (LA170_1061==EVENTS) && (synpred3_EsperEPL2Grammar())) {s = 1992;}

                        else if ( (LA170_1061==FIRST) && (synpred3_EsperEPL2Grammar())) {s = 1993;}

                        else if ( (LA170_1061==LAST) && (synpred3_EsperEPL2Grammar())) {s = 1994;}

                        else if ( (LA170_1061==WHILE) && (synpred3_EsperEPL2Grammar())) {s = 1995;}

                        else if ( (LA170_1061==UNIDIRECTIONAL) && (synpred3_EsperEPL2Grammar())) {s = 1996;}

                        else if ( (LA170_1061==RETAINUNION) && (synpred3_EsperEPL2Grammar())) {s = 1997;}

                        else if ( (LA170_1061==RETAININTERSECTION) && (synpred3_EsperEPL2Grammar())) {s = 1998;}

                        else if ( (LA170_1061==UNTIL) && (synpred3_EsperEPL2Grammar())) {s = 1999;}

                        else if ( (LA170_1061==PATTERN) && (synpred3_EsperEPL2Grammar())) {s = 2000;}

                        else if ( (LA170_1061==SQL) && (synpred3_EsperEPL2Grammar())) {s = 2001;}

                        else if ( (LA170_1061==METADATASQL) && (synpred3_EsperEPL2Grammar())) {s = 2002;}

                        else if ( (LA170_1061==PREVIOUS) && (synpred3_EsperEPL2Grammar())) {s = 2003;}

                        else if ( (LA170_1061==PREVIOUSTAIL) && (synpred3_EsperEPL2Grammar())) {s = 2004;}

                        else if ( (LA170_1061==PRIOR) && (synpred3_EsperEPL2Grammar())) {s = 2005;}

                        else if ( (LA170_1061==WEEKDAY) && (synpred3_EsperEPL2Grammar())) {s = 2006;}

                        else if ( (LA170_1061==LW) && (synpred3_EsperEPL2Grammar())) {s = 2007;}

                        else if ( (LA170_1061==INSTANCEOF) && (synpred3_EsperEPL2Grammar())) {s = 2008;}

                        else if ( (LA170_1061==CAST) && (synpred3_EsperEPL2Grammar())) {s = 2009;}

                        else if ( (LA170_1061==SNAPSHOT) && (synpred3_EsperEPL2Grammar())) {s = 2010;}

                        else if ( (LA170_1061==VARIABLE) && (synpred3_EsperEPL2Grammar())) {s = 2011;}

                        else if ( (LA170_1061==INDEX) && (synpred3_EsperEPL2Grammar())) {s = 2012;}

                        else if ( (LA170_1061==WINDOW) && (synpred3_EsperEPL2Grammar())) {s = 2013;}

                        else if ( (LA170_1061==LEFT) && (synpred3_EsperEPL2Grammar())) {s = 2014;}

                        else if ( (LA170_1061==RIGHT) && (synpred3_EsperEPL2Grammar())) {s = 2015;}

                        else if ( (LA170_1061==OUTER) && (synpred3_EsperEPL2Grammar())) {s = 2016;}

                        else if ( (LA170_1061==FULL) && (synpred3_EsperEPL2Grammar())) {s = 2017;}

                        else if ( (LA170_1061==JOIN) && (synpred3_EsperEPL2Grammar())) {s = 2018;}

                        else if ( (LA170_1061==DEFINE) && (synpred3_EsperEPL2Grammar())) {s = 2019;}

                        else if ( (LA170_1061==PARTITION) && (synpred3_EsperEPL2Grammar())) {s = 2020;}

                        else if ( (LA170_1061==MATCHES) && (synpred3_EsperEPL2Grammar())) {s = 2021;}

                         
                        input.seek(index170_1061);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA170_1062 = input.LA(1);

                         
                        int index170_1062 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1062==RPAREN) ) {s = 2022;}

                        else if ( (LA170_1062==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2023;}

                        else if ( (LA170_1062==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2024;}

                        else if ( (LA170_1062==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2025;}

                        else if ( (LA170_1062==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2026;}

                        else if ( (LA170_1062==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2027;}

                        else if ( (LA170_1062==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2028;}

                        else if ( (LA170_1062==LT) && (synpred3_EsperEPL2Grammar())) {s = 2029;}

                        else if ( (LA170_1062==GT) && (synpred3_EsperEPL2Grammar())) {s = 2030;}

                        else if ( (LA170_1062==LE) && (synpred3_EsperEPL2Grammar())) {s = 2031;}

                        else if ( (LA170_1062==GE) && (synpred3_EsperEPL2Grammar())) {s = 2032;}

                        else if ( (LA170_1062==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2033;}

                        else if ( (LA170_1062==IS) && (synpred3_EsperEPL2Grammar())) {s = 2034;}

                        else if ( (LA170_1062==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2035;}

                        else if ( (LA170_1062==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2036;}

                        else if ( (LA170_1062==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2037;}

                        else if ( (LA170_1062==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2038;}

                        else if ( (LA170_1062==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2039;}

                        else if ( (LA170_1062==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2040;}

                        else if ( (LA170_1062==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2041;}

                        else if ( (LA170_1062==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2042;}

                        else if ( (LA170_1062==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2043;}

                        else if ( (LA170_1062==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2044;}

                        else if ( (LA170_1062==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2045;}

                        else if ( (LA170_1062==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2046;}

                         
                        input.seek(index170_1062);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA170_1063 = input.LA(1);

                         
                        int index170_1063 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1063==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2047;}

                        else if ( (LA170_1063==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2048;}

                        else if ( (LA170_1063==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2049;}

                        else if ( (LA170_1063==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2050;}

                        else if ( (LA170_1063==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2051;}

                        else if ( (LA170_1063==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2052;}

                        else if ( (LA170_1063==LT) && (synpred3_EsperEPL2Grammar())) {s = 2053;}

                        else if ( (LA170_1063==GT) && (synpred3_EsperEPL2Grammar())) {s = 2054;}

                        else if ( (LA170_1063==LE) && (synpred3_EsperEPL2Grammar())) {s = 2055;}

                        else if ( (LA170_1063==GE) && (synpred3_EsperEPL2Grammar())) {s = 2056;}

                        else if ( (LA170_1063==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2057;}

                        else if ( (LA170_1063==IS) && (synpred3_EsperEPL2Grammar())) {s = 2058;}

                        else if ( (LA170_1063==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2059;}

                        else if ( (LA170_1063==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2060;}

                        else if ( (LA170_1063==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2061;}

                        else if ( (LA170_1063==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2062;}

                        else if ( (LA170_1063==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2063;}

                        else if ( (LA170_1063==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2064;}

                        else if ( (LA170_1063==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2065;}

                        else if ( (LA170_1063==RPAREN) ) {s = 2066;}

                        else if ( (LA170_1063==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2067;}

                        else if ( (LA170_1063==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2068;}

                        else if ( (LA170_1063==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2069;}

                        else if ( (LA170_1063==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2070;}

                        else if ( (LA170_1063==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2071;}

                         
                        input.seek(index170_1063);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA170_1138 = input.LA(1);

                         
                        int index170_1138 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1138==RPAREN) ) {s = 2072;}

                        else if ( (LA170_1138==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2073;}

                        else if ( (LA170_1138==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2074;}

                        else if ( (LA170_1138==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2075;}

                        else if ( (LA170_1138==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2076;}

                        else if ( (LA170_1138==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2077;}

                        else if ( (LA170_1138==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2078;}

                        else if ( (LA170_1138==LT) && (synpred3_EsperEPL2Grammar())) {s = 2079;}

                        else if ( (LA170_1138==GT) && (synpred3_EsperEPL2Grammar())) {s = 2080;}

                        else if ( (LA170_1138==LE) && (synpred3_EsperEPL2Grammar())) {s = 2081;}

                        else if ( (LA170_1138==GE) && (synpred3_EsperEPL2Grammar())) {s = 2082;}

                        else if ( (LA170_1138==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2083;}

                        else if ( (LA170_1138==IS) && (synpred3_EsperEPL2Grammar())) {s = 2084;}

                        else if ( (LA170_1138==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2085;}

                        else if ( (LA170_1138==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2086;}

                        else if ( (LA170_1138==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2087;}

                        else if ( (LA170_1138==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2088;}

                        else if ( (LA170_1138==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2089;}

                        else if ( (LA170_1138==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2090;}

                        else if ( (LA170_1138==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2091;}

                        else if ( (LA170_1138==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2092;}

                        else if ( (LA170_1138==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2093;}

                        else if ( (LA170_1138==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2094;}

                        else if ( (LA170_1138==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2095;}

                        else if ( (LA170_1138==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2096;}

                         
                        input.seek(index170_1138);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA170_1139 = input.LA(1);

                         
                        int index170_1139 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1139==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2097;}

                        else if ( (LA170_1139==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2098;}

                        else if ( (LA170_1139==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2099;}

                        else if ( (LA170_1139==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2100;}

                        else if ( (LA170_1139==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2101;}

                        else if ( (LA170_1139==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2102;}

                        else if ( (LA170_1139==LT) && (synpred3_EsperEPL2Grammar())) {s = 2103;}

                        else if ( (LA170_1139==GT) && (synpred3_EsperEPL2Grammar())) {s = 2104;}

                        else if ( (LA170_1139==LE) && (synpred3_EsperEPL2Grammar())) {s = 2105;}

                        else if ( (LA170_1139==GE) && (synpred3_EsperEPL2Grammar())) {s = 2106;}

                        else if ( (LA170_1139==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2107;}

                        else if ( (LA170_1139==IS) && (synpred3_EsperEPL2Grammar())) {s = 2108;}

                        else if ( (LA170_1139==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2109;}

                        else if ( (LA170_1139==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2110;}

                        else if ( (LA170_1139==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2111;}

                        else if ( (LA170_1139==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2112;}

                        else if ( (LA170_1139==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2113;}

                        else if ( (LA170_1139==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2114;}

                        else if ( (LA170_1139==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2115;}

                        else if ( (LA170_1139==RPAREN) ) {s = 2116;}

                        else if ( (LA170_1139==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2117;}

                        else if ( (LA170_1139==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2118;}

                        else if ( (LA170_1139==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2119;}

                        else if ( (LA170_1139==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2120;}

                        else if ( (LA170_1139==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2121;}

                         
                        input.seek(index170_1139);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA170_1204 = input.LA(1);

                         
                        int index170_1204 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1204==RPAREN) ) {s = 2122;}

                        else if ( (LA170_1204==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2123;}

                        else if ( (LA170_1204==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2124;}

                        else if ( (LA170_1204==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2125;}

                        else if ( (LA170_1204==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2126;}

                        else if ( (LA170_1204==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2127;}

                        else if ( (LA170_1204==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2128;}

                        else if ( (LA170_1204==LT) && (synpred3_EsperEPL2Grammar())) {s = 2129;}

                        else if ( (LA170_1204==GT) && (synpred3_EsperEPL2Grammar())) {s = 2130;}

                        else if ( (LA170_1204==LE) && (synpred3_EsperEPL2Grammar())) {s = 2131;}

                        else if ( (LA170_1204==GE) && (synpred3_EsperEPL2Grammar())) {s = 2132;}

                        else if ( (LA170_1204==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2133;}

                        else if ( (LA170_1204==IS) && (synpred3_EsperEPL2Grammar())) {s = 2134;}

                        else if ( (LA170_1204==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2135;}

                        else if ( (LA170_1204==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2136;}

                        else if ( (LA170_1204==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2137;}

                        else if ( (LA170_1204==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2138;}

                        else if ( (LA170_1204==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2139;}

                        else if ( (LA170_1204==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2140;}

                        else if ( (LA170_1204==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2141;}

                        else if ( (LA170_1204==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2142;}

                        else if ( (LA170_1204==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2143;}

                        else if ( (LA170_1204==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2144;}

                        else if ( (LA170_1204==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2145;}

                        else if ( (LA170_1204==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2146;}

                         
                        input.seek(index170_1204);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA170_1205 = input.LA(1);

                         
                        int index170_1205 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1205==RPAREN) ) {s = 2147;}

                        else if ( (LA170_1205==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2148;}

                        else if ( (LA170_1205==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2149;}

                        else if ( (LA170_1205==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2150;}

                        else if ( (LA170_1205==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2151;}

                        else if ( (LA170_1205==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2152;}

                        else if ( (LA170_1205==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2153;}

                        else if ( (LA170_1205==LT) && (synpred3_EsperEPL2Grammar())) {s = 2154;}

                        else if ( (LA170_1205==GT) && (synpred3_EsperEPL2Grammar())) {s = 2155;}

                        else if ( (LA170_1205==LE) && (synpred3_EsperEPL2Grammar())) {s = 2156;}

                        else if ( (LA170_1205==GE) && (synpred3_EsperEPL2Grammar())) {s = 2157;}

                        else if ( (LA170_1205==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2158;}

                        else if ( (LA170_1205==IS) && (synpred3_EsperEPL2Grammar())) {s = 2159;}

                        else if ( (LA170_1205==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2160;}

                        else if ( (LA170_1205==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2161;}

                        else if ( (LA170_1205==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2162;}

                        else if ( (LA170_1205==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2163;}

                        else if ( (LA170_1205==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2164;}

                        else if ( (LA170_1205==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2165;}

                        else if ( (LA170_1205==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2166;}

                        else if ( (LA170_1205==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2167;}

                        else if ( (LA170_1205==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2168;}

                        else if ( (LA170_1205==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2169;}

                        else if ( (LA170_1205==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2170;}

                        else if ( (LA170_1205==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2171;}

                         
                        input.seek(index170_1205);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA170_1261 = input.LA(1);

                         
                        int index170_1261 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1261==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2172;}

                        else if ( (LA170_1261==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2173;}

                        else if ( (LA170_1261==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2174;}

                        else if ( (LA170_1261==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2175;}

                        else if ( (LA170_1261==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2176;}

                        else if ( (LA170_1261==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2177;}

                        else if ( (LA170_1261==LT) && (synpred3_EsperEPL2Grammar())) {s = 2178;}

                        else if ( (LA170_1261==GT) && (synpred3_EsperEPL2Grammar())) {s = 2179;}

                        else if ( (LA170_1261==LE) && (synpred3_EsperEPL2Grammar())) {s = 2180;}

                        else if ( (LA170_1261==GE) && (synpred3_EsperEPL2Grammar())) {s = 2181;}

                        else if ( (LA170_1261==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2182;}

                        else if ( (LA170_1261==IS) && (synpred3_EsperEPL2Grammar())) {s = 2183;}

                        else if ( (LA170_1261==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2184;}

                        else if ( (LA170_1261==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2185;}

                        else if ( (LA170_1261==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2186;}

                        else if ( (LA170_1261==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2187;}

                        else if ( (LA170_1261==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2188;}

                        else if ( (LA170_1261==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2189;}

                        else if ( (LA170_1261==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2190;}

                        else if ( (LA170_1261==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2191;}

                        else if ( (LA170_1261==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2192;}

                        else if ( (LA170_1261==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2193;}

                        else if ( (LA170_1261==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2194;}

                        else if ( (LA170_1261==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2195;}

                        else if ( (LA170_1261==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2196;}

                        else if ( (LA170_1261==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1261);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA170_1262 = input.LA(1);

                         
                        int index170_1262 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1262==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2198;}

                        else if ( (LA170_1262==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2199;}

                        else if ( (LA170_1262==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2200;}

                        else if ( (LA170_1262==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2201;}

                        else if ( (LA170_1262==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2202;}

                        else if ( (LA170_1262==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2203;}

                        else if ( (LA170_1262==LT) && (synpred3_EsperEPL2Grammar())) {s = 2204;}

                        else if ( (LA170_1262==GT) && (synpred3_EsperEPL2Grammar())) {s = 2205;}

                        else if ( (LA170_1262==LE) && (synpred3_EsperEPL2Grammar())) {s = 2206;}

                        else if ( (LA170_1262==GE) && (synpred3_EsperEPL2Grammar())) {s = 2207;}

                        else if ( (LA170_1262==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2208;}

                        else if ( (LA170_1262==IS) && (synpred3_EsperEPL2Grammar())) {s = 2209;}

                        else if ( (LA170_1262==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2210;}

                        else if ( (LA170_1262==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2211;}

                        else if ( (LA170_1262==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2212;}

                        else if ( (LA170_1262==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2213;}

                        else if ( (LA170_1262==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2214;}

                        else if ( (LA170_1262==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2215;}

                        else if ( (LA170_1262==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2216;}

                        else if ( (LA170_1262==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2217;}

                        else if ( (LA170_1262==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2218;}

                        else if ( (LA170_1262==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2219;}

                        else if ( (LA170_1262==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2220;}

                        else if ( (LA170_1262==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2221;}

                        else if ( (LA170_1262==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2222;}

                        else if ( (LA170_1262==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1262);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA170_1325 = input.LA(1);

                         
                        int index170_1325 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1325==RPAREN) ) {s = 2224;}

                        else if ( (LA170_1325==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2225;}

                        else if ( (LA170_1325==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2226;}

                        else if ( (LA170_1325==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2227;}

                        else if ( (LA170_1325==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2228;}

                        else if ( (LA170_1325==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2229;}

                        else if ( (LA170_1325==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2230;}

                        else if ( (LA170_1325==LT) && (synpred3_EsperEPL2Grammar())) {s = 2231;}

                        else if ( (LA170_1325==GT) && (synpred3_EsperEPL2Grammar())) {s = 2232;}

                        else if ( (LA170_1325==LE) && (synpred3_EsperEPL2Grammar())) {s = 2233;}

                        else if ( (LA170_1325==GE) && (synpred3_EsperEPL2Grammar())) {s = 2234;}

                        else if ( (LA170_1325==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2235;}

                        else if ( (LA170_1325==IS) && (synpred3_EsperEPL2Grammar())) {s = 2236;}

                        else if ( (LA170_1325==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2237;}

                        else if ( (LA170_1325==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2238;}

                        else if ( (LA170_1325==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2239;}

                        else if ( (LA170_1325==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2240;}

                        else if ( (LA170_1325==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2241;}

                        else if ( (LA170_1325==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2242;}

                        else if ( (LA170_1325==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2243;}

                        else if ( (LA170_1325==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2244;}

                        else if ( (LA170_1325==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2245;}

                        else if ( (LA170_1325==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2246;}

                        else if ( (LA170_1325==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2247;}

                        else if ( (LA170_1325==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2248;}

                         
                        input.seek(index170_1325);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA170_1326 = input.LA(1);

                         
                        int index170_1326 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1326==RPAREN) ) {s = 2249;}

                        else if ( (LA170_1326==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2250;}

                        else if ( (LA170_1326==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2251;}

                        else if ( (LA170_1326==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2252;}

                        else if ( (LA170_1326==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2253;}

                        else if ( (LA170_1326==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2254;}

                        else if ( (LA170_1326==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2255;}

                        else if ( (LA170_1326==LT) && (synpred3_EsperEPL2Grammar())) {s = 2256;}

                        else if ( (LA170_1326==GT) && (synpred3_EsperEPL2Grammar())) {s = 2257;}

                        else if ( (LA170_1326==LE) && (synpred3_EsperEPL2Grammar())) {s = 2258;}

                        else if ( (LA170_1326==GE) && (synpred3_EsperEPL2Grammar())) {s = 2259;}

                        else if ( (LA170_1326==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2260;}

                        else if ( (LA170_1326==IS) && (synpred3_EsperEPL2Grammar())) {s = 2261;}

                        else if ( (LA170_1326==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2262;}

                        else if ( (LA170_1326==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2263;}

                        else if ( (LA170_1326==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2264;}

                        else if ( (LA170_1326==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2265;}

                        else if ( (LA170_1326==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2266;}

                        else if ( (LA170_1326==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2267;}

                        else if ( (LA170_1326==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2268;}

                        else if ( (LA170_1326==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2269;}

                        else if ( (LA170_1326==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2270;}

                        else if ( (LA170_1326==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2271;}

                        else if ( (LA170_1326==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2272;}

                        else if ( (LA170_1326==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2273;}

                         
                        input.seek(index170_1326);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA170_1391 = input.LA(1);

                         
                        int index170_1391 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1391==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2274;}

                        else if ( (LA170_1391==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2275;}

                        else if ( (LA170_1391==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2276;}

                        else if ( (LA170_1391==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2277;}

                        else if ( (LA170_1391==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2278;}

                        else if ( (LA170_1391==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2279;}

                        else if ( (LA170_1391==LT) && (synpred3_EsperEPL2Grammar())) {s = 2280;}

                        else if ( (LA170_1391==GT) && (synpred3_EsperEPL2Grammar())) {s = 2281;}

                        else if ( (LA170_1391==LE) && (synpred3_EsperEPL2Grammar())) {s = 2282;}

                        else if ( (LA170_1391==GE) && (synpred3_EsperEPL2Grammar())) {s = 2283;}

                        else if ( (LA170_1391==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2284;}

                        else if ( (LA170_1391==IS) && (synpred3_EsperEPL2Grammar())) {s = 2285;}

                        else if ( (LA170_1391==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2286;}

                        else if ( (LA170_1391==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2287;}

                        else if ( (LA170_1391==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2288;}

                        else if ( (LA170_1391==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2289;}

                        else if ( (LA170_1391==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2290;}

                        else if ( (LA170_1391==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2291;}

                        else if ( (LA170_1391==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2292;}

                        else if ( (LA170_1391==RPAREN) ) {s = 2293;}

                        else if ( (LA170_1391==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2294;}

                        else if ( (LA170_1391==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2295;}

                        else if ( (LA170_1391==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2296;}

                        else if ( (LA170_1391==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2297;}

                        else if ( (LA170_1391==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2298;}

                         
                        input.seek(index170_1391);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA170_1392 = input.LA(1);

                         
                        int index170_1392 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1392==RPAREN) ) {s = 2299;}

                        else if ( (LA170_1392==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2300;}

                        else if ( (LA170_1392==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2301;}

                        else if ( (LA170_1392==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2302;}

                        else if ( (LA170_1392==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2303;}

                        else if ( (LA170_1392==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2304;}

                        else if ( (LA170_1392==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2305;}

                        else if ( (LA170_1392==LT) && (synpred3_EsperEPL2Grammar())) {s = 2306;}

                        else if ( (LA170_1392==GT) && (synpred3_EsperEPL2Grammar())) {s = 2307;}

                        else if ( (LA170_1392==LE) && (synpred3_EsperEPL2Grammar())) {s = 2308;}

                        else if ( (LA170_1392==GE) && (synpred3_EsperEPL2Grammar())) {s = 2309;}

                        else if ( (LA170_1392==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2310;}

                        else if ( (LA170_1392==IS) && (synpred3_EsperEPL2Grammar())) {s = 2311;}

                        else if ( (LA170_1392==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2312;}

                        else if ( (LA170_1392==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2313;}

                        else if ( (LA170_1392==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2314;}

                        else if ( (LA170_1392==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2315;}

                        else if ( (LA170_1392==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2316;}

                        else if ( (LA170_1392==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2317;}

                        else if ( (LA170_1392==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2318;}

                        else if ( (LA170_1392==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2319;}

                        else if ( (LA170_1392==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2320;}

                        else if ( (LA170_1392==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2321;}

                        else if ( (LA170_1392==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2322;}

                        else if ( (LA170_1392==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2323;}

                         
                        input.seek(index170_1392);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA170_1457 = input.LA(1);

                         
                        int index170_1457 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1457==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2324;}

                        else if ( (LA170_1457==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2325;}

                        else if ( (LA170_1457==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2326;}

                        else if ( (LA170_1457==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2327;}

                        else if ( (LA170_1457==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2328;}

                        else if ( (LA170_1457==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2329;}

                        else if ( (LA170_1457==LT) && (synpred3_EsperEPL2Grammar())) {s = 2330;}

                        else if ( (LA170_1457==GT) && (synpred3_EsperEPL2Grammar())) {s = 2331;}

                        else if ( (LA170_1457==LE) && (synpred3_EsperEPL2Grammar())) {s = 2332;}

                        else if ( (LA170_1457==GE) && (synpred3_EsperEPL2Grammar())) {s = 2333;}

                        else if ( (LA170_1457==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2334;}

                        else if ( (LA170_1457==IS) && (synpred3_EsperEPL2Grammar())) {s = 2335;}

                        else if ( (LA170_1457==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2336;}

                        else if ( (LA170_1457==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2337;}

                        else if ( (LA170_1457==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2338;}

                        else if ( (LA170_1457==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2339;}

                        else if ( (LA170_1457==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2340;}

                        else if ( (LA170_1457==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2341;}

                        else if ( (LA170_1457==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2342;}

                        else if ( (LA170_1457==RPAREN) ) {s = 2343;}

                        else if ( (LA170_1457==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2344;}

                        else if ( (LA170_1457==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2345;}

                        else if ( (LA170_1457==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2346;}

                        else if ( (LA170_1457==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2347;}

                        else if ( (LA170_1457==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2348;}

                         
                        input.seek(index170_1457);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA170_1458 = input.LA(1);

                         
                        int index170_1458 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1458==RPAREN) ) {s = 2349;}

                        else if ( (LA170_1458==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2350;}

                        else if ( (LA170_1458==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2351;}

                        else if ( (LA170_1458==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2352;}

                        else if ( (LA170_1458==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2353;}

                        else if ( (LA170_1458==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2354;}

                        else if ( (LA170_1458==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2355;}

                        else if ( (LA170_1458==LT) && (synpred3_EsperEPL2Grammar())) {s = 2356;}

                        else if ( (LA170_1458==GT) && (synpred3_EsperEPL2Grammar())) {s = 2357;}

                        else if ( (LA170_1458==LE) && (synpred3_EsperEPL2Grammar())) {s = 2358;}

                        else if ( (LA170_1458==GE) && (synpred3_EsperEPL2Grammar())) {s = 2359;}

                        else if ( (LA170_1458==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2360;}

                        else if ( (LA170_1458==IS) && (synpred3_EsperEPL2Grammar())) {s = 2361;}

                        else if ( (LA170_1458==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2362;}

                        else if ( (LA170_1458==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2363;}

                        else if ( (LA170_1458==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2364;}

                        else if ( (LA170_1458==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2365;}

                        else if ( (LA170_1458==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2366;}

                        else if ( (LA170_1458==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2367;}

                        else if ( (LA170_1458==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2368;}

                        else if ( (LA170_1458==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2369;}

                        else if ( (LA170_1458==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2370;}

                        else if ( (LA170_1458==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2371;}

                        else if ( (LA170_1458==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2372;}

                        else if ( (LA170_1458==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2373;}

                         
                        input.seek(index170_1458);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA170_1523 = input.LA(1);

                         
                        int index170_1523 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1523==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2374;}

                        else if ( (LA170_1523==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2375;}

                        else if ( (LA170_1523==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2376;}

                        else if ( (LA170_1523==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2377;}

                        else if ( (LA170_1523==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2378;}

                        else if ( (LA170_1523==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2379;}

                        else if ( (LA170_1523==LT) && (synpred3_EsperEPL2Grammar())) {s = 2380;}

                        else if ( (LA170_1523==GT) && (synpred3_EsperEPL2Grammar())) {s = 2381;}

                        else if ( (LA170_1523==LE) && (synpred3_EsperEPL2Grammar())) {s = 2382;}

                        else if ( (LA170_1523==GE) && (synpred3_EsperEPL2Grammar())) {s = 2383;}

                        else if ( (LA170_1523==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2384;}

                        else if ( (LA170_1523==IS) && (synpred3_EsperEPL2Grammar())) {s = 2385;}

                        else if ( (LA170_1523==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2386;}

                        else if ( (LA170_1523==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2387;}

                        else if ( (LA170_1523==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2388;}

                        else if ( (LA170_1523==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2389;}

                        else if ( (LA170_1523==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2390;}

                        else if ( (LA170_1523==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2391;}

                        else if ( (LA170_1523==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2392;}

                        else if ( (LA170_1523==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2393;}

                        else if ( (LA170_1523==RPAREN) ) {s = 2394;}

                        else if ( (LA170_1523==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2395;}

                        else if ( (LA170_1523==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2396;}

                        else if ( (LA170_1523==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2397;}

                        else if ( (LA170_1523==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2398;}

                        else if ( (LA170_1523==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2399;}

                         
                        input.seek(index170_1523);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA170_1524 = input.LA(1);

                         
                        int index170_1524 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1524==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2400;}

                        else if ( (LA170_1524==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2401;}

                        else if ( (LA170_1524==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2402;}

                        else if ( (LA170_1524==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2403;}

                        else if ( (LA170_1524==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2404;}

                        else if ( (LA170_1524==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2405;}

                        else if ( (LA170_1524==LT) && (synpred3_EsperEPL2Grammar())) {s = 2406;}

                        else if ( (LA170_1524==GT) && (synpred3_EsperEPL2Grammar())) {s = 2407;}

                        else if ( (LA170_1524==LE) && (synpred3_EsperEPL2Grammar())) {s = 2408;}

                        else if ( (LA170_1524==GE) && (synpred3_EsperEPL2Grammar())) {s = 2409;}

                        else if ( (LA170_1524==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2410;}

                        else if ( (LA170_1524==IS) && (synpred3_EsperEPL2Grammar())) {s = 2411;}

                        else if ( (LA170_1524==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2412;}

                        else if ( (LA170_1524==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2413;}

                        else if ( (LA170_1524==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2414;}

                        else if ( (LA170_1524==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2415;}

                        else if ( (LA170_1524==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2416;}

                        else if ( (LA170_1524==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2417;}

                        else if ( (LA170_1524==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2418;}

                        else if ( (LA170_1524==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2419;}

                        else if ( (LA170_1524==RPAREN) ) {s = 2420;}

                        else if ( (LA170_1524==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2421;}

                        else if ( (LA170_1524==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2422;}

                        else if ( (LA170_1524==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2423;}

                        else if ( (LA170_1524==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2424;}

                        else if ( (LA170_1524==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2425;}

                         
                        input.seek(index170_1524);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA170_1597 = input.LA(1);

                         
                        int index170_1597 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1597==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2426;}

                        else if ( (LA170_1597==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2427;}

                        else if ( (LA170_1597==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2428;}

                        else if ( (LA170_1597==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2429;}

                        else if ( (LA170_1597==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2430;}

                        else if ( (LA170_1597==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2431;}

                        else if ( (LA170_1597==LT) && (synpred3_EsperEPL2Grammar())) {s = 2432;}

                        else if ( (LA170_1597==GT) && (synpred3_EsperEPL2Grammar())) {s = 2433;}

                        else if ( (LA170_1597==LE) && (synpred3_EsperEPL2Grammar())) {s = 2434;}

                        else if ( (LA170_1597==GE) && (synpred3_EsperEPL2Grammar())) {s = 2435;}

                        else if ( (LA170_1597==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2436;}

                        else if ( (LA170_1597==IS) && (synpred3_EsperEPL2Grammar())) {s = 2437;}

                        else if ( (LA170_1597==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2438;}

                        else if ( (LA170_1597==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2439;}

                        else if ( (LA170_1597==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2440;}

                        else if ( (LA170_1597==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2441;}

                        else if ( (LA170_1597==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2442;}

                        else if ( (LA170_1597==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2443;}

                        else if ( (LA170_1597==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2444;}

                        else if ( (LA170_1597==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2445;}

                        else if ( (LA170_1597==RPAREN) ) {s = 2446;}

                        else if ( (LA170_1597==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2447;}

                        else if ( (LA170_1597==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2448;}

                        else if ( (LA170_1597==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2449;}

                        else if ( (LA170_1597==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2450;}

                        else if ( (LA170_1597==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2451;}

                         
                        input.seek(index170_1597);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA170_1598 = input.LA(1);

                         
                        int index170_1598 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1598==RPAREN) ) {s = 2452;}

                        else if ( (LA170_1598==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2453;}

                        else if ( (LA170_1598==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2454;}

                        else if ( (LA170_1598==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2455;}

                        else if ( (LA170_1598==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2456;}

                        else if ( (LA170_1598==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2457;}

                        else if ( (LA170_1598==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2458;}

                        else if ( (LA170_1598==LT) && (synpred3_EsperEPL2Grammar())) {s = 2459;}

                        else if ( (LA170_1598==GT) && (synpred3_EsperEPL2Grammar())) {s = 2460;}

                        else if ( (LA170_1598==LE) && (synpred3_EsperEPL2Grammar())) {s = 2461;}

                        else if ( (LA170_1598==GE) && (synpred3_EsperEPL2Grammar())) {s = 2462;}

                        else if ( (LA170_1598==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2463;}

                        else if ( (LA170_1598==IS) && (synpred3_EsperEPL2Grammar())) {s = 2464;}

                        else if ( (LA170_1598==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2465;}

                        else if ( (LA170_1598==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2466;}

                        else if ( (LA170_1598==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2467;}

                        else if ( (LA170_1598==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2468;}

                        else if ( (LA170_1598==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2469;}

                        else if ( (LA170_1598==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2470;}

                        else if ( (LA170_1598==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2471;}

                        else if ( (LA170_1598==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2472;}

                        else if ( (LA170_1598==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2473;}

                        else if ( (LA170_1598==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2474;}

                        else if ( (LA170_1598==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2475;}

                        else if ( (LA170_1598==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2476;}

                        else if ( (LA170_1598==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2477;}

                         
                        input.seek(index170_1598);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA170_1653 = input.LA(1);

                         
                        int index170_1653 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1653==RPAREN) ) {s = 2478;}

                        else if ( (LA170_1653==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2479;}

                        else if ( (LA170_1653==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2480;}

                        else if ( (LA170_1653==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2481;}

                        else if ( (LA170_1653==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2482;}

                        else if ( (LA170_1653==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2483;}

                        else if ( (LA170_1653==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2484;}

                        else if ( (LA170_1653==LT) && (synpred3_EsperEPL2Grammar())) {s = 2485;}

                        else if ( (LA170_1653==GT) && (synpred3_EsperEPL2Grammar())) {s = 2486;}

                        else if ( (LA170_1653==LE) && (synpred3_EsperEPL2Grammar())) {s = 2487;}

                        else if ( (LA170_1653==GE) && (synpred3_EsperEPL2Grammar())) {s = 2488;}

                        else if ( (LA170_1653==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2489;}

                        else if ( (LA170_1653==IS) && (synpred3_EsperEPL2Grammar())) {s = 2490;}

                        else if ( (LA170_1653==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2491;}

                        else if ( (LA170_1653==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2492;}

                        else if ( (LA170_1653==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2493;}

                        else if ( (LA170_1653==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2494;}

                        else if ( (LA170_1653==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2495;}

                        else if ( (LA170_1653==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2496;}

                        else if ( (LA170_1653==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2497;}

                        else if ( (LA170_1653==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2498;}

                        else if ( (LA170_1653==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2499;}

                        else if ( (LA170_1653==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2500;}

                        else if ( (LA170_1653==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2501;}

                        else if ( (LA170_1653==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2502;}

                        else if ( (LA170_1653==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2503;}

                         
                        input.seek(index170_1653);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA170_1654 = input.LA(1);

                         
                        int index170_1654 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1654==RPAREN) ) {s = 2504;}

                        else if ( (LA170_1654==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2505;}

                        else if ( (LA170_1654==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2506;}

                        else if ( (LA170_1654==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2507;}

                        else if ( (LA170_1654==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2508;}

                        else if ( (LA170_1654==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2509;}

                        else if ( (LA170_1654==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2510;}

                        else if ( (LA170_1654==LT) && (synpred3_EsperEPL2Grammar())) {s = 2511;}

                        else if ( (LA170_1654==GT) && (synpred3_EsperEPL2Grammar())) {s = 2512;}

                        else if ( (LA170_1654==LE) && (synpred3_EsperEPL2Grammar())) {s = 2513;}

                        else if ( (LA170_1654==GE) && (synpred3_EsperEPL2Grammar())) {s = 2514;}

                        else if ( (LA170_1654==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2515;}

                        else if ( (LA170_1654==IS) && (synpred3_EsperEPL2Grammar())) {s = 2516;}

                        else if ( (LA170_1654==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2517;}

                        else if ( (LA170_1654==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2518;}

                        else if ( (LA170_1654==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2519;}

                        else if ( (LA170_1654==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2520;}

                        else if ( (LA170_1654==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2521;}

                        else if ( (LA170_1654==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2522;}

                        else if ( (LA170_1654==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2523;}

                        else if ( (LA170_1654==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2524;}

                        else if ( (LA170_1654==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2525;}

                        else if ( (LA170_1654==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2526;}

                        else if ( (LA170_1654==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2527;}

                        else if ( (LA170_1654==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2528;}

                        else if ( (LA170_1654==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2529;}

                         
                        input.seek(index170_1654);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA170_1717 = input.LA(1);

                         
                        int index170_1717 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1717==RPAREN) ) {s = 2530;}

                        else if ( (LA170_1717==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2531;}

                        else if ( (LA170_1717==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2532;}

                        else if ( (LA170_1717==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2533;}

                        else if ( (LA170_1717==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2534;}

                        else if ( (LA170_1717==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2535;}

                        else if ( (LA170_1717==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2536;}

                        else if ( (LA170_1717==LT) && (synpred3_EsperEPL2Grammar())) {s = 2537;}

                        else if ( (LA170_1717==GT) && (synpred3_EsperEPL2Grammar())) {s = 2538;}

                        else if ( (LA170_1717==LE) && (synpred3_EsperEPL2Grammar())) {s = 2539;}

                        else if ( (LA170_1717==GE) && (synpred3_EsperEPL2Grammar())) {s = 2540;}

                        else if ( (LA170_1717==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2541;}

                        else if ( (LA170_1717==IS) && (synpred3_EsperEPL2Grammar())) {s = 2542;}

                        else if ( (LA170_1717==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2543;}

                        else if ( (LA170_1717==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2544;}

                        else if ( (LA170_1717==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2545;}

                        else if ( (LA170_1717==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2546;}

                        else if ( (LA170_1717==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2547;}

                        else if ( (LA170_1717==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2548;}

                        else if ( (LA170_1717==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2549;}

                        else if ( (LA170_1717==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2550;}

                        else if ( (LA170_1717==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2551;}

                        else if ( (LA170_1717==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2552;}

                        else if ( (LA170_1717==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2553;}

                        else if ( (LA170_1717==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2554;}

                        else if ( (LA170_1717==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2555;}

                         
                        input.seek(index170_1717);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA170_1718 = input.LA(1);

                         
                        int index170_1718 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1718==RPAREN) ) {s = 2556;}

                        else if ( (LA170_1718==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2557;}

                        else if ( (LA170_1718==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2558;}

                        else if ( (LA170_1718==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2559;}

                        else if ( (LA170_1718==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2560;}

                        else if ( (LA170_1718==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2561;}

                        else if ( (LA170_1718==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2562;}

                        else if ( (LA170_1718==LT) && (synpred3_EsperEPL2Grammar())) {s = 2563;}

                        else if ( (LA170_1718==GT) && (synpred3_EsperEPL2Grammar())) {s = 2564;}

                        else if ( (LA170_1718==LE) && (synpred3_EsperEPL2Grammar())) {s = 2565;}

                        else if ( (LA170_1718==GE) && (synpred3_EsperEPL2Grammar())) {s = 2566;}

                        else if ( (LA170_1718==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2567;}

                        else if ( (LA170_1718==IS) && (synpred3_EsperEPL2Grammar())) {s = 2568;}

                        else if ( (LA170_1718==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2569;}

                        else if ( (LA170_1718==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2570;}

                        else if ( (LA170_1718==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2571;}

                        else if ( (LA170_1718==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2572;}

                        else if ( (LA170_1718==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2573;}

                        else if ( (LA170_1718==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2574;}

                        else if ( (LA170_1718==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2575;}

                        else if ( (LA170_1718==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2576;}

                        else if ( (LA170_1718==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2577;}

                        else if ( (LA170_1718==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2578;}

                        else if ( (LA170_1718==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2579;}

                        else if ( (LA170_1718==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2580;}

                        else if ( (LA170_1718==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2581;}

                         
                        input.seek(index170_1718);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA170_1784 = input.LA(1);

                         
                        int index170_1784 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1784==RPAREN) ) {s = 14;}

                        else if ( (LA170_1784==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2583;}

                        else if ( (LA170_1784==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2584;}

                        else if ( (LA170_1784==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2585;}

                        else if ( (LA170_1784==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2586;}

                        else if ( (LA170_1784==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2587;}

                        else if ( (LA170_1784==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2588;}

                        else if ( (LA170_1784==LT) && (synpred3_EsperEPL2Grammar())) {s = 2589;}

                        else if ( (LA170_1784==GT) && (synpred3_EsperEPL2Grammar())) {s = 2590;}

                        else if ( (LA170_1784==LE) && (synpred3_EsperEPL2Grammar())) {s = 2591;}

                        else if ( (LA170_1784==GE) && (synpred3_EsperEPL2Grammar())) {s = 2592;}

                        else if ( (LA170_1784==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2593;}

                        else if ( (LA170_1784==IS) && (synpred3_EsperEPL2Grammar())) {s = 2594;}

                        else if ( (LA170_1784==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2595;}

                        else if ( (LA170_1784==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2596;}

                        else if ( (LA170_1784==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2597;}

                        else if ( (LA170_1784==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2598;}

                        else if ( (LA170_1784==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2599;}

                        else if ( (LA170_1784==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2600;}

                        else if ( (LA170_1784==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2601;}

                        else if ( (LA170_1784==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2602;}

                        else if ( (LA170_1784==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2603;}

                        else if ( (LA170_1784==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2604;}

                        else if ( (LA170_1784==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2605;}

                        else if ( (LA170_1784==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2606;}

                        else if ( (LA170_1784==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2607;}

                         
                        input.seek(index170_1784);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA170_1785 = input.LA(1);

                         
                        int index170_1785 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1785==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2608;}

                        else if ( (LA170_1785==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2609;}

                        else if ( (LA170_1785==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2610;}

                        else if ( (LA170_1785==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2611;}

                        else if ( (LA170_1785==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2612;}

                        else if ( (LA170_1785==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2613;}

                        else if ( (LA170_1785==LT) && (synpred3_EsperEPL2Grammar())) {s = 2614;}

                        else if ( (LA170_1785==GT) && (synpred3_EsperEPL2Grammar())) {s = 2615;}

                        else if ( (LA170_1785==LE) && (synpred3_EsperEPL2Grammar())) {s = 2616;}

                        else if ( (LA170_1785==GE) && (synpred3_EsperEPL2Grammar())) {s = 2617;}

                        else if ( (LA170_1785==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2618;}

                        else if ( (LA170_1785==IS) && (synpred3_EsperEPL2Grammar())) {s = 2619;}

                        else if ( (LA170_1785==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2620;}

                        else if ( (LA170_1785==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2621;}

                        else if ( (LA170_1785==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2622;}

                        else if ( (LA170_1785==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2623;}

                        else if ( (LA170_1785==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2624;}

                        else if ( (LA170_1785==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2625;}

                        else if ( (LA170_1785==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2626;}

                        else if ( (LA170_1785==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2627;}

                        else if ( (LA170_1785==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2628;}

                        else if ( (LA170_1785==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2629;}

                        else if ( (LA170_1785==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2630;}

                        else if ( (LA170_1785==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2631;}

                        else if ( (LA170_1785==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2632;}

                        else if ( (LA170_1785==RPAREN) ) {s = 14;}

                         
                        input.seek(index170_1785);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA170_1848 = input.LA(1);

                         
                        int index170_1848 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1848==RPAREN) ) {s = 14;}

                        else if ( (LA170_1848==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2635;}

                        else if ( (LA170_1848==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2636;}

                        else if ( (LA170_1848==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2637;}

                        else if ( (LA170_1848==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2638;}

                        else if ( (LA170_1848==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2639;}

                        else if ( (LA170_1848==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2640;}

                        else if ( (LA170_1848==LT) && (synpred3_EsperEPL2Grammar())) {s = 2641;}

                        else if ( (LA170_1848==GT) && (synpred3_EsperEPL2Grammar())) {s = 2642;}

                        else if ( (LA170_1848==LE) && (synpred3_EsperEPL2Grammar())) {s = 2643;}

                        else if ( (LA170_1848==GE) && (synpred3_EsperEPL2Grammar())) {s = 2644;}

                        else if ( (LA170_1848==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2645;}

                        else if ( (LA170_1848==IS) && (synpred3_EsperEPL2Grammar())) {s = 2646;}

                        else if ( (LA170_1848==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2647;}

                        else if ( (LA170_1848==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2648;}

                        else if ( (LA170_1848==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2649;}

                        else if ( (LA170_1848==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2650;}

                        else if ( (LA170_1848==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2651;}

                        else if ( (LA170_1848==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2652;}

                        else if ( (LA170_1848==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2653;}

                        else if ( (LA170_1848==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2654;}

                        else if ( (LA170_1848==AS) && (synpred3_EsperEPL2Grammar())) {s = 2655;}

                        else if ( (LA170_1848==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2656;}

                        else if ( (LA170_1848==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2657;}

                        else if ( (LA170_1848==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2658;}

                        else if ( (LA170_1848==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2659;}

                        else if ( (LA170_1848==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2660;}

                         
                        input.seek(index170_1848);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA170_1849 = input.LA(1);

                         
                        int index170_1849 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1849==RPAREN) ) {s = 14;}

                        else if ( (LA170_1849==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2662;}

                        else if ( (LA170_1849==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2663;}

                        else if ( (LA170_1849==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2664;}

                        else if ( (LA170_1849==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2665;}

                        else if ( (LA170_1849==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2666;}

                        else if ( (LA170_1849==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2667;}

                        else if ( (LA170_1849==LT) && (synpred3_EsperEPL2Grammar())) {s = 2668;}

                        else if ( (LA170_1849==GT) && (synpred3_EsperEPL2Grammar())) {s = 2669;}

                        else if ( (LA170_1849==LE) && (synpred3_EsperEPL2Grammar())) {s = 2670;}

                        else if ( (LA170_1849==GE) && (synpred3_EsperEPL2Grammar())) {s = 2671;}

                        else if ( (LA170_1849==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2672;}

                        else if ( (LA170_1849==IS) && (synpred3_EsperEPL2Grammar())) {s = 2673;}

                        else if ( (LA170_1849==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2674;}

                        else if ( (LA170_1849==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2675;}

                        else if ( (LA170_1849==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2676;}

                        else if ( (LA170_1849==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2677;}

                        else if ( (LA170_1849==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2678;}

                        else if ( (LA170_1849==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2679;}

                        else if ( (LA170_1849==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2680;}

                        else if ( (LA170_1849==COMMA) && (synpred3_EsperEPL2Grammar())) {s = 2681;}

                        else if ( (LA170_1849==AS) && (synpred3_EsperEPL2Grammar())) {s = 2682;}

                        else if ( (LA170_1849==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2683;}

                        else if ( (LA170_1849==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2684;}

                        else if ( (LA170_1849==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2685;}

                        else if ( (LA170_1849==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2686;}

                        else if ( (LA170_1849==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2687;}

                         
                        input.seek(index170_1849);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA170_1912 = input.LA(1);

                         
                        int index170_1912 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1912==RPAREN) ) {s = 2688;}

                        else if ( (LA170_1912==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2689;}

                        else if ( (LA170_1912==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2690;}

                        else if ( (LA170_1912==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2691;}

                        else if ( (LA170_1912==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2692;}

                        else if ( (LA170_1912==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2693;}

                        else if ( (LA170_1912==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2694;}

                        else if ( (LA170_1912==LT) && (synpred3_EsperEPL2Grammar())) {s = 2695;}

                        else if ( (LA170_1912==GT) && (synpred3_EsperEPL2Grammar())) {s = 2696;}

                        else if ( (LA170_1912==LE) && (synpred3_EsperEPL2Grammar())) {s = 2697;}

                        else if ( (LA170_1912==GE) && (synpred3_EsperEPL2Grammar())) {s = 2698;}

                        else if ( (LA170_1912==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2699;}

                        else if ( (LA170_1912==IS) && (synpred3_EsperEPL2Grammar())) {s = 2700;}

                        else if ( (LA170_1912==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2701;}

                        else if ( (LA170_1912==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2702;}

                        else if ( (LA170_1912==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2703;}

                        else if ( (LA170_1912==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2704;}

                        else if ( (LA170_1912==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2705;}

                        else if ( (LA170_1912==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2706;}

                        else if ( (LA170_1912==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2707;}

                        else if ( (LA170_1912==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2708;}

                        else if ( (LA170_1912==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2709;}

                        else if ( (LA170_1912==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2710;}

                        else if ( (LA170_1912==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2711;}

                        else if ( (LA170_1912==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2712;}

                         
                        input.seek(index170_1912);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA170_1913 = input.LA(1);

                         
                        int index170_1913 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA170_1913==RPAREN) ) {s = 2713;}

                        else if ( (LA170_1913==STAR) && (synpred3_EsperEPL2Grammar())) {s = 2714;}

                        else if ( (LA170_1913==DIV) && (synpred3_EsperEPL2Grammar())) {s = 2715;}

                        else if ( (LA170_1913==MOD) && (synpred3_EsperEPL2Grammar())) {s = 2716;}

                        else if ( (LA170_1913==PLUS) && (synpred3_EsperEPL2Grammar())) {s = 2717;}

                        else if ( (LA170_1913==MINUS) && (synpred3_EsperEPL2Grammar())) {s = 2718;}

                        else if ( (LA170_1913==LOR) && (synpred3_EsperEPL2Grammar())) {s = 2719;}

                        else if ( (LA170_1913==LT) && (synpred3_EsperEPL2Grammar())) {s = 2720;}

                        else if ( (LA170_1913==GT) && (synpred3_EsperEPL2Grammar())) {s = 2721;}

                        else if ( (LA170_1913==LE) && (synpred3_EsperEPL2Grammar())) {s = 2722;}

                        else if ( (LA170_1913==GE) && (synpred3_EsperEPL2Grammar())) {s = 2723;}

                        else if ( (LA170_1913==EQUALS) && (synpred3_EsperEPL2Grammar())) {s = 2724;}

                        else if ( (LA170_1913==IS) && (synpred3_EsperEPL2Grammar())) {s = 2725;}

                        else if ( (LA170_1913==SQL_NE) && (synpred3_EsperEPL2Grammar())) {s = 2726;}

                        else if ( (LA170_1913==NOT_EQUAL) && (synpred3_EsperEPL2Grammar())) {s = 2727;}

                        else if ( (LA170_1913==BAND) && (synpred3_EsperEPL2Grammar())) {s = 2728;}

                        else if ( (LA170_1913==BOR) && (synpred3_EsperEPL2Grammar())) {s = 2729;}

                        else if ( (LA170_1913==BXOR) && (synpred3_EsperEPL2Grammar())) {s = 2730;}

                        else if ( (LA170_1913==AND_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2731;}

                        else if ( (LA170_1913==OR_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2732;}

                        else if ( (LA170_1913==NOT_EXPR) && (synpred3_EsperEPL2Grammar())) {s = 2733;}

                        else if ( (LA170_1913==IN_SET) && (synpred3_EsperEPL2Grammar())) {s = 2734;}

                        else if ( (LA170_1913==BETWEEN) && (synpred3_EsperEPL2Grammar())) {s = 2735;}

                        else if ( (LA170_1913==LIKE) && (synpred3_EsperEPL2Grammar())) {s = 2736;}

                        else if ( (LA170_1913==REGEXP) && (synpred3_EsperEPL2Grammar())) {s = 2737;}

                         
                        input.seek(index170_1913);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA170_2022 = input.LA(1);

                         
                        int index170_2022 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2022);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA170_2066 = input.LA(1);

                         
                        int index170_2066 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2066);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA170_2072 = input.LA(1);

                         
                        int index170_2072 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2072);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA170_2116 = input.LA(1);

                         
                        int index170_2116 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2116);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA170_2122 = input.LA(1);

                         
                        int index170_2122 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2122);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA170_2147 = input.LA(1);

                         
                        int index170_2147 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2147);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA170_2224 = input.LA(1);

                         
                        int index170_2224 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2224);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA170_2249 = input.LA(1);

                         
                        int index170_2249 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2249);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA170_2293 = input.LA(1);

                         
                        int index170_2293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2293);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA170_2299 = input.LA(1);

                         
                        int index170_2299 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2299);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA170_2343 = input.LA(1);

                         
                        int index170_2343 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2343);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA170_2349 = input.LA(1);

                         
                        int index170_2349 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2349);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA170_2394 = input.LA(1);

                         
                        int index170_2394 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2394);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA170_2420 = input.LA(1);

                         
                        int index170_2420 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2420);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA170_2446 = input.LA(1);

                         
                        int index170_2446 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2446);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA170_2452 = input.LA(1);

                         
                        int index170_2452 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2452);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA170_2478 = input.LA(1);

                         
                        int index170_2478 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2478);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA170_2504 = input.LA(1);

                         
                        int index170_2504 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2504);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA170_2530 = input.LA(1);

                         
                        int index170_2530 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2530);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA170_2556 = input.LA(1);

                         
                        int index170_2556 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2556);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA170_2688 = input.LA(1);

                         
                        int index170_2688 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2688);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA170_2713 = input.LA(1);

                         
                        int index170_2713 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (true) ) {s = 14;}

                        else if ( (synpred3_EsperEPL2Grammar()) ) {s = 2737;}

                         
                        input.seek(index170_2713);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
 

    public static final BitSet FOLLOW_annotationNoEnum_in_startPatternExpressionRule1628 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L,0x0000000000000002L});
    public static final BitSet FOLLOW_patternExpression_in_startPatternExpressionRule1633 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startPatternExpressionRule1637 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_startEPLExpressionRule1651 = new BitSet(new long[]{0x0040020008000010L,0x0000010000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_eplExpression_in_startEPLExpressionRule1657 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEPLExpressionRule1661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_startEventPropertyRule1687 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_EOF_in_startEventPropertyRule1691 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationNoEnum1711 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationNoEnum1713 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationNoEnum1717 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0800000000000000L,0x00000C5200C84400L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairsNoEnum_in_annotationNoEnum1721 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_annotationNoEnum1725 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationNoEnum1730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EMAILAT_in_annotationEnum1771 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_annotationEnum1773 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_annotationEnum1777 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0800000000000000L,0x00000E5200C84400L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairsEnum_in_annotationEnum1781 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_elementValueEnum_in_annotationEnum1785 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_annotationEnum1790 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsNoEnum1834 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValuePairNoEnum_in_elementValuePairsNoEnum1837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1858 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_elementValuePairsEnum1861 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_elementValuePairEnum_in_elementValuePairsEnum1864 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairNoEnum1887 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairNoEnum1889 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0800000000000000L,0x00000C5200C80000L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValuePairNoEnum1891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_elementValuePairEnum1928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUALS_in_elementValuePairEnum1930 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0800000000000000L,0x00000E5200C80400L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValuePairEnum1932 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueNoEnum1963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayNoEnum_in_elementValueNoEnum1974 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueNoEnum1987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_annotationEnum_in_elementValueEnum2010 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueArrayEnum_in_elementValueEnum2021 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_elementValueEnum2034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_elementValueEnum2042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayNoEnum2062 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0800000000000000L,0x00000C7200C80200L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2065 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000200L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2068 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0800000000000000L,0x00000C5200C80000L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueNoEnum_in_elementValueArrayNoEnum2070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000200L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayNoEnum2077 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayNoEnum2081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_elementValueArrayEnum2110 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0800000000000000L,0x00000E7200C80600L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2113 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000200L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2116 = new BitSet(new long[]{0x0040020008000010L,0x0000013800000000L,0x0000000000000000L,0x0800000000000000L,0x00000E5200C80400L,0x0000000000000002L});
    public static final BitSet FOLLOW_elementValueEnum_in_elementValueArrayEnum2118 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000200L});
    public static final BitSet FOLLOW_COMMA_in_elementValueArrayEnum2125 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_RCURLY_in_elementValueArrayEnum2129 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectExpr_in_eplExpression2162 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createWindowExpr_in_eplExpression2167 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createIndexExpr_in_eplExpression2172 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createVariableExpr_in_eplExpression2177 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_createSchemaExpr_in_eplExpression2182 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_onExpr_in_eplExpression2187 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_updateExpr_in_eplExpression2192 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_forExpr_in_eplExpression2195 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_selectExpr2209 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_selectExpr2212 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_selectExpr2218 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_selectClause_in_selectExpr2221 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_selectExpr2225 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_fromClause_in_selectExpr2228 = new BitSet(new long[]{0x0104300000010002L,0x0000024000000000L});
    public static final BitSet FOLLOW_matchRecog_in_selectExpr2232 = new BitSet(new long[]{0x0104300000010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_selectExpr2238 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_whereClause_in_selectExpr2241 = new BitSet(new long[]{0x0104300000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_GROUP_in_selectExpr2248 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2251 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_groupByListExpr_in_selectExpr2254 = new BitSet(new long[]{0x0104200000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_HAVING_in_selectExpr2261 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_havingClause_in_selectExpr2264 = new BitSet(new long[]{0x0104000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_OUTPUT_in_selectExpr2271 = new BitSet(new long[]{0x0130800080004000L,0x0000404000220000L});
    public static final BitSet FOLLOW_outputLimit_in_selectExpr2274 = new BitSet(new long[]{0x0100000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ORDER_in_selectExpr2281 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_selectExpr2284 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_orderByListExpr_in_selectExpr2287 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_selectExpr2294 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200080400L});
    public static final BitSet FOLLOW_rowLimit_in_selectExpr2297 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_onExpr2312 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000004L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_onStreamExpr_in_onExpr2314 = new BitSet(new long[]{0x0040000008000000L,0x0000010000050000L});
    public static final BitSet FOLLOW_onDeleteExpr_in_onExpr2319 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSelectExpr_in_onExpr2323 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_onSelectInsertExpr_in_onExpr2326 = new BitSet(new long[]{0x0044000000000002L});
    public static final BitSet FOLLOW_outputClauseInsert_in_onExpr2329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onSetExpr_in_onExpr2336 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_onUpdateExpr_in_onExpr2340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_onStreamExpr2383 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_onStreamExpr2387 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_onStreamExpr2391 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2395 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onStreamExpr2401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_updateExpr2432 = new BitSet(new long[]{0x1000000000000000L});
    public static final BitSet FOLLOW_ISTREAM_in_updateExpr2434 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_updateExpr2436 = new BitSet(new long[]{0x0000000000020000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_updateExpr2439 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2443 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_updateExpr2449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_updateExpr2455 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2457 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_updateExpr2460 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_updateExpr2462 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WHERE_in_updateExpr2470 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_whereClause_in_updateExpr2472 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectExpr2520 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectExpr2522 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectExpr2528 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_onSelectExpr2530 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_selectionList_in_onSelectExpr2533 = new BitSet(new long[]{0x0100300400010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onSelectExpr2537 = new BitSet(new long[]{0x0100300000010002L,0x0000004000000000L});
    public static final BitSet FOLLOW_WHERE_in_onSelectExpr2543 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_whereClause_in_onSelectExpr2545 = new BitSet(new long[]{0x0100300000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_GROUP_in_onSelectExpr2554 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2556 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_groupByListExpr_in_onSelectExpr2558 = new BitSet(new long[]{0x0100200000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_HAVING_in_onSelectExpr2565 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_havingClause_in_onSelectExpr2567 = new BitSet(new long[]{0x0100000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ORDER_in_onSelectExpr2574 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_onSelectExpr2576 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_orderByListExpr_in_onSelectExpr2578 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_ROW_LIMIT_EXPR_in_onSelectExpr2585 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200080400L});
    public static final BitSet FOLLOW_rowLimit_in_onSelectExpr2587 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UPDATE_in_onUpdateExpr2647 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2654 = new BitSet(new long[]{0x0000000000020000L,0x0000000000040000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_onUpdateExpr2657 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2661 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_IDENT_in_onUpdateExpr2667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_SET_in_onUpdateExpr2673 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2675 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_onUpdateExpr2678 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_onUpdateExpr2680 = new BitSet(new long[]{0x0000000000010002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_WHERE_in_onUpdateExpr2687 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_whereClause_in_onUpdateExpr2689 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSERT_in_onSelectInsertExpr2740 = new BitSet(new long[]{0x1880000000000000L});
    public static final BitSet FOLLOW_insertIntoExpr_in_onSelectInsertExpr2742 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_onSelectInsertExpr2746 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_selectionList_in_onSelectInsertExpr2748 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onSelectInsertExpr2753 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_whereClause_in_onSelectInsertExpr2755 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTPUT_in_outputClauseInsert2786 = new BitSet(new long[]{0x0010800000000000L});
    public static final BitSet FOLLOW_FIRST_in_outputClauseInsert2791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_outputClauseInsert2797 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DELETE_in_onDeleteExpr2839 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_onExprFrom_in_onDeleteExpr2843 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_onDeleteExpr2848 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_whereClause_in_onDeleteExpr2850 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SET_in_onSetExpr2890 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2892 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_onSetExpr2895 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_onSetAssignment_in_onSetExpr2897 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_eventProperty_in_onSetAssignment2922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUALS_in_onSetAssignment2924 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_onSetAssignment2926 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FROM_in_onExprFrom2951 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2955 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_AS_in_onExprFrom2958 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2962 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_onExprFrom2968 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createWindowExpr2996 = new BitSet(new long[]{0x0000000000000020L});
    public static final BitSet FOLLOW_WINDOW_in_createWindowExpr2998 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createWindowExpr3002 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020000003400L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3005 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3007 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020000003400L});
    public static final BitSet FOLLOW_DOT_in_createWindowExpr3010 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_viewExpression_in_createWindowExpr3012 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000020000003400L});
    public static final BitSet FOLLOW_RETAINUNION_in_createWindowExpr3021 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000002400L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_createWindowExpr3025 = new BitSet(new long[]{0x0000000008020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000002400L});
    public static final BitSet FOLLOW_AS_in_createWindowExpr3029 = new BitSet(new long[]{0x0000000008000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000002400L});
    public static final BitSet FOLLOW_createWindowExprModelAfter_in_createWindowExpr3044 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createWindowExpr3059 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_createColumnList_in_createWindowExpr3061 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_createWindowExpr3063 = new BitSet(new long[]{0x0040000000000002L});
    public static final BitSet FOLLOW_INSERT_in_createWindowExpr3080 = new BitSet(new long[]{0x0000000000010002L});
    public static final BitSet FOLLOW_WHERE_in_createWindowExpr3083 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_createWindowExpr3085 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SELECT_in_createWindowExprModelAfter3172 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007A7A7FL,0x0000000000000000L,0x0800000000000000L,0x00000E5200CA0400L,0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionList_in_createWindowExprModelAfter3175 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_createWindowExprModelAfter3177 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_createWindowExprModelAfter3182 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createIndexExpr3195 = new BitSet(new long[]{0x0000000000000000L,0x0000000000400000L});
    public static final BitSet FOLLOW_INDEX_in_createIndexExpr3197 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3201 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_ON_in_createIndexExpr3203 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createIndexExpr3207 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_createIndexExpr3209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_columnList_in_createIndexExpr3211 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_createIndexExpr3213 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createVariableExpr3240 = new BitSet(new long[]{0x0000000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_VARIABLE_in_createVariableExpr3242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_createVariableExpr3244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createVariableExpr3248 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUALS_in_createVariableExpr3251 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_createVariableExpr3253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3295 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_createColumnList3298 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_createColumnListElement_in_createColumnList3300 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENT_in_createColumnListElement3330 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_createColumnListElement3333 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_LBRACK_in_createColumnListElement3338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_RBRACK_in_createColumnListElement3340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3384 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_createSelectionList3387 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007A7A7FL,0x0000000000000000L,0x0800000000000000L,0x00000E5200CA0400L,0x0000000000000002L});
    public static final BitSet FOLLOW_createSelectionListElement_in_createSelectionList3389 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STAR_in_createSelectionListElement3418 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_createSelectionListElement3430 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3433 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_createSelectionListElement3458 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_createSelectionListElement3460 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createSelectionListElement3464 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CREATE_in_createSchemaExpr3489 = new BitSet(new long[]{0x4000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3493 = new BitSet(new long[]{0x4000000000000000L});
    public static final BitSet FOLLOW_SCHEMA_in_createSchemaExpr3496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3500 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000022400L});
    public static final BitSet FOLLOW_AS_in_createSchemaExpr3502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000022400L});
    public static final BitSet FOLLOW_variantList_in_createSchemaExpr3515 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_createSchemaExpr3526 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004400L});
    public static final BitSet FOLLOW_createColumnList_in_createSchemaExpr3528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_createSchemaExpr3531 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_createSchemaExpr3536 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_columnList_in_createSchemaExpr3538 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3627 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_variantList3630 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000020400L});
    public static final BitSet FOLLOW_variantListElement_in_variantList3632 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STAR_in_variantListElement3659 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifier_in_variantListElement3665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_insertIntoExpr3690 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_RSTREAM_in_insertIntoExpr3696 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_INTO_in_insertIntoExpr3700 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_insertIntoExpr3704 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_insertIntoExpr3707 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_columnList_in_insertIntoExpr3709 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_insertIntoExpr3711 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_columnList3745 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_columnList3748 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_columnList3750 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_streamExpression_in_fromClause3788 = new BitSet(new long[]{0x000001F000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_regularJoin_in_fromClause3791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outerJoinList_in_fromClause3795 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COMMA_in_regularJoin3809 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_streamExpression_in_regularJoin3812 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3826 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_outerJoin_in_outerJoinList3829 = new BitSet(new long[]{0x000001F000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_LEFT_in_outerJoin3872 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_RIGHT_in_outerJoin3876 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_FULL_in_outerJoin3880 = new BitSet(new long[]{0x0000000800000000L});
    public static final BitSet FOLLOW_OUTER_in_outerJoin3883 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_INNER_in_outerJoin3904 = new BitSet(new long[]{0x0000002000000000L});
    public static final BitSet FOLLOW_JOIN_in_outerJoin3918 = new BitSet(new long[]{0x0000000000000000L,0x000000000000000CL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_streamExpression_in_outerJoin3920 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_outerJoinIdent_in_outerJoin3922 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ON_in_outerJoinIdent3987 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3990 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_outerJoinIdent3993 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_outerJoinIdentPair_in_outerJoinIdent3996 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUALS_in_outerJoinIdentPair4013 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_eventProperty_in_outerJoinIdentPair4016 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_whereClause4038 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RSTREAM_in_selectClause4074 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_ISTREAM_in_selectClause4080 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_IRSTREAM_in_selectClause4086 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_selectClause4092 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_selectionList_in_selectClause4095 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4126 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_selectionList4129 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_selectionList4132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STAR_in_selectionListElement4158 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_selectionListElement4174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_selectionListElement4179 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_selectionListElement4182 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_selectionListElement4186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4242 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_streamSelector4244 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_STAR_in_streamSelector4246 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_streamSelector4249 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_streamSelector4253 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_streamExpression4284 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_patternInclusionExpression_in_streamExpression4288 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_databaseJoinExpression_in_streamExpression4292 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_methodJoinExpression_in_streamExpression4296 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4303 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4305 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_DOT_in_streamExpression4308 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_viewExpression_in_streamExpression4310 = new BitSet(new long[]{0x8000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_AS_in_streamExpression4317 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4321 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_streamExpression4327 = new BitSet(new long[]{0x8000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_streamExpression4334 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_streamExpression4341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_streamExpression4345 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FOR_in_forExpr4401 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_forExpr4405 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_forExpr4408 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA6400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_forExpr4410 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_forExpr4413 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCH_RECOGNIZE_in_matchRecog4449 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecog4463 = new BitSet(new long[]{0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_matchRecogPartitionBy_in_matchRecog4469 = new BitSet(new long[]{0x0000000000000000L,0x0000140000000000L});
    public static final BitSet FOLLOW_matchRecogMeasures_in_matchRecog4476 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesSelection_in_matchRecog4481 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogMatchesAfterSkip_in_matchRecog4487 = new BitSet(new long[]{0x0000800000000000L,0x0000400000000004L});
    public static final BitSet FOLLOW_matchRecogPattern_in_matchRecog4493 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matchRecogMatchesInterval_in_matchRecog4499 = new BitSet(new long[]{0x0000000000000000L,0x0000080000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matchRecogDefine_in_matchRecog4505 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecog4512 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_matchRecogPartitionBy4549 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_BY_in_matchRecogPartitionBy4551 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4553 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogPartitionBy4556 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_matchRecogPartitionBy4558 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_MEASURES_in_matchRecogMeasures4587 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4589 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogMeasures4592 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogMeasureItem_in_matchRecogMeasures4594 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_matchRecogMeasureItem4619 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_matchRecogMeasureItem4622 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMeasureItem4627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_matchRecogMatchesSelection4658 = new BitSet(new long[]{0x0000000000000000L,0x0000200000000000L});
    public static final BitSet FOLLOW_MATCHES_in_matchRecogMatchesSelection4661 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_matchRecogPattern4676 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPattern4678 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPattern4680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPattern4682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_matchRecogMatchesAfterSkip4704 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4708 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4712 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4716 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4720 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_matchRecogMatchesAfterSkip4724 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogMatchesInterval4760 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_timePeriod_in_matchRecogMatchesInterval4762 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4788 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_BOR_in_matchRecogPatternAlteration4793 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_matchRecogPatternConcat_in_matchRecogPatternAlteration4795 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_matchRecogPatternUnary_in_matchRecogPatternConcat4828 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_matchRecogPatternNested_in_matchRecogPatternUnary4853 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_matchRecogPatternAtom_in_matchRecogPatternUnary4859 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_matchRecogPatternNested4871 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002400L});
    public static final BitSet FOLLOW_matchRecogPatternAlteration_in_matchRecogPatternNested4873 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_matchRecogPatternNested4875 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000001A0000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternNested4880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternNested4886 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternNested4892 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogPatternAtom4931 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000001A0000L});
    public static final BitSet FOLLOW_STAR_in_matchRecogPatternAtom4937 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_PLUS_in_matchRecogPatternAtom4943 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4949 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_in_matchRecogPatternAtom4955 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_matchRecogDefine4999 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5001 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_matchRecogDefine5004 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_matchRecogDefineItem_in_matchRecogDefine5006 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENT_in_matchRecogDefineItem5033 = new BitSet(new long[]{0x0000000000020000L});
    public static final BitSet FOLLOW_AS_in_matchRecogDefineItem5035 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_matchRecogDefineItem5037 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_patternInclusionExpression5062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_LBRACK_in_patternInclusionExpression5064 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_patternExpression_in_patternInclusionExpression5066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_RBRACK_in_patternInclusionExpression5068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_databaseJoinExpression5101 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_databaseJoinExpression5103 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_databaseJoinExpression5107 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_LBRACK_in_databaseJoinExpression5109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5114 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5120 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000010L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_METADATASQL_in_databaseJoinExpression5124 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_databaseJoinExpression5129 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_databaseJoinExpression5135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_RBRACK_in_databaseJoinExpression5140 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_methodJoinExpression5191 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_methodJoinExpression5193 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_methodJoinExpression5195 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_methodJoinExpression5198 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA6400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_methodJoinExpression5200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_methodJoinExpression5203 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5256 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_viewExpression5258 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_viewExpression5262 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_viewExpression5264 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAE400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_viewExpression5266 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_viewExpression5269 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5308 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_groupByListExpr5311 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_groupByListExpr5313 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5348 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_orderByListExpr5351 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_orderByListElement_in_orderByListExpr5353 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expression_in_orderByListElement5378 = new BitSet(new long[]{0x0600000000000002L});
    public static final BitSet FOLLOW_ASC_in_orderByListElement5383 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_orderByListElement5387 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_havingClause5425 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_outputLimitAfter_in_outputLimit5463 = new BitSet(new long[]{0x0030800080004002L,0x0000000000220000L});
    public static final BitSet FOLLOW_ALL_in_outputLimit5478 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_FIRST_in_outputLimit5482 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_LAST_in_outputLimit5486 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_SNAPSHOT_in_outputLimit5490 = new BitSet(new long[]{0x0000000080004002L,0x0000000000200000L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_outputLimit5521 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimit5547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimit5558 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_IDENT_in_outputLimit5564 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimit5570 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_outputLimit5601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_crontabLimitParameterSet_in_outputLimit5603 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_outputLimit5620 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_outputLimit5622 = new BitSet(new long[]{0x0000000100000002L});
    public static final BitSet FOLLOW_THEN_in_outputLimit5625 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_onSetExpr_in_outputLimit5627 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AFTER_in_outputLimitAfter5777 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_timePeriod_in_outputLimitAfter5780 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_outputLimitAfter5784 = new BitSet(new long[]{0x0008000000000000L});
    public static final BitSet FOLLOW_EVENTS_in_outputLimitAfter5786 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5832 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5838 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_rowLimit5845 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200080400L});
    public static final BitSet FOLLOW_OFFSET_in_rowLimit5851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200080400L});
    public static final BitSet FOLLOW_numberconstant_in_rowLimit5857 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rowLimit5863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_crontabLimitParameterSet5915 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAA400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5917 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5919 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAA400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5921 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5923 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAA400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5925 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5927 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAA400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5929 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5931 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAA400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5933 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_crontabLimitParameterSet5936 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAA400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_crontabLimitParameterSet5938 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_crontabLimitParameterSet5942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHEN_in_whenClause5972 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_whenClause5975 = new BitSet(new long[]{0x0000000100000000L});
    public static final BitSet FOLLOW_THEN_in_whenClause5977 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_whenClause5980 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ELSE_in_elseClause5993 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_elseClause5996 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_caseExpression_in_expression6009 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6023 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6026 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6029 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6032 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CASE_in_caseExpression6043 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_caseExpression6045 = new BitSet(new long[]{0x0000000080000000L});
    public static final BitSet FOLLOW_whenClause_in_caseExpression6047 = new BitSet(new long[]{0x00000002C0000000L});
    public static final BitSet FOLLOW_elseClause_in_caseExpression6050 = new BitSet(new long[]{0x0000000200000000L});
    public static final BitSet FOLLOW_END_in_caseExpression6053 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalOrExpression_in_caseExpression6077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6088 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_evalOrExpression6093 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_evalAndExpression_in_evalOrExpression6095 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6127 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_evalAndExpression6132 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_bitWiseExpression_in_evalAndExpression6134 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6166 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003040000L});
    public static final BitSet FOLLOW_BAND_in_bitWiseExpression6171 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_BOR_in_bitWiseExpression6174 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_BXOR_in_bitWiseExpression6177 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_negatedExpression_in_bitWiseExpression6181 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000003040000L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EXPR_in_negatedExpression6202 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_evalEqualsExpression_in_negatedExpression6205 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6218 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C000800L});
    public static final BitSet FOLLOW_EQUALS_in_evalEqualsExpression6231 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6249 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_IS_in_evalEqualsExpression6263 = new BitSet(new long[]{0x0000000000002000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalEqualsExpression6265 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_NE_in_evalEqualsExpression6279 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_NOT_EQUAL_in_evalEqualsExpression6293 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_evalRelationalExpression_in_evalEqualsExpression6323 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C000800L});
    public static final BitSet FOLLOW_ANY_in_evalEqualsExpression6340 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SOME_in_evalEqualsExpression6346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ALL_in_evalEqualsExpression6352 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_evalEqualsExpression6358 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA6400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_evalEqualsExpression6360 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_evalEqualsExpression6363 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C000800L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalEqualsExpression6368 = new BitSet(new long[]{0x0000040000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000C000800L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6496 = new BitSet(new long[]{0x00000000000023C2L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000F0000000L});
    public static final BitSet FOLLOW_LT_in_evalRelationalExpression6528 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_GT_in_evalRelationalExpression6532 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_LE_in_evalRelationalExpression6536 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_GE_in_evalRelationalExpression6540 = new BitSet(new long[]{0x807B83E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression6564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000F0000000L});
    public static final BitSet FOLLOW_ANY_in_evalRelationalExpression6581 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_SOME_in_evalRelationalExpression6587 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_ALL_in_evalRelationalExpression6593 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6599 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA6400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_evalRelationalExpression6601 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6604 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000F0000000L});
    public static final BitSet FOLLOW_subSelectGroupExpression_in_evalRelationalExpression6609 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x00000000F0000000L});
    public static final BitSet FOLLOW_NOT_EXPR_in_evalRelationalExpression6705 = new BitSet(new long[]{0x00000000000003C0L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6732 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000A000L});
    public static final BitSet FOLLOW_LPAREN_in_evalRelationalExpression6744 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_evalRelationalExpression6750 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6753 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000214200L});
    public static final BitSet FOLLOW_COLON_in_evalRelationalExpression6775 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6778 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000014000L});
    public static final BitSet FOLLOW_COMMA_in_evalRelationalExpression6804 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_evalRelationalExpression6806 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000014200L});
    public static final BitSet FOLLOW_RPAREN_in_evalRelationalExpression6832 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RBRACK_in_evalRelationalExpression6838 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IN_SET_in_evalRelationalExpression6961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_inSubSelectQuery_in_evalRelationalExpression6963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BETWEEN_in_evalRelationalExpression7009 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_betweenList_in_evalRelationalExpression7011 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LIKE_in_evalRelationalExpression7061 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7063 = new BitSet(new long[]{0x0000000000000402L});
    public static final BitSet FOLLOW_ESCAPE_in_evalRelationalExpression7066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_stringconstant_in_evalRelationalExpression7068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_REGEXP_in_evalRelationalExpression7120 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_evalRelationalExpression7122 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_inSubSelectQuery7184 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7215 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7217 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_LOR_in_concatenationExpr7221 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_additiveExpression_in_concatenationExpr7223 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000100000000L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7264 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200080000L});
    public static final BitSet FOLLOW_PLUS_in_additiveExpression7269 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_additiveExpression7272 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_multiplyExpression_in_additiveExpression7276 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000200080000L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7290 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000C00020000L});
    public static final BitSet FOLLOW_STAR_in_multiplyExpression7295 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DIV_in_multiplyExpression7298 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_MOD_in_multiplyExpression7301 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_unaryExpression_in_multiplyExpression7305 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000C00020000L});
    public static final BitSet FOLLOW_MINUS_in_unaryExpression7320 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_eventProperty_in_unaryExpression7322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_constant_in_unaryExpression7335 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_unaryExpression7340 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_unaryExpression7345 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_unaryExpression7348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_unaryExpression7350 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyOrLibFunction_in_unaryExpression7356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_unaryExpression7368 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_arrayExpression_in_unaryExpression7374 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subSelectExpression_in_unaryExpression7379 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_existsSubSelectExpression_in_unaryExpression7384 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectExpression7401 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_subQueryExpr_in_subSelectGroupExpression7423 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_existsSubSelectExpression7445 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_subQueryExpr_in_existsSubSelectExpression7447 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_subQueryExpr7480 = new BitSet(new long[]{0x0000000008000000L});
    public static final BitSet FOLLOW_SELECT_in_subQueryExpr7486 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_subQueryExpr7489 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_selectionListElement_in_subQueryExpr7492 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_subQueryExpr7499 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_subSelectFilterExpr_in_subQueryExpr7502 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_WHERE_in_subQueryExpr7510 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_whereClause_in_subQueryExpr7513 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_subQueryExpr7522 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventFilterExpression_in_subSelectFilterExpr7546 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7551 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7553 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_DOT_in_subSelectFilterExpr7556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_viewExpression_in_subSelectFilterExpr7558 = new BitSet(new long[]{0x0000000000020002L,0x0000000000000003L,0x0000000000000000L,0x0000000000000000L,0x0000000000001400L});
    public static final BitSet FOLLOW_AS_in_subSelectFilterExpr7565 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7569 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_IDENT_in_subSelectFilterExpr7575 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000003L});
    public static final BitSet FOLLOW_RETAINUNION_in_subSelectFilterExpr7582 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_subSelectFilterExpr7586 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LCURLY_in_arrayExpression7626 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E7200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7629 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000200L});
    public static final BitSet FOLLOW_COMMA_in_arrayExpression7632 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_arrayExpression7634 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000002000000200L});
    public static final BitSet FOLLOW_RCURLY_in_arrayExpression7641 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_builtinFunc7664 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7667 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7671 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7676 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7680 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7682 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_builtinFunc7688 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7691 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7695 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7700 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7704 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7706 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_builtinFunc7712 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7715 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7727 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7732 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7736 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_STAR_in_builtinFunc7747 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7758 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_builtinFunc7764 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7767 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7771 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7776 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7780 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7782 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_builtinFunc7788 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7791 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7795 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7800 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7804 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7806 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_builtinFunc7812 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7815 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_builtinFunc7819 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_builtinFunc7824 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7828 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7830 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_firstAggregation_in_builtinFunc7836 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastAggregation_in_builtinFunc7841 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_windowAggregation_in_builtinFunc7846 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_builtinFunc7851 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7854 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7857 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7859 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7862 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7865 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7868 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7872 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_builtinFunc7878 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7881 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7884 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7887 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7890 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7894 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_builtinFunc7900 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7903 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7906 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7909 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7912 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7916 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSCOUNT_in_builtinFunc7922 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7925 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7928 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSWINDOW_in_builtinFunc7936 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7939 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7942 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7944 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_builtinFunc7950 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7953 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_builtinFunc7956 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7958 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc7961 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7963 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_builtinFunc7973 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc7976 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc7979 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7981 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7984 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc7987 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc7990 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc7994 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_builtinFunc8000 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8003 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_builtinFunc8006 = new BitSet(new long[]{0x0000000000020000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_builtinFunc8009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_AS_in_builtinFunc8014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_builtinFunc8018 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8020 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EXISTS_in_builtinFunc8026 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8029 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_eventProperty_in_builtinFunc8032 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8034 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CURRENT_TIMESTAMP_in_builtinFunc8040 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_builtinFunc8044 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_builtinFunc8047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_firstAggregation8062 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_firstAggregation8064 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_accessAggExpr_in_firstAggregation8066 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_firstAggregation8069 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_firstAggregation8071 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_firstAggregation8075 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastAggregation8100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_lastAggregation8102 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_accessAggExpr_in_lastAggregation8104 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_lastAggregation8107 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_lastAggregation8109 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_lastAggregation8113 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_windowAggregation8139 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_windowAggregation8141 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_accessAggExpr_in_windowAggregation8143 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_windowAggregation8145 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_accessAggExpr8175 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_accessAggExpr8191 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_accessAggExpr8196 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_maxFunc8209 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_MIN_in_maxFunc8214 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_maxFunc8218 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_maxFunc8221 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8224 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_maxFunc8227 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_maxFunc8230 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_maxFunc8233 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_RPAREN_in_maxFunc8240 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_eventPropertyOrLibFunction8259 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_libFunction_in_eventPropertyOrLibFunction8264 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_classIdentifierNonGreedy_in_libFunction8277 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_libFunction8279 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_funcIdent_in_libFunction8283 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_libFunction8285 = new BitSet(new long[]{0xB878C3E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA6400L,0x0000000000000002L});
    public static final BitSet FOLLOW_libFunctionArgs_in_libFunction8288 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_libFunction8292 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableIdent_in_funcIdent8322 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_funcIdent8329 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_funcIdent8341 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ALL_in_libFunctionArgs8359 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_DISTINCT_in_libFunctionArgs8364 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8368 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_libFunctionArgs8371 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_libFunctionArgs8374 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8388 = new BitSet(new long[]{0x0000000000001000L});
    public static final BitSet FOLLOW_AND_EXPR_in_betweenList8390 = new BitSet(new long[]{0x807803E80FFC4430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200D82400L,0x0000000000000002L});
    public static final BitSet FOLLOW_concatenationExpr_in_betweenList8393 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_followedByExpression_in_patternExpression8421 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8433 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_FOLLOWED_BY_in_followedByExpression8438 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_orExpression_in_followedByExpression8440 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8479 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_OR_EXPR_in_orExpression8484 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_andExpression_in_orExpression8486 = new BitSet(new long[]{0x0000000000000802L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8518 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_AND_EXPR_in_andExpression8523 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_matchUntilExpression_in_andExpression8525 = new BitSet(new long[]{0x0000000000001002L});
    public static final BitSet FOLLOW_matchUntilRange_in_matchUntilExpression8560 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8564 = new BitSet(new long[]{0x0000000000000002L,0x0000000000100000L});
    public static final BitSet FOLLOW_UNTIL_in_matchUntilExpression8569 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_qualifyExpression_in_matchUntilExpression8571 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_qualifyExpression8636 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_NOT_EXPR_in_qualifyExpression8642 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_EVERY_DISTINCT_EXPR_in_qualifyExpression8648 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_distinctExpressionList_in_qualifyExpression8650 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_matchUntilRange_in_qualifyExpression8656 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_guardPostFix_in_qualifyExpression8665 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_distinctExpressionList8780 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8782 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_COMMA_in_distinctExpressionList8785 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_distinctExpressionAtom_in_distinctExpressionList8787 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004200L});
    public static final BitSet FOLLOW_RPAREN_in_distinctExpressionList8791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_distinctExpressionAtom8814 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_atomicExpression_in_guardPostFix8829 = new BitSet(new long[]{0x0000000000010002L,0x0001000000000000L});
    public static final BitSet FOLLOW_LPAREN_in_guardPostFix8835 = new BitSet(new long[]{0x000000000000E000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000002000000A400L});
    public static final BitSet FOLLOW_patternExpression_in_guardPostFix8837 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_guardPostFix8839 = new BitSet(new long[]{0x0000000000010002L,0x0001000000000000L});
    public static final BitSet FOLLOW_WHERE_in_guardPostFix8846 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_guardWhereExpression_in_guardPostFix8848 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_guardPostFix8856 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_guardWhileExpression_in_guardPostFix8858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_observerExpression_in_atomicExpression8920 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_patternFilterExpression_in_atomicExpression8924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8939 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_observerExpression8941 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_observerExpression8946 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_AT_in_observerExpression8952 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_observerExpression8955 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAE400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_observerExpression8957 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_observerExpression8960 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9009 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_guardWhereExpression9011 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_guardWhereExpression9014 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000002000L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhereExpression9016 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAE400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTimeList_in_guardWhereExpression9020 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhereExpression9024 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_guardWhileExpression9037 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_guardWhileExpression9040 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_guardWhileExpression9042 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_matchUntilRange9063 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200FA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9070 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000210000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9075 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DB2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9078 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_COLON_in_matchUntilRange9098 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_matchUntilRange9100 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_RBRACK_in_matchUntilRange9111 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_eventFilterExpression9198 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUALS_in_eventFilterExpression9200 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_eventFilterExpression9209 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000A000L});
    public static final BitSet FOLLOW_LPAREN_in_eventFilterExpression9220 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA6400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_eventFilterExpression9222 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_eventFilterExpression9225 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_propertyExpression_in_eventFilterExpression9237 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9282 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_propertyExpressionAtomic_in_propertyExpression9285 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_LBRACK_in_propertyExpressionAtomic9315 = new BitSet(new long[]{0x803801E80FFC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_SELECT_in_propertyExpressionAtomic9318 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionList_in_propertyExpressionAtomic9320 = new BitSet(new long[]{0x0000000400000000L});
    public static final BitSet FOLLOW_FROM_in_propertyExpressionAtomic9322 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_eventProperty_in_propertyExpressionAtomic9326 = new BitSet(new long[]{0x0000000000030000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_AS_in_propertyExpressionAtomic9329 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_propertyExpressionAtomic9331 = new BitSet(new long[]{0x0000000000010000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_WHERE_in_propertyExpressionAtomic9336 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertyExpressionAtomic9338 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_RBRACK_in_propertyExpressionAtomic9342 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9392 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_propertySelectionList9395 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_propertySelectionListElement_in_propertySelectionList9398 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_STAR_in_propertySelectionListElement9424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_propertySelectionListElement9440 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_propertySelectionListElement9445 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertySelectionListElement9448 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_propertySelectionListElement9452 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9496 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_propertyStreamSelector9498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_STAR_in_propertyStreamSelector9500 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_AS_in_propertyStreamSelector9503 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000400L});
    public static final BitSet FOLLOW_IDENT_in_propertyStreamSelector9507 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_patternFilterExpression9554 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_EQUALS_in_patternFilterExpression9556 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_classIdentifier_in_patternFilterExpression9565 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000000A000L});
    public static final BitSet FOLLOW_LPAREN_in_patternFilterExpression9576 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA6400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionList_in_patternFilterExpression9578 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_patternFilterExpression9581 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_propertyExpression_in_patternFilterExpression9593 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier9648 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifier9667 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifier9671 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy9716 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_classIdentifierNonGreedy9751 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_escapableStr_in_classIdentifierNonGreedy9755 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_expression_in_expressionList9797 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_expressionList9800 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DA2400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionList9803 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9831 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_COMMA_in_expressionWithTimeList9834 = new BitSet(new long[]{0xB87843E81FFC6430L,0x00013938007AFFFFL,0x0000000000000000L,0x0800000000000000L,0x00000E5200DAA400L,0x0000000000000002L});
    public static final BitSet FOLLOW_expressionWithTime_in_expressionWithTimeList9837 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_lastOperand_in_expressionWithTime9863 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_expressionWithTime9874 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_expressionWithTime9885 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_expressionWithTime9896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_expressionWithTime9907 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_expressionWithTime9919 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_expressionWithTime9930 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_expressionWithTime9942 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_expressionWithTime9954 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberSetStar_in_expressionWithTime9959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expression_in_expressionQualifyable9970 = new BitSet(new long[]{0x0600000000000002L,0x00000000E0000000L});
    public static final BitSet FOLLOW_ASC_in_expressionQualifyable9975 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DESC_in_expressionQualifyable9979 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_expressionQualifyable9983 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_expressionQualifyable9987 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_expressionQualifyable9991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_numberSetStar10048 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_lastWeekdayOperand10068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_lastOperand10081 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STAR_in_frequencyOperand10093 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_DIV_in_frequencyOperand10095 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_number_in_frequencyOperand10098 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_frequencyOperand10102 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_frequencyOperand10104 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_rangeOperand10153 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10157 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10159 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_COLON_in_rangeOperand10162 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_number_in_rangeOperand10165 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_rangeOperand10169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_substitution_in_rangeOperand10171 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_lastOperator10285 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_IDENT_in_lastOperator10289 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_substitution_in_lastOperator10291 = new BitSet(new long[]{0x0020000000000000L});
    public static final BitSet FOLLOW_LAST_in_lastOperator10294 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_weekDayOperator10342 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_IDENT_in_weekDayOperator10346 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_substitution_in_weekDayOperator10348 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000800L});
    public static final BitSet FOLLOW_WEEKDAY_in_weekDayOperator10351 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LBRACK_in_numericParameterList10398 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C42001A0400L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10400 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_COMMA_in_numericParameterList10403 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C42001A0400L});
    public static final BitSet FOLLOW_numericListParameter_in_numericParameterList10405 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010200L});
    public static final BitSet FOLLOW_RBRACK_in_numericParameterList10409 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_numericListParameter10431 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_numericListParameter10437 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_numericListParameter10442 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10458 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_eventProperty10461 = new BitSet(new long[]{0x803801E807FC4420L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000020000000400L});
    public static final BitSet FOLLOW_eventPropertyAtomic_in_eventProperty10463 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_eventPropertyIdent_in_eventPropertyAtomic10489 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x000000000010A000L});
    public static final BitSet FOLLOW_LBRACK_in_eventPropertyAtomic10498 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000004000000000L});
    public static final BitSet FOLLOW_NUM_INT_in_eventPropertyAtomic10502 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000010000L});
    public static final BitSet FOLLOW_RBRACK_in_eventPropertyAtomic10504 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10509 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LPAREN_in_eventPropertyAtomic10523 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000C00000L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_eventPropertyAtomic10528 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_eventPropertyAtomic10534 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_RPAREN_in_eventPropertyAtomic10537 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000100000L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_eventPropertyAtomic10556 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10679 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_ESCAPECHAR_in_eventPropertyIdent10691 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000000000001000L});
    public static final BitSet FOLLOW_DOT_in_eventPropertyIdent10693 = new BitSet(new long[]{0x803801E807FC4422L,0x00013800007A7A7FL,0x0000000000000000L,0x0000000000000000L,0x0000030000000400L});
    public static final BitSet FOLLOW_keywordAllowedIdent_in_eventPropertyIdent10697 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_IDENT_in_keywordAllowedIdent10736 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_keywordAllowedIdent10745 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AT_in_keywordAllowedIdent10752 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COUNT_in_keywordAllowedIdent10759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_ESCAPE_in_keywordAllowedIdent10766 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVERY_EXPR_in_keywordAllowedIdent10777 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SUM_in_keywordAllowedIdent10784 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVG_in_keywordAllowedIdent10791 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MAX_in_keywordAllowedIdent10798 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_keywordAllowedIdent10805 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_COALESCE_in_keywordAllowedIdent10812 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MEDIAN_in_keywordAllowedIdent10819 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STDDEV_in_keywordAllowedIdent10826 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_AVEDEV_in_keywordAllowedIdent10833 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_EVENTS_in_keywordAllowedIdent10840 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FIRST_in_keywordAllowedIdent10847 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LAST_in_keywordAllowedIdent10854 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WHILE_in_keywordAllowedIdent10861 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNIDIRECTIONAL_in_keywordAllowedIdent10868 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAINUNION_in_keywordAllowedIdent10875 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RETAININTERSECTION_in_keywordAllowedIdent10882 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_UNTIL_in_keywordAllowedIdent10889 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PATTERN_in_keywordAllowedIdent10896 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SQL_in_keywordAllowedIdent10903 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_METADATASQL_in_keywordAllowedIdent10910 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUS_in_keywordAllowedIdent10917 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PREVIOUSTAIL_in_keywordAllowedIdent10924 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PRIOR_in_keywordAllowedIdent10931 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WEEKDAY_in_keywordAllowedIdent10938 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LW_in_keywordAllowedIdent10945 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INSTANCEOF_in_keywordAllowedIdent10952 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_CAST_in_keywordAllowedIdent10959 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_SNAPSHOT_in_keywordAllowedIdent10966 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VARIABLE_in_keywordAllowedIdent10973 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_INDEX_in_keywordAllowedIdent10982 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_WINDOW_in_keywordAllowedIdent10991 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_LEFT_in_keywordAllowedIdent10998 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_RIGHT_in_keywordAllowedIdent11005 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_OUTER_in_keywordAllowedIdent11012 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_FULL_in_keywordAllowedIdent11019 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_JOIN_in_keywordAllowedIdent11026 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_DEFINE_in_keywordAllowedIdent11033 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_PARTITION_in_keywordAllowedIdent11040 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MATCHES_in_keywordAllowedIdent11047 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableStr11068 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableStr11077 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_IDENT_in_escapableIdent11091 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TICKED_STRING_LITERAL_in_escapableIdent11099 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_dayPart_in_timePeriod11124 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11126 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11129 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11132 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11135 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_hourPart_in_timePeriod11141 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11143 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11146 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11149 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_minutePart_in_timePeriod11155 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11157 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11160 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_secondPart_in_timePeriod11166 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200180400L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11168 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_millisecondPart_in_timePeriod11174 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_dayPart11212 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_IDENT_in_dayPart11216 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_substitution_in_dayPart11218 = new BitSet(new long[]{0x0000000000000000L,0x0000000001800000L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAYS_in_dayPart11222 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_DAY_in_dayPart11226 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_hourPart11275 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_IDENT_in_hourPart11279 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_substitution_in_hourPart11281 = new BitSet(new long[]{0x0000000000000000L,0x0000000006000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOURS_in_hourPart11285 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_HOUR_in_hourPart11289 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_minutePart11338 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_IDENT_in_minutePart11342 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_substitution_in_minutePart11344 = new BitSet(new long[]{0x0000000000200000L,0x0000000018000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTES_in_minutePart11348 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MINUTE_in_minutePart11352 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MIN_in_minutePart11356 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_secondPart11406 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_IDENT_in_secondPart11410 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_substitution_in_secondPart11412 = new BitSet(new long[]{0x0000000000000000L,0x00000000E0000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECONDS_in_secondPart11416 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SECOND_in_secondPart11420 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_SEC_in_secondPart11424 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_number_in_millisecondPart11474 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_IDENT_in_millisecondPart11478 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_substitution_in_millisecondPart11480 = new BitSet(new long[]{0x0000000000000000L,0x0000000700000000L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECONDS_in_millisecondPart11484 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISECOND_in_millisecondPart11488 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_TIMEPERIOD_MILLISEC_in_millisecondPart11492 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_INT_in_number11547 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_LONG_in_number11564 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_FLOAT_in_number11581 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_NUM_DOUBLE_in_number11598 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUESTION_in_substitution11619 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numberconstant_in_constant11638 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_stringconstant_in_constant11645 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_TRUE_in_constant11658 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_BOOLEAN_FALSE_in_constant11678 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_VALUE_NULL_in_constant11698 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_MINUS_in_numberconstant11720 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200080000L});
    public static final BitSet FOLLOW_PLUS_in_numberconstant11726 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000000L,0x0800000000000000L,0x00000C4200080000L});
    public static final BitSet FOLLOW_number_in_numberconstant11730 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_STRING_LITERAL_in_stringconstant11759 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_QUOTED_STRING_LITERAL_in_stringconstant11775 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_streamSelector_in_synpred1_EsperEPL2Grammar4169 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred2_EsperEPL2Grammar5542 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_builtinFunc_in_synpred3_EsperEPL2Grammar7362 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred4_EsperEPL2Grammar8186 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_eventProperty_in_synpred5_EsperEPL2Grammar8254 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_propertyStreamSelector_in_synpred6_EsperEPL2Grammar9435 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperand_in_synpred7_EsperEPL2Grammar9858 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastWeekdayOperand_in_synpred8_EsperEPL2Grammar9869 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_timePeriod_in_synpred9_EsperEPL2Grammar9880 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_expressionQualifyable_in_synpred10_EsperEPL2Grammar9891 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_rangeOperand_in_synpred11_EsperEPL2Grammar9902 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_frequencyOperand_in_synpred12_EsperEPL2Grammar9914 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_lastOperator_in_synpred13_EsperEPL2Grammar9925 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_weekDayOperator_in_synpred14_EsperEPL2Grammar9936 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_numericParameterList_in_synpred15_EsperEPL2Grammar9949 = new BitSet(new long[]{0x0000000000000002L});

}